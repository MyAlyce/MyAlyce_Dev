(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __require = /* @__PURE__ */ ((x3) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x3, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x3)(function(x3) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __esm = (fn, res2) => function __init() {
    return fn && (res2 = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res2;
  };
  var __commonJS = (cb, mod) => function __require4() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name2 in all)
      __defProp(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module2) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component2(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component2.prototype.isReactComponent = {};
          Component2.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component2.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component2.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component2.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component2.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i4 = 0; i4 < childrenLength; i4++) {
                childArray[i4] = arguments[i4 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i4 = 0; i4 < children.length; i4++) {
                child = children[i4];
                nextName = nextNamePrefix + getElementKey(child, i4);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (!render.name && !render.displayName) {
                    render.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name2) {
                  ownName = name2;
                  if (!type.name && !type.displayName) {
                    type.displayName = name2;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init2);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component3) {
            var prototype = Component3.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name2 = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name2) {
                return "\n\nCheck the render method of `" + name2 + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i4 = 0; i4 < node.length; i4++) {
                var child = node[i4];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name2 = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name2, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys4 = Object.keys(fragment.props);
              for (var i4 = 0; i4 < keys4.length; i4++) {
                var key = keys4[i4];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i4 = 2; i4 < arguments.length; i4++) {
                validateChildKeys(arguments[i4], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i4 = 2; i4 < arguments.length; i4++) {
              validateChildKeys(arguments[i4], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module2 && module2[requireString];
                enqueueTaskImpl = nodeRequire.call(module2, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i4 = 0;
                try {
                  for (; i4 < queue.length; i4++) {
                    var callback = queue[i4];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i4 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component2;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i4) {
            var index = i4;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i4) {
            var index = i4;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React10 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React10.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i4 = 0; i4 < dependencies.length; i4++) {
              allNativeEvents.add(dependencies[i4]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name2.length > 2 && (name2[0] === "o" || name2[0] === "O") && (name2[1] === "n" || name2[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name2.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name2) {
            return properties.hasOwnProperty(name2) ? properties[name2] : null;
          }
          function PropertyInfoRecord(name2, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name2;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              RESERVED,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name2 = _ref[0], attributeName = _ref[1];
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              BOOLEAN,
              true,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name2,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name2) {
            properties[name2] = new PropertyInfoRecord(
              name2,
              NUMERIC,
              false,
              // mustUseProperty
              name2.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name2 = attributeName.replace(CAMELIZE, capitalize);
            properties[name2] = new PropertyInfoRecord(
              name2,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url4) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url4)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url4));
              }
            }
          }
          function getValueForProperty(node, name2, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name2);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name2, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name2)) {
                return;
              }
              if (!node.hasAttribute(name2)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name2);
              {
                checkAttributeStringCoercion(expected, name2);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name2, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name2);
            if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name2)) {
                var _attributeName = name2;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name2);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name2, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x3) {
                  var match = x3.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name2;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x3) {
                    control = x3;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x3) {
                    control = x3;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x3) {
                  control = x3;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name2 = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x3) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x3) {
              return "\nError generating stack: " + x3.message + "\n" + x3.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x3) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString(value);
                }
              } else if (node.value !== toString(value)) {
                node.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name2 = node.name;
            if (name2 !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name2 !== "") {
              node.name = name2;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name2 = props.name;
            if (props.type === "radio" && name2 != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name2, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name2) + '][type="radio"]');
              for (var i4 = 0; i4 < group.length; i4++) {
                var otherNode = group[i4];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString(value)) {
                node.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React10.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i4 = 0; i4 < valuePropNames.length; i4++) {
                var propName = valuePropNames[i4];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i4 = 0; i4 < selectedValues.length; i4++) {
                selectedValue["$" + selectedValues[i4]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name2, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name2);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name2) {
            return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name2,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name2.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name2) {
              if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
                return;
              }
              warnedStyleNames[name2] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name2, name2.charAt(0).toUpperCase() + name2.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name2, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name2, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name2, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name2);
            };
            var warnStyleValueIsInfinity = function(name2, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name2);
            };
            warnValidStyle = function(name2, value) {
              if (name2.indexOf("-") > -1) {
                warnHyphenatedStyleName(name2);
              } else if (badVendoredStyleNamePattern.test(name2)) {
                warnBadVendoredStyleName(name2);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name2, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name2, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name2, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles) {
            var style2 = node.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i4 = 0; i4 < longhands.length; i4++) {
                expanded[longhands[i4]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name2) {
            {
              if (hasOwnProperty.call(warnedProperties, name2) && warnedProperties[name2]) {
                return true;
              }
              if (rARIACamel.test(name2)) {
                var ariaName = "aria-" + name2.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name2);
                  warnedProperties[name2] = true;
                  return true;
                }
                if (name2 !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
              if (rARIA.test(name2)) {
                var lowerCasedName = name2.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name2] = true;
                  return false;
                }
                if (name2 !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties[name2] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid2 = validateProperty(type, key);
                if (!isValid2) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name2, value, eventRegistry) {
              if (hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
                return true;
              }
              var lowerCasedName = name2.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name2)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name2, registrationName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name2)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name2);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name2)) {
                if (INVALID_EVENT_NAME_REGEX.test(name2)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name2] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name2);
                warnedProperties$1[name2] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name2);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name2) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
                  warnedProperties$1[name2] = true;
                  return true;
                }
              } else if (!isReserved && name2 !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name2, lowerCasedName);
                warnedProperties$1[name2] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name2, name2, value, name2);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name2, name2, value, name2, name2, name2);
                }
                warnedProperties$1[name2] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
                warnedProperties$1[name2] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name2, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name2, value);
                warnedProperties$1[name2] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid2 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid2) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i4 = 0; i4 < queuedTargets.length; i4++) {
                restoreStateOfTarget(queuedTargets[i4]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name2, type, props) {
            switch (name2) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name2, func, context, a, b, c, d2, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name2, func, context, a, b, c, d2, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name2, func, context, a, b, c, d2, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name2, func, context, a, b, c, d2, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root3, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root3, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root3, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root3.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root3, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root3) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root3);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x3) {
            var asUint = x3 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root3, wipLanes) {
            var pendingLanes = root3.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root3.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root3.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root3, lanes) {
            var eventTimes = root3.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root3, currentTime) {
            var pendingLanes = root3.pendingLanes;
            var suspendedLanes = root3.suspendedLanes;
            var pingedLanes = root3.pingedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root3.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root3) {
            return getHighestPriorityLanes(root3.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root3) {
            var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root3, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root3, lanes) {
            return (lanes & root3.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i4 = 0; i4 < TotalLanes; i4++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root3, updateLane, eventTime) {
            root3.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root3.suspendedLanes = NoLanes;
              root3.pingedLanes = NoLanes;
            }
            var eventTimes = root3.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root3, suspendedLanes) {
            root3.suspendedLanes |= suspendedLanes;
            root3.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root3.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root3, pingedLanes, eventTime) {
            root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root3, remainingLanes) {
            var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
            root3.pendingLanes = remainingLanes;
            root3.suspendedLanes = NoLanes;
            root3.pingedLanes = NoLanes;
            root3.expiredLanes &= remainingLanes;
            root3.mutableReadLanes &= remainingLanes;
            root3.entangledLanes &= remainingLanes;
            var entanglements = root3.entanglements;
            var eventTimes = root3.eventTimes;
            var expirationTimes = root3.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root3, entangledLanes) {
            var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
            var entanglements = root3.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root3, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root3.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root3, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root3, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root3.pendingUpdatersLaneMap;
            var memoizedUpdaters = root3.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root3, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root3) {
            var currentState = root3.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i4 = 0;
            for (; i4 < queuedExplicitHydrationTargets.length; i4++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i4].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i4, 0, queuedTarget);
            if (i4 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i4 = 1; i4 < queuedDiscreteEvents.length; i4++) {
                var queuedEvent = queuedDiscreteEvents[i4];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root3 = nearestMounted.stateNode;
                  if (isRootDehydrated(root3)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root2 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root2 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root2 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root2) {
              return root2.value;
            }
            return root2.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state4 = node._wrapperState;
            if (!state4 || !state4.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x3, y4) {
            return x3 === y4 && (x3 !== 0 || 1 / x3 === 1 / y4) || x3 !== x3 && y4 !== y4;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i4 = 0; i4 < keysA.length; i4++) {
              var currentKey = keysA[i4];
              if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root3, offset) {
            var node = getLeafNode(root3);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i4 = 0; i4 < ancestors.length; i4++) {
                var info = ancestors[i4];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i4 = 0; i4 < simpleEventPluginEvents.length; i4++) {
              var eventName = simpleEventPluginEvents[i4];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i4 = dispatchListeners.length - 1; i4 >= 0; i4--) {
                var _dispatchListeners$i = dispatchListeners[i4], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i4 = 0; i4 < dispatchQueue.length; i4++) {
              var _dispatchQueue$i = dispatchQueue[i4], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name2) {
                names.push(name2);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i4 = 0; i4 < updatePayload.length; i4 += 2) {
              var propKey = updatePayload[i4];
              var propValue = updatePayload[i4 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i4 = 0; i4 < mediaEventTypes.length; i4++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i4], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name2 = attributes[_i].name.toLowerCase();
                switch (name2) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root3 = rootContainerInstance.documentElement;
                namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name2 = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name2);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name2 = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name2);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component2 = node.type;
                    if (isContextProvider(Component2)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i4 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i4 < queue.length; i4++) {
                  var callback = queue[i4];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i4 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component2, baseProps) {
            if (Component2 && Component2.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps = Component2.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i4 = 0; i4 < concurrentQueues.length; i4++) {
                var queue = concurrentQueues[i4];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root3 = node.stateNode;
              return root3;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root3, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i4 = 0; i4 < effects.length; i4++) {
                var effect = effects[i4];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React10.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root3 = enqueueUpdate(fiber, update, lane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitions(root3, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name2 = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name2);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name2);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name2);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name2);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name2);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name2);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name2);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name2);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name2);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name2);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name2);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name2);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name2);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name2, name2);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name2, name2);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name2);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name2);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name2);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name2);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid2 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid2 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state4 = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state4 === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i4 = 0; i4 < newChildren.length; i4++) {
                  var child = newChildren[i4];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state4 = node.memoizedState;
                if (state4 !== null) {
                  var dehydrated = state4.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i4 = 0; i4 < workInProgressSources.length; i4++) {
              var mutableSource = workInProgressSources[i4];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root3, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root3.mutableSourceEagerHydrationData == null) {
              root3.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root3.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i4 = 0; i4 <= hookTypesUpdateIndexDev; i4++) {
                    var oldHookName = hookTypesDev[i4];
                    var newHookName = i4 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i4 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i4 = 0; i4 < prevDeps.length && i4 < nextDeps.length; i4++) {
              if (objectIs(nextDeps[i4], prevDeps[i4])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component2(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component2(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state4, action) {
            return typeof action === "function" ? action(state4) : action;
          }
          function mountReducer(reducer, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init2 !== void 0) {
              initialState = init2(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root3 = getWorkInProgressRoot();
              if (root3 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root3, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check2 = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check2];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check2];
              } else {
                stores.push(check2);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root3 = getWorkInProgressRoot();
            var identifierPrefix = root3.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root3 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
                entangleTransitionUpdate(root3, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root3, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root3.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root3, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    root3.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root3 = parentFiber.stateNode;
                    if (root3 !== null) {
                      root3.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root3, wakeable, lanes) {
            var pingCache = root3.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root3.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root3, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root3, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root3, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root3, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root3, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root3, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var render2 = Component2.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component2.type;
              if (isSimpleFunctionComponent(type) && Component2.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component2.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component2.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component2.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x3) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state4 = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state4, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component2.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component2)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component2, nextProps);
              mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component2, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root3 = workInProgress2.stateNode;
            if (root3.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
            } else if (root3.context) {
              pushTopLevelContextObject(workInProgress2, root3.context, false);
            }
            pushHostContainer(workInProgress2, root3.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root3 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component2 = init2(payload);
            workInProgress2.type = Component2;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
            var resolvedProps = resolveDefaultProps(Component2, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component2);
                  workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
                }
                child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
                }
                child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
                }
                child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component2)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component2,
                  resolveDefaultProps(Component2.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component2.prototype && typeof Component2.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component2)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component2, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component2) {
            {
              if (Component2) {
                if (Component2.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component2.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root3 = getWorkInProgressRoot();
                if (root3 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root3, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root3, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state4 = node.memoizedState;
                if (state4 !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i4 = 0; i4 < children.length; i4++) {
                    if (!validateSuspenseListNestedChild(children[i4], i4)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root3 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state4 = workInProgress2.memoizedState;
                if (state4 !== null) {
                  if (state4.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component2 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component2 = workInProgress2.type;
                if (isContextProvider(Component2)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root3 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root3 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root3, firstChild) {
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root3 = finishedWork.stateNode;
                    clearContainer(root3.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root3 = parentFiber.stateNode;
                            root3.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root3 = parentFiber.stateNode;
                              root3.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root3, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root3, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root3, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root3);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root3, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i4 = 0; i4 < deletions.length; i4++) {
                var childToDelete = deletions[i4];
                try {
                  commitDeletionEffects(root3, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root3);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root3, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root3.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root3, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root3, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root3, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root3;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root3, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root3, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root3,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root3, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root3, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root3, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root3, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root3, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root3, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i4 = 0; i4 < deletions.length; i4++) {
                    var fiberToDelete = deletions[i4];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root3, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root3, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root3 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root3, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root3 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root3, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root3, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root3, lane, eventTime) {
            var current2 = root3.current;
            current2.lanes = lane;
            markRootUpdated(root3, lane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root3, currentTime) {
            var existingCallbackNode = root3.callbackNode;
            markStarvedLanesAsExpired(root3, currentTime);
            var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root3.callbackNode = null;
              root3.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root3.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root3));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
            }
            root3.callbackPriority = newCallbackPriority;
            root3.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root3, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root3.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root3.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root3, lanes) && !includesExpiredLane(root3, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root3, lanes) : renderRootSync(root3, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root3, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root3, lanes);
                var finishedWork = root3.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root3, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root3, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root3, NoLanes);
                    markRootSuspended$1(root3, lanes);
                    ensureRootIsScheduled(root3, now());
                    throw _fatalError;
                  }
                }
                root3.finishedWork = finishedWork;
                root3.finishedLanes = lanes;
                finishConcurrentRender(root3, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root3, now());
            if (root3.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root3);
            }
            return null;
          }
          function recoverFromConcurrentError(root3, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root3)) {
              var rootWorkInProgress = prepareFreshStack(root3, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root3.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root3, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root3, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root3, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root3.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root3, suspendedLanes);
                      break;
                    }
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i4 = 0; i4 < checks.length; i4++) {
                      var check2 = checks[i4];
                      var getSnapshot = check2.getSnapshot;
                      var renderedValue = check2.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root3, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root3, suspendedLanes);
          }
          function performSyncWorkOnRoot(root3) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root3, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root3, now());
              return null;
            }
            var exitStatus = renderRootSync(root3, lanes);
            if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root3);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root3, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            commitRoot(root3, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root3, now());
            return null;
          }
          function flushRoot(root3, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root3, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root3, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root3, lanes) {
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            var timeoutHandle = root3.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root3.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root3;
            var rootWorkInProgress = createWorkInProgress(root3.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root3, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root3, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root3.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root3, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root3, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root3, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root3, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root3, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root3, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root3, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root3.finishedWork;
            var lanes = root3.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root3.finishedWork = null;
            root3.finishedLanes = NoLanes;
            if (finishedWork === root3.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root3.callbackNode = null;
            root3.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root3, remainingLanes);
            if (root3 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root3, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root3, finishedWork, lanes);
              resetAfterCommit(root3.containerInfo);
              root3.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root3, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root3.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root3;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root3.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root3.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root3.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root3, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root3.onRecoverableError;
              for (var i4 = 0; i4 < recoverableErrors.length; i4++) {
                var recoverableError = recoverableErrors[i4];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root3.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root3.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root3 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root3 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root3.current);
            commitPassiveMountEffects(root3, root3.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i4 = 0; i4 < profilerEffects.length; i4++) {
                var _fiber = profilerEffects[i4];
                commitPassiveEffectDurations(root3, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root3.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root3 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root3;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root3);
            {
              var stateNode = root3.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root3 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root3 !== null) {
              markRootUpdated(root3, SyncLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root3 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root3 !== null) {
                    markRootUpdated(root3, SyncLane, eventTime);
                    ensureRootIsScheduled(root3, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root3, wakeable, pingedLanes) {
            var pingCache = root3.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root3, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root3);
            if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root3, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root3 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root3 !== null) {
              markRootUpdated(root3, retryLane, eventTime);
              ensureRootIsScheduled(root3, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root3, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root3.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root3, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root3) {
            {
              if (root3.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root3, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root3, element) {
            {
              if (root3.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root3, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root3, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component2) {
            if (typeof Component2 === "function") {
              return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
            } else if (Component2 !== void 0 && Component2 !== null) {
              var $$typeof = Component2.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root3 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root3.current = uninitializedFiber;
            uninitializedFiber.stateNode = root3;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root3;
          }
          var ReactVersion = "18.2.0";
          function createPortal(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component2 = fiber.type;
              if (isContextProvider(Component2)) {
                return processChildContext(fiber, Component2, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys4 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys4);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root3 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root3.context = getContextForSubtree(null);
            var current2 = root3.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root3, lane, eventTime);
            return root3;
          }
          function updateContainer(element, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root3 = enqueueUpdate(current$1, update, lane);
            if (root3 !== null) {
              scheduleUpdateOnFiber(root3, current$1, lane, eventTime);
              entangleTransitions(root3, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root3 = fiber.stateNode;
                if (isRootDehydrated(root3)) {
                  var lanes = getHighestPriorityPendingLanes(root3);
                  flushRoot(root3, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root4 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root4 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root4, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root3 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root3 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root3, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i4 = 0; i4 < newPath.length - 1; i4++) {
                  if (oldPath[i4] !== newPath[i4]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                scheduleUpdateOnFiber(root3, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root3 = this._internalRoot;
            if (root3 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root3.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root3.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root3, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root3 = this._internalRoot;
            if (root3 !== null) {
              this._internalRoot = null;
              var container2 = root3.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root3, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot2(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root3 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root3);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root3 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root3.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i4 = 0; i4 < mutableSources.length; i4++) {
                var mutableSource = mutableSources[i4];
                registerMutableSourceForHydration(root3, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root3);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              var root3 = createHydrationContainer(
                initialChildren,
                callback,
                container2,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container2._reactRootContainer = root3;
              markContainerAsRoot(root3.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root3;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container2,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container2._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root3;
            if (!maybeRoot) {
              root3 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root3 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root3);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root3, parentComponent, callback);
            }
            return getPublicRootInstance(root3);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, true, callback);
          }
          function render(element, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module2) {
      "use strict";
      if (false) {
        checkDCE();
        module2.exports = null;
      } else {
        module2.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i4 = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i4.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i4.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i4.usingClientEntryPoint = false;
          }
        };
      }
      var i4;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/tslib/tslib.es6.js
  var tslib_es6_exports = {};
  __export(tslib_es6_exports, {
    __assign: () => __assign,
    __asyncDelegator: () => __asyncDelegator,
    __asyncGenerator: () => __asyncGenerator,
    __asyncValues: () => __asyncValues,
    __await: () => __await,
    __awaiter: () => __awaiter,
    __classPrivateFieldGet: () => __classPrivateFieldGet,
    __classPrivateFieldSet: () => __classPrivateFieldSet,
    __createBinding: () => __createBinding,
    __decorate: () => __decorate,
    __exportStar: () => __exportStar,
    __extends: () => __extends2,
    __generator: () => __generator,
    __importDefault: () => __importDefault,
    __importStar: () => __importStar,
    __makeTemplateObject: () => __makeTemplateObject,
    __metadata: () => __metadata,
    __param: () => __param,
    __read: () => __read,
    __rest: () => __rest,
    __spread: () => __spread,
    __spreadArray: () => __spreadArray2,
    __spreadArrays: () => __spreadArrays,
    __values: () => __values
  });
  function __extends2(d2, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics2(d2, b);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __rest(s, e) {
    var t3 = {};
    for (var p2 in s)
      if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
        t3[p2] = s[p2];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i4 = 0, p2 = Object.getOwnPropertySymbols(s); i4 < p2.length; i4++) {
        if (e.indexOf(p2[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i4]))
          t3[p2[i4]] = s[p2[i4]];
      }
    return t3;
  }
  function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i4 = decorators.length - 1; i4 >= 0; i4--)
        if (d2 = decorators[i4])
          r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    }, trys: [], ops: [] }, f, y4, t3, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n) {
      return function(v2) {
        return step([n, v2]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (f = 1, y4 && (t3 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t3 = y4["return"]) && t3.call(y4), 0) : y4.next) && !(t3 = t3.call(y4, op[1])).done)
            return t3;
          if (y4 = 0, t3)
            op = [op[0] & 2, t3.value];
          switch (op[0]) {
            case 0:
            case 1:
              t3 = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y4 = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t3[1]) {
                _.label = t3[1];
                t3 = op;
                break;
              }
              if (t3 && _.label < t3[2]) {
                _.label = t3[2];
                _.ops.push(op);
                break;
              }
              if (t3[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y4 = 0;
        } finally {
          f = t3 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __exportStar(m, o) {
    for (var p2 in m)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o, p2))
        __createBinding(o, m, p2);
  }
  function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i4 = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i4 >= o.length)
            o = void 0;
          return { value: o && o[i4++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i4 = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i4.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i4["return"]))
          m.call(i4);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread() {
    for (var ar = [], i4 = 0; i4 < arguments.length; i4++)
      ar = ar.concat(__read(arguments[i4]));
    return ar;
  }
  function __spreadArrays() {
    for (var s = 0, i4 = 0, il = arguments.length; i4 < il; i4++)
      s += arguments[i4].length;
    for (var r = Array(s), k = 0, i4 = 0; i4 < il; i4++)
      for (var a = arguments[i4], j = 0, jl = a.length; j < jl; j++, k++)
        r[k] = a[j];
    return r;
  }
  function __spreadArray2(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i4 = 0, l = from.length, ar; i4 < l; i4++) {
        if (ar || !(i4 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i4);
          ar[i4] = from[i4];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  }
  function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i4, q = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n) {
      if (g2[n])
        i4[n] = function(v2) {
          return new Promise(function(a, b) {
            q.push([n, v2, a, b]) > 1 || resume(n, v2);
          });
        };
    }
    function resume(n, v2) {
      try {
        step(g2[n](v2));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v2) {
      if (f(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator(o) {
    var i4, p2;
    return i4 = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n, f) {
      i4[n] = o[n] ? function(v2) {
        return (p2 = !p2) ? { value: __await(o[n](v2)), done: n === "return" } : f ? f(v2) : v2;
      } : f;
    }
  }
  function __asyncValues(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i4;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n) {
      i4[n] = o[n] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o[n](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  }
  function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
  }
  function __importDefault(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet(receiver, state4, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state4 === "function" ? receiver !== state4 || !f : !state4.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state4.get(receiver);
  }
  function __classPrivateFieldSet(receiver, state4, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state4 === "function" ? receiver !== state4 || !f : !state4.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state4.set(receiver, value), value;
  }
  var extendStatics2, __assign, __createBinding, __setModuleDefault;
  var init_tslib_es6 = __esm({
    "node_modules/my-alyce-component-lib/node_modules/tslib/tslib.es6.js"() {
      extendStatics2 = function(d2, b) {
        extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b2) {
          d3.__proto__ = b2;
        } || function(d3, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d3[p2] = b2[p2];
        };
        return extendStatics2(d2, b);
      };
      __assign = function() {
        __assign = Object.assign || function __assign3(t3) {
          for (var s, i4 = 1, n = arguments.length; i4 < n; i4++) {
            s = arguments[i4];
            for (var p2 in s)
              if (Object.prototype.hasOwnProperty.call(s, p2))
                t3[p2] = s[p2];
          }
          return t3;
        };
        return __assign.apply(this, arguments);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __setModuleDefault = Object.create ? function(o, v2) {
        Object.defineProperty(o, "default", { enumerable: true, value: v2 });
      } : function(o, v2) {
        o["default"] = v2;
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/general.types.js
  var require_general_types = __commonJS({
    "node_modules/my-alyce-component-lib/dist/general.types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/@types.js
  var require_types = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/@types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/array.js
  var require_array = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.arrHas = exports.arrLast = exports.arrToBoolDict = exports.arrToIdxDict = exports.arrToDict = exports.arrRemoveValues = exports.arrReplace = exports.arrDeepFlatten = exports.arrFlatten = exports.arrDivide = exports.arrGetByIds = exports.arrRemoveById = exports.arrGen = void 0;
      var _1 = require_dist();
      var arrGen = (length, fill = void 0) => length < 1 ? [] : Array(length).fill(fill);
      exports.arrGen = arrGen;
      function arrRemoveById(arr, idArr, idKey = "id") {
        const objDict = arrToDict(arr, idKey);
        const keep = _1.objRemoveKeys(objDict, idArr);
        return _1.objVals(keep);
      }
      exports.arrRemoveById = arrRemoveById;
      function arrGetByIds(arr, idArr, idKey = "id") {
        const dict = arrToBoolDict(idArr);
        return arr.filter((x3) => dict[x3[idKey]]);
      }
      exports.arrGetByIds = arrGetByIds;
      function arrDivide(arr, maxRowLength) {
        const rows = Math.ceil(arr.length / maxRowLength) || 0;
        const newArr = exports.arrGen(rows).map(() => []);
        arr.forEach((x3, i4) => newArr[Math.floor(i4 / maxRowLength)].push(x3));
        return newArr;
      }
      exports.arrDivide = arrDivide;
      function arrFlatten(arr) {
        return [].concat.apply([], arr);
      }
      exports.arrFlatten = arrFlatten;
      var arrDeepFlatten = (arr) => arr.reduce((newArr, x3) => newArr.concat(_1.isType(x3, "array") ? exports.arrDeepFlatten(x3) : x3), []);
      exports.arrDeepFlatten = arrDeepFlatten;
      function arrReplace(arr) {
        const newArr = [...arr];
        return {
          all: (item) => {
            const idxs = [];
            arr.forEach((match, i4) => _1.equal(item, match) ? idxs[i4] = i4 : null);
            return {
              with: (newItem) => {
                if (!idxs.length)
                  return arr;
                idxs.forEach((i4) => newArr[i4] = newItem);
                return newArr;
              }
            };
          },
          first: (item) => {
            const idx = arr.findIndex((match) => _1.equal(item, match));
            return {
              with: (newItem) => {
                if (_1.nonValue(idx))
                  return arr;
                newArr[idx] = newItem;
                return newArr;
              }
            };
          }
        };
      }
      exports.arrReplace = arrReplace;
      function arrRemoveValues(arr, valsToRemove) {
        let newArr = [...arr];
        valsToRemove.forEach((removeVal) => newArr = newArr.filter((x3) => !_1.equal(x3, removeVal)));
        return newArr;
      }
      exports.arrRemoveValues = arrRemoveValues;
      function arrToDict(arr, idKey) {
        const dict = {};
        arr.forEach((obj) => dict[obj[idKey]] = obj);
        return dict;
      }
      exports.arrToDict = arrToDict;
      function arrToIdxDict(arr) {
        const dict = {};
        arr.forEach((x3, idx) => dict[x3] = idx + "");
        return dict;
      }
      exports.arrToIdxDict = arrToIdxDict;
      function arrToBoolDict(arr) {
        const dict = {};
        arr.forEach((x3) => dict[x3] = true);
        return dict;
      }
      exports.arrToBoolDict = arrToBoolDict;
      var arrLast = (arr) => arr[arr.length - 1];
      exports.arrLast = arrLast;
      function arrHas(arr, find, equivalent = false) {
        const fct = equivalent ? (x3) => _1.equal(x3, find) : (x3) => x3 === find;
        return arr.findIndex(fct) !== -1;
      }
      exports.arrHas = arrHas;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/clone.js
  var require_clone = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/clone.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.clone = void 0;
      function clone(o) {
        let c, x3, l, i4, k, a, q;
        if (typeof o !== "object" || o === null)
          return o;
        if (o instanceof Date)
          return new Date(o);
        x3 = Object.keys(o);
        l = x3.length;
        if (Array.isArray(o)) {
          a = new Array(l);
          for (i4 = 0; i4 < l; i4++) {
            k = x3[i4];
            c = o[k];
            if (typeof c !== "object" || c === null)
              a[k] = c;
            else if (c instanceof Date)
              a[k] = new Date(c);
            else
              a[k] = clone(c);
          }
          return a;
        }
        q = {};
        for (i4 = 0; i4 < l; i4++) {
          k = x3[i4];
          c = o[k];
          if (Object.hasOwnProperty.call(o, k) === false)
            continue;
          if (typeof c !== "object" || c === null)
            q[k] = c;
          else if (c instanceof Date)
            q[k] = new Date(c);
          else
            q[k] = clone(c);
        }
        return q;
      }
      exports.clone = clone;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/equality.js
  var require_equality = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/equality.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.equal = void 0;
      function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a === "object" && typeof b === "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i4, keys4;
          if (Array.isArray(a)) {
            length = a.length;
            if (length !== b.length)
              return false;
            for (i4 = length; i4-- !== 0; )
              if (!equal(a[i4], b[i4]))
                return false;
            return true;
          }
          if (a instanceof Map && b instanceof Map) {
            if (a.size !== b.size)
              return false;
            for (i4 of a.entries())
              if (!b.has(i4[0]))
                return false;
            for (i4 of a.entries())
              if (!equal(i4[1], b.get(i4[0])))
                return false;
            return true;
          }
          if (a instanceof Set && b instanceof Set) {
            if (a.size !== b.size)
              return false;
            for (i4 of a.entries())
              if (!b.has(i4[0]))
                return false;
            return true;
          }
          if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i4 = length; i4-- !== 0; )
              if (a[i4] !== b[i4])
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys4 = Object.keys(a);
          length = keys4.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i4 = length; i4-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys4[i4]))
              return false;
          for (i4 = length; i4-- !== 0; ) {
            var key = keys4[i4];
            if (key === "_owner" && a.$$typeof) {
              continue;
            }
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      }
      exports.equal = equal;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/general.js
  var require_general = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/general.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.promiseOut = exports.debounceTimeOut = exports.randomColorHex = exports.uuid = exports.assertType = exports.type = exports.cloneLog = exports.unsubAll = exports.wait = exports.interval = void 0;
      var _1 = require_dist();
      var interval = (funct, ms, maxTimes) => {
        if (_1.isType(maxTimes, "number") && maxTimes < 1)
          throw Error(`argument "times" can't be less than 1`);
        let i4 = 0;
        const stop = () => clearInterval(itv);
        const itv = setInterval(() => {
          funct(i4, stop);
          i4++;
          if (maxTimes && i4 >= maxTimes)
            stop();
        }, ms);
        return {
          /** Stop the interval */
          stop
        };
      };
      exports.interval = interval;
      var wait = (ms) => new Promise((res2) => setTimeout(() => res2(), ms));
      exports.wait = wait;
      var usubAllFunct = (x3, unsubName = "unsubscribe") => _1.isType(x3, "object") && _1.hasKey(x3, unsubName) ? x3[unsubName]() : null;
      function unsubAll(objOrArr, unsubName = "unsubscribe") {
        if (_1.isType(objOrArr, "array"))
          objOrArr.forEach((x3) => usubAllFunct(x3, unsubName));
        else if (_1.isType(objOrArr, "object"))
          _1.objMap(objOrArr, ({ val }) => usubAllFunct(val, unsubName));
        else
          throw Error('argument "objOrArr" must be of type "object" or "array"');
      }
      exports.unsubAll = unsubAll;
      var cloneLog = (x3) => console.log(_1.clone(x3));
      exports.cloneLog = cloneLog;
      function type(val) {
        if (typeof val === "object") {
          if (Array.isArray(val))
            return "array";
          else if (val === null)
            return "null";
          else
            return "object";
        } else {
          if (val !== val)
            return "NaN";
          else
            return typeof val;
        }
      }
      exports.type = type;
      function assertType(val, types) {
        if (!_1.isType(types, "array"))
          types = [types];
        for (const t3 of types)
          if (_1.isType(val, t3))
            return;
        throw Error(`value needs to be of type ${types.join(" || ")}`);
      }
      exports.assertType = assertType;
      var uuid = () => {
        let d2 = (/* @__PURE__ */ new Date()).getTime();
        let d22 = performance && performance.now && performance.now() * 1e3 || 0;
        const str6 = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
        return str6.replace(/[xy]/g, (c) => {
          let r = Math.random() * 16;
          if (d2 > 0) {
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
          } else {
            r = (d22 + r) % 16 | 0;
            d22 = Math.floor(d22 / 16);
          }
          return (c === "x" ? r : r & 3 | 8).toString(16);
        });
      };
      exports.uuid = uuid;
      var randomColorHex = () => "#" + ((1 << 24) * Math.random() | 0).toString(16);
      exports.randomColorHex = randomColorHex;
      function debounceTimeOut() {
        let timeoutId = null;
        return (fct, ms) => {
          if (timeoutId)
            clearTimeout(timeoutId);
          if (fct !== "cancel")
            timeoutId = setTimeout(fct, ms || 0);
        };
      }
      exports.debounceTimeOut = debounceTimeOut;
      function promiseOut() {
        let resolve;
        const promise = new Promise((res2) => resolve = res2);
        return { resolve, promise };
      }
      exports.promiseOut = promiseOut;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/iterate.js
  var require_iterate = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/iterate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.iterate = void 0;
      var array_1 = require_array();
      function iterate(xLength, yLength, zLength) {
        const iterator = (fct, nested = false) => {
          const arr = [];
          for (let x3 = 0; x3 < xLength; x3++) {
            if (!yLength)
              arr.push(fct({ x: x3 }));
            else
              for (let y4 = 0; y4 < yLength; y4++) {
                if (!zLength)
                  arr.push(fct({ x: x3, y: y4 }));
                else
                  for (let z3 = 0; z3 < zLength; z3++) {
                    arr.push(fct({ x: x3, y: y4, z: z3 }));
                  }
              }
          }
          if (!nested)
            return arr;
          if (zLength && yLength) {
            const newArr = array_1.arrDivide(arr, yLength * zLength);
            return newArr.map((yArr) => array_1.arrDivide(yArr, zLength));
          } else if (yLength) {
            return array_1.arrDivide(arr, yLength);
          } else {
            return arr;
          }
        };
        return {
          for: (fct) => {
            iterator(fct);
          },
          map: (fct) => iterator(fct),
          nestedMap: (fct) => iterator(fct, true)
        };
      }
      exports.iterate = iterate;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/number.js
  var require_number = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.newNumFromRange = exports.numberWithCommas = exports.decPlace = exports.average = exports.rand = void 0;
      var _1 = require_dist();
      var rand = (min, max) => Math.floor(Math.random() * (max + 1 - min)) + min;
      exports.rand = rand;
      var average = (nArr) => nArr.reduce((a = 0, b = 0) => a + b, 0) / nArr.length;
      exports.average = average;
      var decPlace = (n, places) => parseFloat(n.toFixed(places));
      exports.decPlace = decPlace;
      var numberWithCommas = (n) => n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      exports.numberWithCommas = numberWithCommas;
      function newNumFromRange(prevNum, min, max) {
        let num;
        let loop4 = 0;
        const dict = _1.isType(prevNum, "array") ? _1.arrToBoolDict(prevNum) : { [prevNum]: true };
        do {
          num = exports.rand(min, max);
          loop4++;
          if (loop4 > 1e6) {
            console.error("Check for infinite loops");
            throw new Error("Looped 1 million times");
          }
        } while (dict[num]);
        return num;
      }
      exports.newNumFromRange = newNumFromRange;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/object.js
  var require_object = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/object.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.objPromiseAll = exports.objSortKeys = exports.objResolve = exports.objExtract = exports.objKeyVals = exports.objVals = exports.objKeys = exports.objRemoveKeys = exports.objFilter = exports.objMap = void 0;
      function objMap(o, funct) {
        const newObj = {};
        for (const key in o) {
          newObj[key] = funct({ key, val: o[key] });
        }
        return newObj;
      }
      exports.objMap = objMap;
      function objFilter(o, funct) {
        const newObj = Object.assign({}, o);
        for (const key in o) {
          if (!funct({ key, val: o[key] }))
            delete newObj[key];
        }
        return newObj;
      }
      exports.objFilter = objFilter;
      function objRemoveKeys(obj, filterOut) {
        const newObj = Object.assign({}, obj);
        filterOut.forEach((key) => delete newObj[key]);
        return newObj;
      }
      exports.objRemoveKeys = objRemoveKeys;
      function objKeys(o) {
        if (Object.keys)
          return Object.keys(o);
        const keys4 = [];
        for (const k in o)
          keys4.push(k);
        return keys4;
      }
      exports.objKeys = objKeys;
      var objVals = (o) => Object.values ? Object.values(o) : objKeys(o).map((key) => o[key]);
      exports.objVals = objVals;
      var objKeyVals = (o) => objKeys(o).map((key) => ({ key, val: o[key] }));
      exports.objKeyVals = objKeyVals;
      function objExtract(extract, keys4) {
        const newObj = {};
        keys4.forEach((key) => newObj[key] = extract[key]);
        return newObj;
      }
      exports.objExtract = objExtract;
      var objResolve = (o, path) => path.split(".").reduce((prev, key) => prev[key], o);
      exports.objResolve = objResolve;
      var objSortKeys = (o, compareFn) => {
        const newObj = {};
        const keys4 = objKeys(o).sort(compareFn);
        keys4.map((k) => newObj[k] = o[k]);
        return newObj;
      };
      exports.objSortKeys = objSortKeys;
      function objPromiseAll(obj) {
        const keyValues = exports.objKeyVals(obj);
        const toEqual = keyValues.length;
        const values = {};
        let total = 0;
        return new Promise((resolve) => keyValues.forEach(({ key, val: x3 }) => x3.then((data) => {
          values[key] = data;
          total++;
          if (toEqual === total)
            resolve(values);
        })));
      }
      exports.objPromiseAll = objPromiseAll;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/string.js
  var require_string = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/string.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.minAppend = exports.strRemove = exports.strIncludes = void 0;
      var strIncludes = (str6, subStr) => str6.indexOf(subStr) !== -1;
      exports.strIncludes = strIncludes;
      var strRemove = (str6, remove) => str6.replace(new RegExp(remove, "g"), "");
      exports.strRemove = strRemove;
      var minAppend = (item, length, append = "0") => (append.repeat(length - 1) + item).slice(-length);
      exports.minAppend = minAppend;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/test.js
  var require_test = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/test.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isValidEmail = exports.nonValue = exports.nullOrEmpty = exports.isType = exports.hasKeys = exports.hasKey = exports.equalAny = void 0;
      var _1 = require_dist();
      var _2 = require_dist();
      var equalAny = (x3, equals) => !!equals.find((y4) => _1.equal(x3, y4));
      exports.equalAny = equalAny;
      var hasKey = (obj, key) => exports.isType(obj, "object") && obj.hasOwnProperty(key);
      exports.hasKey = hasKey;
      function hasKeys(obj, keys4) {
        if (!exports.isType(obj, "object"))
          return false;
        for (const key of keys4)
          if (!obj.hasOwnProperty(key))
            return false;
        return true;
      }
      exports.hasKeys = hasKeys;
      var isType = (val, testType) => _2.type(val) === testType;
      exports.isType = isType;
      function nullOrEmpty(x3) {
        if (exports.nonValue(x3))
          return true;
        if (exports.isType(x3, "string") || exports.isType(x3, "array"))
          return !x3.length;
        if (exports.isType(x3, "object"))
          return !_2.objVals(x3).length;
        return false;
      }
      exports.nullOrEmpty = nullOrEmpty;
      var nonValue = (val) => val === null || val === void 0;
      exports.nonValue = nonValue;
      var isValidEmail = (email) => /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
      exports.isValidEmail = isValidEmail;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/time.js
  var require_time = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/time.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.yearStartEnd = exports.monthStartEnd = exports.weekStartEnd = exports.getDayStartEnd = exports.wks = exports.weeks = exports.dys = exports.days = exports.hrs = exports.hours = exports.min = exports.minutes = exports.sec = exports.seconds = exports.msTimeObj = exports.msToTime = exports.msToWks = exports.msToDys = exports.msToHrs = exports.msToMin = exports.msToSec = exports.dateTimeToString = exports.weekTuple = exports.msTime = void 0;
      var _1 = require_dist();
      exports.msTime = {
        s: 1e3,
        m: 6e4,
        h: 36e5,
        d: 864e5,
        w: 6048e5
      };
      exports.weekTuple = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      function dateTimeToString(dt = /* @__PURE__ */ new Date()) {
        const h = ("0" + dt.getHours()).slice(-2);
        const m = ("0" + dt.getMinutes()).slice(-2);
        const s = ("0" + dt.getSeconds()).slice(-2);
        const ms = ("00" + dt.getMilliseconds()).slice(-3);
        return `${h}:${m}:${s}:${ms}`;
      }
      exports.dateTimeToString = dateTimeToString;
      var msToSec = (ms) => ms / exports.msTime.s;
      exports.msToSec = msToSec;
      var msToMin = (ms) => ms / exports.msTime.m;
      exports.msToMin = msToMin;
      var msToHrs = (ms) => ms / exports.msTime.h;
      exports.msToHrs = msToHrs;
      var msToDys = (ms) => ms / exports.msTime.d;
      exports.msToDys = msToDys;
      var msToWks = (ms) => ms / exports.msTime.w;
      exports.msToWks = msToWks;
      function msToTime(msT, toObj = false) {
        const msN = msT % 1e3;
        let sN = Math.floor(msT / 1e3);
        let mN = Math.floor(sN / 60);
        sN = sN % 60;
        let hN = Math.floor(mN / 60);
        mN = mN % 60;
        const dN = Math.floor(hN / 24);
        hN = hN % 24;
        const d2 = ("00" + dN).slice(-3);
        const h = ("0" + hN).slice(-2);
        const m = ("0" + mN).slice(-2);
        const s = ("0" + sN).slice(-2);
        const ms = ("00" + msN).slice(-3);
        if (toObj)
          return { d: dN, h: hN, m: mN, s: sN, ms: msN };
        return `${dN ? d2 + ":" : ""}${h}:${m}:${s}:${ms}`;
      }
      exports.msToTime = msToTime;
      function msTimeObj(msT, toNumbers = false) {
        const ms = msT % 1e3;
        let s = Math.floor(msT / 1e3);
        let m = Math.floor(s / 60);
        s = s % 60;
        let h = Math.floor(m / 60);
        m = m % 60;
        const d2 = Math.floor(h / 24);
        h = h % 24;
        if (toNumbers)
          return { d: d2, h, m, s, ms };
        return {
          d: ("00" + d2).slice(-3),
          h: ("0" + h).slice(-2),
          m: ("0" + m).slice(-2),
          s: ("0" + s).slice(-2),
          ms: ("00" + ms).slice(-3)
        };
      }
      exports.msTimeObj = msTimeObj;
      var seconds = (s) => s * exports.msTime.s;
      exports.seconds = seconds;
      exports.sec = exports.seconds;
      var minutes = (m) => m * exports.msTime.m;
      exports.minutes = minutes;
      exports.min = exports.minutes;
      var hours = (h) => h * exports.msTime.h;
      exports.hours = hours;
      exports.hrs = exports.hours;
      var days = (d2) => d2 * exports.msTime.d;
      exports.days = days;
      exports.dys = exports.days;
      var weeks = (w) => w * exports.msTime.w;
      exports.weeks = weeks;
      exports.wks = exports.weeks;
      function getDayStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        const m = t3.getMonth();
        const d2 = t3.getDate();
        let start = new Date(y4, m, d2);
        let end = new Date(y4, m, d2, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.getDayStartEnd = getDayStartEnd;
      function weekStartEnd(t3, weekStart = "sun", type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const wd = t3.getDay();
        const startOffset = wd * -1 + (weekStart === "mon" ? 1 : 0);
        const endOffset = 6 + startOffset;
        const s = new Date(t3.getTime() + exports.days(startOffset));
        const e = new Date(t3.getTime() + exports.days(endOffset));
        let start = new Date(s.getFullYear(), s.getMonth(), s.getDate());
        let end = new Date(e.getFullYear(), e.getMonth(), e.getDate(), 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.weekStartEnd = weekStartEnd;
      function monthStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        const m = t3.getMonth();
        let start = new Date(y4, m, 1);
        let end = new Date(y4, m + 1, 0, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.monthStartEnd = monthStartEnd;
      function yearStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        let start = new Date(y4, 0, 1);
        let end = new Date(y4, 12, 0, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.yearStartEnd = yearStartEnd;
    }
  });

  // node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/index.js
  var require_dist = __commonJS({
    "node_modules/my-alyce-component-lib/node_modules/@giveback007/util-lib/dist/index.js"(exports) {
      "use strict";
      var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
        for (var p2 in m)
          if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
            __createBinding3(exports2, m, p2);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar3(require_types(), exports);
      __exportStar3(require_array(), exports);
      __exportStar3(require_clone(), exports);
      __exportStar3(require_equality(), exports);
      __exportStar3(require_general(), exports);
      __exportStar3(require_iterate(), exports);
      __exportStar3(require_number(), exports);
      __exportStar3(require_object(), exports);
      __exportStar3(require_string(), exports);
      __exportStar3(require_test(), exports);
      __exportStar3(require_time(), exports);
    }
  });

  // node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "node_modules/classnames/index.js"(exports, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames() {
          var classes = [];
          for (var i4 = 0; i4 < arguments.length; i4++) {
            var arg = arguments[i4];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames.default = classNames;
          module2.exports = classNames;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Chevron/ChevronIcons.js
  var require_ChevronIcons = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Chevron/ChevronIcons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.chevronIcons = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      exports.chevronIcons = {
        1: { viewBox: "0 0 16 16", path: react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M1.553 6.776a.5.5 0 0 1 .67-.223L8 9.44l5.776-2.888a.5.5 0 1 1 .448.894l-6 3a.5.5 0 0 1-.448 0l-6-3a.5.5 0 0 1-.223-.67z" }) },
        2: { viewBox: "0 0 16 16", path: react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M3.646 4.146a.5.5 0 0 1 .708 0L8 7.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zM1 11.5a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13a.5.5 0 0 1-.5-.5z" }) },
        3: { viewBox: "0 0 16 16", path: react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M1.646 6.646a.5.5 0 0 1 .708 0L8 12.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" }),
          react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M1.646 2.646a.5.5 0 0 1 .708 0L8 8.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" })
        ) },
        4: { viewBox: "0 0 16 16", path: react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z" }) },
        5: { viewBox: "0 0 24 24", path: react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement("path", { d: "M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z" }),
          react_1.default.createElement("path", { d: "M12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707-1.414-1.414z" })
        ) },
        6: { viewBox: "0 0 24 24", path: react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement("path", { d: "M5 21h14c1.103 0 2-.897 2-2V5c0-1.103-.897-2-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zM5 5h14l.001 14H5V5z" }),
          react_1.default.createElement("path", { d: "M12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707-1.414-1.414z" })
        ) },
        7: { viewBox: "0 0 24 24", path: react_1.default.createElement("path", { d: "M16.293 9.293 12 13.586 7.707 9.293l-1.414 1.414L12 16.414l5.707-5.707z" }) },
        8: { viewBox: "0 0 24 24", path: react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement("path", { d: "m12 15.586-4.293-4.293-1.414 1.414L12 18.414l5.707-5.707-1.414-1.414z" }),
          react_1.default.createElement("path", { d: "m17.707 7.707-1.414-1.414L12 10.586 7.707 6.293 6.293 7.707 12 13.414z" })
        ) },
        9: { viewBox: "0 0 512 512", path: react_1.default.createElement("path", { d: "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zM273 369.9l135.5-135.5c9.4-9.4 9.4-24.6 0-33.9l-17-17c-9.4-9.4-24.6-9.4-33.9 0L256 285.1 154.4 183.5c-9.4-9.4-24.6-9.4-33.9 0l-17 17c-9.4 9.4-9.4 24.6 0 33.9L239 369.9c9.4 9.4 24.6 9.4 34 0z" }) },
        10: { viewBox: "0 0 24 24", path: react_1.default.createElement("path", { d: "M21.886 5.536A1.002 1.002 0 0 0 21 5H3a1.002 1.002 0 0 0-.822 1.569l9 13a.998.998 0 0 0 1.644 0l9-13a.998.998 0 0 0 .064-1.033zM12 17.243 4.908 7h14.184L12 17.243z" }) }
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Chevron/Chevron.js
  var require_Chevron = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Chevron/Chevron.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Chevron = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var ChevronIcons_1 = require_ChevronIcons();
      var chevronDirectionMap = { down: "rotate-0", up: "rotate-180", left: "rotate-90", right: "-rotate-90" };
      var chevronSizeMap = {
        xs: "h-3 w-3",
        sm: "h-6 w-6",
        md: "h-12 w-12",
        lg: "h-24 w-24",
        xl: "h-48 w-48",
        auto: "h-full w-full"
      };
      var Chevron = function(_a) {
        var direction = _a.direction, icon = _a.icon, _b = _a.size, size = _b === void 0 ? "auto" : _b, className = _a.className, style = _a.style;
        return react_1.default.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", className: (0, classnames_1.default)("transform transition-transform duration-500 svg-fix", chevronSizeMap[size], chevronDirectionMap[direction], className), viewBox: ChevronIcons_1.chevronIcons[icon].viewBox, style }, ChevronIcons_1.chevronIcons[icon].path);
      };
      exports.Chevron = Chevron;
    }
  });

  // node_modules/my-alyce-component-lib/dist/utils.js
  var require_utils = __commonJS({
    "node_modules/my-alyce-component-lib/dist/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.customScrollBar = exports.loremIpsum = exports.TextInputBorderMap = exports.regexpUtil = exports.useRefDimensions = exports.clickOutListener = void 0;
      var react_1 = require_react();
      function clickOutListener(ref, onClickOut) {
        (0, react_1.useEffect)(function() {
          return document.addEventListener("click", function(event) {
            return ref.current && !ref.current.contains(event.target) && onClickOut();
          });
        }, [ref]);
      }
      exports.clickOutListener = clickOutListener;
      var useRefDimensions = function(ref) {
        var _a, _b;
        var _c = (0, react_1.useState)({ width: 0, height: 0 }), dimensions = _c[0], setDimensions = _c[1];
        (0, react_1.useEffect)(function() {
          if (ref.current) {
            var boundingRect = ref.current.getBoundingClientRect();
            var width = boundingRect.width, height = boundingRect.height;
            setDimensions({ width, height });
          }
        }, [(_a = ref.current) === null || _a === void 0 ? void 0 : _a.offsetHeight, (_b = ref.current) === null || _b === void 0 ? void 0 : _b.offsetWidth]);
        return dimensions;
      };
      exports.useRefDimensions = useRefDimensions;
      exports.regexpUtil = {
        name: /^[a-z ,.'-]+$/i,
        // eslint-disable-next-line
        email: /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
      };
      exports.TextInputBorderMap = {
        default: "border-secondary-300 placeholder-secondary-300 focus:border-primary-400 focus:outline-none focus:ring-1 focus:ring-primary-200",
        success: "border-success-400 placeholder-success-300 focus:border-success-500 focus:outline-none focus:ring-1 focus:ring-success-200",
        warning: "border-warning-400 placeholder-warning-300 focus:border-warning-500 focus:outline-none focus:ring-1 focus:ring-warning-200",
        danger: "border-danger-400 placeholder-danger-300 focus:border-danger-500 focus:outline-none focus:ring-1 focus:ring-danger-200"
      };
      exports.loremIpsum = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.";
      exports.customScrollBar = "scrollbar-thin scrollbar-track-secondary-200 scrollbar-thumb-secondary-400 scrollbar";
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Accordion/Accordion.js
  var require_Accordion = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Accordion/Accordion.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Accordion = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var react_1 = require_react();
      var react_2 = (0, tslib_1.__importDefault)(require_react());
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var Chevron_1 = require_Chevron();
      var utils_1 = require_utils();
      var accordionSizeMap = { xs: "max-w-xs", sm: "max-w-sm", md: "max-w-md", lg: "max-w-lg", xl: "max-w-xl", auto: "w-full" };
      var chevronColorMap = { danger: "text-danger-700", info: "text-info-700", primary: "text-primary-700", secondary: "text-secondary-700", success: "text-success-700", warning: "text-warning-700" };
      var accentColorMap = { danger: "border-danger-600", info: "border-info-600", primary: "border-primary-600", secondary: "border-secondary-600", success: "border-success-600", warning: "border-warning-600" };
      function Accordion(_a) {
        var title = _a.title, _b = _a.collapseOthers, collapseOthers = _b === void 0 ? false : _b, items = _a.items, _c = _a.size, size = _c === void 0 ? "auto" : _c, _d = _a.type, type = _d === void 0 ? "secondary" : _d, className = _a.className, style = _a.style, contentMaxHeigh = _a.contentMaxHeigh;
        var _e = (0, react_1.useState)(Date.now()), openId = _e[0], setOpenId = _e[1];
        var onOpen = function(id) {
          return setOpenId(id);
        };
        return react_2.default.createElement(
          "main",
          { className: (0, classnames_1.default)(accordionSizeMap[size], className), style },
          react_2.default.createElement(
            "div",
            { className: "w-full my-1" },
            title && react_2.default.createElement("h2", { className: "text-xl font-semibold mb-2" }, title),
            react_2.default.createElement("ul", { className: "flex flex-col" }, items.map(function(itm, i4) {
              return react_2.default.createElement(AccordionItem, (0, tslib_1.__assign)({}, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, itm), { collapseOthers, onOpen, openId, type, contentMaxHeigh }), { key: i4 }));
            }))
          )
        );
      }
      exports.Accordion = Accordion;
      var AccordionItem = function(_a) {
        var title = _a.title, content = _a.content, onOpen = _a.onOpen, openId = _a.openId, collapseOthers = _a.collapseOthers, type = _a.type, onClick = _a.onClick, p2 = (0, tslib_1.__rest)(_a, ["title", "content", "onOpen", "openId", "collapseOthers", "type", "onClick"]);
        var _b = (0, react_1.useState)(openId), id = _b[0], setId = _b[1];
        var _c = (0, react_1.useState)(false), isOpen = _c[0], setIsOpen = _c[1];
        (0, react_1.useEffect)(function() {
          if (openId !== id) {
            setId(openId);
            setIsOpen(false);
          }
        }, [openId]);
        var handleClick = function(e) {
          if (!isOpen) {
            var newId = Date.now();
            setId(newId);
            if (collapseOthers)
              onOpen(newId);
          }
          setIsOpen(!isOpen);
          onClick === null || onClick === void 0 ? void 0 : onClick(e);
        };
        var open = (0, util_lib_1.isType)(p2.isOpen, "boolean") ? p2.isOpen : isOpen;
        return react_2.default.createElement(
          "li",
          { className: "bg-white my-2 shadow-lg" },
          react_2.default.createElement(
            "h2",
            { onClick: handleClick, className: "\r\n                flex flex-row justify-between items-center\r\n                font-semibold p-3 cursor-pointer\r\n            " },
            (0, util_lib_1.isType)(content, "string") ? react_2.default.createElement("span", null, title) : title,
            react_2.default.createElement(Chevron_1.Chevron, { direction: open ? "up" : "down", icon: 8, size: "sm", className: chevronColorMap[type] })
          ),
          react_2.default.createElement("div", { className: (0, classnames_1.default)("border-l-2 overflow-hidden max-h-0 duration-700 transition-all", utils_1.customScrollBar, accentColorMap[type], open && "max-h-96"), style: { maxHeight: !(0, util_lib_1.nonValue)(p2.contentMaxHeigh) && open ? p2.contentMaxHeigh : void 0 } }, (0, util_lib_1.isType)(content, "string") ? react_2.default.createElement("p", { className: "p-3 text-gray-900" }, content) : content)
        );
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Alert/AlertIcon.js
  var require_AlertIcon = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Alert/AlertIcon.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AlertIcon = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var icons = {
        primary: react_1.default.createElement("path", { d: "M16 8c0 3.866-3.582 7-8 7a9.06 9.06 0 0 1-2.347-.306c-.584.296-1.925.864-4.181 1.234-.2.032-.352-.176-.273-.362.354-.836.674-1.95.77-2.966C.744 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7zM5 8a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm4 0a1 1 0 1 0-2 0 1 1 0 0 0 2 0zm3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" }),
        danger: react_1.default.createElement("path", { d: "M11.46.146A.5.5 0 0 0 11.107 0H4.893a.5.5 0 0 0-.353.146L.146 4.54A.5.5 0 0 0 0 4.893v6.214a.5.5 0 0 0 .146.353l4.394 4.394a.5.5 0 0 0 .353.146h6.214a.5.5 0 0 0 .353-.146l4.394-4.394a.5.5 0 0 0 .146-.353V4.893a.5.5 0 0 0-.146-.353L11.46.146zM8 4c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 4.995A.905.905 0 0 1 8 4zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" }),
        info: react_1.default.createElement("path", { d: "M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm.93-9.412-1 4.705c-.07.34.029.533.304.533.194 0 .487-.07.686-.246l-.088.416c-.287.346-.92.598-1.465.598-.703 0-1.002-.422-.808-1.319l.738-3.468c.064-.293.006-.399-.287-.47l-.451-.081.082-.381 2.29-.287zM8 5.5a1 1 0 1 1 0-2 1 1 0 0 1 0 2z" }),
        secondary: react_1.default.createElement("path", { d: "M6 .278a.768.768 0 0 1 .08.858 7.208 7.208 0 0 0-.878 3.46c0 4.021 3.278 7.277 7.318 7.277.527 0 1.04-.055 1.533-.16a.787.787 0 0 1 .81.316.733.733 0 0 1-.031.893A8.349 8.349 0 0 1 8.344 16C3.734 16 0 12.286 0 7.71 0 4.266 2.114 1.312 5.124.06A.752.752 0 0 1 6 .278z" }),
        success: react_1.default.createElement("path", { d: "M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" }),
        warning: react_1.default.createElement("path", { d: "M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" })
      };
      var AlertIcon = function(p2) {
        return react_1.default.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 16 16", height: "1em", width: "1em", xmlns: "http://www.w3.org/2000/svg", className: "flex-shrink-0 w-6 h-6" }, icons[p2.type]);
      };
      exports.AlertIcon = AlertIcon;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Alert/Alert.js
  var require_Alert = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Alert/Alert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Alert = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var AlertIcon_1 = require_AlertIcon();
      var AlertColorMap = { primary: "text-primary-600", secondary: "text-secondary-600", info: "text-info-600", warning: "text-warning-600", danger: "text-danger-600", success: "text-success-600" };
      var AlertTextColor = { primary: "text-primary-900", secondary: "text-secondary-900", info: "text-info-900", warning: "text-warning-900", danger: "text-danger-900", success: "text-success-900" };
      var Alert = (
        /** @class */
        function(_super) {
          (0, tslib_1.__extends)(Alert2, _super);
          function Alert2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
              botW: 100,
              isClosing: false,
              isClosed: false,
              isHover: false,
              transitionDuration: void 0
            };
            _this.closingDebounce = (0, util_lib_1.debounceTimeOut)();
            _this.handleMouseHover = function(isHover) {
              var timeoutMs = _this.props.timeoutMs;
              var isTO = !(0, util_lib_1.nonValue)(timeoutMs);
              if (isTO && !isHover) {
                _this.closingDebounce(_this.startClosing, timeoutMs);
              } else if (isHover) {
                _this.closingDebounce("cancel");
              }
              _this.setState(isHover ? { isClosing: false, botW: 100, isHover } : { isHover, botW: isTO ? 0 : 100 });
            };
            _this.startClosing = function() {
              _this.setState({ isClosing: true });
              _this.closingDebounce(_this.close, 700);
            };
            _this.close = function() {
              _this.props.onClose && _this.props.onClose();
              _this.setState({ isClosed: true });
            };
            _this.componentWillUnmount = function() {
              return _this.closingDebounce("cancel");
            };
            _this.render = function() {
              var _a = _this.props, title = _a.title, text = _a.text, type = _a.type, className = _a.className, style = _a.style;
              var _b = _this.state, isHover = _b.isHover, isClosing = _b.isClosing, botW = _b.botW, botTime = _b.transitionDuration, isClosed = _b.isClosed;
              var transitionDuration = isHover ? void 0 : botTime;
              var containerClassName = (0, classnames_1.default)("bg-white border border-current border-b-0 rounded-lg flex flex-col overflow-hidden transition-opacity duration-700", { "opacity-0": isClosing }, AlertColorMap[type], className);
              return isClosed ? null : react_1.default.createElement(
                "div",
                { className: containerClassName, style, onMouseEnter: function() {
                  return _this.handleMouseHover(true);
                }, onMouseLeave: function() {
                  return _this.handleMouseHover(false);
                } },
                react_1.default.createElement(
                  "div",
                  { className: "p-1 flex w-full overflow-hidden mx-auto" },
                  react_1.default.createElement(
                    "div",
                    { className: "pt-2 ml-3" },
                    react_1.default.createElement(AlertIcon_1.AlertIcon, { type })
                  ),
                  react_1.default.createElement(
                    "div",
                    { className: "w-full flex justify-between items-start px-0 py-2" },
                    react_1.default.createElement(
                      "div",
                      { className: "ml-3" },
                      react_1.default.createElement("p", { className: "font-bold" }, title),
                      text && react_1.default.createElement("p", { className: "mt-1 text-sm ".concat(AlertTextColor[type]) }, text)
                    ),
                    react_1.default.createElement(
                      "a",
                      { className: "mr-1 cursor-pointer", onClick: _this.close },
                      react_1.default.createElement(
                        "svg",
                        { xmlns: "http://www.w3.org/2000/svg", className: "h-6 w-6 text-gray-500", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor" },
                        react_1.default.createElement("path", { "stroke-linecap": "round", "stroke-linejoin": "round", strokeWidth: "2", d: "M6 18L18 6M6 6l12 12" })
                      )
                    )
                  )
                ),
                react_1.default.createElement("span", { className: "border-b-4 border-current transition-all ease-linear", style: { width: "".concat(botW, "%"), transitionDuration } })
              );
            };
            return _this;
          }
          Alert2.prototype.componentDidMount = function() {
            var _this = this;
            var timeoutMs = this.props.timeoutMs;
            if (!(0, util_lib_1.nonValue)(timeoutMs)) {
              this.setState({ transitionDuration: "".concat(timeoutMs, "ms") });
              setTimeout(function() {
                return _this.setState({ botW: 0 });
              }, 0);
              this.closingDebounce(this.startClosing, timeoutMs);
            }
          };
          return Alert2;
        }(react_1.Component)
      );
      exports.Alert = Alert;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Badge/Badge.js
  var require_Badge = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Badge/Badge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Badge = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var badgeSize = { xs: "h-2 min-w-2", sm: "h-3 min-w-3", md: "h-4 min-w-4", lg: "h-6 min-w-6", xl: "h-12 min-w-12" };
      var badgeFontSize = { md: "text-xs", lg: "text-base", xl: "text-2xl" };
      var Badge = function(_a) {
        var size = _a.size, badge = _a.badge, className = _a.className;
        return badge ? react_1.default.createElement("div", { className: (0, classnames_1.default)("bg-info-600 rounded-full absolute top-0 right-0 pl-1 pr-1 flex justify-center text-gray-100", badgeSize[size], className) }, (0, util_lib_1.isType)(badge, "number") && size !== "sm" && size !== "xs" && react_1.default.createElement("span", { className: "m-auto ".concat(badgeFontSize[size]) }, badge > 999 ? "+999" : badge)) : null;
      };
      exports.Badge = Badge;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Spinner/SpinnerIcons.js
  var require_SpinnerIcons = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Spinner/SpinnerIcons.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.spinnersSvg = void 0;
      exports.spinnersSvg = [
        '<svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path opacity="0.2" fill-rule="evenodd" clip-rule="evenodd" d="M12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="currentColor"/><path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="currentColor"/></svg>',
        '<svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path opacity="0.2" fill-rule="evenodd" clip-rule="evenodd" d="M12 19C15.866 19 19 15.866 19 12C19 8.13401 15.866 5 12 5C8.13401 5 5 8.13401 5 12C5 15.866 8.13401 19 12 19ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" fill="currentColor"/><path d="M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z" fill="currentColor"/><path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="currentColor"/></svg>',
        '<svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M12 22C17.5228 22 22 17.5228 22 12H19C19 15.866 15.866 19 12 19V22Z" fill="currentColor"/><path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="currentColor"/></svg>',
        '<svg stroke="currentColor" fill="none" stroke-width="0" viewBox="0 0 24 24" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M2 12C2 6.47715 6.47715 2 12 2V5C8.13401 5 5 8.13401 5 12H2Z" fill="currentColor"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 6h-6l2.243-2.243c-1.133-1.133-2.64-1.757-4.243-1.757s-3.109 0.624-4.243 1.757c-1.133 1.133-1.757 2.64-1.757 4.243s0.624 3.109 1.757 4.243c1.133 1.133 2.64 1.757 4.243 1.757s3.109-0.624 4.243-1.757c0.095-0.095 0.185-0.192 0.273-0.292l1.505 1.317c-1.466 1.674-3.62 2.732-6.020 2.732-4.418 0-8-3.582-8-8s3.582-8 8-8c2.209 0 4.209 0.896 5.656 2.344l2.343-2.344v6z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M0.001 8.025l-0 0c0 0 0 0.001 0 0.003 0.002 0.061 0.009 0.12 0.021 0.177 0.003 0.027 0.007 0.057 0.011 0.090 0.003 0.029 0.007 0.061 0.011 0.095 0.006 0.040 0.012 0.083 0.019 0.128 0.013 0.090 0.028 0.189 0.045 0.296 0.021 0.101 0.044 0.21 0.068 0.326 0.011 0.058 0.028 0.117 0.044 0.178s0.032 0.123 0.049 0.188c0.009 0.032 0.016 0.065 0.027 0.097s0.021 0.065 0.031 0.098 0.043 0.134 0.065 0.203c0.006 0.017 0.011 0.035 0.017 0.052s0.013 0.034 0.019 0.052 0.026 0.070 0.039 0.105c0.027 0.070 0.053 0.142 0.081 0.215 0.031 0.071 0.062 0.144 0.094 0.218 0.016 0.037 0.032 0.074 0.048 0.111s0.035 0.073 0.053 0.111 0.073 0.148 0.11 0.224c0.039 0.075 0.081 0.149 0.123 0.224 0.021 0.037 0.042 0.075 0.063 0.113s0.045 0.074 0.068 0.112 0.093 0.149 0.14 0.224c0.198 0.295 0.417 0.587 0.66 0.864 0.245 0.275 0.511 0.535 0.792 0.775 0.284 0.236 0.582 0.452 0.886 0.642 0.306 0.188 0.619 0.349 0.928 0.487 0.078 0.032 0.156 0.063 0.232 0.095 0.038 0.015 0.076 0.032 0.115 0.046s0.077 0.027 0.115 0.041 0.151 0.054 0.226 0.078c0.075 0.022 0.15 0.044 0.224 0.066 0.037 0.011 0.073 0.022 0.109 0.031s0.073 0.018 0.109 0.027 0.143 0.035 0.213 0.052c0.070 0.014 0.139 0.027 0.207 0.040 0.034 0.006 0.067 0.013 0.101 0.019 0.017 0.003 0.033 0.006 0.049 0.009s0.033 0.005 0.049 0.007c0.066 0.009 0.13 0.018 0.192 0.027 0.031 0.004 0.062 0.009 0.093 0.013s0.061 0.006 0.091 0.009 0.118 0.010 0.174 0.015c0.056 0.005 0.111 0.011 0.164 0.012 0.004 0 0.007 0 0.011 0 0.010 0.544 0.453 0.982 1 0.982 0.008 0 0.017-0 0.025-0.001v0c0 0 0.001-0 0.004-0 0.061-0.002 0.12-0.009 0.177-0.021 0.027-0.003 0.057-0.007 0.090-0.011 0.029-0.003 0.061-0.007 0.095-0.011 0.040-0.006 0.083-0.012 0.128-0.019 0.090-0.013 0.189-0.028 0.296-0.045 0.101-0.021 0.21-0.044 0.326-0.068 0.058-0.011 0.117-0.028 0.178-0.044s0.123-0.033 0.188-0.049c0.032-0.009 0.065-0.016 0.097-0.027s0.065-0.021 0.098-0.031 0.134-0.043 0.203-0.065c0.017-0.006 0.035-0.011 0.052-0.017s0.034-0.013 0.052-0.019 0.070-0.026 0.105-0.039c0.070-0.027 0.142-0.053 0.215-0.081 0.071-0.031 0.144-0.062 0.218-0.094 0.037-0.016 0.074-0.032 0.111-0.048s0.073-0.035 0.111-0.053 0.148-0.073 0.224-0.11c0.075-0.039 0.149-0.081 0.224-0.123 0.037-0.021 0.075-0.042 0.113-0.063s0.074-0.045 0.112-0.068 0.149-0.093 0.224-0.14c0.295-0.197 0.587-0.417 0.864-0.66 0.275-0.245 0.535-0.511 0.775-0.792 0.236-0.284 0.452-0.582 0.642-0.886 0.188-0.306 0.349-0.619 0.487-0.928 0.032-0.078 0.063-0.156 0.095-0.232 0.015-0.038 0.032-0.076 0.046-0.115s0.027-0.077 0.040-0.115 0.054-0.151 0.078-0.226c0.022-0.075 0.044-0.15 0.066-0.224 0.011-0.037 0.022-0.073 0.031-0.109s0.018-0.073 0.027-0.109 0.035-0.143 0.052-0.213c0.014-0.070 0.027-0.139 0.040-0.207 0.006-0.034 0.013-0.067 0.019-0.101 0.003-0.017 0.006-0.033 0.009-0.049s0.005-0.033 0.007-0.050c0.009-0.065 0.018-0.13 0.027-0.192 0.004-0.031 0.009-0.062 0.013-0.093s0.006-0.061 0.009-0.091 0.010-0.118 0.015-0.174c0.005-0.056 0.011-0.111 0.012-0.165 0-0.008 0.001-0.016 0.001-0.025 0.55-0.002 0.996-0.449 0.996-1 0-0.008-0-0.017-0.001-0.025h0c0 0-0-0.001-0-0.003-0.002-0.061-0.009-0.12-0.021-0.177-0.003-0.027-0.007-0.057-0.011-0.090-0.003-0.029-0.007-0.061-0.011-0.095-0.006-0.040-0.012-0.083-0.019-0.128-0.013-0.090-0.028-0.189-0.045-0.296-0.021-0.101-0.044-0.21-0.068-0.326-0.011-0.058-0.028-0.117-0.044-0.178s-0.032-0.123-0.049-0.188c-0.009-0.032-0.016-0.065-0.027-0.097s-0.021-0.065-0.031-0.098-0.043-0.134-0.065-0.203c-0.005-0.017-0.011-0.035-0.017-0.052s-0.013-0.034-0.019-0.052-0.026-0.070-0.039-0.105c-0.027-0.070-0.053-0.142-0.081-0.215-0.031-0.071-0.062-0.144-0.094-0.218-0.016-0.037-0.032-0.074-0.048-0.111s-0.035-0.073-0.053-0.111-0.073-0.148-0.11-0.224c-0.039-0.075-0.081-0.149-0.123-0.224-0.021-0.037-0.042-0.075-0.063-0.113s-0.045-0.074-0.068-0.112-0.093-0.149-0.14-0.224c-0.197-0.295-0.417-0.587-0.66-0.864-0.245-0.275-0.511-0.535-0.792-0.775-0.284-0.236-0.582-0.452-0.886-0.642-0.306-0.188-0.619-0.349-0.928-0.487-0.078-0.032-0.156-0.063-0.232-0.095-0.038-0.015-0.076-0.032-0.115-0.046s-0.077-0.027-0.115-0.040-0.151-0.054-0.226-0.078c-0.075-0.022-0.15-0.044-0.224-0.066-0.037-0.010-0.073-0.022-0.109-0.031s-0.073-0.018-0.109-0.027-0.143-0.035-0.213-0.052c-0.070-0.014-0.139-0.027-0.207-0.040-0.034-0.006-0.067-0.013-0.101-0.019-0.017-0.003-0.033-0.006-0.049-0.009s-0.033-0.005-0.049-0.007c-0.066-0.009-0.13-0.018-0.192-0.027-0.031-0.004-0.062-0.009-0.093-0.013s-0.061-0.006-0.091-0.009-0.118-0.010-0.174-0.015c-0.056-0.005-0.111-0.011-0.164-0.012-0.013-0-0.026-0.001-0.039-0.001-0.010-0.543-0.454-0.981-0.999-0.981-0.008 0-0.017 0-0.025 0.001l-0-0c0 0-0.001 0-0.003 0-0.061 0.002-0.12 0.009-0.177 0.021-0.027 0.003-0.057 0.007-0.090 0.011-0.029 0.003-0.061 0.007-0.095 0.011-0.040 0.006-0.083 0.012-0.128 0.019-0.090 0.013-0.189 0.028-0.296 0.045-0.101 0.021-0.21 0.044-0.326 0.068-0.058 0.011-0.117 0.028-0.178 0.044s-0.123 0.033-0.188 0.049c-0.032 0.009-0.065 0.016-0.097 0.027s-0.065 0.021-0.098 0.031-0.134 0.043-0.203 0.065c-0.017 0.006-0.035 0.011-0.052 0.017s-0.034 0.013-0.052 0.019-0.070 0.026-0.105 0.039c-0.070 0.027-0.142 0.053-0.215 0.081-0.071 0.031-0.144 0.062-0.218 0.094-0.037 0.016-0.074 0.032-0.111 0.048s-0.073 0.035-0.111 0.053-0.148 0.073-0.224 0.11c-0.075 0.039-0.149 0.081-0.224 0.123-0.037 0.021-0.075 0.042-0.113 0.063s-0.074 0.045-0.112 0.068-0.149 0.093-0.224 0.14c-0.295 0.198-0.587 0.417-0.864 0.66-0.275 0.245-0.535 0.511-0.775 0.792-0.236 0.284-0.452 0.582-0.642 0.886-0.188 0.306-0.349 0.619-0.487 0.928-0.032 0.078-0.063 0.156-0.095 0.232-0.015 0.038-0.032 0.076-0.046 0.115s-0.027 0.077-0.040 0.115-0.054 0.151-0.078 0.226c-0.022 0.075-0.044 0.15-0.066 0.224-0.011 0.037-0.022 0.073-0.032 0.109s-0.018 0.073-0.027 0.109-0.035 0.143-0.052 0.213c-0.014 0.070-0.027 0.139-0.040 0.207-0.006 0.034-0.013 0.067-0.019 0.101-0.003 0.017-0.006 0.033-0.009 0.049s-0.005 0.033-0.007 0.050c-0.009 0.065-0.018 0.13-0.027 0.192-0.004 0.031-0.009 0.062-0.013 0.093s-0.006 0.061-0.009 0.091-0.010 0.118-0.015 0.174c-0.005 0.056-0.011 0.111-0.012 0.165-0 0.009-0.001 0.017-0.001 0.025-0.537 0.017-0.967 0.458-0.967 0.999 0 0.008 0 0.017 0.001 0.025zM1.149 7.011c0.001-0.003 0.001-0.006 0.002-0.009 0.010-0.051 0.026-0.102 0.040-0.155s0.030-0.107 0.045-0.163c0.008-0.028 0.015-0.056 0.024-0.084s0.019-0.057 0.028-0.086 0.038-0.116 0.058-0.176c0.005-0.015 0.010-0.030 0.015-0.045s0.012-0.030 0.017-0.045 0.023-0.060 0.035-0.091 0.048-0.123 0.073-0.186c0.028-0.062 0.056-0.125 0.084-0.189 0.014-0.032 0.028-0.064 0.043-0.096s0.032-0.064 0.048-0.096 0.065-0.128 0.098-0.194c0.034-0.065 0.073-0.128 0.109-0.194 0.018-0.032 0.037-0.065 0.056-0.098s0.040-0.064 0.061-0.096c0.041-0.064 0.082-0.129 0.124-0.194 0.176-0.255 0.369-0.506 0.583-0.744 0.217-0.236 0.451-0.459 0.697-0.665 0.25-0.202 0.511-0.385 0.776-0.547 0.268-0.159 0.541-0.294 0.808-0.41 0.068-0.027 0.135-0.053 0.202-0.079 0.033-0.013 0.066-0.027 0.099-0.038s0.067-0.022 0.1-0.033 0.131-0.045 0.196-0.065c0.065-0.018 0.13-0.036 0.194-0.054 0.032-0.009 0.063-0.019 0.095-0.026s0.063-0.014 0.094-0.021 0.123-0.028 0.184-0.042c0.061-0.011 0.12-0.021 0.179-0.032 0.029-0.005 0.058-0.010 0.087-0.015 0.014-0.003 0.029-0.005 0.043-0.008s0.029-0.003 0.043-0.005c0.056-0.007 0.112-0.014 0.166-0.020 0.027-0.003 0.053-0.007 0.080-0.010s0.053-0.004 0.078-0.006 0.102-0.007 0.15-0.011c0.049-0.003 0.095-0.008 0.142-0.008 0.091-0.002 0.177-0.004 0.256-0.006 0.073 0.003 0.14 0.005 0.2 0.007 0.030 0.001 0.058 0.002 0.085 0.002 0.033 0.002 0.064 0.004 0.093 0.006 0.033 0.002 0.063 0.004 0.091 0.006 0.051 0.008 0.103 0.012 0.156 0.012 0.007 0 0.015-0 0.022-0.001 0.002 0 0.004 0 0.004 0v-0c0.487-0.012 0.887-0.372 0.962-0.84 0.008 0.002 0.017 0.004 0.025 0.006 0.051 0.010 0.102 0.026 0.155 0.040s0.107 0.030 0.163 0.045c0.028 0.008 0.056 0.015 0.084 0.024s0.057 0.019 0.086 0.028 0.116 0.038 0.176 0.058c0.015 0.005 0.030 0.010 0.045 0.015s0.030 0.012 0.045 0.017 0.060 0.023 0.091 0.035 0.123 0.048 0.186 0.073c0.062 0.028 0.125 0.056 0.189 0.084 0.032 0.014 0.064 0.028 0.096 0.043s0.064 0.032 0.096 0.048 0.128 0.065 0.194 0.098c0.065 0.034 0.129 0.073 0.194 0.109 0.032 0.018 0.065 0.037 0.098 0.056s0.064 0.040 0.096 0.061 0.129 0.082 0.194 0.124c0.255 0.176 0.506 0.369 0.744 0.583 0.236 0.217 0.459 0.451 0.665 0.697 0.202 0.25 0.385 0.511 0.547 0.776 0.159 0.268 0.294 0.541 0.41 0.808 0.027 0.068 0.053 0.135 0.079 0.202 0.013 0.033 0.027 0.066 0.038 0.099s0.022 0.067 0.033 0.1 0.045 0.131 0.065 0.196c0.018 0.065 0.036 0.13 0.054 0.194 0.009 0.032 0.019 0.063 0.026 0.095s0.014 0.063 0.021 0.094 0.028 0.123 0.042 0.184c0.011 0.061 0.021 0.12 0.032 0.179 0.005 0.029 0.010 0.058 0.015 0.087 0.003 0.014 0.005 0.029 0.008 0.043s0.003 0.029 0.005 0.043c0.007 0.056 0.014 0.112 0.020 0.166 0.003 0.027 0.007 0.053 0.010 0.080s0.004 0.053 0.006 0.078 0.007 0.102 0.011 0.15c0.003 0.049 0.008 0.095 0.008 0.142 0.002 0.091 0.004 0.177 0.006 0.256-0.003 0.073-0.005 0.14-0.007 0.2-0.001 0.030-0.002 0.058-0.002 0.085-0.002 0.033-0.004 0.064-0.006 0.093-0.002 0.033-0.004 0.063-0.006 0.091-0.008 0.051-0.012 0.103-0.012 0.156 0 0.007 0 0.015 0.001 0.022-0 0.002-0 0.004-0 0.004h0c0.012 0.481 0.363 0.877 0.823 0.959-0.001 0.005-0.002 0.009-0.003 0.014-0.010 0.051-0.025 0.102-0.040 0.155s-0.030 0.107-0.045 0.163c-0.008 0.028-0.015 0.056-0.024 0.084s-0.019 0.057-0.028 0.086-0.039 0.116-0.058 0.176c-0.005 0.015-0.010 0.030-0.015 0.045s-0.012 0.030-0.017 0.045-0.023 0.060-0.035 0.091-0.048 0.123-0.073 0.186c-0.028 0.062-0.056 0.125-0.084 0.189-0.014 0.032-0.028 0.064-0.043 0.096s-0.032 0.064-0.048 0.096-0.065 0.128-0.098 0.194c-0.034 0.065-0.073 0.129-0.109 0.194-0.018 0.032-0.037 0.065-0.056 0.098s-0.040 0.064-0.061 0.096-0.082 0.129-0.124 0.194c-0.176 0.255-0.369 0.506-0.583 0.744-0.217 0.236-0.451 0.459-0.697 0.665-0.25 0.202-0.511 0.385-0.776 0.547-0.268 0.159-0.541 0.294-0.808 0.41-0.068 0.027-0.135 0.053-0.202 0.079-0.033 0.013-0.066 0.027-0.099 0.038s-0.067 0.022-0.1 0.033-0.131 0.045-0.196 0.065c-0.065 0.018-0.13 0.036-0.194 0.054-0.032 0.009-0.063 0.019-0.095 0.026s-0.063 0.014-0.094 0.021-0.123 0.028-0.184 0.042c-0.061 0.011-0.12 0.021-0.179 0.032-0.029 0.005-0.058 0.010-0.087 0.015-0.014 0.003-0.028 0.005-0.043 0.008s-0.029 0.003-0.043 0.005c-0.056 0.007-0.112 0.014-0.166 0.020-0.027 0.003-0.053 0.007-0.080 0.010s-0.053 0.004-0.078 0.006-0.102 0.007-0.15 0.011c-0.049 0.003-0.095 0.008-0.142 0.008-0.091 0.002-0.177 0.004-0.256 0.006-0.073-0.003-0.14-0.005-0.2-0.007-0.030-0.001-0.058-0.002-0.085-0.002-0.033-0.002-0.064-0.004-0.093-0.006-0.033-0.002-0.063-0.004-0.091-0.006-0.051-0.008-0.103-0.012-0.156-0.012-0.007 0-0.015 0-0.022 0.001-0.002-0-0.003-0-0.003-0v0c-0.484 0.012-0.883 0.369-0.961 0.834-0.050-0.010-0.101-0.025-0.153-0.039s-0.107-0.030-0.163-0.045c-0.028-0.008-0.056-0.015-0.084-0.024s-0.057-0.019-0.086-0.028-0.116-0.039-0.176-0.058c-0.015-0.005-0.030-0.010-0.045-0.015s-0.030-0.012-0.045-0.017-0.060-0.023-0.091-0.035-0.123-0.048-0.186-0.073c-0.062-0.028-0.125-0.056-0.189-0.084-0.032-0.014-0.064-0.028-0.096-0.043s-0.064-0.032-0.096-0.048-0.128-0.065-0.194-0.098c-0.065-0.034-0.129-0.073-0.194-0.109-0.032-0.018-0.065-0.037-0.098-0.056s-0.064-0.040-0.096-0.061c-0.064-0.041-0.129-0.082-0.194-0.124-0.255-0.175-0.506-0.369-0.744-0.583-0.236-0.217-0.459-0.451-0.665-0.697-0.202-0.25-0.385-0.511-0.547-0.776-0.159-0.268-0.294-0.541-0.41-0.808-0.027-0.068-0.053-0.135-0.079-0.202-0.013-0.033-0.027-0.066-0.038-0.099s-0.022-0.067-0.033-0.1-0.045-0.131-0.065-0.196c-0.018-0.065-0.036-0.13-0.054-0.194-0.009-0.032-0.019-0.063-0.026-0.095s-0.014-0.063-0.021-0.094-0.028-0.123-0.042-0.184c-0.011-0.061-0.021-0.12-0.032-0.179-0.005-0.029-0.010-0.058-0.015-0.087-0.003-0.014-0.005-0.028-0.008-0.043s-0.003-0.029-0.005-0.043c-0.007-0.056-0.014-0.112-0.020-0.166-0.003-0.027-0.007-0.053-0.010-0.080s-0.004-0.053-0.006-0.078-0.007-0.101-0.011-0.15c-0.003-0.049-0.008-0.095-0.008-0.142-0.002-0.091-0.004-0.177-0.006-0.256 0.003-0.073 0.005-0.14 0.007-0.2 0.001-0.030 0.002-0.058 0.002-0.085 0.002-0.033 0.004-0.064 0.006-0.093 0.002-0.033 0.004-0.063 0.006-0.091 0.008-0.051 0.012-0.103 0.012-0.156 0-0.007-0-0.015-0.001-0.022 0-0.002 0-0.003 0-0.003h-0c-0.012-0.49-0.377-0.893-0.851-0.964z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M8 0c-4.355 0-7.898 3.481-7.998 7.812 0.092-3.779 2.966-6.812 6.498-6.812 3.59 0 6.5 3.134 6.5 7 0 0.828 0.672 1.5 1.5 1.5s1.5-0.672 1.5-1.5c0-4.418-3.582-8-8-8zM8 16c4.355 0 7.898-3.481 7.998-7.812-0.092 3.779-2.966 6.812-6.498 6.812-3.59 0-6.5-3.134-6.5-7 0-0.828-0.672-1.5-1.5-1.5s-1.5 0.672-1.5 1.5c0 4.418 3.582 8 8 8z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M8 0c-4.418 0-8 3.582-8 8s3.582 8 8 8 8-3.582 8-8-3.582-8-8-8zM8 4c2.209 0 4 1.791 4 4s-1.791 4-4 4-4-1.791-4-4 1.791-4 4-4zM12.773 12.773c-1.275 1.275-2.97 1.977-4.773 1.977s-3.498-0.702-4.773-1.977-1.977-2.97-1.977-4.773c0-1.803 0.702-3.498 1.977-4.773l1.061 1.061c0 0 0 0 0 0-2.047 2.047-2.047 5.378 0 7.425 0.992 0.992 2.31 1.538 3.712 1.538s2.721-0.546 3.712-1.538c2.047-2.047 2.047-5.378 0-7.425l1.061-1.061c1.275 1.275 1.977 2.97 1.977 4.773s-0.702 3.498-1.977 4.773z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M3 8c0-0.19 0.011-0.378 0.032-0.563l-2.89-0.939c-0.092 0.487-0.141 0.989-0.141 1.502 0 2.3 0.971 4.374 2.526 5.833l1.786-2.458c-0.814-0.889-1.312-2.074-1.312-3.375zM13 8c0 1.301-0.497 2.486-1.312 3.375l1.786 2.458c1.555-1.459 2.526-3.533 2.526-5.833 0-0.513-0.049-1.015-0.141-1.502l-2.89 0.939c0.021 0.185 0.032 0.373 0.032 0.563zM9 3.1c1.436 0.292 2.649 1.199 3.351 2.435l2.89-0.939c-1.144-2.428-3.473-4.188-6.241-4.534v3.038zM3.649 5.535c0.702-1.236 1.914-2.143 3.351-2.435v-3.038c-2.769 0.345-5.097 2.105-6.241 4.534l2.89 0.939zM10.071 12.552c-0.631 0.288-1.332 0.448-2.071 0.448s-1.44-0.16-2.071-0.448l-1.786 2.458c1.144 0.631 2.458 0.99 3.857 0.99s2.713-0.359 3.857-0.99l-1.786-2.458z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M16 8c-0.020-1.045-0.247-2.086-0.665-3.038-0.417-0.953-1.023-1.817-1.766-2.53s-1.624-1.278-2.578-1.651c-0.953-0.374-1.978-0.552-2.991-0.531-1.013 0.020-2.021 0.24-2.943 0.646-0.923 0.405-1.758 0.992-2.449 1.712s-1.237 1.574-1.597 2.497c-0.361 0.923-0.533 1.914-0.512 2.895 0.020 0.981 0.234 1.955 0.627 2.847 0.392 0.892 0.961 1.7 1.658 2.368s1.523 1.195 2.416 1.543c0.892 0.348 1.851 0.514 2.799 0.493 0.949-0.020 1.89-0.227 2.751-0.608 0.862-0.379 1.642-0.929 2.287-1.604s1.154-1.472 1.488-2.335c0.204-0.523 0.342-1.069 0.415-1.622 0.019 0.001 0.039 0.002 0.059 0.002 0.552 0 1-0.448 1-1 0-0.028-0.001-0.056-0.004-0.083h0.004zM14.411 10.655c-0.367 0.831-0.898 1.584-1.55 2.206s-1.422 1.112-2.254 1.434c-0.832 0.323-1.723 0.476-2.608 0.454-0.884-0.020-1.759-0.215-2.56-0.57-0.801-0.354-1.526-0.867-2.125-1.495s-1.071-1.371-1.38-2.173c-0.31-0.801-0.457-1.66-0.435-2.512s0.208-1.694 0.551-2.464c0.342-0.77 0.836-1.468 1.441-2.044s1.321-1.029 2.092-1.326c0.771-0.298 1.596-0.438 2.416-0.416s1.629 0.202 2.368 0.532c0.74 0.329 1.41 0.805 1.963 1.387s0.988 1.27 1.272 2.011c0.285 0.74 0.418 1.532 0.397 2.32h0.004c-0.002 0.027-0.004 0.055-0.004 0.083 0 0.516 0.39 0.94 0.892 0.994-0.097 0.544-0.258 1.075-0.481 1.578z"/></svg>',
        '<svg stroke="currentColor" fill="currentColor" stroke-width="0" version="1.1" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M8 16c-2.137 0-4.146-0.832-5.657-2.343s-2.343-3.52-2.343-5.657c0-1.513 0.425-2.986 1.228-4.261 0.781-1.239 1.885-2.24 3.193-2.895l0.672 1.341c-1.063 0.533-1.961 1.347-2.596 2.354-0.652 1.034-0.997 2.231-0.997 3.461 0 3.584 2.916 6.5 6.5 6.5s6.5-2.916 6.5-6.5c0-1.23-0.345-2.426-0.997-3.461-0.635-1.008-1.533-1.822-2.596-2.354l0.672-1.341c1.308 0.655 2.412 1.656 3.193 2.895 0.803 1.274 1.228 2.748 1.228 4.261 0 2.137-0.832 4.146-2.343 5.657s-3.52 2.343-5.657 2.343z"/></svg>'
      ];
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Spinner/Spinner.js
  var require_Spinner = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Spinner/Spinner.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Spinner = exports.spinnerSizeMap = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var SpinnerIcons_1 = require_SpinnerIcons();
      exports.spinnerSizeMap = {
        xs: "h-6 w-6",
        sm: "h-9 w-9",
        md: "h-16 w-16",
        lg: "h-32 w-32",
        xl: "h-64 w-64",
        auto: "h-full w-full"
      };
      var Spinner = function(_a) {
        var _b = _a.type, type = _b === void 0 ? 1 : _b, _c = _a.size, size = _c === void 0 ? "auto" : _c, className = _a.className;
        return react_1.default.createElement("div", { className: (0, classnames_1.default)("overflow-hidden", className, exports.spinnerSizeMap[size]) }, type === "pulse" ? react_1.default.createElement("div", { className: "bg-secondary-300 h-full w-full animate-pulse" }) : react_1.default.createElement("img", { src: "data:image/svg+xml;utf8,".concat(SpinnerIcons_1.spinnersSvg[type - 1]), className: "animate-spin h-full w-full" }));
      };
      exports.Spinner = Spinner;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Avatar/Avatar.js
  var require_Avatar = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Avatar/Avatar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AvatarInner = exports.Avatar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var Badge_1 = require_Badge();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var sizeMap = {
        xs: "h-6 w-6",
        sm: "h-9 w-9",
        md: "h-16 w-16",
        lg: "h-32 w-32",
        xl: "h-64 w-64",
        auto: "h-full w-full"
      };
      var Spinner_1 = require_Spinner();
      var Avatar2 = function(p2) {
        var dataState = p2.dataState, imgSrc = p2.imgSrc, backgroundColor = p2.backgroundColor, status = p2.status, badge = p2.badge, size = p2.size, onClick = p2.onClick, className = p2.className;
        var name2 = function() {
          if (dataState === "loading" || dataState === "error")
            return dataState === "error" ? "Couldn't Load User" : dataState === "loading" ? "Loading..." : "";
          if ((0, util_lib_1.isType)(p2.name, "string") || !p2.name)
            return p2.name || "";
          var _a = p2.name, first = _a.first, last = _a.last;
          return "".concat(first, " ").concat(last);
        }();
        return react_1.default.createElement(
          "div",
          { onClick, className: (0, classnames_1.default)("\n            flex relative justify-center items-center\n            m-1 mr-2 rounded-full text-white", sizeMap[size], !(backgroundColor || dataState === "loading") && "bg-secondary-500", dataState === "loading" && " overflow-hidden", onClick && "cursor-pointer", className), title: dataState === "error" ? "Couldn't Load User" : dataState === "loading" ? "Loading..." : name2, style: { backgroundColor } },
          react_1.default.createElement(exports.AvatarInner, (0, tslib_1.__assign)({}, { dataState, imgSrc, badge, size, status, name: name2 }))
        );
      };
      exports.Avatar = Avatar2;
      var avatarFontSize = { xs: "text-sm", sm: "text-xl", md: "text-4xl", lg: "text-7xl", xl: "text-9xl" };
      var AvatarInner = function(p2) {
        if (p2.dataState === "loading")
          return react_1.default.createElement(Spinner_1.Spinner, { size: "auto", type: "pulse" });
        if (p2.dataState === "error")
          return react_1.default.createElement("img", { src: "data:image/svg+xml;utf8,".concat(avatarErr), className: "rounded-full h-full w-full" });
        var imgSrc = p2.imgSrc, status = p2.status, badge = p2.badge, size = p2.size, _a = p2.name, name2 = _a === void 0 ? "" : _a;
        var _b = (0, react_1.useState)(imgSrc ? "loading" : "error"), imgStatus = _b[0], setImgStatus = _b[1];
        var initials = (0, util_lib_1.isType)(name2, "string") ? name2.substring(0, 2) : "".concat(name2.first[0].toUpperCase()).concat(name2.last[0].toUpperCase());
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement(Badge_1.Badge, { size, badge }),
          imgStatus === "error" ? react_1.default.createElement("span", { className: avatarFontSize[size] }, initials) : react_1.default.createElement("img", { className: "rounded-full h-full w-full", src: imgSrc, onLoad: function() {
            return setImgStatus("success");
          }, onError: function() {
            return setImgStatus("error");
          } }),
          status && react_1.default.createElement(Status, { size, status })
        );
      };
      exports.AvatarInner = AvatarInner;
      var statusSize = { xs: "h-2 w-2", sm: "h-3 w-3", md: "h-4 w-4", lg: "h-6 w-6", xl: "h-12 w-12" };
      var statusColor = { online: "bg-success-500", offline: "bg-danger-500", busy: "bg-warning-500", away: "bg-secondary-500" };
      var Status = function(p2) {
        return react_1.default.createElement(
          "span",
          { className: "flex absolute bottom-0 right-0" },
          p2.status === "online" && react_1.default.createElement("span", { className: "animate-ping absolute inline-flex h-full w-full rounded-full bg-success-400 opacity-75" }),
          react_1.default.createElement("span", { className: "relative inline-flex rounded-full ".concat(statusColor[p2.status], " ").concat(statusSize[p2.size]) })
        );
      };
      var avatarErr = '<svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 16 16" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg"><path d="M4.54.146A.5.5 0 0 1 4.893 0h6.214a.5.5 0 0 1 .353.146l4.394 4.394a.5.5 0 0 1 .146.353v6.214a.5.5 0 0 1-.146.353l-4.394 4.394a.5.5 0 0 1-.353.146H4.893a.5.5 0 0 1-.353-.146L.146 11.46A.5.5 0 0 1 0 11.107V4.893a.5.5 0 0 1 .146-.353L4.54.146zM5.1 1 1 5.1v5.8L5.1 15h5.8l4.1-4.1V5.1L10.9 1H5.1z"/><path d="M5.255 5.786a.237.237 0 0 0 .241.247h.825c.138 0 .248-.113.266-.25.09-.656.54-1.134 1.342-1.134.686 0 1.314.343 1.314 1.168 0 .635-.374.927-.965 1.371-.673.489-1.206 1.06-1.168 1.987l.003.217a.25.25 0 0 0 .25.246h.811a.25.25 0 0 0 .25-.25v-.105c0-.718.273-.927 1.01-1.486.609-.463 1.244-.977 1.244-2.056 0-1.511-1.276-2.241-2.673-2.241-1.267 0-2.655.59-2.75 2.286zm1.557 5.763c0 .533.425.927 1.01.927.609 0 1.028-.394 1.028-.927 0-.552-.42-.94-1.029-.94-.584 0-1.009.388-1.009.94z"/></svg>';
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/AvatarGroup/AvatarGroup.js
  var require_AvatarGroup = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/AvatarGroup/AvatarGroup.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AvatarGroup = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var Avatar_1 = require_Avatar();
      var sizeMap = {
        xs: "h-6 w-6",
        sm: "h-9 w-9",
        md: "h-16 w-16",
        lg: "h-32 w-32",
        xl: "h-64 w-64",
        auto: "h-full w-full"
      };
      var AvatarGroup = function(p2) {
        var _a = p2.maxShow, maxShow = _a === void 0 ? 5 : _a, avatars = p2.avatars, size = p2.size, onClick = p2.onClick;
        if (maxShow < 1) {
          console.error(`Property "maxShow" can't be less than 1`);
          return null;
        }
        var show = avatars.slice(0, maxShow);
        var nNotShow = avatars.length - show.length;
        return react_1.default.createElement(
          "div",
          { className: (0, classnames_1.default)("flex flex-row-reverse justify-center mt-10", onClick && "cursor-pointer", p2.className), onClick },
          nNotShow > 0 && react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("\n                flex flex-shrink-0 relative\n                bg-secondary-500\n                justify-center items-center m-1 mr-2 -ml-3 rounded-full border-r-2 text-xl text-white", sizeMap[size]) },
            react_1.default.createElement(Avatar_1.AvatarInner, { size, dataState: "done", name: "+".concat(nNotShow) })
          ),
          show.map(function(av, i4) {
            var dataState = av.dataState, backgroundColor = av.backgroundColor, imgSrc = av.imgSrc, name2 = av.name, status = av.status;
            var props = { dataState, name: name2, imgSrc, status, size };
            return react_1.default.createElement(
              "div",
              { className: (0, classnames_1.default)("flex flex-shrink-0 relative justify-center items-center m-1 mr-2 -ml-3 rounded-full border-r-2 border-white", !(av.backgroundColor || av.dataState === "loading") && "bg-secondary-500", sizeMap[size]), style: { backgroundColor }, key: i4 },
              react_1.default.createElement(Avatar_1.AvatarInner, (0, tslib_1.__assign)({}, props))
            );
          })
        );
      };
      exports.AvatarGroup = AvatarGroup;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Backdrop/Backdrop.js
  var require_Backdrop = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Backdrop/Backdrop.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Backdrop = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var Backdrop = function(_a) {
        var zIndex = _a.zIndex, onBackdropClick = _a.onBackdropClick, _b = _a.maxOpacity, maxOpacity = _b === void 0 ? 40 : _b, _c = _a.transition, transition = _c === void 0 ? true : _c, style = _a.style, className = _a.className;
        var _d = (0, react_1.useState)(!transition), opacity = _d[0], setOpacity = _d[1];
        (0, react_1.useEffect)(function() {
          return !opacity && setTimeout(function() {
            return setOpacity(true);
          }, 0);
        }, [opacity]);
        return react_1.default.createElement("div", { className: (0, classnames_1.default)("fixed top-0 left-0 right-0 w-screen h-screen bg-black", transition && "transition-opacity duration-200", className), style: (0, tslib_1.__assign)({ zIndex, opacity: opacity ? Number((maxOpacity / 100).toFixed(2)) : 0 }, style), onClick: onBackdropClick });
      };
      exports.Backdrop = Backdrop;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Button/Button.js
  var require_Button = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Button/Button.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Button = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var Badge_1 = require_Badge();
      var buttonSizeMap = { xs: "text-xs p-0.5 px-1", sm: "text-sm p-1 px-2", md: "text-base p-1.5 px-3", lg: "text-lg p-2 px-4", xl: "text-xl p-2.5 px-5", auto: "p-1.5 text-base h-full w-full" };
      var buttonColorMap = { primary: "bg-primary-500", secondary: "bg-secondary-500", success: "bg-success-500", info: "bg-info-500", danger: "bg-danger-500", warning: "bg-warning-500" };
      var buttonHoverMap = { primary: "hover:bg-primary-600", secondary: "hover:bg-secondary-600", success: "hover:bg-success-600", info: "hover:bg-info-600", danger: "hover:bg-danger-700", warning: "hover:bg-warning-600" };
      var buttonBorderMap = { primary: "border-primary-500 text-primary-500", secondary: "border-secondary-500 text-secondary-500", success: "border-success-500 text-success-500", info: "border-info-500 text-info-500", danger: "border-danger-500 text-danger-500", warning: "border-warning-500 text-warning-500" };
      var buttonBadgeMap = { xs: "xs", sm: "sm", md: "md", lg: "md", xl: "lg", auto: "md" };
      var Button = function(_a) {
        var _b = _a.size, size = _b === void 0 ? "md" : _b, _c = _a.type, type = _c === void 0 ? "secondary" : _c, _d = _a.shape, shape = _d === void 0 ? "round" : _d, _e = _a.outline, outline = _e === void 0 ? false : _e, badge = _a.badge, className = _a.className, disabled = _a.disabled, children = _a.children, _f = _a.htmlType, htmlType = _f === void 0 ? "button" : _f, props = (0, tslib_1.__rest)(_a, ["size", "type", "shape", "outline", "badge", "className", "disabled", "children", "htmlType"]);
        var _g = (0, react_1.useState)(false), isHover = _g[0], setIsHover = _g[1];
        return react_1.default.createElement(
          "button",
          (0, tslib_1.__assign)({ type: htmlType, className: (0, classnames_1.default)("relative text-gray-100 font-normal border-2 transition-all", buttonSizeMap[size], outline && !isHover ? buttonBorderMap[type] : buttonColorMap[type] + " border-transparent", shape === "flat" ? "rounded-none" : "rounded-lg", disabled && "opacity-60", !disabled && buttonHoverMap[type], className), onMouseEnter: function() {
            return setIsHover(disabled ? false : true);
          }, onMouseLeave: function() {
            return setIsHover(false);
          }, disabled }, props),
          badge && react_1.default.createElement(Badge_1.Badge, { size: buttonBadgeMap[size], badge, className: size === "xs" || size === "sm" ? "-top-1.5 -right-1.5" : "-top-2 -right-3" }),
          children
        );
      };
      exports.Button = Button;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Dropdown/Dropdown.js
  var require_Dropdown = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Dropdown/Dropdown.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Dropdown = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var utils_1 = require_utils();
      var dropdownSizeMap = { xs: "w-30", sm: "w-44", md: "w-60", lg: "w-80", xl: "w-96", auto: "w-full" };
      function Dropdown(_a) {
        var header = _a.header, items = _a.items, show = _a.show, children = _a.children, itemBorders = _a.itemBorders, _b = _a.size, size = _b === void 0 ? "md" : _b, className = _a.className, _c = _a.align, align = _c === void 0 ? "left" : _c, containerClassName = _a.containerClassName;
        var _d = (0, react_1.useState)(show || false), isOpen = _d[0], setIsOpen = _d[1];
        var close = function() {
          return setTimeout(function() {
            return setIsOpen(false);
          }, 0);
        };
        var container2 = (0, react_1.useRef)(null);
        (0, utils_1.clickOutListener)(container2, close);
        var renderItems = itemBorders ? items.filter(function(x3) {
          return x3.type !== "break";
        }) : items;
        var domActions = {
          onClick: function() {
            return setIsOpen(!isOpen);
          },
          onBlur: close
        };
        return react_1.default.createElement(
          "div",
          (0, tslib_1.__assign)({ className: (0, classnames_1.default)("relative", containerClassName) }, show !== null && show !== void 0 ? show : domActions, { ref: container2 }),
          children,
          react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("animate-slide-down absolute bg-white text-sm list-none divide-gray-100 rounded-sm shadow-md border", !(show !== null && show !== void 0 ? show : isOpen) && "hidden", align === "right" && "right-0 left-auto", dropdownSizeMap[size], className) },
            header && react_1.default.createElement("div", { className: (0, classnames_1.default)("cursor-default", itemBorders && "border-b border-secondary-200") }, (0, util_lib_1.isType)(header, "string") ? react_1.default.createElement("span", { className: "py-1.5 block text-center text-gray-500 text-base" }, header) : header),
            react_1.default.createElement("ul", null, renderItems.map(function(item, i4, _a2) {
              var length = _a2.length;
              return react_1.default.createElement(DropdownItem, (0, tslib_1.__assign)({}, item, { border: itemBorders, isLast: i4 === length - 1, key: i4 }));
            }))
          )
        );
      }
      exports.Dropdown = Dropdown;
      var DropdownItem = function(p2) {
        var br = (0, classnames_1.default)(!p2.isLast && p2.border && "border-b border-secondary-200");
        switch (p2.type) {
          case "action":
            return react_1.default.createElement(
              "li",
              { className: br },
              react_1.default.createElement("a", { className: "hover:bg-gray-100 text-gray-700 cursor-pointer block px-4 py-1.5", onClick: p2.onClick }, p2.title)
            );
          case "break":
            return react_1.default.createElement("hr", { className: "my-1 dark:border-gray-600" });
          case "section":
            return react_1.default.createElement(
              "li",
              { className: (0, classnames_1.default)("text-gray-600 text-center block py-1 cursor-default", br) },
              react_1.default.createElement("span", { className: "text-xs" }, p2.title)
            );
          case "jsx":
            return react_1.default.createElement("li", { className: br }, p2.element);
          default:
            console.error(p2);
            throw new Error("This type of MenuItem is not implemented.");
        }
      };
    }
  });

  // node_modules/react-hook-form/dist/index.cjs.js
  var require_index_cjs = __commonJS({
    "node_modules/react-hook-form/dist/index.cjs.js"(exports) {
      "use strict";
      function e(e2) {
        return e2 && "object" == typeof e2 && "default" in e2 ? e2 : { default: e2 };
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      var t3 = e(require_react());
      var r = (e2) => "checkbox" === e2.type;
      var s = (e2) => e2 instanceof Date;
      var a = (e2) => null == e2;
      var n = (e2) => "object" == typeof e2;
      var i4 = (e2) => !a(e2) && !Array.isArray(e2) && n(e2) && !s(e2);
      var o = (e2) => i4(e2) && e2.target ? r(e2.target) ? e2.target.checked : e2.target.value : e2;
      var u3 = (e2, t4) => e2.has(((e3) => e3.substring(0, e3.search(/\.\d+(\.|$)/)) || e3)(t4));
      var l = (e2) => Array.isArray(e2) ? e2.filter(Boolean) : [];
      var c = (e2) => void 0 === e2;
      var d2 = (e2, t4, r2) => {
        if (!t4 || !i4(e2))
          return r2;
        const s2 = l(t4.split(/[,[\].]+?/)).reduce((e3, t5) => a(e3) ? e3 : e3[t5], e2);
        return c(s2) || s2 === e2 ? c(e2[t4]) ? r2 : e2[t4] : s2;
      };
      var f = "blur";
      var m = "focusout";
      var y4 = "change";
      var p2 = "onBlur";
      var g2 = "onChange";
      var h = "onSubmit";
      var _ = "onTouched";
      var v2 = "all";
      var b = "max";
      var x3 = "min";
      var A4 = "maxLength";
      var V = "minLength";
      var F4 = "pattern";
      var w = "required";
      var S2 = "validate";
      var k = t3.default.createContext(null);
      var D3 = () => t3.default.useContext(k);
      var C4 = (e2, t4, r2, s2 = true) => {
        const a2 = { defaultValues: t4._defaultValues };
        for (const n2 in e2)
          Object.defineProperty(a2, n2, { get: () => {
            const a3 = n2;
            return t4._proxyFormState[a3] !== v2 && (t4._proxyFormState[a3] = !s2 || v2), r2 && (r2[a3] = true), e2[a3];
          } });
        return a2;
      };
      var E3 = (e2) => i4(e2) && !Object.keys(e2).length;
      var j = (e2, t4, r2, s2) => {
        r2(e2);
        const { name: a2, ...n2 } = e2;
        return E3(n2) || Object.keys(n2).length >= Object.keys(t4).length || Object.keys(n2).find((e3) => t4[e3] === (!s2 || v2));
      };
      var O = (e2) => Array.isArray(e2) ? e2 : [e2];
      var U = (e2, t4, r2) => r2 && t4 ? e2 === t4 : !e2 || !t4 || e2 === t4 || O(e2).some((e3) => e3 && (e3.startsWith(t4) || t4.startsWith(e3)));
      function B3(e2) {
        const r2 = t3.default.useRef(e2);
        r2.current = e2, t3.default.useEffect(() => {
          const t4 = !e2.disabled && r2.current.subject.subscribe({ next: r2.current.next });
          return () => {
            t4 && t4.unsubscribe();
          };
        }, [e2.disabled]);
      }
      function L2(e2) {
        const r2 = D3(), { control: s2 = r2.control, disabled: a2, name: n2, exact: i5 } = e2 || {}, [o2, u4] = t3.default.useState(s2._formState), l2 = t3.default.useRef(true), c2 = t3.default.useRef({ isDirty: false, isLoading: false, dirtyFields: false, touchedFields: false, isValidating: false, isValid: false, errors: false }), d3 = t3.default.useRef(n2);
        return d3.current = n2, B3({ disabled: a2, next: (e3) => l2.current && U(d3.current, e3.name, i5) && j(e3, c2.current, s2._updateFormState) && u4({ ...s2._formState, ...e3 }), subject: s2._subjects.state }), t3.default.useEffect(() => {
          l2.current = true;
          const e3 = s2._proxyFormState.isDirty && s2._getDirty();
          return e3 !== s2._formState.isDirty && s2._subjects.state.next({ isDirty: e3 }), c2.current.isValid && s2._updateValid(true), () => {
            l2.current = false;
          };
        }, [s2]), C4(o2, s2, c2.current, false);
      }
      var T2 = (e2) => "string" == typeof e2;
      var M2 = (e2, t4, r2, s2, a2) => T2(e2) ? (s2 && t4.watch.add(e2), d2(r2, e2, a2)) : Array.isArray(e2) ? e2.map((e3) => (s2 && t4.watch.add(e3), d2(r2, e3))) : (s2 && (t4.watchAll = true), r2);
      var N2 = "undefined" != typeof window && void 0 !== window.HTMLElement && "undefined" != typeof document;
      function R2(e2) {
        let t4;
        const r2 = Array.isArray(e2);
        if (e2 instanceof Date)
          t4 = new Date(e2);
        else if (e2 instanceof Set)
          t4 = new Set(e2);
        else {
          if (N2 && (e2 instanceof Blob || e2 instanceof FileList) || !r2 && !i4(e2))
            return e2;
          if (t4 = r2 ? [] : {}, Array.isArray(e2) || ((e3) => {
            const t5 = e3.constructor && e3.constructor.prototype;
            return i4(t5) && t5.hasOwnProperty("isPrototypeOf");
          })(e2))
            for (const r3 in e2)
              t4[r3] = R2(e2[r3]);
          else
            t4 = e2;
        }
        return t4;
      }
      function q(e2) {
        const r2 = D3(), { control: s2 = r2.control, name: a2, defaultValue: n2, disabled: i5, exact: o2 } = e2 || {}, u4 = t3.default.useRef(a2);
        u4.current = a2, B3({ disabled: i5, subject: s2._subjects.watch, next: (e3) => {
          U(u4.current, e3.name, o2) && c2(R2(M2(u4.current, s2._names, e3.values || s2._formValues, false, n2)));
        } });
        const [l2, c2] = t3.default.useState(s2._getWatch(a2, n2));
        return t3.default.useEffect(() => s2._removeUnmounted()), l2;
      }
      function P2(e2) {
        const r2 = D3(), { name: s2, control: a2 = r2.control, shouldUnregister: n2 } = e2, i5 = u3(a2._names.array, s2), l2 = q({ control: a2, name: s2, defaultValue: d2(a2._formValues, s2, d2(a2._defaultValues, s2, e2.defaultValue)), exact: true }), c2 = L2({ control: a2, name: s2 }), m2 = t3.default.useRef(a2.register(s2, { ...e2.rules, value: l2 }));
        return t3.default.useEffect(() => {
          const e3 = (e4, t4) => {
            const r3 = d2(a2._fields, e4);
            r3 && (r3._f.mount = t4);
          };
          return e3(s2, true), () => {
            const t4 = a2._options.shouldUnregister || n2;
            (i5 ? t4 && !a2._stateFlags.action : t4) ? a2.unregister(s2) : e3(s2, false);
          };
        }, [s2, a2, i5, n2]), { field: { name: s2, value: l2, onChange: t3.default.useCallback((e3) => m2.current.onChange({ target: { value: o(e3), name: s2 }, type: y4 }), [s2]), onBlur: t3.default.useCallback(() => m2.current.onBlur({ target: { value: d2(a2._formValues, s2), name: s2 }, type: f }), [s2, a2]), ref: (e3) => {
          const t4 = d2(a2._fields, s2);
          t4 && e3 && (t4._f.ref = { focus: () => e3.focus(), select: () => e3.select(), setCustomValidity: (t5) => e3.setCustomValidity(t5), reportValidity: () => e3.reportValidity() });
        } }, formState: c2, fieldState: Object.defineProperties({}, { invalid: { enumerable: true, get: () => !!d2(c2.errors, s2) }, isDirty: { enumerable: true, get: () => !!d2(c2.dirtyFields, s2) }, isTouched: { enumerable: true, get: () => !!d2(c2.touchedFields, s2) }, error: { enumerable: true, get: () => d2(c2.errors, s2) } }) };
      }
      var W = (e2, t4, r2, s2, a2) => t4 ? { ...r2[e2], types: { ...r2[e2] && r2[e2].types ? r2[e2].types : {}, [s2]: a2 || true } } : {};
      var $ = (e2) => /^\w*$/.test(e2);
      var I = (e2) => l(e2.replace(/["|']|\]/g, "").split(/\.|\[/));
      function H3(e2, t4, r2) {
        let s2 = -1;
        const a2 = $(t4) ? [t4] : I(t4), n2 = a2.length, o2 = n2 - 1;
        for (; ++s2 < n2; ) {
          const t5 = a2[s2];
          let n3 = r2;
          if (s2 !== o2) {
            const r3 = e2[t5];
            n3 = i4(r3) || Array.isArray(r3) ? r3 : isNaN(+a2[s2 + 1]) ? {} : [];
          }
          e2[t5] = n3, e2 = e2[t5];
        }
        return e2;
      }
      var z3 = (e2, t4, r2) => {
        for (const s2 of r2 || Object.keys(e2)) {
          const r3 = d2(e2, s2);
          if (r3) {
            const { _f: e3, ...s3 } = r3;
            if (e3 && t4(e3.name)) {
              if (e3.ref.focus) {
                e3.ref.focus();
                break;
              }
              if (e3.refs && e3.refs[0].focus) {
                e3.refs[0].focus();
                break;
              }
            } else
              i4(s3) && z3(s3, t4);
          }
        }
      };
      var G3 = () => {
        const e2 = "undefined" == typeof performance ? Date.now() : 1e3 * performance.now();
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (t4) => {
          const r2 = (16 * Math.random() + e2) % 16 | 0;
          return ("x" == t4 ? r2 : 3 & r2 | 8).toString(16);
        });
      };
      var J = (e2, t4, r2 = {}) => r2.shouldFocus || c(r2.shouldFocus) ? r2.focusName || `${e2}.${c(r2.focusIndex) ? t4 : r2.focusIndex}.` : "";
      var K = (e2) => ({ isOnSubmit: !e2 || e2 === h, isOnBlur: e2 === p2, isOnChange: e2 === g2, isOnAll: e2 === v2, isOnTouch: e2 === _ });
      var Q = (e2, t4, r2) => !r2 && (t4.watchAll || t4.watch.has(e2) || [...t4.watch].some((t5) => e2.startsWith(t5) && /^\.\w+/.test(e2.slice(t5.length))));
      var X2 = (e2, t4, r2) => {
        const s2 = l(d2(e2, r2));
        return H3(s2, "root", t4[r2]), H3(e2, r2, s2), e2;
      };
      var Y2 = (e2) => "boolean" == typeof e2;
      var Z = (e2) => "file" === e2.type;
      var ee = (e2) => "function" == typeof e2;
      var te = (e2) => {
        if (!N2)
          return false;
        const t4 = e2 ? e2.ownerDocument : 0;
        return e2 instanceof (t4 && t4.defaultView ? t4.defaultView.HTMLElement : HTMLElement);
      };
      var re = (e2) => T2(e2) || t3.default.isValidElement(e2);
      var se = (e2) => "radio" === e2.type;
      var ae = (e2) => e2 instanceof RegExp;
      var ne = { value: false, isValid: false };
      var ie = { value: true, isValid: true };
      var oe = (e2) => {
        if (Array.isArray(e2)) {
          if (e2.length > 1) {
            const t4 = e2.filter((e3) => e3 && e3.checked && !e3.disabled).map((e3) => e3.value);
            return { value: t4, isValid: !!t4.length };
          }
          return e2[0].checked && !e2[0].disabled ? e2[0].attributes && !c(e2[0].attributes.value) ? c(e2[0].value) || "" === e2[0].value ? ie : { value: e2[0].value, isValid: true } : ie : ne;
        }
        return ne;
      };
      var ue = { isValid: false, value: null };
      var le = (e2) => Array.isArray(e2) ? e2.reduce((e3, t4) => t4 && t4.checked && !t4.disabled ? { isValid: true, value: t4.value } : e3, ue) : ue;
      function ce(e2, t4, r2 = "validate") {
        if (re(e2) || Array.isArray(e2) && e2.every(re) || Y2(e2) && !e2)
          return { type: r2, message: re(e2) ? e2 : "", ref: t4 };
      }
      var de = (e2) => i4(e2) && !ae(e2) ? e2 : { value: e2, message: "" };
      var fe = async (e2, t4, s2, n2, o2) => {
        const { ref: u4, refs: l2, required: f2, maxLength: m2, minLength: y5, min: p3, max: g3, pattern: h2, validate: _2, name: v3, valueAsNumber: k2, mount: D4, disabled: C5 } = e2._f, j2 = d2(t4, v3);
        if (!D4 || C5)
          return {};
        const O2 = l2 ? l2[0] : u4, U2 = (e3) => {
          n2 && O2.reportValidity && (O2.setCustomValidity(Y2(e3) ? "" : e3 || ""), O2.reportValidity());
        }, B4 = {}, L3 = se(u4), M3 = r(u4), N3 = L3 || M3, R3 = (k2 || Z(u4)) && c(u4.value) && c(j2) || te(u4) && "" === u4.value || "" === j2 || Array.isArray(j2) && !j2.length, q2 = W.bind(null, v3, s2, B4), P3 = (e3, t5, r2, s3 = A4, a2 = V) => {
          const n3 = e3 ? t5 : r2;
          B4[v3] = { type: e3 ? s3 : a2, message: n3, ref: u4, ...q2(e3 ? s3 : a2, n3) };
        };
        if (o2 ? !Array.isArray(j2) || !j2.length : f2 && (!N3 && (R3 || a(j2)) || Y2(j2) && !j2 || M3 && !oe(l2).isValid || L3 && !le(l2).isValid)) {
          const { value: e3, message: t5 } = re(f2) ? { value: !!f2, message: f2 } : de(f2);
          if (e3 && (B4[v3] = { type: w, message: t5, ref: O2, ...q2(w, t5) }, !s2))
            return U2(t5), B4;
        }
        if (!(R3 || a(p3) && a(g3))) {
          let e3, t5;
          const r2 = de(g3), n3 = de(p3);
          if (a(j2) || isNaN(j2)) {
            const s3 = u4.valueAsDate || new Date(j2), a2 = (e4) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + e4), i5 = "time" == u4.type, o3 = "week" == u4.type;
            T2(r2.value) && j2 && (e3 = i5 ? a2(j2) > a2(r2.value) : o3 ? j2 > r2.value : s3 > new Date(r2.value)), T2(n3.value) && j2 && (t5 = i5 ? a2(j2) < a2(n3.value) : o3 ? j2 < n3.value : s3 < new Date(n3.value));
          } else {
            const s3 = u4.valueAsNumber || (j2 ? +j2 : j2);
            a(r2.value) || (e3 = s3 > r2.value), a(n3.value) || (t5 = s3 < n3.value);
          }
          if ((e3 || t5) && (P3(!!e3, r2.message, n3.message, b, x3), !s2))
            return U2(B4[v3].message), B4;
        }
        if ((m2 || y5) && !R3 && (T2(j2) || o2 && Array.isArray(j2))) {
          const e3 = de(m2), t5 = de(y5), r2 = !a(e3.value) && j2.length > e3.value, n3 = !a(t5.value) && j2.length < t5.value;
          if ((r2 || n3) && (P3(r2, e3.message, t5.message), !s2))
            return U2(B4[v3].message), B4;
        }
        if (h2 && !R3 && T2(j2)) {
          const { value: e3, message: t5 } = de(h2);
          if (ae(e3) && !j2.match(e3) && (B4[v3] = { type: F4, message: t5, ref: u4, ...q2(F4, t5) }, !s2))
            return U2(t5), B4;
        }
        if (_2) {
          if (ee(_2)) {
            const e3 = ce(await _2(j2, t4), O2);
            if (e3 && (B4[v3] = { ...e3, ...q2(S2, e3.message) }, !s2))
              return U2(e3.message), B4;
          } else if (i4(_2)) {
            let e3 = {};
            for (const r2 in _2) {
              if (!E3(e3) && !s2)
                break;
              const a2 = ce(await _2[r2](j2, t4), O2, r2);
              a2 && (e3 = { ...a2, ...q2(r2, a2.message) }, U2(a2.message), s2 && (B4[v3] = e3));
            }
            if (!E3(e3) && (B4[v3] = { ref: O2, ...e3 }, !s2))
              return B4;
          }
        }
        return U2(true), B4;
      };
      function me(e2, t4) {
        return [...e2, ...O(t4)];
      }
      var ye = (e2) => Array.isArray(e2) ? e2.map(() => {
      }) : void 0;
      function pe(e2, t4, r2) {
        return [...e2.slice(0, t4), ...O(r2), ...e2.slice(t4)];
      }
      var ge = (e2, t4, r2) => Array.isArray(e2) ? (c(e2[r2]) && (e2[r2] = void 0), e2.splice(r2, 0, e2.splice(t4, 1)[0]), e2) : [];
      function he(e2, t4) {
        return [...O(t4), ...O(e2)];
      }
      var _e = (e2, t4) => c(t4) ? [] : function(e3, t5) {
        let r2 = 0;
        const s2 = [...e3];
        for (const e4 of t5)
          s2.splice(e4 - r2, 1), r2++;
        return l(s2).length ? s2 : [];
      }(e2, O(t4).sort((e3, t5) => e3 - t5));
      var ve = (e2, t4, r2) => {
        e2[t4] = [e2[r2], e2[r2] = e2[t4]][0];
      };
      function be(e2, t4) {
        const r2 = Array.isArray(t4) ? t4 : $(t4) ? [t4] : I(t4), s2 = 1 === r2.length ? e2 : function(e3, t5) {
          const r3 = t5.slice(0, -1).length;
          let s3 = 0;
          for (; s3 < r3; )
            e3 = c(e3) ? s3++ : e3[t5[s3++]];
          return e3;
        }(e2, r2), a2 = r2.length - 1, n2 = r2[a2];
        return s2 && delete s2[n2], 0 !== a2 && (i4(s2) && E3(s2) || Array.isArray(s2) && function(e3) {
          for (const t5 in e3)
            if (!c(e3[t5]))
              return false;
          return true;
        }(s2)) && be(e2, r2.slice(0, -1)), e2;
      }
      var xe = (e2, t4, r2) => (e2[t4] = r2, e2);
      function Ae() {
        let e2 = [];
        return { get observers() {
          return e2;
        }, next: (t4) => {
          for (const r2 of e2)
            r2.next(t4);
        }, subscribe: (t4) => (e2.push(t4), { unsubscribe: () => {
          e2 = e2.filter((e3) => e3 !== t4);
        } }), unsubscribe: () => {
          e2 = [];
        } };
      }
      var Ve = (e2) => a(e2) || !n(e2);
      function Fe(e2, t4) {
        if (Ve(e2) || Ve(t4))
          return e2 === t4;
        if (s(e2) && s(t4))
          return e2.getTime() === t4.getTime();
        const r2 = Object.keys(e2), a2 = Object.keys(t4);
        if (r2.length !== a2.length)
          return false;
        for (const n2 of r2) {
          const r3 = e2[n2];
          if (!a2.includes(n2))
            return false;
          if ("ref" !== n2) {
            const e3 = t4[n2];
            if (s(r3) && s(e3) || i4(r3) && i4(e3) || Array.isArray(r3) && Array.isArray(e3) ? !Fe(r3, e3) : r3 !== e3)
              return false;
          }
        }
        return true;
      }
      var we = (e2) => "select-multiple" === e2.type;
      var Se = (e2) => te(e2) && e2.isConnected;
      var ke = (e2) => {
        for (const t4 in e2)
          if (ee(e2[t4]))
            return true;
        return false;
      };
      function De(e2, t4 = {}) {
        const r2 = Array.isArray(e2);
        if (i4(e2) || r2)
          for (const r3 in e2)
            Array.isArray(e2[r3]) || i4(e2[r3]) && !ke(e2[r3]) ? (t4[r3] = Array.isArray(e2[r3]) ? [] : {}, De(e2[r3], t4[r3])) : a(e2[r3]) || (t4[r3] = true);
        return t4;
      }
      function Ce(e2, t4, r2) {
        const s2 = Array.isArray(e2);
        if (i4(e2) || s2)
          for (const s3 in e2)
            Array.isArray(e2[s3]) || i4(e2[s3]) && !ke(e2[s3]) ? c(t4) || Ve(r2[s3]) ? r2[s3] = Array.isArray(e2[s3]) ? De(e2[s3], []) : { ...De(e2[s3]) } : Ce(e2[s3], a(t4) ? {} : t4[s3], r2[s3]) : Fe(e2[s3], t4[s3]) ? delete r2[s3] : r2[s3] = true;
        return r2;
      }
      var Ee = (e2, t4) => Ce(e2, t4, De(t4));
      var je = (e2, { valueAsNumber: t4, valueAsDate: r2, setValueAs: s2 }) => c(e2) ? e2 : t4 ? "" === e2 ? NaN : e2 ? +e2 : e2 : r2 && T2(e2) ? new Date(e2) : s2 ? s2(e2) : e2;
      function Oe(e2) {
        const t4 = e2.ref;
        if (!(e2.refs ? e2.refs.every((e3) => e3.disabled) : t4.disabled))
          return Z(t4) ? t4.files : se(t4) ? le(e2.refs).value : we(t4) ? [...t4.selectedOptions].map(({ value: e3 }) => e3) : r(t4) ? oe(e2.refs).value : je(c(t4.value) ? e2.ref.value : t4.value, e2);
      }
      var Ue = (e2) => c(e2) ? e2 : ae(e2) ? e2.source : i4(e2) ? ae(e2.value) ? e2.value.source : e2.value : e2;
      function Be(e2, t4, r2) {
        const s2 = d2(e2, r2);
        if (s2 || $(r2))
          return { error: s2, name: r2 };
        const a2 = r2.split(".");
        for (; a2.length; ) {
          const s3 = a2.join("."), n2 = d2(t4, s3), i5 = d2(e2, s3);
          if (n2 && !Array.isArray(n2) && r2 !== s3)
            return { name: r2 };
          if (i5 && i5.type)
            return { name: s3, error: i5 };
          a2.pop();
        }
        return { name: r2 };
      }
      var Le = { mode: h, reValidateMode: g2, shouldFocusError: true };
      function Te(e2 = {}, t4) {
        let n2 = { ...Le, ...e2 };
        const y5 = e2.resetOptions && e2.resetOptions.keepDirtyValues;
        let p3, g3 = { submitCount: 0, isDirty: false, isLoading: true, isValidating: false, isSubmitted: false, isSubmitting: false, isSubmitSuccessful: false, isValid: false, touchedFields: {}, dirtyFields: {}, errors: {} }, h2 = {}, _2 = (i4(n2.defaultValues) || i4(n2.values)) && R2(n2.defaultValues || n2.values) || {}, b2 = n2.shouldUnregister ? {} : R2(_2), x4 = { action: false, mount: false, watch: false }, A5 = { mount: /* @__PURE__ */ new Set(), unMount: /* @__PURE__ */ new Set(), array: /* @__PURE__ */ new Set(), watch: /* @__PURE__ */ new Set() }, V2 = 0;
        const F5 = { isDirty: false, dirtyFields: false, touchedFields: false, isValidating: false, isValid: false, errors: false }, w2 = { watch: Ae(), array: Ae(), state: Ae() }, S3 = K(n2.mode), k2 = K(n2.reValidateMode), D4 = n2.criteriaMode === v2, C5 = async (e3) => {
          if (F5.isValid || e3) {
            const e4 = n2.resolver ? E3((await q2()).errors) : await P3(h2, true);
            e4 !== g3.isValid && w2.state.next({ isValid: e4 });
          }
        }, j2 = (e3) => F5.isValidating && w2.state.next({ isValidating: e3 }), U2 = (e3, t5, r2, s2) => {
          const a2 = d2(h2, e3);
          if (a2) {
            const n3 = d2(b2, e3, c(r2) ? d2(_2, e3) : r2);
            c(n3) || s2 && s2.defaultChecked || t5 ? H3(b2, e3, t5 ? n3 : Oe(a2._f)) : I2(e3, n3), x4.mount && C5();
          }
        }, B4 = (e3, t5, r2, s2, a2) => {
          let n3 = false, i5 = false;
          const o2 = { name: e3 };
          if (!r2 || s2) {
            F5.isDirty && (i5 = g3.isDirty, g3.isDirty = o2.isDirty = W2(), n3 = i5 !== o2.isDirty);
            const r3 = Fe(d2(_2, e3), t5);
            i5 = d2(g3.dirtyFields, e3), r3 ? be(g3.dirtyFields, e3) : H3(g3.dirtyFields, e3, true), o2.dirtyFields = g3.dirtyFields, n3 = n3 || F5.dirtyFields && i5 !== !r3;
          }
          if (r2) {
            const t6 = d2(g3.touchedFields, e3);
            t6 || (H3(g3.touchedFields, e3, r2), o2.touchedFields = g3.touchedFields, n3 = n3 || F5.touchedFields && t6 !== r2);
          }
          return n3 && a2 && w2.state.next(o2), n3 ? o2 : {};
        }, L3 = (t5, r2, s2, a2) => {
          const n3 = d2(g3.errors, t5), i5 = F5.isValid && Y2(r2) && g3.isValid !== r2;
          var o2;
          if (e2.delayError && s2 ? (o2 = () => ((e3, t6) => {
            H3(g3.errors, e3, t6), w2.state.next({ errors: g3.errors });
          })(t5, s2), p3 = (e3) => {
            clearTimeout(V2), V2 = window.setTimeout(o2, e3);
          }, p3(e2.delayError)) : (clearTimeout(V2), p3 = null, s2 ? H3(g3.errors, t5, s2) : be(g3.errors, t5)), (s2 ? !Fe(n3, s2) : n3) || !E3(a2) || i5) {
            const e3 = { ...a2, ...i5 && Y2(r2) ? { isValid: r2 } : {}, errors: g3.errors, name: t5 };
            g3 = { ...g3, ...e3 }, w2.state.next(e3);
          }
          j2(false);
        }, q2 = async (e3) => await n2.resolver(b2, n2.context, ((e4, t5, r2, s2) => {
          const a2 = {};
          for (const r3 of e4) {
            const e5 = d2(t5, r3);
            e5 && H3(a2, r3, e5._f);
          }
          return { criteriaMode: r2, names: [...e4], fields: a2, shouldUseNativeValidation: s2 };
        })(e3 || A5.mount, h2, n2.criteriaMode, n2.shouldUseNativeValidation)), P3 = async (e3, t5, r2 = { valid: true }) => {
          for (const s2 in e3) {
            const a2 = e3[s2];
            if (a2) {
              const { _f: e4, ...s3 } = a2;
              if (e4) {
                const s4 = A5.array.has(e4.name), i5 = await fe(a2, b2, D4, n2.shouldUseNativeValidation, s4);
                if (i5[e4.name] && (r2.valid = false, t5))
                  break;
                !t5 && (d2(i5, e4.name) ? s4 ? X2(g3.errors, i5, e4.name) : H3(g3.errors, e4.name, i5[e4.name]) : be(g3.errors, e4.name));
              }
              s3 && await P3(s3, t5, r2);
            }
          }
          return r2.valid;
        }, W2 = (e3, t5) => (e3 && t5 && H3(b2, e3, t5), !Fe(ne2(), _2)), $2 = (e3, t5, r2) => M2(e3, A5, { ...x4.mount ? b2 : c(t5) ? _2 : T2(e3) ? { [e3]: t5 } : t5 }, r2, t5), I2 = (e3, t5, s2 = {}) => {
          const n3 = d2(h2, e3);
          let i5 = t5;
          if (n3) {
            const s3 = n3._f;
            s3 && (!s3.disabled && H3(b2, e3, je(t5, s3)), i5 = te(s3.ref) && a(t5) ? "" : t5, we(s3.ref) ? [...s3.ref.options].forEach((e4) => e4.selected = i5.includes(e4.value)) : s3.refs ? r(s3.ref) ? s3.refs.length > 1 ? s3.refs.forEach((e4) => (!e4.defaultChecked || !e4.disabled) && (e4.checked = Array.isArray(i5) ? !!i5.find((t6) => t6 === e4.value) : i5 === e4.value)) : s3.refs[0] && (s3.refs[0].checked = !!i5) : s3.refs.forEach((e4) => e4.checked = e4.value === i5) : Z(s3.ref) ? s3.ref.value = "" : (s3.ref.value = i5, s3.ref.type || w2.watch.next({ name: e3 })));
          }
          (s2.shouldDirty || s2.shouldTouch) && B4(e3, i5, s2.shouldTouch, s2.shouldDirty, true), s2.shouldValidate && ae2(e3);
        }, G4 = (e3, t5, r2) => {
          for (const a2 in t5) {
            const n3 = t5[a2], i5 = `${e3}.${a2}`, o2 = d2(h2, i5);
            !A5.array.has(e3) && Ve(n3) && (!o2 || o2._f) || s(n3) ? I2(i5, n3, r2) : G4(i5, n3, r2);
          }
        }, J2 = (e3, r2, s2 = {}) => {
          const n3 = d2(h2, e3), i5 = A5.array.has(e3), o2 = R2(r2);
          H3(b2, e3, o2), i5 ? (w2.array.next({ name: e3, values: b2 }), (F5.isDirty || F5.dirtyFields) && s2.shouldDirty && w2.state.next({ name: e3, dirtyFields: Ee(_2, b2), isDirty: W2(e3, o2) })) : !n3 || n3._f || a(o2) ? I2(e3, o2, s2) : G4(e3, o2, s2), Q(e3, A5) && w2.state.next({}), w2.watch.next({ name: e3 }), !x4.mount && t4();
        }, re2 = async (e3) => {
          const t5 = e3.target;
          let r2 = t5.name;
          const s2 = d2(h2, r2);
          if (s2) {
            let i5, u4;
            const l2 = t5.type ? Oe(s2._f) : o(e3), c2 = e3.type === f || e3.type === m, y6 = !((a2 = s2._f).mount && (a2.required || a2.min || a2.max || a2.maxLength || a2.minLength || a2.pattern || a2.validate) || n2.resolver || d2(g3.errors, r2) || s2._f.deps) || ((e4, t6, r3, s3, a3) => !a3.isOnAll && (!r3 && a3.isOnTouch ? !(t6 || e4) : (r3 ? s3.isOnBlur : a3.isOnBlur) ? !e4 : !(r3 ? s3.isOnChange : a3.isOnChange) || e4))(c2, d2(g3.touchedFields, r2), g3.isSubmitted, k2, S3), _3 = Q(r2, A5, c2);
            H3(b2, r2, l2), c2 ? (s2._f.onBlur && s2._f.onBlur(e3), p3 && p3(0)) : s2._f.onChange && s2._f.onChange(e3);
            const v3 = B4(r2, l2, c2, false), x5 = !E3(v3) || _3;
            if (!c2 && w2.watch.next({ name: r2, type: e3.type }), y6)
              return F5.isValid && C5(), x5 && w2.state.next({ name: r2, ..._3 ? {} : v3 });
            if (!c2 && _3 && w2.state.next({}), j2(true), n2.resolver) {
              const { errors: e4 } = await q2([r2]), t6 = Be(g3.errors, h2, r2), s3 = Be(e4, h2, t6.name || r2);
              i5 = s3.error, r2 = s3.name, u4 = E3(e4);
            } else
              i5 = (await fe(s2, b2, D4, n2.shouldUseNativeValidation))[r2], i5 ? u4 = false : F5.isValid && (u4 = await P3(h2, true));
            s2._f.deps && ae2(s2._f.deps), L3(r2, u4, i5, v3);
          }
          var a2;
        }, ae2 = async (e3, t5 = {}) => {
          let r2, s2;
          const a2 = O(e3);
          if (j2(true), n2.resolver) {
            const t6 = await (async (e4) => {
              const { errors: t7 } = await q2();
              if (e4)
                for (const r3 of e4) {
                  const e5 = d2(t7, r3);
                  e5 ? H3(g3.errors, r3, e5) : be(g3.errors, r3);
                }
              else
                g3.errors = t7;
              return t7;
            })(c(e3) ? e3 : a2);
            r2 = E3(t6), s2 = e3 ? !a2.some((e4) => d2(t6, e4)) : r2;
          } else
            e3 ? (s2 = (await Promise.all(a2.map(async (e4) => {
              const t6 = d2(h2, e4);
              return await P3(t6 && t6._f ? { [e4]: t6 } : t6);
            }))).every(Boolean), (s2 || g3.isValid) && C5()) : s2 = r2 = await P3(h2);
          return w2.state.next({ ...!T2(e3) || F5.isValid && r2 !== g3.isValid ? {} : { name: e3 }, ...n2.resolver || !e3 ? { isValid: r2 } : {}, errors: g3.errors, isValidating: false }), t5.shouldFocus && !s2 && z3(h2, (e4) => e4 && d2(g3.errors, e4), e3 ? a2 : A5.mount), s2;
        }, ne2 = (e3) => {
          const t5 = { ..._2, ...x4.mount ? b2 : {} };
          return c(e3) ? t5 : T2(e3) ? d2(t5, e3) : e3.map((e4) => d2(t5, e4));
        }, ie2 = (e3, t5) => ({ invalid: !!d2((t5 || g3).errors, e3), isDirty: !!d2((t5 || g3).dirtyFields, e3), isTouched: !!d2((t5 || g3).touchedFields, e3), error: d2((t5 || g3).errors, e3) }), oe2 = (e3, t5 = {}) => {
          for (const r2 of e3 ? O(e3) : A5.mount)
            A5.mount.delete(r2), A5.array.delete(r2), d2(h2, r2) && (t5.keepValue || (be(h2, r2), be(b2, r2)), !t5.keepError && be(g3.errors, r2), !t5.keepDirty && be(g3.dirtyFields, r2), !t5.keepTouched && be(g3.touchedFields, r2), !n2.shouldUnregister && !t5.keepDefaultValue && be(_2, r2));
          w2.watch.next({}), w2.state.next({ ...g3, ...t5.keepDirty ? { isDirty: W2() } : {} }), !t5.keepIsValid && C5();
        }, ue2 = (e3, t5 = {}) => {
          let s2 = d2(h2, e3);
          const a2 = Y2(t5.disabled);
          return H3(h2, e3, { ...s2 || {}, _f: { ...s2 && s2._f ? s2._f : { ref: { name: e3 } }, name: e3, mount: true, ...t5 } }), A5.mount.add(e3), s2 ? a2 && H3(b2, e3, t5.disabled ? void 0 : d2(b2, e3, Oe(s2._f))) : U2(e3, true, t5.value), { ...a2 ? { disabled: t5.disabled } : {}, ...n2.shouldUseNativeValidation ? { required: !!t5.required, min: Ue(t5.min), max: Ue(t5.max), minLength: Ue(t5.minLength), maxLength: Ue(t5.maxLength), pattern: Ue(t5.pattern) } : {}, name: e3, onChange: re2, onBlur: re2, ref: (a3) => {
            if (a3) {
              ue2(e3, t5), s2 = d2(h2, e3);
              const n3 = c(a3.value) && a3.querySelectorAll && a3.querySelectorAll("input,select,textarea")[0] || a3, i5 = ((e4) => se(e4) || r(e4))(n3), o2 = s2._f.refs || [];
              if (i5 ? o2.find((e4) => e4 === n3) : n3 === s2._f.ref)
                return;
              H3(h2, e3, { _f: { ...s2._f, ...i5 ? { refs: [...o2.filter(Se), n3, ...Array.isArray(d2(_2, e3)) ? [{}] : []], ref: { type: n3.type, name: e3 } } : { ref: n3 } } }), U2(e3, false, void 0, n3);
            } else
              s2 = d2(h2, e3, {}), s2._f && (s2._f.mount = false), (n2.shouldUnregister || t5.shouldUnregister) && (!u3(A5.array, e3) || !x4.action) && A5.unMount.add(e3);
          } };
        }, le2 = () => n2.shouldFocusError && z3(h2, (e3) => e3 && d2(g3.errors, e3), A5.mount), ce2 = (r2, s2 = {}) => {
          const a2 = r2 || _2, n3 = R2(a2), i5 = r2 && !E3(r2) ? n3 : _2;
          if (s2.keepDefaultValues || (_2 = a2), !s2.keepValues) {
            if (s2.keepDirtyValues || y5)
              for (const e3 of A5.mount)
                d2(g3.dirtyFields, e3) ? H3(i5, e3, d2(b2, e3)) : J2(e3, d2(i5, e3));
            else {
              if (N2 && c(r2))
                for (const e3 of A5.mount) {
                  const t5 = d2(h2, e3);
                  if (t5 && t5._f) {
                    const e4 = Array.isArray(t5._f.refs) ? t5._f.refs[0] : t5._f.ref;
                    if (te(e4)) {
                      const t6 = e4.closest("form");
                      if (t6) {
                        t6.reset();
                        break;
                      }
                    }
                  }
                }
              h2 = {};
            }
            b2 = e2.shouldUnregister ? s2.keepDefaultValues ? R2(_2) : {} : n3, w2.array.next({ values: i5 }), w2.watch.next({ values: i5 });
          }
          A5 = { mount: /* @__PURE__ */ new Set(), unMount: /* @__PURE__ */ new Set(), array: /* @__PURE__ */ new Set(), watch: /* @__PURE__ */ new Set(), watchAll: false, focus: "" }, !x4.mount && t4(), x4.mount = !F5.isValid || !!s2.keepIsValid, x4.watch = !!e2.shouldUnregister, w2.state.next({ submitCount: s2.keepSubmitCount ? g3.submitCount : 0, isDirty: s2.keepDirty || s2.keepDirtyValues ? g3.isDirty : !(!s2.keepDefaultValues || Fe(r2, _2)), isSubmitted: !!s2.keepIsSubmitted && g3.isSubmitted, dirtyFields: s2.keepDirty || s2.keepDirtyValues ? g3.dirtyFields : s2.keepDefaultValues && r2 ? Ee(_2, r2) : {}, touchedFields: s2.keepTouched ? g3.touchedFields : {}, errors: s2.keepErrors ? g3.errors : {}, isSubmitting: false, isSubmitSuccessful: false });
        }, de2 = (e3, t5) => ce2(ee(e3) ? e3(b2) : e3, t5);
        return ee(n2.defaultValues) && n2.defaultValues().then((e3) => {
          de2(e3, n2.resetOptions), w2.state.next({ isLoading: false });
        }), { control: { register: ue2, unregister: oe2, getFieldState: ie2, _executeSchema: q2, _focusError: le2, _getWatch: $2, _getDirty: W2, _updateValid: C5, _removeUnmounted: () => {
          for (const e3 of A5.unMount) {
            const t5 = d2(h2, e3);
            t5 && (t5._f.refs ? t5._f.refs.every((e4) => !Se(e4)) : !Se(t5._f.ref)) && oe2(e3);
          }
          A5.unMount = /* @__PURE__ */ new Set();
        }, _updateFieldArray: (e3, t5 = [], r2, s2, a2 = true, n3 = true) => {
          if (s2 && r2) {
            if (x4.action = true, n3 && Array.isArray(d2(h2, e3))) {
              const t6 = r2(d2(h2, e3), s2.argA, s2.argB);
              a2 && H3(h2, e3, t6);
            }
            if (n3 && Array.isArray(d2(g3.errors, e3))) {
              const t6 = r2(d2(g3.errors, e3), s2.argA, s2.argB);
              a2 && H3(g3.errors, e3, t6), ((e4, t7) => {
                !l(d2(e4, t7)).length && be(e4, t7);
              })(g3.errors, e3);
            }
            if (F5.touchedFields && n3 && Array.isArray(d2(g3.touchedFields, e3))) {
              const t6 = r2(d2(g3.touchedFields, e3), s2.argA, s2.argB);
              a2 && H3(g3.touchedFields, e3, t6);
            }
            F5.dirtyFields && (g3.dirtyFields = Ee(_2, b2)), w2.state.next({ name: e3, isDirty: W2(e3, t5), dirtyFields: g3.dirtyFields, errors: g3.errors, isValid: g3.isValid });
          } else
            H3(b2, e3, t5);
        }, _getFieldArray: (t5) => l(d2(x4.mount ? b2 : _2, t5, e2.shouldUnregister ? d2(_2, t5, []) : [])), _reset: ce2, _updateFormState: (e3) => {
          g3 = { ...g3, ...e3 };
        }, _subjects: w2, _proxyFormState: F5, get _fields() {
          return h2;
        }, get _formValues() {
          return b2;
        }, get _stateFlags() {
          return x4;
        }, set _stateFlags(e3) {
          x4 = e3;
        }, get _defaultValues() {
          return _2;
        }, get _names() {
          return A5;
        }, set _names(e3) {
          A5 = e3;
        }, get _formState() {
          return g3;
        }, set _formState(e3) {
          g3 = e3;
        }, get _options() {
          return n2;
        }, set _options(e3) {
          n2 = { ...n2, ...e3 };
        } }, trigger: ae2, register: ue2, handleSubmit: (e3, t5) => async (r2) => {
          r2 && (r2.preventDefault && r2.preventDefault(), r2.persist && r2.persist());
          let s2 = R2(b2);
          if (w2.state.next({ isSubmitting: true }), n2.resolver) {
            const { errors: e4, values: t6 } = await q2();
            g3.errors = e4, s2 = t6;
          } else
            await P3(h2);
          be(g3.errors, "root"), E3(g3.errors) ? (w2.state.next({ errors: {} }), await e3(s2, r2)) : (t5 && await t5({ ...g3.errors }, r2), le2()), w2.state.next({ isSubmitted: true, isSubmitting: false, isSubmitSuccessful: E3(g3.errors), submitCount: g3.submitCount + 1, errors: g3.errors });
        }, watch: (e3, t5) => ee(e3) ? w2.watch.subscribe({ next: (r2) => e3($2(void 0, t5), r2) }) : $2(e3, t5, true), setValue: J2, getValues: ne2, reset: de2, resetField: (e3, t5 = {}) => {
          d2(h2, e3) && (c(t5.defaultValue) ? J2(e3, d2(_2, e3)) : (J2(e3, t5.defaultValue), H3(_2, e3, t5.defaultValue)), t5.keepTouched || be(g3.touchedFields, e3), t5.keepDirty || (be(g3.dirtyFields, e3), g3.isDirty = t5.defaultValue ? W2(e3, d2(_2, e3)) : W2()), t5.keepError || (be(g3.errors, e3), F5.isValid && C5()), w2.state.next({ ...g3 }));
        }, clearErrors: (e3) => {
          e3 && O(e3).forEach((e4) => be(g3.errors, e4)), w2.state.next({ errors: e3 ? g3.errors : {} });
        }, unregister: oe2, setError: (e3, t5, r2) => {
          const s2 = (d2(h2, e3, { _f: {} })._f || {}).ref;
          H3(g3.errors, e3, { ...t5, ref: s2 }), w2.state.next({ name: e3, errors: g3.errors, isValid: false }), r2 && r2.shouldFocus && s2 && s2.focus && s2.focus();
        }, setFocus: (e3, t5 = {}) => {
          const r2 = d2(h2, e3), s2 = r2 && r2._f;
          if (s2) {
            const e4 = s2.refs ? s2.refs[0] : s2.ref;
            e4.focus && (e4.focus(), t5.shouldSelect && e4.select());
          }
        }, getFieldState: ie2 };
      }
      exports.Controller = (e2) => e2.render(P2(e2)), exports.FormProvider = (e2) => {
        const { children: r2, ...s2 } = e2;
        return t3.default.createElement(k.Provider, { value: s2 }, r2);
      }, exports.appendErrors = W, exports.get = d2, exports.set = H3, exports.useController = P2, exports.useFieldArray = function(e2) {
        const r2 = D3(), { control: s2 = r2.control, name: a2, keyName: n2 = "id", shouldUnregister: i5 } = e2, [o2, u4] = t3.default.useState(s2._getFieldArray(a2)), l2 = t3.default.useRef(s2._getFieldArray(a2).map(G3)), c2 = t3.default.useRef(o2), f2 = t3.default.useRef(a2), m2 = t3.default.useRef(false);
        f2.current = a2, c2.current = o2, s2._names.array.add(a2), e2.rules && s2.register(a2, e2.rules), B3({ next: ({ values: e3, name: t4 }) => {
          if (t4 === f2.current || !t4) {
            const t5 = d2(e3, f2.current);
            Array.isArray(t5) && (u4(t5), l2.current = t5.map(G3));
          }
        }, subject: s2._subjects.array });
        const y5 = t3.default.useCallback((e3) => {
          m2.current = true, s2._updateFieldArray(a2, e3);
        }, [s2, a2]);
        return t3.default.useEffect(() => {
          if (s2._stateFlags.action = false, Q(a2, s2._names) && s2._subjects.state.next({}), m2.current && (!K(s2._options.mode).isOnSubmit || s2._formState.isSubmitted))
            if (s2._options.resolver)
              s2._executeSchema([a2]).then((e3) => {
                const t4 = d2(e3.errors, a2), r3 = d2(s2._formState.errors, a2);
                (r3 ? !t4 && r3.type : t4 && t4.type) && (t4 ? H3(s2._formState.errors, a2, t4) : be(s2._formState.errors, a2), s2._subjects.state.next({ errors: s2._formState.errors }));
              });
            else {
              const e3 = d2(s2._fields, a2);
              e3 && e3._f && fe(e3, s2._formValues, s2._options.criteriaMode === v2, s2._options.shouldUseNativeValidation, true).then((e4) => !E3(e4) && s2._subjects.state.next({ errors: X2(s2._formState.errors, e4, a2) }));
            }
          s2._subjects.watch.next({ name: a2, values: s2._formValues }), s2._names.focus && z3(s2._fields, (e3) => !!e3 && e3.startsWith(s2._names.focus || "")), s2._names.focus = "", s2._updateValid();
        }, [o2, a2, s2]), t3.default.useEffect(() => (!d2(s2._formValues, a2) && s2._updateFieldArray(a2), () => {
          (s2._options.shouldUnregister || i5) && s2.unregister(a2);
        }), [a2, s2, n2, i5]), { swap: t3.default.useCallback((e3, t4) => {
          const r3 = s2._getFieldArray(a2);
          ve(r3, e3, t4), ve(l2.current, e3, t4), y5(r3), u4(r3), s2._updateFieldArray(a2, r3, ve, { argA: e3, argB: t4 }, false);
        }, [y5, a2, s2]), move: t3.default.useCallback((e3, t4) => {
          const r3 = s2._getFieldArray(a2);
          ge(r3, e3, t4), ge(l2.current, e3, t4), y5(r3), u4(r3), s2._updateFieldArray(a2, r3, ge, { argA: e3, argB: t4 }, false);
        }, [y5, a2, s2]), prepend: t3.default.useCallback((e3, t4) => {
          const r3 = O(R2(e3)), n3 = he(s2._getFieldArray(a2), r3);
          s2._names.focus = J(a2, 0, t4), l2.current = he(l2.current, r3.map(G3)), y5(n3), u4(n3), s2._updateFieldArray(a2, n3, he, { argA: ye(e3) });
        }, [y5, a2, s2]), append: t3.default.useCallback((e3, t4) => {
          const r3 = O(R2(e3)), n3 = me(s2._getFieldArray(a2), r3);
          s2._names.focus = J(a2, n3.length - 1, t4), l2.current = me(l2.current, r3.map(G3)), y5(n3), u4(n3), s2._updateFieldArray(a2, n3, me, { argA: ye(e3) });
        }, [y5, a2, s2]), remove: t3.default.useCallback((e3) => {
          const t4 = _e(s2._getFieldArray(a2), e3);
          l2.current = _e(l2.current, e3), y5(t4), u4(t4), s2._updateFieldArray(a2, t4, _e, { argA: e3 });
        }, [y5, a2, s2]), insert: t3.default.useCallback((e3, t4, r3) => {
          const n3 = O(R2(t4)), i6 = pe(s2._getFieldArray(a2), e3, n3);
          s2._names.focus = J(a2, e3, r3), l2.current = pe(l2.current, e3, n3.map(G3)), y5(i6), u4(i6), s2._updateFieldArray(a2, i6, pe, { argA: e3, argB: ye(t4) });
        }, [y5, a2, s2]), update: t3.default.useCallback((e3, t4) => {
          const r3 = R2(t4), n3 = xe(s2._getFieldArray(a2), e3, r3);
          l2.current = [...n3].map((t5, r4) => t5 && r4 !== e3 ? l2.current[r4] : G3()), y5(n3), u4([...n3]), s2._updateFieldArray(a2, n3, xe, { argA: e3, argB: r3 }, true, false);
        }, [y5, a2, s2]), replace: t3.default.useCallback((e3) => {
          const t4 = O(R2(e3));
          l2.current = t4.map(G3), y5([...t4]), u4([...t4]), s2._updateFieldArray(a2, [...t4], (e4) => e4, {}, true, false);
        }, [y5, a2, s2]), fields: t3.default.useMemo(() => o2.map((e3, t4) => ({ ...e3, [n2]: l2.current[t4] || G3() })), [o2, n2]) };
      }, exports.useForm = function(e2 = {}) {
        const r2 = t3.default.useRef(), [s2, a2] = t3.default.useState({ isDirty: false, isValidating: false, isLoading: true, isSubmitted: false, isSubmitting: false, isSubmitSuccessful: false, isValid: false, submitCount: 0, dirtyFields: {}, touchedFields: {}, errors: {}, defaultValues: ee(e2.defaultValues) ? void 0 : e2.defaultValues });
        r2.current || (r2.current = { ...Te(e2, () => a2((e3) => ({ ...e3 }))), formState: s2 });
        const n2 = r2.current.control;
        return n2._options = e2, B3({ subject: n2._subjects.state, next: (e3) => {
          j(e3, n2._proxyFormState, n2._updateFormState, true) && a2({ ...n2._formState });
        } }), t3.default.useEffect(() => {
          n2._stateFlags.mount || (n2._updateValid(), n2._stateFlags.mount = true), n2._stateFlags.watch && (n2._stateFlags.watch = false, n2._subjects.state.next({})), n2._removeUnmounted();
        }), t3.default.useEffect(() => {
          e2.values && !Fe(e2.values, n2._defaultValues) && n2._reset(e2.values, n2._options.resetOptions);
        }, [e2.values, n2]), t3.default.useEffect(() => {
          s2.submitCount && n2._focusError();
        }, [n2, s2.submitCount]), r2.current.formState = C4(s2, n2), r2.current;
      }, exports.useFormContext = D3, exports.useFormState = L2, exports.useWatch = q;
    }
  });

  // node_modules/my-alyce-component-lib/dist/forms/TextInput/TextInput.js
  var require_TextInput = __commonJS({
    "node_modules/my-alyce-component-lib/dist/forms/TextInput/TextInput.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TextInput = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var Button_1 = require_Button();
      var utils_1 = require_utils();
      var TextInput = function(_a) {
        var _b = _a.validation, validation = _b === void 0 ? "default" : _b, className = _a.className, label = _a.label, _c = _a.labelType, labelType = _c === void 0 ? "default" : _c, inputClassName = _a.inputClassName, button = _a.button, register = _a.register, props = (0, tslib_1.__rest)(_a, ["validation", "className", "label", "labelType", "inputClassName", "button", "register"]);
        var lbType = label && labelType;
        var input = react_1.default.createElement("input", (0, tslib_1.__assign)({ alt: label }, props, { className: (0, classnames_1.default)("px-3 py-1.5 outline-0 border w-full", utils_1.TextInputBorderMap[validation], props.disabled && "bg-secondary-200", lbType !== "addon" && "rounded-l-sm", !button && "rounded-r", !(label || button) ? className : inputClassName) }, register));
        return label || button ? react_1.default.createElement(
          "div",
          { className: (0, classnames_1.default)("flex", lbType === "default" ? "flex-col" : "flex-row", className) },
          label && react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("flex", lbType === "default" && "pb-2", lbType === "row:1/3" && "w-1/3", lbType === "row:1/4" && "w-1/4", lbType === "row:2/5" && "w-2/5", lbType === "addon" && "border border-secondary-400 rounded-l-sm py-0.5 px-3 bg-secondary-200 text-secondary-500") },
            react_1.default.createElement("span", { className: (0, classnames_1.default)(lbType !== "default" && "m-auto") }, label)
          ),
          button ? react_1.default.createElement(
            "div",
            { className: "flex flex-row w-full" },
            input,
            react_1.default.createElement(Button_1.Button, (0, tslib_1.__assign)({ shape: "flat", className: "rounded-r-sm" }, button), button.label)
          ) : input
        ) : input;
      };
      exports.TextInput = TextInput;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Login/Login.js
  var require_Login = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Login/Login.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Login = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var react_hook_form_1 = require_index_cjs();
      var TextInput_1 = require_TextInput();
      var utils_1 = require_utils();
      var Button_1 = require_Button();
      var Spinner_1 = require_Spinner();
      function Login2(_a) {
        var onLoginClick = _a.onLoginClick, companyName = _a.companyName, onSignUpClick = _a.onSignUpClick, isLoading = _a.isLoading, useRegularLogin = _a.useRegularLogin, thirdPartyLogins = _a.thirdPartyLogins, className = _a.className, style = _a.style;
        var _b = (0, react_hook_form_1.useForm)(), register = _b.register, handleSubmit = _b.handleSubmit, formState = _b.formState, reset = _b.reset, setValue = _b.setValue;
        var err = formState.errors, submitCount = formState.submitCount;
        var onSubmit = function(data) {
          reset();
          setValue("email", data.email);
          setValue("password", data.password);
          onLoginClick === null || onLoginClick === void 0 ? void 0 : onLoginClick(data);
        };
        var inputParentClass = "rounded-md text-sm font-medium";
        var inputClass = "py-2.5 pl-3 text-base font-semibold " + (isLoading ? "bg-gray-200" : "bg-gray-50");
        var emailErr = submitCount > 0 && err.email;
        var passErr = submitCount > 0 && err.password;
        return react_1.default.createElement(
          "form",
          { className: (0, classnames_1.default)("bg-white rounded max-w-lg w-full p-10", className), style, onSubmit: handleSubmit(onSubmit) },
          react_1.default.createElement(
            "p",
            { tabIndex: 0, className: "focus:outline-none text-2xl font-extrabold leading-6 text-gray-800" },
            "Login to ",
            companyName || "your account"
          ),
          onSignUpClick && react_1.default.createElement(
            "p",
            { tabIndex: 0, className: "focus:outline-none text-sm mt-4 font-medium leading-none text-gray-500" },
            "Dont have account?",
            react_1.default.createElement("a", { onClick: isLoading ? void 0 : onSignUpClick, className: (0, classnames_1.default)("\n                    hover:text-gray-500 focus:text-gray-500 focus:outline-none\n                    focus:underline hover:underline text-sm font-medium leading-none\n                    text-gray-800", isLoading ? "cursor-not-allowed" : "cursor-pointer") }, " Sign up here")
          ),
          react_1.default.createElement("div", { className: "mt-4" }),
          thirdPartyLogins === null || thirdPartyLogins === void 0 ? void 0 : thirdPartyLogins.map(function(x3, i4) {
            return react_1.default.createElement(ThirdPartyBtn, (0, tslib_1.__assign)({}, x3, { disabled: isLoading, key: i4 }));
          }),
          thirdPartyLogins && useRegularLogin && react_1.default.createElement(
            "div",
            { className: "w-full flex items-center justify-between py-5" },
            react_1.default.createElement("hr", { className: "w-full bg-gray-400" }),
            react_1.default.createElement("p", { className: "text-base font-medium leading-4 px-2.5 text-gray-400" }, "OR"),
            react_1.default.createElement("hr", { className: "w-full bg-gray-400" })
          ),
          useRegularLogin && react_1.default.createElement(
            react_1.default.Fragment,
            null,
            react_1.default.createElement(TextInput_1.TextInput, { label: "Email", className: inputParentClass, inputClassName: inputClass, disabled: isLoading, validation: emailErr ? "danger" : "default", register: register("email", { required: true, pattern: utils_1.regexpUtil.email }) }),
            react_1.default.createElement(
              "div",
              { className: "font-medium tracking-wide text-danger-500 text-sm mt-1 ml-1" },
              "\u200D",
              emailErr ? "Please enter a valid email" : ""
            ),
            react_1.default.createElement(TextInput_1.TextInput, { label: "Password", type: "password", className: inputParentClass, inputClassName: inputClass, disabled: isLoading, validation: emailErr ? "danger" : "default", register: register("password", { required: true }) }),
            react_1.default.createElement(
              "div",
              { className: "font-medium tracking-wide text-danger-500 text-sm mt-1 ml-1" },
              "\u200D",
              passErr ? "Please enter your password" : ""
            ),
            react_1.default.createElement(
              "div",
              { className: "mt-6" },
              react_1.default.createElement(Button_1.Button, { size: "auto", type: "primary", className: "font-bold leading-none border rounded h-12 text-lg", disabled: isLoading, htmlType: "submit" }, isLoading ? react_1.default.createElement(Spinner_1.Spinner, { size: "xs", className: "m-auto" }) : "Log In")
            )
          )
        );
      }
      exports.Login = Login2;
      var ThirdPartyBtn = function(_a) {
        var disabled = _a.disabled, name2 = _a.name, logo = _a.logo, onClick = _a.onClick;
        return react_1.default.createElement(
          Button_1.Button,
          { size: "auto", outline: true, type: "secondary", disabled, onClick, className: "py-2.5 px-3 rounded-md flex items-center mt-3.5" },
          logo,
          react_1.default.createElement(
            "p",
            { className: "text-base font-medium ml-4" },
            "Login With ",
            name2
          )
        );
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/Modal/Modal.js
  var require_Modal = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/Modal/Modal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Modal = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var Backdrop_1 = require_Backdrop();
      function Modal(_a) {
        var _b = _a.zIndex, zIndex = _b === void 0 ? 1004 : _b, className = _a.className, style = _a.style, header = _a.header, onClose = _a.onClose, onBackdropClick = _a.onBackdropClick, children = _a.children;
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          react_1.default.createElement(Backdrop_1.Backdrop, (0, tslib_1.__assign)({}, { zIndex: zIndex - 1, onBackdropClick, transition: false })),
          react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2", "border border-secondary-300 shadow-lg bg-white w-11/12 md:max-w-md mx-auto rounded overflow-y-auto", className), style: (0, tslib_1.__assign)({ zIndex }, style) },
            react_1.default.createElement(
              "div",
              { className: "relative" },
              onClose && react_1.default.createElement(
                "div",
                { className: "cursor-pointer absolute top-3.5 right-3.5", onClick: onClose },
                react_1.default.createElement(
                  "svg",
                  { className: "fill-current text-black", xmlns: "http://www.w3.org/2000/svg", width: "22", height: "22", viewBox: "0 0 18 18" },
                  react_1.default.createElement("path", { d: "M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z" })
                )
              ),
              react_1.default.createElement(
                "div",
                { className: "py-4 px-6" },
                header && react_1.default.createElement("div", { className: "pb-3" }, (0, util_lib_1.isType)(header, "string") ? react_1.default.createElement("p", { className: "text-2xl font-bold" }, header) : header),
                children
              )
            )
          )
        );
      }
      exports.Modal = Modal;
    }
  });

  // node_modules/my-alyce-component-lib/dist/components/SquareGrid/SquareGrid.js
  var require_SquareGrid = __commonJS({
    "node_modules/my-alyce-component-lib/dist/components/SquareGrid/SquareGrid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SquareGrid = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var util_lib_1 = require_dist();
      var SquareGrid = (
        /** @class */
        function(_super) {
          (0, tslib_1.__extends)(SquareGrid2, _super);
          function SquareGrid2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
              sizeBy: "vw"
            };
            _this.componentDidMount = function() {
              var setSizeBy = function() {
                var sizeBy = window.innerHeight > window.innerWidth ? "vw" : "vh";
                if (sizeBy === _this.state.sizeBy)
                  return;
                _this.setState({ sizeBy });
              };
              setSizeBy();
              _this.resizeRef = onResize(setSizeBy);
            };
            _this.componentWillUnmount = function() {
              var _a;
              return (_a = _this.resizeRef) === null || _a === void 0 ? void 0 : _a.stop();
            };
            _this.render = function() {
              var p2 = _this.props;
              var s = _this.state;
              var size = "85" + s.sizeBy;
              return react_1.default.createElement(
                "div",
                { className: "border flex flex-col", style: { height: size, width: size } },
                react_1.default.createElement(GridFull, { items: p2.items })
              );
            };
            return _this;
          }
          return SquareGrid2;
        }(react_1.Component)
      );
      exports.SquareGrid = SquareGrid;
      function GridFull(p2) {
        var _a = (0, react_1.useState)("0"), size = _a[0], setSize = _a[1];
        var _b = (0, react_1.useState)([]), rows = _b[0], setRows = _b[1];
        (0, react_1.useEffect)(function() {
          var nOfItems = p2.items.length;
          var nRows = Math.ceil(Math.sqrt(nOfItems));
          var rows2 = (0, util_lib_1.arrDivide)(p2.items, nOfItems / nRows);
          setRows(rows2);
          setSize((100 / rows2.length).toFixed(5) + "%");
        }, [p2.items]);
        return react_1.default.createElement(react_1.default.Fragment, null, rows.map(function(rw, i4) {
          return react_1.default.createElement("div", { className: "flex flex-row", style: { height: size }, key: i4 }, rw.map(function(children, i5) {
            return react_1.default.createElement(GridItem, (0, tslib_1.__assign)({}, { children, size }, { key: i5 }));
          }));
        }));
      }
      function GridItem(_a) {
        var children = _a.children, size = _a.size;
        return react_1.default.createElement("div", { style: { width: size }, className: "h-full m-auto" }, children);
      }
      function onResize(fct) {
        addEventListener("resize", fct);
        return { stop: function() {
          return removeEventListener("resize", fct);
        } };
      }
    }
  });

  // node_modules/my-alyce-component-lib/dist/forms/Radio/Radio.js
  var require_Radio = __commonJS({
    "node_modules/my-alyce-component-lib/dist/forms/Radio/Radio.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Radio = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var Radio = function(_a) {
        var label = _a.label, disabled = _a.disabled, props = (0, tslib_1.__rest)(_a, ["label", "disabled"]);
        return react_1.default.createElement(
          "label",
          { className: "inline-flex items-center" },
          react_1.default.createElement("input", (0, tslib_1.__assign)({ type: "radio", name: "vehicle", className: "h-5 w-5 text-red-600", disabled }, props)),
          label && react_1.default.createElement("span", { className: "ml-2 text-gray-700" }, label)
        );
      };
      exports.Radio = Radio;
    }
  });

  // node_modules/my-alyce-component-lib/dist/forms/TextArea/TextArea.js
  var require_TextArea = __commonJS({
    "node_modules/my-alyce-component-lib/dist/forms/TextArea/TextArea.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TextArea = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var utils_1 = require_utils();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      function TextArea(_a) {
        var _b = _a.validation, validation = _b === void 0 ? "default" : _b, className = _a.className, label = _a.label, _c = _a.labelType, labelType = _c === void 0 ? "default" : _c, inputClassName = _a.inputClassName, register = _a.register, props = (0, tslib_1.__rest)(_a, ["validation", "className", "label", "labelType", "inputClassName", "register"]);
        var lbType = label && labelType;
        var textarea = react_1.default.createElement("textarea", (0, tslib_1.__assign)({ alt: label }, props, { className: (0, classnames_1.default)("px-3 py-1.5 outline-0 border w-full rounded-r-sm", utils_1.TextInputBorderMap[validation], props.disabled && "bg-secondary-200", lbType !== "addon" && "rounded-l-sm", !label ? className : inputClassName) }));
        return label ? react_1.default.createElement(
          "div",
          { className: (0, classnames_1.default)("flex", lbType === "default" ? "flex-col" : "flex-row", className) },
          label && react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("flex", lbType === "default" && "pb-2", lbType === "row:1/3" && "w-1/3", lbType === "row:1/4" && "w-1/4", lbType === "row:2/5" && "w-2/5", lbType === "addon" && "border border-secondary-400 rounded-l-sm py-0.5 px-3 bg-secondary-200 text-secondary-500") },
            react_1.default.createElement("span", { className: (0, classnames_1.default)(lbType !== "default" && "m-auto") }, label)
          ),
          textarea
        ) : textarea;
      }
      exports.TextArea = TextArea;
    }
  });

  // node_modules/my-alyce-component-lib/dist/forms/Toggle/Toggle.js
  var require_Toggle = __commonJS({
    "node_modules/my-alyce-component-lib/dist/forms/Toggle/Toggle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Toggle = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var Toggle = function(_a) {
        var onChange = _a.onChange, label = _a.label, props = (0, tslib_1.__rest)(_a, ["onChange", "label"]);
        var _b = (0, react_1.useState)(false), isChecked = _b[0], setIsChecked = _b[1];
        return react_1.default.createElement(
          "div",
          { className: "flex flex-col" },
          react_1.default.createElement(
            "label",
            { className: "mt-3 inline-flex items-center cursor-pointer" },
            react_1.default.createElement(
              "span",
              { className: "relative" },
              react_1.default.createElement("span", { className: "block w-10 h-6 rounded-full shadow-inner ".concat(isChecked ? "bg-primary-300" : "bg-secondary-200") }),
              react_1.default.createElement(
                "span",
                { className: "absolute block w-4 h-4 mt-1 ml-1 rounded-full shadow inset-y-0 left-0 focus-within:shadow-outline transition-transform duration-300 ease-in-out ".concat(isChecked ? "transform translate-x-full bg-secondary-300" : "bg-secondary-400") },
                react_1.default.createElement("input", (0, tslib_1.__assign)({}, props, { type: "checkbox", className: "absolute opacity-0 w-0 h-0", onChange: function(x3) {
                  setIsChecked(x3.target.checked);
                  onChange(x3.target.checked);
                } }))
              )
            ),
            label && react_1.default.createElement("span", { className: "ml-3 text-sm" }, label)
          )
        );
      };
      exports.Toggle = Toggle;
    }
  });

  // node_modules/my-alyce-component-lib/dist/navigation/NavDrawer/NavDrawer.js
  var require_NavDrawer = __commonJS({
    "node_modules/my-alyce-component-lib/dist/navigation/NavDrawer/NavDrawer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NavDrawer = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var util_lib_1 = require_dist();
      var Avatar_1 = require_Avatar();
      var Backdrop_1 = require_Backdrop();
      var utils_1 = require_utils();
      var NavDrawer = function(_a) {
        var brand = _a.brand, _b = _a.fixed, fixed = _b === void 0 ? false : _b, _c = _a.zIndex, zIndex = _c === void 0 ? 1002 : _c, user = _a.user, onBrandClick = _a.onBrandClick, onAvatarClick = _a.onAvatarClick, onBackdropClick = _a.onBackdropClick, menuItems = _a.menuItems, isOpen = _a.isOpen, className = _a.className, style = _a.style;
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          fixed && isOpen && react_1.default.createElement(Backdrop_1.Backdrop, (0, tslib_1.__assign)({}, { onBackdropClick, zIndex: zIndex - 1 })),
          react_1.default.createElement(
            "div",
            { className: (0, classnames_1.default)("\n        flex flex-col bg-white\n        dark:bg-gray-800 dark:border-gray-600\n        shadow text-secondary-600 w-64\n        transition-all duration-500", fixed && "h-screen fixed top-0 " + (fixed === "left" ? "left-0" : "right-0"), fixed && [
              !isOpen && fixed === "left" && "-translate-x-full",
              !isOpen && fixed === "right" && "translate-x-full"
            ], utils_1.customScrollBar, className), style: (0, tslib_1.__assign)({ zIndex }, style) },
            brand && react_1.default.createElement("div", { className: (0, classnames_1.default)("border-b border-secondary-200 px-2 py-1.5", onBrandClick && "cursor-pointer"), onClick: onBrandClick }, (0, util_lib_1.isType)(brand, "string") ? react_1.default.createElement("h2", { className: (0, classnames_1.default)("text-3xl font-semibold text-gray-800 dark:text-white") }, brand) : brand),
            user && react_1.default.createElement(
              "div",
              { className: (0, classnames_1.default)("flex items-center border-b border-secondary-200 pl-1.5 py-2", onAvatarClick && "cursor-pointer"), onClick: onAvatarClick },
              react_1.default.createElement(Avatar_1.Avatar, (0, tslib_1.__assign)({ dataState: "done", size: "sm" }, user)),
              react_1.default.createElement("h4", { className: "ml-1 font-medium text-gray-600 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200" }, user.name)
            ),
            react_1.default.createElement(
              "div",
              { className: "flex flex-col justify-between flex-1" },
              react_1.default.createElement("nav", { className: "px-1.5" }, menuItems.map(function(item, i4) {
                return react_1.default.createElement(MenuItem, (0, tslib_1.__assign)({}, item, { key: i4 }));
              }))
            )
          )
        );
      };
      exports.NavDrawer = NavDrawer;
      var MenuItemWrap = function(_a) {
        var children = _a.children, isActive = _a.isActive, getHeight = _a.getHeight, props = (0, tslib_1.__rest)(_a, ["children", "isActive", "getHeight"]);
        return react_1.default.createElement("div", (0, tslib_1.__assign)({ className: (0, classnames_1.default)("\n        flex items-center\n        my-1 px-4 py-2 rounded-md\n        text-gray-600 dark:text-gray-400\n    ", props.onClick && "cursor-pointer", isActive ? "bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200" : "hover:bg-gray-200 dark:hover:bg-gray-700 hover:text-gray-700 dark:hover:text-gray-200") }, props), children);
      };
      var MenuItem = function(p2) {
        switch (p2.type) {
          case "action": {
            var isActive = p2.isActive, icon = p2.icon, title = p2.title, onClick = p2.onClick;
            return (0, util_lib_1.isType)(title, "string") ? react_1.default.createElement(
              MenuItemWrap,
              (0, tslib_1.__assign)({}, { isActive, onClick }),
              icon && icon,
              react_1.default.createElement("span", { className: "mx-4 font-medium" }, title)
            ) : title;
          }
          case "break":
            return react_1.default.createElement("hr", { className: "my-1 dark:border-gray-600" });
          case "section":
            return react_1.default.createElement(
              "div",
              { className: "\r\n                overflow-hidden my-1 py-2\r\n                text-gray-600 dark:text-gray-400\r\n            " },
              react_1.default.createElement("span", { className: "px-3 font-medium" }, p2.title)
            );
          case "sub-menu": {
            var icon = p2.icon, title = p2.title, subMenu = p2.subMenu;
            var _a = (0, react_1.useState)(false), isExpanded_1 = _a[0], setIsExpanded_1 = _a[1];
            return react_1.default.createElement(
              react_1.default.Fragment,
              null,
              react_1.default.createElement(
                MenuItemWrap,
                (0, tslib_1.__assign)({}, { isActive: isExpanded_1, onClick: function() {
                  return setIsExpanded_1(!isExpanded_1);
                } }),
                icon && icon,
                react_1.default.createElement("span", { className: "mx-4 font-medium" }, title),
                react_1.default.createElement(
                  "svg",
                  { className: (0, classnames_1.default)("svg-fix transition-transform ml-auto mr-1.5", isExpanded_1 && "-rotate-90"), stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 16 16", height: "1em", width: "1em", xmlns: "http://www.w3.org/2000/svg" },
                  react_1.default.createElement("path", { "fill-rule": "evenodd", d: "M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" })
                )
              ),
              react_1.default.createElement("div", { className: (0, classnames_1.default)("overflow-hidden transition-all duration-700", isExpanded_1 ? "max-h-screen" : "max-h-0") }, subMenu.map(function(item, i4) {
                return react_1.default.createElement(MenuItem, (0, tslib_1.__assign)({}, item, { key: i4 }));
              }))
            );
          }
          default:
            console.error(p2);
            throw new Error("This type of MenuItem is not implemented.");
        }
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/navigation/TopBar/TopBar.js
  var require_TopBar = __commonJS({
    "node_modules/my-alyce-component-lib/dist/navigation/TopBar/TopBar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TopBar = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var util_lib_1 = require_dist();
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importStar)(require_react());
      var menuOut = react_1.default.createElement("path", { d: "M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM142.4 642.1L298.7 519a8.84 8.84 0 0 0 0-13.9L142.4 381.9c-5.8-4.6-14.4-.5-14.4 6.9v246.3a8.9 8.9 0 0 0 14.4 7z" });
      var menuIn = react_1.default.createElement("path", { d: "M408 442h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8zm-8 204c0 4.4 3.6 8 8 8h480c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8H408c-4.4 0-8 3.6-8 8v56zm504-486H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zm0 632H120c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM115.4 518.9L271.7 642c5.8 4.6 14.4.5 14.4-6.9V388.9c0-7.4-8.5-11.5-14.4-6.9L115.4 505.1a8.74 8.74 0 0 0 0 13.8z" });
      function TopBar2(_a) {
        var fixed = _a.fixed, onMenuExpand = _a.onMenuExpand, leftNavItems = _a.leftNavItems, centerContent = _a.centerContent, rightNavItems = _a.rightNavItems, _b = _a.zIndex, zIndex = _b === void 0 ? 1e3 : _b, className = _a.className, style = _a.style, _c = _a.addSpacer, addSpacer = _c === void 0 ? false : _c, menuIsExpanded = _a.menuIsExpanded;
        var _d = (0, react_1.useState)(0), height = _d[0], setHeight = _d[1];
        var elRef = (0, react_1.useRef)(null);
        var observer = (0, react_1.useRef)(new ResizeObserver(function(entries) {
          return setHeight(entries[0].borderBoxSize[0].blockSize);
        }));
        (0, react_1.useEffect)(function() {
          if (elRef.current)
            observer.current.observe(elRef.current);
          return function() {
            return observer.current.disconnect();
          };
        }, [elRef, observer]);
        var _e = (0, react_1.useState)(false), isExpanded = _e[0], setExpanded = _e[1];
        var navBtns = function(arr) {
          return arr && arr.map(function(_a2, i4) {
            var children = _a2.children, onClick = _a2.onClick;
            return react_1.default.createElement(TopBarBtn, (0, tslib_1.__assign)({}, { children, onClick }, { key: i4 }));
          });
        };
        var exp = (0, util_lib_1.isType)(menuIsExpanded, "boolean") ? !menuIsExpanded : !isExpanded;
        return react_1.default.createElement(
          react_1.default.Fragment,
          null,
          addSpacer && fixed && react_1.default.createElement("div", { style: { height }, className: "w-full" }),
          react_1.default.createElement(
            "nav",
            { ref: elRef, className: (0, classnames_1.default)("bg-white shadow dark:bg-gray-800 flex justify-between p-2 border", fixed && "fixed top-0 left-0 right-0", className), style: (0, tslib_1.__assign)({ zIndex }, style) },
            react_1.default.createElement(
              "ul",
              { className: "flex flex-row" },
              onMenuExpand && react_1.default.createElement(
                TopBarBtn,
                { onClick: function() {
                  setExpanded(!exp);
                  onMenuExpand(!exp);
                } },
                react_1.default.createElement("svg", { stroke: "currentColor", fill: "currentColor", strokeWidth: "0", viewBox: "0 0 1024 1024", height: "1em", width: "1em", xmlns: "http://www.w3.org/2000/svg", className: "svg-fix" }, exp ? menuIn : menuOut)
              ),
              navBtns(leftNavItems)
            ),
            centerContent,
            react_1.default.createElement("ul", { className: "flex flex-row" }, navBtns(rightNavItems))
          )
        );
      }
      exports.TopBar = TopBar2;
      var TopBarBtn = function(p2) {
        return react_1.default.createElement(
          "li",
          { className: "p-4 text-neutral-500 hover:text-neutral-800 min-w-2" },
          react_1.default.createElement("span", { className: "cursor-pointer", onClick: p2.onClick }, p2.children)
        );
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/pages/Login/LoginGradients.js
  var require_LoginGradients = __commonJS({
    "node_modules/my-alyce-component-lib/dist/pages/Login/LoginGradients.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.grTo = exports.grFrom = exports.gradients = void 0;
      exports.gradients = {
        1: "bg-gradient-to-t",
        2: "bg-gradient-to-tr",
        3: "bg-gradient-to-r",
        4: "bg-gradient-to-br",
        5: "bg-gradient-to-b",
        6: "bg-gradient-to-bl",
        7: "bg-gradient-to-l",
        8: "bg-gradient-to-tl"
      };
      exports.grFrom = {
        slate: "from-slate-400",
        gray: "from-gray-400",
        red: "from-red-400",
        pink: "from-pink-400",
        purple: "from-purple-400",
        indigo: "from-indigo-400",
        blue: "from-blue-400",
        cyan: "from-cyan-400",
        teal: "from-teal-400",
        green: "from-green-400",
        lime: "from-lime-400",
        yellow: "from-yellow-400",
        amber: "from-amber-400",
        orange: "from-orange-400",
        brown: "from-brown-400",
        grey: "from-grey-400",
        emerald: "from-emerald-400",
        rose: "from-rose-400"
      };
      exports.grTo = {
        slate: "to-slate-900",
        gray: "to-gray-900",
        red: "to-red-900",
        pink: "to-pink-900",
        purple: "to-purple-900",
        indigo: "to-indigo-900",
        blue: "to-blue-900",
        cyan: "to-cyan-900",
        teal: "to-teal-900",
        green: "to-green-900",
        lime: "to-lime-900",
        yellow: "to-yellow-900",
        amber: "to-amber-900",
        orange: "to-orange-900",
        brown: "to-brown-900",
        grey: "to-grey-900",
        emerald: "to-emerald-900",
        rose: "to-rose-900"
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/pages/Login/LoginPage.js
  var require_LoginPage = __commonJS({
    "node_modules/my-alyce-component-lib/dist/pages/Login/LoginPage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LoginPage = void 0;
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      var classnames_1 = (0, tslib_1.__importDefault)(require_classnames());
      var react_1 = (0, tslib_1.__importDefault)(require_react());
      var react_hook_form_1 = require_index_cjs();
      var __1 = require_dist2();
      var Button_1 = require_Button();
      var TextInput_1 = require_TextInput();
      var utils_1 = require_utils();
      var LoginGradients_1 = require_LoginGradients();
      function LoginPage(_a) {
        var thirdPartyLogins = _a.thirdPartyLogins, useRegularLogin = _a.useRegularLogin, brand = _a.brand, companyName = _a.companyName, bgGradientFrom = _a.bgGradientFrom, bgGradientTo = _a.bgGradientTo, onLoginClick = _a.onLoginClick, isLoading = _a.isLoading, gradient = _a.gradient, onSignUpClick = _a.onSignUpClick, className = _a.className, style = _a.style;
        var _b = (0, react_hook_form_1.useForm)(), register = _b.register, handleSubmit = _b.handleSubmit, formState = _b.formState, reset = _b.reset, setValue = _b.setValue;
        var err = formState.errors, submitCount = formState.submitCount;
        var onSubmit = function(data) {
          reset();
          setValue("email", data.email);
          setValue("password", data.password);
          onLoginClick === null || onLoginClick === void 0 ? void 0 : onLoginClick(data);
        };
        var inputParentClass = "rounded-md text-sm font-medium";
        var inputClass = "py-2.5 pl-3 text-base font-semibold " + (isLoading ? "bg-gray-200" : "bg-gray-50");
        var useGradient = bgGradientFrom && bgGradientTo && gradient;
        var emailErr = submitCount > 0 && err.email;
        var passErr = submitCount > 0 && err.password;
        return react_1.default.createElement(
          "div",
          { className: (0, classnames_1.default)("h-full w-full py-14 px-4", useGradient && LoginGradients_1.gradients[gradient], useGradient && LoginGradients_1.grFrom[bgGradientFrom], useGradient && LoginGradients_1.grTo[bgGradientTo], className), style },
          react_1.default.createElement(
            "div",
            { className: "flex flex-col items-center justify-center" },
            brand,
            react_1.default.createElement(
              "form",
              { className: "bg-white shadow-lg rounded lg:w-2/3 md:w-3/4 max-w-lg w-full p-10 border border-secondary-200", onSubmit: handleSubmit(onSubmit) },
              react_1.default.createElement(
                "p",
                { tabIndex: 0, className: "focus:outline-none text-2xl font-extrabold leading-6 text-gray-800" },
                "Login to ",
                companyName || "your account"
              ),
              onSignUpClick && react_1.default.createElement(
                "p",
                { tabIndex: 0, className: "focus:outline-none text-sm mt-4 font-medium leading-none text-gray-500" },
                "Dont have account?",
                react_1.default.createElement("a", { onClick: isLoading ? void 0 : onSignUpClick, className: (0, classnames_1.default)("\n                            hover:text-gray-500 focus:text-gray-500 focus:outline-none\n                            focus:underline hover:underline text-sm font-medium leading-none\n                            text-gray-800", isLoading ? "cursor-not-allowed" : "cursor-pointer") }, "Sign up here")
              ),
              react_1.default.createElement("div", { className: "mt-4" }),
              thirdPartyLogins === null || thirdPartyLogins === void 0 ? void 0 : thirdPartyLogins.map(function(x3, i4) {
                return react_1.default.createElement(ThirdPartyBtn, (0, tslib_1.__assign)({}, x3, { disabled: isLoading, key: i4 }));
              }),
              thirdPartyLogins && useRegularLogin && react_1.default.createElement(
                "div",
                { className: "w-full flex items-center justify-between py-5" },
                react_1.default.createElement("hr", { className: "w-full bg-gray-400" }),
                react_1.default.createElement("p", { className: "text-base font-medium leading-4 px-2.5 text-gray-400" }, "OR"),
                react_1.default.createElement("hr", { className: "w-full bg-gray-400" })
              ),
              useRegularLogin && react_1.default.createElement(
                react_1.default.Fragment,
                null,
                react_1.default.createElement(TextInput_1.TextInput, { label: "Email", className: inputParentClass, inputClassName: inputClass, disabled: isLoading, validation: emailErr ? "danger" : "default", register: register("email", { required: true, pattern: utils_1.regexpUtil.email }) }),
                react_1.default.createElement(
                  "div",
                  { className: "font-medium tracking-wide text-danger-500 text-sm mt-1 ml-1" },
                  "\u200D",
                  emailErr ? "Please enter a valid email" : ""
                ),
                react_1.default.createElement(TextInput_1.TextInput, { label: "Password", type: "password", className: inputParentClass, inputClassName: inputClass, disabled: isLoading, validation: emailErr ? "danger" : "default", register: register("password", { required: true }) }),
                react_1.default.createElement(
                  "div",
                  { className: "font-medium tracking-wide text-danger-500 text-sm mt-1 ml-1" },
                  "\u200D",
                  passErr ? "Please enter your password" : ""
                ),
                react_1.default.createElement(
                  "div",
                  { className: "mt-6" },
                  react_1.default.createElement(Button_1.Button, { size: "auto", type: "primary", className: "font-bold leading-none border rounded h-12 text-lg", disabled: isLoading, htmlType: "submit" }, isLoading ? react_1.default.createElement(__1.Spinner, { size: "xs", className: "m-auto" }) : "Log In")
                )
              )
            )
          )
        );
      }
      exports.LoginPage = LoginPage;
      var ThirdPartyBtn = function(_a) {
        var disabled = _a.disabled, name2 = _a.name, logo = _a.logo, onClick = _a.onClick;
        return react_1.default.createElement(
          Button_1.Button,
          { size: "auto", outline: true, type: "secondary", disabled, onClick, className: "py-2.5 px-3 rounded-md flex items-center mt-3.5" },
          logo,
          react_1.default.createElement(
            "p",
            { className: "text-base font-medium ml-4" },
            "Login With ",
            name2
          )
        );
      };
    }
  });

  // node_modules/my-alyce-component-lib/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/my-alyce-component-lib/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
      (0, tslib_1.__exportStar)(require_general_types(), exports);
      (0, tslib_1.__exportStar)(require_Accordion(), exports);
      (0, tslib_1.__exportStar)(require_Alert(), exports);
      (0, tslib_1.__exportStar)(require_Avatar(), exports);
      (0, tslib_1.__exportStar)(require_AvatarGroup(), exports);
      (0, tslib_1.__exportStar)(require_Backdrop(), exports);
      (0, tslib_1.__exportStar)(require_Badge(), exports);
      (0, tslib_1.__exportStar)(require_Button(), exports);
      (0, tslib_1.__exportStar)(require_Chevron(), exports);
      (0, tslib_1.__exportStar)(require_Dropdown(), exports);
      (0, tslib_1.__exportStar)(require_Login(), exports);
      (0, tslib_1.__exportStar)(require_Modal(), exports);
      (0, tslib_1.__exportStar)(require_Spinner(), exports);
      (0, tslib_1.__exportStar)(require_SquareGrid(), exports);
      (0, tslib_1.__exportStar)(require_Radio(), exports);
      (0, tslib_1.__exportStar)(require_TextArea(), exports);
      (0, tslib_1.__exportStar)(require_TextInput(), exports);
      (0, tslib_1.__exportStar)(require_Toggle(), exports);
      (0, tslib_1.__exportStar)(require_NavDrawer(), exports);
      (0, tslib_1.__exportStar)(require_TopBar(), exports);
      (0, tslib_1.__exportStar)(require_LoginPage(), exports);
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module2) {
      "use strict";
      if (false) {
        module2.exports = null;
      } else {
        module2.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module2) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i4 = 0; i4 < 10; i4++) {
            test2["_" + String.fromCharCode(i4)] = i4;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module2.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i4 = 0; i4 < symbols.length; i4++) {
              if (propIsEnumerable.call(from, symbols[i4])) {
                to[symbols[i4]] = from[symbols[i4]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module2) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module2.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module2) {
      module2.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module2) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module2.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module2) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x3) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module2.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x3, y4) {
          if (x3 === y4) {
            return x3 !== 0 || 1 / x3 === 1 / y4;
          } else {
            return x3 !== x3 && y4 !== y4;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i4 = 0; i4 < propValue.length; i4++) {
              var error = typeChecker(propValue, i4, componentName, location2, propFullName + "[" + i4 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i4 = 0; i4 < expectedValues.length; i4++) {
              if (is(propValue, expectedValues[i4])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
            var checker = arrayOfTypeCheckers[i4];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i4 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i5 = 0; i5 < arrayOfTypeCheckers.length; i5++) {
              var checker2 = arrayOfTypeCheckers[i5];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module2) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module2.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module2.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/react-burger-menu/lib/helpers/baseStyles.js
  var require_baseStyles = __commonJS({
    "node_modules/react-burger-menu/lib/helpers/baseStyles.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var styles = {
        overlay: function overlay(isOpen) {
          return {
            position: "fixed",
            zIndex: 1e3,
            width: "100%",
            height: "100%",
            background: "rgba(0, 0, 0, 0.3)",
            opacity: isOpen ? 1 : 0,
            MozTransform: isOpen ? "" : "translate3d(100%, 0, 0)",
            MsTransform: isOpen ? "" : "translate3d(100%, 0, 0)",
            OTransform: isOpen ? "" : "translate3d(100%, 0, 0)",
            WebkitTransform: isOpen ? "" : "translate3d(100%, 0, 0)",
            transform: isOpen ? "" : "translate3d(100%, 0, 0)",
            transition: isOpen ? "opacity 0.3s" : "opacity 0.3s, transform 0s 0.3s"
          };
        },
        menuWrap: function menuWrap(isOpen, width, right) {
          return {
            position: "fixed",
            right: right ? 0 : "inherit",
            zIndex: 1100,
            width,
            height: "100%",
            MozTransform: isOpen ? "" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transition: "all 0.5s"
          };
        },
        menu: function menu() {
          return {
            height: "100%",
            boxSizing: "border-box",
            overflow: "auto"
          };
        },
        itemList: function itemList() {
          return {
            height: "100%"
          };
        },
        item: function item() {
          return {
            display: "block"
          };
        }
      };
      exports["default"] = styles;
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/helpers/dom.js
  var require_dom = __commonJS({
    "node_modules/react-burger-menu/lib/helpers/dom.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.focusOnFirstMenuItem = focusOnFirstMenuItem;
      exports.focusOnLastMenuItem = focusOnLastMenuItem;
      exports.focusOnCrossButton = focusOnCrossButton;
      exports.focusOnMenuButton = focusOnMenuButton;
      exports.focusOnMenuItem = focusOnMenuItem;
      exports.focusOnNextMenuItem = focusOnNextMenuItem;
      exports.focusOnPreviousMenuItem = focusOnPreviousMenuItem;
      function focusOnFirstMenuItem() {
        var firstItem = Array.from(document.getElementsByClassName("bm-item")).shift();
        if (firstItem) {
          firstItem.focus();
        }
      }
      function focusOnLastMenuItem() {
        var lastItem = Array.from(document.getElementsByClassName("bm-item")).pop();
        if (lastItem) {
          lastItem.focus();
        }
      }
      function focusOnCrossButton() {
        var crossButton = document.getElementById("react-burger-cross-btn");
        if (crossButton) {
          crossButton.focus();
        }
      }
      function focusOnMenuButton() {
        var menuButton = document.getElementById("react-burger-menu-btn");
        if (menuButton) {
          menuButton.focus();
        }
      }
      function focusOnMenuItem(siblingType) {
        if (document.activeElement.className.includes("bm-item")) {
          var sibling = document.activeElement[siblingType];
          if (sibling) {
            sibling.focus();
          } else {
            focusOnCrossButton();
          }
        } else {
          if (siblingType === "previousElementSibling") {
            focusOnLastMenuItem();
          } else {
            focusOnFirstMenuItem();
          }
        }
      }
      function focusOnNextMenuItem() {
        focusOnMenuItem("nextElementSibling");
      }
      function focusOnPreviousMenuItem() {
        focusOnMenuItem("previousElementSibling");
      }
    }
  });

  // node_modules/react-burger-menu/lib/components/BurgerIcon.js
  var require_BurgerIcon = __commonJS({
    "node_modules/react-burger-menu/lib/components/BurgerIcon.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i4 = 1; i4 < arguments.length; i4++) {
          var source = arguments[i4];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i4 = 0; i4 < props.length; i4++) {
            var descriptor = props[i4];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _get = function get(_x, _x2, _x3) {
        var _again = true;
        _function:
          while (_again) {
            var object = _x, property = _x2, receiver = _x3;
            _again = false;
            if (object === null)
              object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === void 0) {
              var parent = Object.getPrototypeOf(object);
              if (parent === null) {
                return void 0;
              } else {
                _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = void 0;
                continue _function;
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;
              if (getter === void 0) {
                return void 0;
              }
              return getter.call(receiver);
            }
          }
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var BurgerIcon = function(_Component) {
        _inherits(BurgerIcon2, _Component);
        function BurgerIcon2(props) {
          _classCallCheck(this, BurgerIcon2);
          _get(Object.getPrototypeOf(BurgerIcon2.prototype), "constructor", this).call(this, props);
          this.state = {
            hover: false
          };
        }
        _createClass(BurgerIcon2, [{
          key: "getLineStyle",
          value: function getLineStyle(index) {
            return _extends({
              position: "absolute",
              height: "20%",
              left: 0,
              right: 0,
              top: 20 * (index * 2) + "%",
              opacity: this.state.hover ? 0.6 : 1
            }, this.state.hover && this.props.styles.bmBurgerBarsHover);
          }
        }, {
          key: "render",
          value: function render() {
            var _this = this;
            var icon = void 0;
            var buttonStyle = {
              position: "absolute",
              left: 0,
              top: 0,
              zIndex: 1,
              width: "100%",
              height: "100%",
              margin: 0,
              padding: 0,
              border: "none",
              fontSize: 0,
              background: "transparent",
              cursor: "pointer"
            };
            if (this.props.customIcon) {
              var extraProps = {
                className: ("bm-icon " + (this.props.customIcon.props.className || "")).trim(),
                style: _extends({ width: "100%", height: "100%" }, this.props.styles.bmIcon)
              };
              icon = _react2["default"].cloneElement(this.props.customIcon, extraProps);
            } else {
              icon = _react2["default"].createElement(
                "span",
                null,
                [0, 1, 2].map(function(bar) {
                  return _react2["default"].createElement("span", {
                    key: bar,
                    className: ("bm-burger-bars " + _this.props.barClassName + " " + (_this.state.hover ? "bm-burger-bars-hover" : "")).trim(),
                    style: _extends({}, _this.getLineStyle(bar), _this.props.styles.bmBurgerBars)
                  });
                })
              );
            }
            return _react2["default"].createElement(
              "div",
              {
                className: ("bm-burger-button " + this.props.className).trim(),
                style: _extends({ zIndex: 1e3 }, this.props.styles.bmBurgerButton)
              },
              _react2["default"].createElement(
                "button",
                {
                  type: "button",
                  id: "react-burger-menu-btn",
                  onClick: this.props.onClick,
                  onMouseOver: function() {
                    _this.setState({ hover: true });
                    if (_this.props.onIconHoverChange) {
                      _this.props.onIconHoverChange({ isMouseIn: true });
                    }
                  },
                  onMouseOut: function() {
                    _this.setState({ hover: false });
                    if (_this.props.onIconHoverChange) {
                      _this.props.onIconHoverChange({ isMouseIn: false });
                    }
                  },
                  style: buttonStyle
                },
                "Open Menu"
              ),
              icon
            );
          }
        }]);
        return BurgerIcon2;
      }(_react.Component);
      exports["default"] = BurgerIcon;
      BurgerIcon.propTypes = {
        barClassName: _propTypes2["default"].string,
        customIcon: _propTypes2["default"].element,
        styles: _propTypes2["default"].object
      };
      BurgerIcon.defaultProps = {
        barClassName: "",
        className: "",
        styles: {}
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/components/CrossIcon.js
  var require_CrossIcon = __commonJS({
    "node_modules/react-burger-menu/lib/components/CrossIcon.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i4 = 1; i4 < arguments.length; i4++) {
          var source = arguments[i4];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i4 = 0; i4 < props.length; i4++) {
            var descriptor = props[i4];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _get = function get(_x, _x2, _x3) {
        var _again = true;
        _function:
          while (_again) {
            var object = _x, property = _x2, receiver = _x3;
            _again = false;
            if (object === null)
              object = Function.prototype;
            var desc = Object.getOwnPropertyDescriptor(object, property);
            if (desc === void 0) {
              var parent = Object.getPrototypeOf(object);
              if (parent === null) {
                return void 0;
              } else {
                _x = parent;
                _x2 = property;
                _x3 = receiver;
                _again = true;
                desc = parent = void 0;
                continue _function;
              }
            } else if ("value" in desc) {
              return desc.value;
            } else {
              var getter = desc.get;
              if (getter === void 0) {
                return void 0;
              }
              return getter.call(receiver);
            }
          }
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var CrossIcon = function(_Component) {
        _inherits(CrossIcon2, _Component);
        function CrossIcon2() {
          _classCallCheck(this, CrossIcon2);
          _get(Object.getPrototypeOf(CrossIcon2.prototype), "constructor", this).apply(this, arguments);
        }
        _createClass(CrossIcon2, [{
          key: "getCrossStyle",
          value: function getCrossStyle(type) {
            return {
              position: "absolute",
              width: 3,
              height: 14,
              transform: type === "before" ? "rotate(45deg)" : "rotate(-45deg)"
            };
          }
        }, {
          key: "render",
          value: function render() {
            var _this = this;
            var icon;
            var buttonWrapperStyle = {
              position: "absolute",
              width: 24,
              height: 24,
              right: 8,
              top: 8
            };
            var buttonStyle = {
              position: "absolute",
              left: 0,
              top: 0,
              zIndex: 1,
              width: "100%",
              height: "100%",
              margin: 0,
              padding: 0,
              border: "none",
              fontSize: 0,
              background: "transparent",
              cursor: "pointer"
            };
            if (this.props.customIcon) {
              var extraProps = {
                className: ("bm-cross " + (this.props.customIcon.props.className || "")).trim(),
                style: _extends({ width: "100%", height: "100%" }, this.props.styles.bmCross)
              };
              icon = _react2["default"].cloneElement(this.props.customIcon, extraProps);
            } else {
              icon = _react2["default"].createElement(
                "span",
                { style: { position: "absolute", top: "6px", right: "14px" } },
                ["before", "after"].map(function(type, i4) {
                  return _react2["default"].createElement("span", {
                    key: i4,
                    className: ("bm-cross " + _this.props.crossClassName).trim(),
                    style: _extends({}, _this.getCrossStyle(type), _this.props.styles.bmCross)
                  });
                })
              );
            }
            return _react2["default"].createElement(
              "div",
              {
                className: ("bm-cross-button " + this.props.className).trim(),
                style: _extends({}, buttonWrapperStyle, this.props.styles.bmCrossButton)
              },
              _react2["default"].createElement(
                "button",
                _extends({
                  type: "button",
                  id: "react-burger-cross-btn",
                  onClick: this.props.onClick,
                  style: buttonStyle
                }, !this.props.isOpen && { tabIndex: -1 }),
                "Close Menu"
              ),
              icon
            );
          }
        }]);
        return CrossIcon2;
      }(_react.Component);
      exports["default"] = CrossIcon;
      CrossIcon.propTypes = {
        crossClassName: _propTypes2["default"].string,
        customIcon: _propTypes2["default"].element,
        isOpen: _propTypes2["default"].bool,
        styles: _propTypes2["default"].object
      };
      CrossIcon.defaultProps = {
        crossClassName: "",
        className: "",
        styles: {},
        isOpen: false
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menuFactory.js
  var require_menuFactory = __commonJS({
    "node_modules/react-burger-menu/lib/menuFactory.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _slicedToArray = function() {
        function sliceIterator(arr, i4) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i4 && _arr.length === i4)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"])
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        return function(arr, i4) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i4);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();
      var _extends = Object.assign || function(target) {
        for (var i4 = 1; i4 < arguments.length; i4++) {
          var source = arguments[i4];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _react = require_react();
      var _react2 = _interopRequireDefault(_react);
      var _reactDom = require_react_dom();
      var _reactDom2 = _interopRequireDefault(_reactDom);
      var _propTypes = require_prop_types();
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _helpersBaseStyles = require_baseStyles();
      var _helpersBaseStyles2 = _interopRequireDefault(_helpersBaseStyles);
      var _helpersDom = require_dom();
      var _componentsBurgerIcon = require_BurgerIcon();
      var _componentsBurgerIcon2 = _interopRequireDefault(_componentsBurgerIcon);
      var _componentsCrossIcon = require_CrossIcon();
      var _componentsCrossIcon2 = _interopRequireDefault(_componentsCrossIcon);
      exports["default"] = function(styles) {
        if (!styles) {
          throw new Error("No styles supplied");
        }
        var ARROW_DOWN = "ArrowDown";
        var ARROW_UP = "ArrowUp";
        var ESCAPE = "Escape";
        var SPACE = " ";
        var HOME = "Home";
        var END = "End";
        function usePrevious(value) {
          var ref = _react2["default"].useRef(value);
          _react2["default"].useEffect(function() {
            ref.current = value;
          });
          return ref.current;
        }
        var Menu2 = function Menu3(props) {
          var _React$useState = _react2["default"].useState(false);
          var _React$useState2 = _slicedToArray(_React$useState, 2);
          var isOpen = _React$useState2[0];
          var setIsOpen = _React$useState2[1];
          var timeoutId = _react2["default"].useRef();
          var toggleOptions = _react2["default"].useRef({});
          var prevIsOpenProp = usePrevious(props.isOpen);
          _react2["default"].useEffect(function() {
            if (props.isOpen) {
              toggleMenu({ isOpen: true, noStateChange: true });
            }
            return function cleanup() {
              applyWrapperStyles(false);
              clearCurrentTimeout();
            };
          }, []);
          _react2["default"].useEffect(function() {
            var wasToggled = typeof props.isOpen !== "undefined" && props.isOpen !== isOpen && props.isOpen !== prevIsOpenProp;
            if (wasToggled) {
              toggleMenu();
              return;
            }
            if (styles.svg) {
              (function() {
                var morphShape = document.getElementById("bm-morph-shape");
                var path = styles.svg.lib(morphShape).select("path");
                if (isOpen) {
                  styles.svg.animate(path);
                } else {
                  setTimeout(function() {
                    path.attr("d", styles.svg.pathInitial);
                  }, 300);
                }
              })();
            }
          });
          _react2["default"].useEffect(function() {
            var _toggleOptions$current = toggleOptions.current;
            var noStateChange = _toggleOptions$current.noStateChange;
            var focusOnLastItem = _toggleOptions$current.focusOnLastItem;
            if (!noStateChange) {
              props.onStateChange({ isOpen });
            }
            if (!props.disableAutoFocus) {
              if (isOpen) {
                focusOnLastItem ? (0, _helpersDom.focusOnLastMenuItem)() : (0, _helpersDom.focusOnFirstMenuItem)();
              } else {
                if (document.activeElement) {
                  document.activeElement.blur();
                } else {
                  document.body.blur();
                }
              }
            }
            clearCurrentTimeout();
            timeoutId.current = setTimeout(function() {
              timeoutId.current = null;
              if (!isOpen) {
                applyWrapperStyles(false);
              }
            }, 500);
            var defaultOnKeyDown = isOpen ? onKeyDownOpen : onKeyDownClosed;
            var onKeyDown = props.customOnKeyDown || defaultOnKeyDown;
            window.addEventListener("keydown", onKeyDown);
            return function cleanup() {
              window.removeEventListener("keydown", onKeyDown);
            };
          }, [isOpen]);
          function toggleMenu() {
            var options = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
            toggleOptions.current = options;
            applyWrapperStyles();
            setTimeout(function() {
              setIsOpen(function(open2) {
                return typeof options.isOpen !== "undefined" ? options.isOpen : !open2;
              });
            });
          }
          function open() {
            if (typeof props.onOpen === "function") {
              props.onOpen();
            } else {
              toggleMenu();
            }
          }
          function close() {
            if (typeof props.onClose === "function") {
              props.onClose();
            } else {
              toggleMenu();
            }
          }
          function getStyle(style, index) {
            var width = props.width;
            var right = props.right;
            var formattedWidth = typeof width !== "string" ? width + "px" : width;
            return style(isOpen, formattedWidth, right, index);
          }
          function getStyles(el, index, inline) {
            var propName = "bm" + el.replace(el.charAt(0), el.charAt(0).toUpperCase());
            var output = _helpersBaseStyles2["default"][el] ? getStyle(_helpersBaseStyles2["default"][el]) : {};
            if (styles[el]) {
              output = _extends({}, output, getStyle(styles[el], index + 1));
            }
            if (props.styles[propName]) {
              output = _extends({}, output, props.styles[propName]);
            }
            if (inline) {
              output = _extends({}, output, inline);
            }
            if (props.noTransition) {
              delete output.transition;
            }
            return output;
          }
          function handleExternalWrapper(id, wrapperStyles, set) {
            var wrapper = document.getElementById(id);
            if (!wrapper) {
              console.error("Element with ID '" + id + "' not found");
              return;
            }
            var builtStyles = getStyle(wrapperStyles);
            for (var prop in builtStyles) {
              if (builtStyles.hasOwnProperty(prop)) {
                wrapper.style[prop] = set ? builtStyles[prop] : "";
              }
            }
            var applyOverflow = function applyOverflow2(el) {
              return el.style["overflow-x"] = set ? "hidden" : "";
            };
            if (!props.htmlClassName) {
              applyOverflow(document.querySelector("html"));
            }
            if (!props.bodyClassName) {
              applyOverflow(document.querySelector("body"));
            }
          }
          function applyWrapperStyles() {
            var set = arguments.length <= 0 || arguments[0] === void 0 ? true : arguments[0];
            var applyClass = function applyClass2(el, className) {
              return el.classList[set ? "add" : "remove"](className);
            };
            if (props.htmlClassName) {
              applyClass(document.querySelector("html"), props.htmlClassName);
            }
            if (props.bodyClassName) {
              applyClass(document.querySelector("body"), props.bodyClassName);
            }
            if (styles.pageWrap && props.pageWrapId) {
              handleExternalWrapper(props.pageWrapId, styles.pageWrap, set);
            }
            if (styles.outerContainer && props.outerContainerId) {
              handleExternalWrapper(props.outerContainerId, styles.outerContainer, set);
            }
            var menuWrap = document.querySelector(".bm-menu-wrap");
            if (menuWrap) {
              if (set) {
                menuWrap.removeAttribute("hidden");
              } else {
                menuWrap.setAttribute("hidden", true);
              }
            }
          }
          function clearCurrentTimeout() {
            if (timeoutId.current) {
              clearTimeout(timeoutId.current);
            }
          }
          function onKeyDownOpen(e) {
            e = e || window.event;
            switch (e.key) {
              case ESCAPE:
                if (!props.disableCloseOnEsc) {
                  close();
                  (0, _helpersDom.focusOnMenuButton)();
                }
                break;
              case ARROW_DOWN:
                (0, _helpersDom.focusOnNextMenuItem)();
                break;
              case ARROW_UP:
                (0, _helpersDom.focusOnPreviousMenuItem)();
                break;
              case HOME:
                (0, _helpersDom.focusOnFirstMenuItem)();
                break;
              case END:
                (0, _helpersDom.focusOnLastMenuItem)();
                break;
            }
          }
          function onKeyDownClosed(e) {
            e = e || window.event;
            if (e.target === document.getElementById("react-burger-menu-btn")) {
              switch (e.key) {
                case ARROW_DOWN:
                case SPACE:
                  toggleMenu();
                  break;
                case ARROW_UP:
                  toggleMenu({ focusOnLastItem: true });
                  break;
              }
            }
          }
          function handleOverlayClick() {
            if (props.disableOverlayClick === true || typeof props.disableOverlayClick === "function" && props.disableOverlayClick()) {
              return;
            } else {
              close();
            }
          }
          return _react2["default"].createElement(
            "div",
            null,
            !props.noOverlay && _react2["default"].createElement("div", {
              className: ("bm-overlay " + props.overlayClassName).trim(),
              onClick: handleOverlayClick,
              style: getStyles("overlay")
            }),
            props.customBurgerIcon !== false && _react2["default"].createElement(
              "div",
              { style: getStyles("burgerIcon") },
              _react2["default"].createElement(_componentsBurgerIcon2["default"], {
                onClick: open,
                styles: props.styles,
                customIcon: props.customBurgerIcon,
                className: props.burgerButtonClassName,
                barClassName: props.burgerBarClassName,
                onIconStateChange: props.onIconStateChange
              })
            ),
            _react2["default"].createElement(
              "div",
              {
                id: props.id,
                className: ("bm-menu-wrap " + props.className).trim(),
                style: getStyles("menuWrap"),
                "aria-hidden": !isOpen
              },
              styles.svg && _react2["default"].createElement(
                "div",
                {
                  id: "bm-morph-shape",
                  className: ("bm-morph-shape " + props.morphShapeClassName).trim(),
                  style: getStyles("morphShape")
                },
                _react2["default"].createElement(
                  "svg",
                  {
                    width: "100%",
                    height: "100%",
                    viewBox: "0 0 100 800",
                    preserveAspectRatio: "none"
                  },
                  _react2["default"].createElement("path", { d: styles.svg.pathInitial })
                )
              ),
              _react2["default"].createElement(
                "div",
                {
                  className: ("bm-menu " + props.menuClassName).trim(),
                  style: getStyles("menu")
                },
                _react2["default"].createElement(props.itemListElement, {
                  className: ("bm-item-list " + props.itemListClassName).trim(),
                  style: getStyles("itemList")
                }, _react2["default"].Children.map(props.children, function(item, index) {
                  if (item) {
                    var classList = ["bm-item", props.itemClassName, item.props.className].filter(function(className) {
                      return !!className;
                    }).join(" ");
                    var extraProps = _extends({
                      key: index,
                      className: classList,
                      style: getStyles("item", index, item.props.style)
                    }, !isOpen && { tabIndex: -1 });
                    return _react2["default"].cloneElement(item, extraProps);
                  }
                }))
              ),
              props.customCrossIcon !== false && _react2["default"].createElement(
                "div",
                { style: getStyles("closeButton") },
                _react2["default"].createElement(_componentsCrossIcon2["default"], {
                  onClick: close,
                  styles: props.styles,
                  customIcon: props.customCrossIcon,
                  className: props.crossButtonClassName,
                  crossClassName: props.crossClassName,
                  isOpen
                })
              )
            )
          );
        };
        Menu2.propTypes = {
          bodyClassName: _propTypes2["default"].string,
          burgerBarClassName: _propTypes2["default"].string,
          burgerButtonClassName: _propTypes2["default"].string,
          className: _propTypes2["default"].string,
          crossButtonClassName: _propTypes2["default"].string,
          crossClassName: _propTypes2["default"].string,
          customBurgerIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].oneOf([false])]),
          customCrossIcon: _propTypes2["default"].oneOfType([_propTypes2["default"].element, _propTypes2["default"].oneOf([false])]),
          customOnKeyDown: _propTypes2["default"].func,
          disableAutoFocus: _propTypes2["default"].bool,
          disableCloseOnEsc: _propTypes2["default"].bool,
          disableOverlayClick: _propTypes2["default"].oneOfType([_propTypes2["default"].bool, _propTypes2["default"].func]),
          htmlClassName: _propTypes2["default"].string,
          id: _propTypes2["default"].string,
          isOpen: _propTypes2["default"].bool,
          itemClassName: _propTypes2["default"].string,
          itemListClassName: _propTypes2["default"].string,
          itemListElement: _propTypes2["default"].oneOf(["div", "nav"]),
          menuClassName: _propTypes2["default"].string,
          morphShapeClassName: _propTypes2["default"].string,
          noOverlay: _propTypes2["default"].bool,
          noTransition: _propTypes2["default"].bool,
          onClose: _propTypes2["default"].func,
          onIconHoverChange: _propTypes2["default"].func,
          onOpen: _propTypes2["default"].func,
          onStateChange: _propTypes2["default"].func,
          outerContainerId: styles && styles.outerContainer ? _propTypes2["default"].string.isRequired : _propTypes2["default"].string,
          overlayClassName: _propTypes2["default"].string,
          pageWrapId: styles && styles.pageWrap ? _propTypes2["default"].string.isRequired : _propTypes2["default"].string,
          right: _propTypes2["default"].bool,
          styles: _propTypes2["default"].object,
          width: _propTypes2["default"].oneOfType([_propTypes2["default"].number, _propTypes2["default"].string])
        };
        Menu2.defaultProps = {
          bodyClassName: "",
          burgerBarClassName: "",
          burgerButtonClassName: "",
          className: "",
          crossButtonClassName: "",
          crossClassName: "",
          disableAutoFocus: false,
          disableCloseOnEsc: false,
          htmlClassName: "",
          id: "",
          itemClassName: "",
          itemListClassName: "",
          menuClassName: "",
          morphShapeClassName: "",
          noOverlay: false,
          noTransition: false,
          onStateChange: function onStateChange() {
          },
          outerContainerId: "",
          overlayClassName: "",
          pageWrapId: "",
          styles: {},
          width: 300,
          onIconHoverChange: function onIconHoverChange() {
          },
          itemListElement: "nav"
        };
        return Menu2;
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/slide.js
  var require_slide = __commonJS({
    "node_modules/react-burger-menu/lib/menus/slide.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {};
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/stack.js
  var require_stack = __commonJS({
    "node_modules/react-burger-menu/lib/menus/stack.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        menuWrap: function menuWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)",
            transition: isOpen ? "transform 0.8s cubic-bezier(0.7, 0, 0.3, 1)" : "transform 0.4s cubic-bezier(0.7, 0, 0.3, 1)"
          };
        },
        item: function item(isOpen, width, right, nthChild) {
          return {
            MozTransform: isOpen ? "" : "translate3d(0, " + nthChild * 500 + "px, 0)",
            MsTransform: isOpen ? "" : "translate3d(0, " + nthChild * 500 + "px, 0)",
            OTransform: isOpen ? "" : "translate3d(0, " + nthChild * 500 + "px, 0)",
            WebkitTransform: isOpen ? "" : "translate3d(0, " + nthChild * 500 + "px, 0)",
            transform: isOpen ? "" : "translate3d(0, " + nthChild * 500 + "px, 0)",
            transition: isOpen ? "transform 0.8s cubic-bezier(0.7, 0, 0.3, 1)" : "transform 0s 0.2s cubic-bezier(0.7, 0, 0.3, 1)"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/eve/eve.js
  var require_eve = __commonJS({
    "node_modules/eve/eve.js"(exports, module2) {
      (function(glob) {
        var version2 = "0.5.4", has = "hasOwnProperty", separator = /[\.\/]/, comaseparator = /\s*,\s*/, wildcard = "*", numsort = function(a, b) {
          return a - b;
        }, current_event, stop, events = { n: {} }, firstDefined = function() {
          for (var i4 = 0, ii = this.length; i4 < ii; i4++) {
            if (typeof this[i4] != "undefined") {
              return this[i4];
            }
          }
        }, lastDefined = function() {
          var i4 = this.length;
          while (--i4) {
            if (typeof this[i4] != "undefined") {
              return this[i4];
            }
          }
        }, objtos = Object.prototype.toString, Str = String, isArray = Array.isArray || function(ar) {
          return ar instanceof Array || objtos.call(ar) == "[object Array]";
        }, eve2 = function(name2, scope) {
          var oldstop = stop, args = Array.prototype.slice.call(arguments, 2), listeners = eve2.listeners(name2), z3 = 0, l, indexed = [], queue = {}, out = [], ce = current_event;
          out.firstDefined = firstDefined;
          out.lastDefined = lastDefined;
          current_event = name2;
          stop = 0;
          for (var i4 = 0, ii = listeners.length; i4 < ii; i4++)
            if ("zIndex" in listeners[i4]) {
              indexed.push(listeners[i4].zIndex);
              if (listeners[i4].zIndex < 0) {
                queue[listeners[i4].zIndex] = listeners[i4];
              }
            }
          indexed.sort(numsort);
          while (indexed[z3] < 0) {
            l = queue[indexed[z3++]];
            out.push(l.apply(scope, args));
            if (stop) {
              stop = oldstop;
              return out;
            }
          }
          for (i4 = 0; i4 < ii; i4++) {
            l = listeners[i4];
            if ("zIndex" in l) {
              if (l.zIndex == indexed[z3]) {
                out.push(l.apply(scope, args));
                if (stop) {
                  break;
                }
                do {
                  z3++;
                  l = queue[indexed[z3]];
                  l && out.push(l.apply(scope, args));
                  if (stop) {
                    break;
                  }
                } while (l);
              } else {
                queue[l.zIndex] = l;
              }
            } else {
              out.push(l.apply(scope, args));
              if (stop) {
                break;
              }
            }
          }
          stop = oldstop;
          current_event = ce;
          return out;
        };
        eve2._events = events;
        eve2.listeners = function(name2) {
          var names = isArray(name2) ? name2 : name2.split(separator), e = events, item, items, k, i4, ii, j, jj, nes, es = [e], out = [];
          for (i4 = 0, ii = names.length; i4 < ii; i4++) {
            nes = [];
            for (j = 0, jj = es.length; j < jj; j++) {
              e = es[j].n;
              items = [e[names[i4]], e[wildcard]];
              k = 2;
              while (k--) {
                item = items[k];
                if (item) {
                  nes.push(item);
                  out = out.concat(item.f || []);
                }
              }
            }
            es = nes;
          }
          return out;
        };
        eve2.separator = function(sep) {
          if (sep) {
            sep = Str(sep).replace(/(?=[\.\^\]\[\-])/g, "\\");
            sep = "[" + sep + "]";
            separator = new RegExp(sep);
          } else {
            separator = /[\.\/]/;
          }
        };
        eve2.on = function(name2, f) {
          if (typeof f != "function") {
            return function() {
            };
          }
          var names = isArray(name2) ? isArray(name2[0]) ? name2 : [name2] : Str(name2).split(comaseparator);
          for (var i4 = 0, ii = names.length; i4 < ii; i4++) {
            (function(name3) {
              var names2 = isArray(name3) ? name3 : Str(name3).split(separator), e = events, exist;
              for (var i5 = 0, ii2 = names2.length; i5 < ii2; i5++) {
                e = e.n;
                e = e.hasOwnProperty(names2[i5]) && e[names2[i5]] || (e[names2[i5]] = { n: {} });
              }
              e.f = e.f || [];
              for (i5 = 0, ii2 = e.f.length; i5 < ii2; i5++)
                if (e.f[i5] == f) {
                  exist = true;
                  break;
                }
              !exist && e.f.push(f);
            })(names[i4]);
          }
          return function(zIndex) {
            if (+zIndex == +zIndex) {
              f.zIndex = +zIndex;
            }
          };
        };
        eve2.f = function(event) {
          var attrs = [].slice.call(arguments, 1);
          return function() {
            eve2.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));
          };
        };
        eve2.stop = function() {
          stop = 1;
        };
        eve2.nt = function(subname) {
          var cur = isArray(current_event) ? current_event.join(".") : current_event;
          if (subname) {
            return new RegExp("(?:\\.|\\/|^)" + subname + "(?:\\.|\\/|$)").test(cur);
          }
          return cur;
        };
        eve2.nts = function() {
          return isArray(current_event) ? current_event : current_event.split(separator);
        };
        eve2.off = eve2.unbind = function(name2, f) {
          if (!name2) {
            eve2._events = events = { n: {} };
            return;
          }
          var names = isArray(name2) ? isArray(name2[0]) ? name2 : [name2] : Str(name2).split(comaseparator);
          if (names.length > 1) {
            for (var i4 = 0, ii = names.length; i4 < ii; i4++) {
              eve2.off(names[i4], f);
            }
            return;
          }
          names = isArray(name2) ? name2 : Str(name2).split(separator);
          var e, key, splice, i4, ii, j, jj, cur = [events], inodes = [];
          for (i4 = 0, ii = names.length; i4 < ii; i4++) {
            for (j = 0; j < cur.length; j += splice.length - 2) {
              splice = [j, 1];
              e = cur[j].n;
              if (names[i4] != wildcard) {
                if (e[names[i4]]) {
                  splice.push(e[names[i4]]);
                  inodes.unshift({
                    n: e,
                    name: names[i4]
                  });
                }
              } else {
                for (key in e)
                  if (e[has](key)) {
                    splice.push(e[key]);
                    inodes.unshift({
                      n: e,
                      name: key
                    });
                  }
              }
              cur.splice.apply(cur, splice);
            }
          }
          for (i4 = 0, ii = cur.length; i4 < ii; i4++) {
            e = cur[i4];
            while (e.n) {
              if (f) {
                if (e.f) {
                  for (j = 0, jj = e.f.length; j < jj; j++)
                    if (e.f[j] == f) {
                      e.f.splice(j, 1);
                      break;
                    }
                  !e.f.length && delete e.f;
                }
                for (key in e.n)
                  if (e.n[has](key) && e.n[key].f) {
                    var funcs = e.n[key].f;
                    for (j = 0, jj = funcs.length; j < jj; j++)
                      if (funcs[j] == f) {
                        funcs.splice(j, 1);
                        break;
                      }
                    !funcs.length && delete e.n[key].f;
                  }
              } else {
                delete e.f;
                for (key in e.n)
                  if (e.n[has](key) && e.n[key].f) {
                    delete e.n[key].f;
                  }
              }
              e = e.n;
            }
          }
          prune:
            for (i4 = 0, ii = inodes.length; i4 < ii; i4++) {
              e = inodes[i4];
              for (key in e.n[e.name].f) {
                continue prune;
              }
              for (key in e.n[e.name].n) {
                continue prune;
              }
              delete e.n[e.name];
            }
        };
        eve2.once = function(name2, f) {
          var f2 = function() {
            eve2.off(name2, f2);
            return f.apply(this, arguments);
          };
          return eve2.on(name2, f2);
        };
        eve2.version = version2;
        eve2.toString = function() {
          return "You are running Eve " + version2;
        };
        glob.eve = eve2;
        typeof module2 != "undefined" && module2.exports ? module2.exports = eve2 : typeof define === "function" && define.amd ? define("eve", [], function() {
          return eve2;
        }) : glob.eve = eve2;
      })(typeof window != "undefined" ? window : exports);
    }
  });

  // node_modules/snapsvg-cjs/dist/snap.svg-cjs.js
  var require_snap_svg_cjs = __commonJS({
    "node_modules/snapsvg-cjs/dist/snap.svg-cjs.js"(exports, module2) {
      window.eve = require_eve();
      var mina = function(eve2) {
        var animations = {}, requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
          setTimeout(callback, 16, (/* @__PURE__ */ new Date()).getTime());
          return true;
        }, requestID, isArray = Array.isArray || function(a) {
          return a instanceof Array || Object.prototype.toString.call(a) == "[object Array]";
        }, idgen = 0, idprefix = "M" + (+/* @__PURE__ */ new Date()).toString(36), ID = function() {
          return idprefix + (idgen++).toString(36);
        }, diff = function(a, b, A4, B3) {
          if (isArray(a)) {
            res = [];
            for (var i4 = 0, ii = a.length; i4 < ii; i4++) {
              res[i4] = diff(a[i4], b, A4[i4], B3);
            }
            return res;
          }
          var dif = (A4 - a) / (B3 - b);
          return function(bb) {
            return a + dif * (bb - b);
          };
        }, timer = Date.now || function() {
          return +/* @__PURE__ */ new Date();
        }, sta = function(val) {
          var a = this;
          if (val == null) {
            return a.s;
          }
          var ds = a.s - val;
          a.b += a.dur * ds;
          a.B += a.dur * ds;
          a.s = val;
        }, speed = function(val) {
          var a = this;
          if (val == null) {
            return a.spd;
          }
          a.spd = val;
        }, duration = function(val) {
          var a = this;
          if (val == null) {
            return a.dur;
          }
          a.s = a.s * val / a.dur;
          a.dur = val;
        }, stopit = function() {
          var a = this;
          delete animations[a.id];
          a.update();
          eve2("mina.stop." + a.id, a);
        }, pause = function() {
          var a = this;
          if (a.pdif) {
            return;
          }
          delete animations[a.id];
          a.update();
          a.pdif = a.get() - a.b;
        }, resume = function() {
          var a = this;
          if (!a.pdif) {
            return;
          }
          a.b = a.get() - a.pdif;
          delete a.pdif;
          animations[a.id] = a;
          frame();
        }, update = function() {
          var a = this, res2;
          if (isArray(a.start)) {
            res2 = [];
            for (var j = 0, jj = a.start.length; j < jj; j++) {
              res2[j] = +a.start[j] + (a.end[j] - a.start[j]) * a.easing(a.s);
            }
          } else {
            res2 = +a.start + (a.end - a.start) * a.easing(a.s);
          }
          a.set(res2);
        }, frame = function(timeStamp) {
          if (!timeStamp) {
            if (!requestID) {
              requestID = requestAnimFrame(frame);
            }
            return;
          }
          var len = 0;
          for (var i4 in animations)
            if (animations.hasOwnProperty(i4)) {
              var a = animations[i4], b = a.get(), res2;
              len++;
              a.s = (b - a.b) / (a.dur / a.spd);
              if (a.s >= 1) {
                delete animations[i4];
                a.s = 1;
                len--;
                (function(a2) {
                  setTimeout(function() {
                    eve2("mina.finish." + a2.id, a2);
                  });
                })(a);
              }
              a.update();
            }
          requestID = len ? requestAnimFrame(frame) : false;
        }, mina2 = function(a, A4, b, B3, get, set, easing) {
          var anim = {
            id: ID(),
            start: a,
            end: A4,
            b,
            s: 0,
            dur: B3 - b,
            spd: 1,
            get,
            set,
            easing: easing || mina2.linear,
            status: sta,
            speed,
            duration,
            stop: stopit,
            pause,
            resume,
            update
          };
          animations[anim.id] = anim;
          var len = 0, i4;
          for (i4 in animations)
            if (animations.hasOwnProperty(i4)) {
              len++;
              if (len == 2) {
                break;
              }
            }
          len == 1 && frame();
          return anim;
        };
        mina2.time = timer;
        mina2.getById = function(id) {
          return animations[id] || null;
        };
        mina2.linear = function(n) {
          return n;
        };
        mina2.easeout = function(n) {
          return Math.pow(n, 1.7);
        };
        mina2.easein = function(n) {
          return Math.pow(n, 0.48);
        };
        mina2.easeinout = function(n) {
          if (n == 1) {
            return 1;
          }
          if (n == 0) {
            return 0;
          }
          var q = 0.48 - n / 1.04, Q = Math.sqrt(0.1734 + q * q), x3 = Q - q, X2 = Math.pow(Math.abs(x3), 1 / 3) * (x3 < 0 ? -1 : 1), y4 = -Q - q, Y2 = Math.pow(Math.abs(y4), 1 / 3) * (y4 < 0 ? -1 : 1), t3 = X2 + Y2 + 0.5;
          return (1 - t3) * 3 * t3 * t3 + t3 * t3 * t3;
        };
        mina2.backin = function(n) {
          if (n == 1) {
            return 1;
          }
          var s = 1.70158;
          return n * n * ((s + 1) * n - s);
        };
        mina2.backout = function(n) {
          if (n == 0) {
            return 0;
          }
          n = n - 1;
          var s = 1.70158;
          return n * n * ((s + 1) * n + s) + 1;
        };
        mina2.elastic = function(n) {
          if (n == !!n) {
            return n;
          }
          return Math.pow(2, -10 * n) * Math.sin((n - 0.075) * (2 * Math.PI) / 0.3) + 1;
        };
        mina2.bounce = function(n) {
          var s = 7.5625, p2 = 2.75, l;
          if (n < 1 / p2) {
            l = s * n * n;
          } else {
            if (n < 2 / p2) {
              n -= 1.5 / p2;
              l = s * n * n + 0.75;
            } else {
              if (n < 2.5 / p2) {
                n -= 2.25 / p2;
                l = s * n * n + 0.9375;
              } else {
                n -= 2.625 / p2;
                l = s * n * n + 0.984375;
              }
            }
          }
          return l;
        };
        window.mina = mina2;
        return mina2;
      }(typeof eve == "undefined" ? function() {
      } : eve);
      var Snap = function(root2) {
        Snap2.version = "0.5.1";
        function Snap2(w, h) {
          if (w) {
            if (w.nodeType) {
              return wrap(w);
            }
            if (is(w, "array") && Snap2.set) {
              return Snap2.set.apply(Snap2, w);
            }
            if (w instanceof Element) {
              return w;
            }
            if (h == null) {
              try {
                w = glob.doc.querySelector(String(w));
                return wrap(w);
              } catch (e) {
                return null;
              }
            }
          }
          w = w == null ? "100%" : w;
          h = h == null ? "100%" : h;
          return new Paper(w, h);
        }
        Snap2.toString = function() {
          return "Snap v" + this.version;
        };
        Snap2._ = {};
        var glob = {
          win: root2.window,
          doc: root2.window.document
        };
        Snap2._.glob = glob;
        var has = "hasOwnProperty", Str = String, toFloat = parseFloat, toInt = parseInt, math2 = Math, mmax = math2.max, mmin = math2.min, abs = math2.abs, pow = math2.pow, PI = math2.PI, round = math2.round, E3 = "", S2 = " ", objectToString = Object.prototype.toString, ISURL = /^url\(['"]?([^\)]+?)['"]?\)$/i, colourRegExp = /^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?%?)\s*\))\s*$/i, bezierrg = /^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/, separator = Snap2._.separator = /[,\s]+/, whitespace = /[\s]/g, commaSpaces = /[\s]*,[\s]*/, hsrg = { hs: 1, rg: 1 }, pathCommand = /([a-z])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/ig, tCommand = /([rstm])[\s,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\s]*,?[\s]*)+)/ig, pathValues = /(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\s]*,?[\s]*/ig, idgen = 0, idprefix = "S" + (+/* @__PURE__ */ new Date()).toString(36), ID = function(el) {
          return (el && el.type ? el.type : E3) + idprefix + (idgen++).toString(36);
        }, xlink = "http://www.w3.org/1999/xlink", xmlns = "http://www.w3.org/2000/svg", hub = {}, URL2 = Snap2.url = function(url4) {
          return "url('#" + url4 + "')";
        };
        function $(el, attr) {
          if (attr) {
            if (el == "#text") {
              el = glob.doc.createTextNode(attr.text || attr["#text"] || "");
            }
            if (el == "#comment") {
              el = glob.doc.createComment(attr.text || attr["#text"] || "");
            }
            if (typeof el == "string") {
              el = $(el);
            }
            if (typeof attr == "string") {
              if (el.nodeType == 1) {
                if (attr.substring(0, 6) == "xlink:") {
                  return el.getAttributeNS(xlink, attr.substring(6));
                }
                if (attr.substring(0, 4) == "xml:") {
                  return el.getAttributeNS(xmlns, attr.substring(4));
                }
                return el.getAttribute(attr);
              } else if (attr == "text") {
                return el.nodeValue;
              } else {
                return null;
              }
            }
            if (el.nodeType == 1) {
              for (var key in attr)
                if (attr[has](key)) {
                  var val = Str(attr[key]);
                  if (val) {
                    if (key.substring(0, 6) == "xlink:") {
                      el.setAttributeNS(xlink, key.substring(6), val);
                    } else if (key.substring(0, 4) == "xml:") {
                      el.setAttributeNS(xmlns, key.substring(4), val);
                    } else {
                      el.setAttribute(key, val);
                    }
                  } else {
                    el.removeAttribute(key);
                  }
                }
            } else if ("text" in attr) {
              el.nodeValue = attr.text;
            }
          } else {
            el = glob.doc.createElementNS(xmlns, el);
          }
          return el;
        }
        Snap2._.$ = $;
        Snap2._.id = ID;
        function getAttrs(el) {
          var attrs = el.attributes, name2, out = {};
          for (var i4 = 0; i4 < attrs.length; i4++) {
            if (attrs[i4].namespaceURI == xlink) {
              name2 = "xlink:";
            } else {
              name2 = "";
            }
            name2 += attrs[i4].name;
            out[name2] = attrs[i4].textContent;
          }
          return out;
        }
        function is(o, type) {
          type = Str.prototype.toLowerCase.call(type);
          if (type == "finite") {
            return isFinite(o);
          }
          if (type == "array" && (o instanceof Array || Array.isArray && Array.isArray(o))) {
            return true;
          }
          return type == "null" && o === null || type == typeof o && o !== null || type == "object" && o === Object(o) || objectToString.call(o).slice(8, -1).toLowerCase() == type;
        }
        Snap2.format = function() {
          var tokenRegex = /\{([^\}]+)\}/g, objNotationRegex = /(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g, replacer = function(all, key, obj) {
            var res2 = obj;
            key.replace(objNotationRegex, function(all2, name2, quote, quotedName, isFunc) {
              name2 = name2 || quotedName;
              if (res2) {
                if (name2 in res2) {
                  res2 = res2[name2];
                }
                typeof res2 == "function" && isFunc && (res2 = res2());
              }
            });
            res2 = (res2 == null || res2 == obj ? all : res2) + "";
            return res2;
          };
          return function(str6, obj) {
            return Str(str6).replace(tokenRegex, function(all, key) {
              return replacer(all, key, obj);
            });
          };
        }();
        function clone(obj) {
          if (typeof obj == "function" || Object(obj) !== obj) {
            return obj;
          }
          var res2 = new obj.constructor();
          for (var key in obj)
            if (obj[has](key)) {
              res2[key] = clone(obj[key]);
            }
          return res2;
        }
        Snap2._.clone = clone;
        function repush(array, item) {
          for (var i4 = 0, ii = array.length; i4 < ii; i4++)
            if (array[i4] === item) {
              return array.push(array.splice(i4, 1)[0]);
            }
        }
        function cacher(f, scope, postprocessor) {
          function newf() {
            var arg = Array.prototype.slice.call(arguments, 0), args = arg.join("\u2400"), cache = newf.cache = newf.cache || {}, count = newf.count = newf.count || [];
            if (cache[has](args)) {
              repush(count, args);
              return postprocessor ? postprocessor(cache[args]) : cache[args];
            }
            count.length >= 1e3 && delete cache[count.shift()];
            count.push(args);
            cache[args] = f.apply(scope, arg);
            return postprocessor ? postprocessor(cache[args]) : cache[args];
          }
          return newf;
        }
        Snap2._.cacher = cacher;
        function angle(x1, y1, x22, y22, x3, y32) {
          if (x3 == null) {
            var x4 = x1 - x22, y4 = y1 - y22;
            if (!x4 && !y4) {
              return 0;
            }
            return (180 + math2.atan2(-y4, -x4) * 180 / PI + 360) % 360;
          } else {
            return angle(x1, y1, x3, y32) - angle(x22, y22, x3, y32);
          }
        }
        function rad(deg2) {
          return deg2 % 360 * PI / 180;
        }
        function deg(rad2) {
          return rad2 * 180 / PI % 360;
        }
        function x_y() {
          return this.x + S2 + this.y;
        }
        function x_y_w_h() {
          return this.x + S2 + this.y + S2 + this.width + " \xD7 " + this.height;
        }
        Snap2.rad = rad;
        Snap2.deg = deg;
        Snap2.sin = function(angle2) {
          return math2.sin(Snap2.rad(angle2));
        };
        Snap2.tan = function(angle2) {
          return math2.tan(Snap2.rad(angle2));
        };
        Snap2.cos = function(angle2) {
          return math2.cos(Snap2.rad(angle2));
        };
        Snap2.asin = function(num) {
          return Snap2.deg(math2.asin(num));
        };
        Snap2.acos = function(num) {
          return Snap2.deg(math2.acos(num));
        };
        Snap2.atan = function(num) {
          return Snap2.deg(math2.atan(num));
        };
        Snap2.atan2 = function(num) {
          return Snap2.deg(math2.atan2(num));
        };
        Snap2.angle = angle;
        Snap2.len = function(x1, y1, x22, y22) {
          return Math.sqrt(Snap2.len2(x1, y1, x22, y22));
        };
        Snap2.len2 = function(x1, y1, x22, y22) {
          return (x1 - x22) * (x1 - x22) + (y1 - y22) * (y1 - y22);
        };
        Snap2.closestPoint = function(path, x3, y4) {
          function distance2(p2) {
            var dx = p2.x - x3, dy = p2.y - y4;
            return dx * dx + dy * dy;
          }
          var pathNode = path.node, pathLength = pathNode.getTotalLength(), precision = pathLength / pathNode.pathSegList.numberOfItems * 0.125, best, bestLength, bestDistance = Infinity;
          for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {
            if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {
              best = scan;
              bestLength = scanLength;
              bestDistance = scanDistance;
            }
          }
          precision *= 0.5;
          while (precision > 0.5) {
            var before, after, beforeLength, afterLength, beforeDistance, afterDistance;
            if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {
              best = before;
              bestLength = beforeLength;
              bestDistance = beforeDistance;
            } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {
              best = after;
              bestLength = afterLength;
              bestDistance = afterDistance;
            } else {
              precision *= 0.5;
            }
          }
          best = {
            x: best.x,
            y: best.y,
            length: bestLength,
            distance: Math.sqrt(bestDistance)
          };
          return best;
        };
        Snap2.is = is;
        Snap2.snapTo = function(values, value, tolerance) {
          tolerance = is(tolerance, "finite") ? tolerance : 10;
          if (is(values, "array")) {
            var i4 = values.length;
            while (i4--)
              if (abs(values[i4] - value) <= tolerance) {
                return values[i4];
              }
          } else {
            values = +values;
            var rem = value % values;
            if (rem < tolerance) {
              return value - rem;
            }
            if (rem > values - tolerance) {
              return value - rem + values;
            }
          }
          return value;
        };
        Snap2.getRGB = cacher(function(colour) {
          if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {
            return { r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString };
          }
          if (colour == "none") {
            return { r: -1, g: -1, b: -1, hex: "none", toString: rgbtoString };
          }
          !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));
          if (!colour) {
            return { r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString };
          }
          var res2, red, green, blue, opacity, t3, values, rgb = colour.match(colourRegExp);
          if (rgb) {
            if (rgb[2]) {
              blue = toInt(rgb[2].substring(5), 16);
              green = toInt(rgb[2].substring(3, 5), 16);
              red = toInt(rgb[2].substring(1, 3), 16);
            }
            if (rgb[3]) {
              blue = toInt((t3 = rgb[3].charAt(3)) + t3, 16);
              green = toInt((t3 = rgb[3].charAt(2)) + t3, 16);
              red = toInt((t3 = rgb[3].charAt(1)) + t3, 16);
            }
            if (rgb[4]) {
              values = rgb[4].split(commaSpaces);
              red = toFloat(values[0]);
              values[0].slice(-1) == "%" && (red *= 2.55);
              green = toFloat(values[1]);
              values[1].slice(-1) == "%" && (green *= 2.55);
              blue = toFloat(values[2]);
              values[2].slice(-1) == "%" && (blue *= 2.55);
              rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));
              values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
            }
            if (rgb[5]) {
              values = rgb[5].split(commaSpaces);
              red = toFloat(values[0]);
              values[0].slice(-1) == "%" && (red /= 100);
              green = toFloat(values[1]);
              values[1].slice(-1) == "%" && (green /= 100);
              blue = toFloat(values[2]);
              values[2].slice(-1) == "%" && (blue /= 100);
              (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xB0") && (red /= 360);
              rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));
              values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
              return Snap2.hsb2rgb(red, green, blue, opacity);
            }
            if (rgb[6]) {
              values = rgb[6].split(commaSpaces);
              red = toFloat(values[0]);
              values[0].slice(-1) == "%" && (red /= 100);
              green = toFloat(values[1]);
              values[1].slice(-1) == "%" && (green /= 100);
              blue = toFloat(values[2]);
              values[2].slice(-1) == "%" && (blue /= 100);
              (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\xB0") && (red /= 360);
              rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));
              values[3] && values[3].slice(-1) == "%" && (opacity /= 100);
              return Snap2.hsl2rgb(red, green, blue, opacity);
            }
            red = mmin(math2.round(red), 255);
            green = mmin(math2.round(green), 255);
            blue = mmin(math2.round(blue), 255);
            opacity = mmin(mmax(opacity, 0), 1);
            rgb = { r: red, g: green, b: blue, toString: rgbtoString };
            rgb.hex = "#" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);
            rgb.opacity = is(opacity, "finite") ? opacity : 1;
            return rgb;
          }
          return { r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString };
        }, Snap2);
        Snap2.hsb = cacher(function(h, s, b) {
          return Snap2.hsb2rgb(h, s, b).hex;
        });
        Snap2.hsl = cacher(function(h, s, l) {
          return Snap2.hsl2rgb(h, s, l).hex;
        });
        Snap2.rgb = cacher(function(r, g2, b, o) {
          if (is(o, "finite")) {
            var round2 = math2.round;
            return "rgba(" + [round2(r), round2(g2), round2(b), +o.toFixed(2)] + ")";
          }
          return "#" + (16777216 | b | g2 << 8 | r << 16).toString(16).slice(1);
        });
        var toHex = function(color) {
          var i4 = glob.doc.getElementsByTagName("head")[0] || glob.doc.getElementsByTagName("svg")[0], red = "rgb(255, 0, 0)";
          toHex = cacher(function(color2) {
            if (color2.toLowerCase() == "red") {
              return red;
            }
            i4.style.color = red;
            i4.style.color = color2;
            var out = glob.doc.defaultView.getComputedStyle(i4, E3).getPropertyValue("color");
            return out == red ? null : out;
          });
          return toHex(color);
        }, hsbtoString = function() {
          return "hsb(" + [this.h, this.s, this.b] + ")";
        }, hsltoString = function() {
          return "hsl(" + [this.h, this.s, this.l] + ")";
        }, rgbtoString = function() {
          return this.opacity == 1 || this.opacity == null ? this.hex : "rgba(" + [this.r, this.g, this.b, this.opacity] + ")";
        }, prepareRGB = function(r, g2, b) {
          if (g2 == null && is(r, "object") && "r" in r && "g" in r && "b" in r) {
            b = r.b;
            g2 = r.g;
            r = r.r;
          }
          if (g2 == null && is(r, string)) {
            var clr = Snap2.getRGB(r);
            r = clr.r;
            g2 = clr.g;
            b = clr.b;
          }
          if (r > 1 || g2 > 1 || b > 1) {
            r /= 255;
            g2 /= 255;
            b /= 255;
          }
          return [r, g2, b];
        }, packageRGB = function(r, g2, b, o) {
          r = math2.round(r * 255);
          g2 = math2.round(g2 * 255);
          b = math2.round(b * 255);
          var rgb = {
            r,
            g: g2,
            b,
            opacity: is(o, "finite") ? o : 1,
            hex: Snap2.rgb(r, g2, b),
            toString: rgbtoString
          };
          is(o, "finite") && (rgb.opacity = o);
          return rgb;
        };
        Snap2.color = function(clr) {
          var rgb;
          if (is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {
            rgb = Snap2.hsb2rgb(clr);
            clr.r = rgb.r;
            clr.g = rgb.g;
            clr.b = rgb.b;
            clr.opacity = 1;
            clr.hex = rgb.hex;
          } else if (is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {
            rgb = Snap2.hsl2rgb(clr);
            clr.r = rgb.r;
            clr.g = rgb.g;
            clr.b = rgb.b;
            clr.opacity = 1;
            clr.hex = rgb.hex;
          } else {
            if (is(clr, "string")) {
              clr = Snap2.getRGB(clr);
            }
            if (is(clr, "object") && "r" in clr && "g" in clr && "b" in clr && !("error" in clr)) {
              rgb = Snap2.rgb2hsl(clr);
              clr.h = rgb.h;
              clr.s = rgb.s;
              clr.l = rgb.l;
              rgb = Snap2.rgb2hsb(clr);
              clr.v = rgb.b;
            } else {
              clr = { hex: "none" };
              clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;
              clr.error = 1;
            }
          }
          clr.toString = rgbtoString;
          return clr;
        };
        Snap2.hsb2rgb = function(h, s, v2, o) {
          if (is(h, "object") && "h" in h && "s" in h && "b" in h) {
            v2 = h.b;
            s = h.s;
            o = h.o;
            h = h.h;
          }
          h *= 360;
          var R2, G3, B3, X2, C4;
          h = h % 360 / 60;
          C4 = v2 * s;
          X2 = C4 * (1 - abs(h % 2 - 1));
          R2 = G3 = B3 = v2 - C4;
          h = ~~h;
          R2 += [C4, X2, 0, 0, X2, C4][h];
          G3 += [X2, C4, C4, X2, 0, 0][h];
          B3 += [0, 0, X2, C4, C4, X2][h];
          return packageRGB(R2, G3, B3, o);
        };
        Snap2.hsl2rgb = function(h, s, l, o) {
          if (is(h, "object") && "h" in h && "s" in h && "l" in h) {
            l = h.l;
            s = h.s;
            h = h.h;
          }
          if (h > 1 || s > 1 || l > 1) {
            h /= 360;
            s /= 100;
            l /= 100;
          }
          h *= 360;
          var R2, G3, B3, X2, C4;
          h = h % 360 / 60;
          C4 = 2 * s * (l < 0.5 ? l : 1 - l);
          X2 = C4 * (1 - abs(h % 2 - 1));
          R2 = G3 = B3 = l - C4 / 2;
          h = ~~h;
          R2 += [C4, X2, 0, 0, X2, C4][h];
          G3 += [X2, C4, C4, X2, 0, 0][h];
          B3 += [0, 0, X2, C4, C4, X2][h];
          return packageRGB(R2, G3, B3, o);
        };
        Snap2.rgb2hsb = function(r, g2, b) {
          b = prepareRGB(r, g2, b);
          r = b[0];
          g2 = b[1];
          b = b[2];
          var H3, S3, V, C4;
          V = mmax(r, g2, b);
          C4 = V - mmin(r, g2, b);
          H3 = C4 == 0 ? null : V == r ? (g2 - b) / C4 : V == g2 ? (b - r) / C4 + 2 : (r - g2) / C4 + 4;
          H3 = (H3 + 360) % 6 * 60 / 360;
          S3 = C4 == 0 ? 0 : C4 / V;
          return { h: H3, s: S3, b: V, toString: hsbtoString };
        };
        Snap2.rgb2hsl = function(r, g2, b) {
          b = prepareRGB(r, g2, b);
          r = b[0];
          g2 = b[1];
          b = b[2];
          var H3, S3, L2, M2, m, C4;
          M2 = mmax(r, g2, b);
          m = mmin(r, g2, b);
          C4 = M2 - m;
          H3 = C4 == 0 ? null : M2 == r ? (g2 - b) / C4 : M2 == g2 ? (b - r) / C4 + 2 : (r - g2) / C4 + 4;
          H3 = (H3 + 360) % 6 * 60 / 360;
          L2 = (M2 + m) / 2;
          S3 = C4 == 0 ? 0 : L2 < 0.5 ? C4 / (2 * L2) : C4 / (2 - 2 * L2);
          return { h: H3, s: S3, l: L2, toString: hsltoString };
        };
        Snap2.parsePathString = function(pathString) {
          if (!pathString) {
            return null;
          }
          var pth = Snap2.path(pathString);
          if (pth.arr) {
            return Snap2.path.clone(pth.arr);
          }
          var paramCounts = { a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0 }, data = [];
          if (is(pathString, "array") && is(pathString[0], "array")) {
            data = Snap2.path.clone(pathString);
          }
          if (!data.length) {
            Str(pathString).replace(pathCommand, function(a, b, c) {
              var params2 = [], name2 = b.toLowerCase();
              c.replace(pathValues, function(a2, b2) {
                b2 && params2.push(+b2);
              });
              if (name2 == "m" && params2.length > 2) {
                data.push([b].concat(params2.splice(0, 2)));
                name2 = "l";
                b = b == "m" ? "l" : "L";
              }
              if (name2 == "o" && params2.length == 1) {
                data.push([b, params2[0]]);
              }
              if (name2 == "r") {
                data.push([b].concat(params2));
              } else
                while (params2.length >= paramCounts[name2]) {
                  data.push([b].concat(params2.splice(0, paramCounts[name2])));
                  if (!paramCounts[name2]) {
                    break;
                  }
                }
            });
          }
          data.toString = Snap2.path.toString;
          pth.arr = Snap2.path.clone(data);
          return data;
        };
        var parseTransformString = Snap2.parseTransformString = function(TString) {
          if (!TString) {
            return null;
          }
          var paramCounts = { r: 3, s: 4, t: 2, m: 6 }, data = [];
          if (is(TString, "array") && is(TString[0], "array")) {
            data = Snap2.path.clone(TString);
          }
          if (!data.length) {
            Str(TString).replace(tCommand, function(a, b, c) {
              var params2 = [], name2 = b.toLowerCase();
              c.replace(pathValues, function(a2, b2) {
                b2 && params2.push(+b2);
              });
              data.push([b].concat(params2));
            });
          }
          data.toString = Snap2.path.toString;
          return data;
        };
        function svgTransform2string(tstr) {
          var res2 = [];
          tstr = tstr.replace(/(?:^|\s)(\w+)\(([^)]+)\)/g, function(all, name2, params2) {
            params2 = params2.split(/\s*,\s*|\s+/);
            if (name2 == "rotate" && params2.length == 1) {
              params2.push(0, 0);
            }
            if (name2 == "scale") {
              if (params2.length > 2) {
                params2 = params2.slice(0, 2);
              } else if (params2.length == 2) {
                params2.push(0, 0);
              }
              if (params2.length == 1) {
                params2.push(params2[0], 0, 0);
              }
            }
            if (name2 == "skewX") {
              res2.push(["m", 1, 0, math2.tan(rad(params2[0])), 1, 0, 0]);
            } else if (name2 == "skewY") {
              res2.push(["m", 1, math2.tan(rad(params2[0])), 0, 1, 0, 0]);
            } else {
              res2.push([name2.charAt(0)].concat(params2));
            }
            return all;
          });
          return res2;
        }
        Snap2._.svgTransform2string = svgTransform2string;
        Snap2._.rgTransform = /^[a-z][\s]*-?\.?\d/i;
        function transform2matrix(tstr, bbox) {
          var tdata = parseTransformString(tstr), m = new Snap2.Matrix();
          if (tdata) {
            for (var i4 = 0, ii = tdata.length; i4 < ii; i4++) {
              var t3 = tdata[i4], tlen = t3.length, command = Str(t3[0]).toLowerCase(), absolute = t3[0] != command, inver = absolute ? m.invert() : 0, x1, y1, x22, y22, bb;
              if (command == "t" && tlen == 2) {
                m.translate(t3[1], 0);
              } else if (command == "t" && tlen == 3) {
                if (absolute) {
                  x1 = inver.x(0, 0);
                  y1 = inver.y(0, 0);
                  x22 = inver.x(t3[1], t3[2]);
                  y22 = inver.y(t3[1], t3[2]);
                  m.translate(x22 - x1, y22 - y1);
                } else {
                  m.translate(t3[1], t3[2]);
                }
              } else if (command == "r") {
                if (tlen == 2) {
                  bb = bb || bbox;
                  m.rotate(t3[1], bb.x + bb.width / 2, bb.y + bb.height / 2);
                } else if (tlen == 4) {
                  if (absolute) {
                    x22 = inver.x(t3[2], t3[3]);
                    y22 = inver.y(t3[2], t3[3]);
                    m.rotate(t3[1], x22, y22);
                  } else {
                    m.rotate(t3[1], t3[2], t3[3]);
                  }
                }
              } else if (command == "s") {
                if (tlen == 2 || tlen == 3) {
                  bb = bb || bbox;
                  m.scale(t3[1], t3[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);
                } else if (tlen == 4) {
                  if (absolute) {
                    x22 = inver.x(t3[2], t3[3]);
                    y22 = inver.y(t3[2], t3[3]);
                    m.scale(t3[1], t3[1], x22, y22);
                  } else {
                    m.scale(t3[1], t3[1], t3[2], t3[3]);
                  }
                } else if (tlen == 5) {
                  if (absolute) {
                    x22 = inver.x(t3[3], t3[4]);
                    y22 = inver.y(t3[3], t3[4]);
                    m.scale(t3[1], t3[2], x22, y22);
                  } else {
                    m.scale(t3[1], t3[2], t3[3], t3[4]);
                  }
                }
              } else if (command == "m" && tlen == 7) {
                m.add(t3[1], t3[2], t3[3], t3[4], t3[5], t3[6]);
              }
            }
          }
          return m;
        }
        Snap2._.transform2matrix = transform2matrix;
        Snap2._unit2px = unit2px;
        var contains = glob.doc.contains || glob.doc.compareDocumentPosition ? function(a, b) {
          var adown = a.nodeType == 9 ? a.documentElement : a, bup = b && b.parentNode;
          return a == bup || !!(bup && bup.nodeType == 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
        } : function(a, b) {
          if (b) {
            while (b) {
              b = b.parentNode;
              if (b == a) {
                return true;
              }
            }
          }
          return false;
        };
        function getSomeDefs(el) {
          var p2 = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || el.node.parentNode && wrap(el.node.parentNode) || Snap2.select("svg") || Snap2(0, 0), pdefs = p2.select("defs"), defs = pdefs == null ? false : pdefs.node;
          if (!defs) {
            defs = make("defs", p2.node).node;
          }
          return defs;
        }
        function getSomeSVG(el) {
          return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap2.select("svg");
        }
        Snap2._.getSomeDefs = getSomeDefs;
        Snap2._.getSomeSVG = getSomeSVG;
        function unit2px(el, name2, value) {
          var svg = getSomeSVG(el).node, out = {}, mgr = svg.querySelector(".svg---mgr");
          if (!mgr) {
            mgr = $("rect");
            $(mgr, { x: -9e9, y: -9e9, width: 10, height: 10, "class": "svg---mgr", fill: "none" });
            svg.appendChild(mgr);
          }
          function getW(val) {
            if (val == null) {
              return E3;
            }
            if (val == +val) {
              return val;
            }
            $(mgr, { width: val });
            try {
              return mgr.getBBox().width;
            } catch (e) {
              return 0;
            }
          }
          function getH(val) {
            if (val == null) {
              return E3;
            }
            if (val == +val) {
              return val;
            }
            $(mgr, { height: val });
            try {
              return mgr.getBBox().height;
            } catch (e) {
              return 0;
            }
          }
          function set(nam, f) {
            if (name2 == null) {
              out[nam] = f(el.attr(nam) || 0);
            } else if (nam == name2) {
              out = f(value == null ? el.attr(nam) || 0 : value);
            }
          }
          switch (el.type) {
            case "rect":
              set("rx", getW);
              set("ry", getH);
            case "image":
              set("width", getW);
              set("height", getH);
            case "text":
              set("x", getW);
              set("y", getH);
              break;
            case "circle":
              set("cx", getW);
              set("cy", getH);
              set("r", getW);
              break;
            case "ellipse":
              set("cx", getW);
              set("cy", getH);
              set("rx", getW);
              set("ry", getH);
              break;
            case "line":
              set("x1", getW);
              set("x2", getW);
              set("y1", getH);
              set("y2", getH);
              break;
            case "marker":
              set("refX", getW);
              set("markerWidth", getW);
              set("refY", getH);
              set("markerHeight", getH);
              break;
            case "radialGradient":
              set("fx", getW);
              set("fy", getH);
              break;
            case "tspan":
              set("dx", getW);
              set("dy", getH);
              break;
            default:
              set(name2, getW);
          }
          svg.removeChild(mgr);
          return out;
        }
        Snap2.select = function(query) {
          query = Str(query).replace(/([^\\]):/g, "$1\\:");
          return wrap(glob.doc.querySelector(query));
        };
        Snap2.selectAll = function(query) {
          var nodelist = glob.doc.querySelectorAll(query), set = (Snap2.set || Array)();
          for (var i4 = 0; i4 < nodelist.length; i4++) {
            set.push(wrap(nodelist[i4]));
          }
          return set;
        };
        function add2group(list) {
          if (!is(list, "array")) {
            list = Array.prototype.slice.call(arguments, 0);
          }
          var i4 = 0, j = 0, node = this.node;
          while (this[i4])
            delete this[i4++];
          for (i4 = 0; i4 < list.length; i4++) {
            if (list[i4].type == "set") {
              list[i4].forEach(function(el) {
                node.appendChild(el.node);
              });
            } else {
              node.appendChild(list[i4].node);
            }
          }
          var children = node.childNodes;
          for (i4 = 0; i4 < children.length; i4++) {
            this[j++] = wrap(children[i4]);
          }
          return this;
        }
        setInterval(function() {
          for (var key in hub)
            if (hub[has](key)) {
              var el = hub[key], node = el.node;
              if (el.type != "svg" && !node.ownerSVGElement || el.type == "svg" && (!node.parentNode || "ownerSVGElement" in node.parentNode && !node.ownerSVGElement)) {
                delete hub[key];
              }
            }
        }, 1e4);
        function Element(el) {
          if (el.snap in hub) {
            return hub[el.snap];
          }
          var svg;
          try {
            svg = el.ownerSVGElement;
          } catch (e) {
          }
          this.node = el;
          if (svg) {
            this.paper = new Paper(svg);
          }
          this.type = el.tagName || el.nodeName;
          var id = this.id = ID(this);
          this.anims = {};
          this._ = {
            transform: []
          };
          el.snap = id;
          hub[id] = this;
          if (this.type == "g") {
            this.add = add2group;
          }
          if (this.type in { g: 1, mask: 1, pattern: 1, symbol: 1 }) {
            for (var method in Paper.prototype)
              if (Paper.prototype[has](method)) {
                this[method] = Paper.prototype[method];
              }
          }
        }
        Element.prototype.attr = function(params2, value) {
          var el = this, node = el.node;
          if (!params2) {
            if (node.nodeType != 1) {
              return {
                text: node.nodeValue
              };
            }
            var attr = node.attributes, out = {};
            for (var i4 = 0, ii = attr.length; i4 < ii; i4++) {
              out[attr[i4].nodeName] = attr[i4].nodeValue;
            }
            return out;
          }
          if (is(params2, "string")) {
            if (arguments.length > 1) {
              var json = {};
              json[params2] = value;
              params2 = json;
            } else {
              return eve("snap.util.getattr." + params2, el).firstDefined();
            }
          }
          for (var att in params2) {
            if (params2[has](att)) {
              eve("snap.util.attr." + att, el, params2[att]);
            }
          }
          return el;
        };
        Snap2.parse = function(svg) {
          var f = glob.doc.createDocumentFragment(), full = true, div = glob.doc.createElement("div");
          svg = Str(svg);
          if (!svg.match(/^\s*<\s*svg(?:\s|>)/)) {
            svg = "<svg>" + svg + "</svg>";
            full = false;
          }
          div.innerHTML = svg;
          svg = div.getElementsByTagName("svg")[0];
          if (svg) {
            if (full) {
              f = svg;
            } else {
              while (svg.firstChild) {
                f.appendChild(svg.firstChild);
              }
            }
          }
          return new Fragment(f);
        };
        function Fragment(frag) {
          this.node = frag;
        }
        Snap2.fragment = function() {
          var args = Array.prototype.slice.call(arguments, 0), f = glob.doc.createDocumentFragment();
          for (var i4 = 0, ii = args.length; i4 < ii; i4++) {
            var item = args[i4];
            if (item.node && item.node.nodeType) {
              f.appendChild(item.node);
            }
            if (item.nodeType) {
              f.appendChild(item);
            }
            if (typeof item == "string") {
              f.appendChild(Snap2.parse(item).node);
            }
          }
          return new Fragment(f);
        };
        function make(name2, parent) {
          var res2 = $(name2);
          parent.appendChild(res2);
          var el = wrap(res2);
          return el;
        }
        function Paper(w, h) {
          var res2, desc, defs, proto = Paper.prototype;
          if (w && w.tagName && w.tagName.toLowerCase() == "svg") {
            if (w.snap in hub) {
              return hub[w.snap];
            }
            var doc = w.ownerDocument;
            res2 = new Element(w);
            desc = w.getElementsByTagName("desc")[0];
            defs = w.getElementsByTagName("defs")[0];
            if (!desc) {
              desc = $("desc");
              desc.appendChild(doc.createTextNode("Created with Snap"));
              res2.node.appendChild(desc);
            }
            if (!defs) {
              defs = $("defs");
              res2.node.appendChild(defs);
            }
            res2.defs = defs;
            for (var key in proto)
              if (proto[has](key)) {
                res2[key] = proto[key];
              }
            res2.paper = res2.root = res2;
          } else {
            res2 = make("svg", glob.doc.body);
            $(res2.node, {
              height: h,
              version: 1.1,
              width: w,
              xmlns
            });
          }
          return res2;
        }
        function wrap(dom) {
          if (!dom) {
            return dom;
          }
          if (dom instanceof Element || dom instanceof Fragment) {
            return dom;
          }
          if (dom.tagName && dom.tagName.toLowerCase() == "svg") {
            return new Paper(dom);
          }
          if (dom.tagName && dom.tagName.toLowerCase() == "object" && dom.type == "image/svg+xml") {
            return new Paper(dom.contentDocument.getElementsByTagName("svg")[0]);
          }
          return new Element(dom);
        }
        Snap2._.make = make;
        Snap2._.wrap = wrap;
        Paper.prototype.el = function(name2, attr) {
          var el = make(name2, this.node);
          attr && el.attr(attr);
          return el;
        };
        Element.prototype.children = function() {
          var out = [], ch = this.node.childNodes;
          for (var i4 = 0, ii = ch.length; i4 < ii; i4++) {
            out[i4] = Snap2(ch[i4]);
          }
          return out;
        };
        function jsonFiller(root3, o) {
          for (var i4 = 0, ii = root3.length; i4 < ii; i4++) {
            var item = {
              type: root3[i4].type,
              attr: root3[i4].attr()
            }, children = root3[i4].children();
            o.push(item);
            if (children.length) {
              jsonFiller(children, item.childNodes = []);
            }
          }
        }
        Element.prototype.toJSON = function() {
          var out = [];
          jsonFiller([this], out);
          return out[0];
        };
        eve.on("snap.util.getattr", function() {
          var att = eve.nt();
          att = att.substring(att.lastIndexOf(".") + 1);
          var css = att.replace(/[A-Z]/g, function(letter) {
            return "-" + letter.toLowerCase();
          });
          if (cssAttr[has](css)) {
            return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);
          } else {
            return $(this.node, att);
          }
        });
        var cssAttr = {
          "alignment-baseline": 0,
          "baseline-shift": 0,
          "clip": 0,
          "clip-path": 0,
          "clip-rule": 0,
          "color": 0,
          "color-interpolation": 0,
          "color-interpolation-filters": 0,
          "color-profile": 0,
          "color-rendering": 0,
          "cursor": 0,
          "direction": 0,
          "display": 0,
          "dominant-baseline": 0,
          "enable-background": 0,
          "fill": 0,
          "fill-opacity": 0,
          "fill-rule": 0,
          "filter": 0,
          "flood-color": 0,
          "flood-opacity": 0,
          "font": 0,
          "font-family": 0,
          "font-size": 0,
          "font-size-adjust": 0,
          "font-stretch": 0,
          "font-style": 0,
          "font-variant": 0,
          "font-weight": 0,
          "glyph-orientation-horizontal": 0,
          "glyph-orientation-vertical": 0,
          "image-rendering": 0,
          "kerning": 0,
          "letter-spacing": 0,
          "lighting-color": 0,
          "marker": 0,
          "marker-end": 0,
          "marker-mid": 0,
          "marker-start": 0,
          "mask": 0,
          "opacity": 0,
          "overflow": 0,
          "pointer-events": 0,
          "shape-rendering": 0,
          "stop-color": 0,
          "stop-opacity": 0,
          "stroke": 0,
          "stroke-dasharray": 0,
          "stroke-dashoffset": 0,
          "stroke-linecap": 0,
          "stroke-linejoin": 0,
          "stroke-miterlimit": 0,
          "stroke-opacity": 0,
          "stroke-width": 0,
          "text-anchor": 0,
          "text-decoration": 0,
          "text-rendering": 0,
          "unicode-bidi": 0,
          "visibility": 0,
          "word-spacing": 0,
          "writing-mode": 0
        };
        eve.on("snap.util.attr", function(value) {
          var att = eve.nt(), attr = {};
          att = att.substring(att.lastIndexOf(".") + 1);
          attr[att] = value;
          var style = att.replace(/-(\w)/gi, function(all, letter) {
            return letter.toUpperCase();
          }), css = att.replace(/[A-Z]/g, function(letter) {
            return "-" + letter.toLowerCase();
          });
          if (cssAttr[has](css)) {
            this.node.style[style] = value == null ? E3 : value;
          } else {
            $(this.node, attr);
          }
        });
        (function(proto) {
        })(Paper.prototype);
        Snap2.ajax = function(url4, postData, callback, scope) {
          var req = new XMLHttpRequest(), id = ID();
          if (req) {
            if (is(postData, "function")) {
              scope = callback;
              callback = postData;
              postData = null;
            } else if (is(postData, "object")) {
              var pd = [];
              for (var key in postData)
                if (postData.hasOwnProperty(key)) {
                  pd.push(encodeURIComponent(key) + "=" + encodeURIComponent(postData[key]));
                }
              postData = pd.join("&");
            }
            req.open(postData ? "POST" : "GET", url4, true);
            if (postData) {
              req.setRequestHeader("X-Requested-With", "XMLHttpRequest");
              req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
            }
            if (callback) {
              eve.once("snap.ajax." + id + ".0", callback);
              eve.once("snap.ajax." + id + ".200", callback);
              eve.once("snap.ajax." + id + ".304", callback);
            }
            req.onreadystatechange = function() {
              if (req.readyState != 4)
                return;
              eve("snap.ajax." + id + "." + req.status, scope, req);
            };
            if (req.readyState == 4) {
              return req;
            }
            req.send(postData);
            return req;
          }
        };
        Snap2.load = function(url4, callback, scope) {
          Snap2.ajax(url4, function(req) {
            var f = Snap2.parse(req.responseText);
            scope ? callback.call(scope, f) : callback(f);
          });
        };
        var getOffset = function(elem) {
          var box = elem.getBoundingClientRect(), doc = elem.ownerDocument, body = doc.body, docElem = doc.documentElement, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, top = box.top + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop, left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;
          return {
            y: top,
            x: left
          };
        };
        Snap2.getElementByPoint = function(x3, y4) {
          var paper = this, svg = paper.canvas, target = glob.doc.elementFromPoint(x3, y4);
          if (glob.win.opera && target.tagName == "svg") {
            var so = getOffset(target), sr = target.createSVGRect();
            sr.x = x3 - so.x;
            sr.y = y4 - so.y;
            sr.width = sr.height = 1;
            var hits = target.getIntersectionList(sr, null);
            if (hits.length) {
              target = hits[hits.length - 1];
            }
          }
          if (!target) {
            return null;
          }
          return wrap(target);
        };
        Snap2.plugin = function(f) {
          f(Snap2, Element, Paper, glob, Fragment);
        };
        glob.win.Snap = Snap2;
        return Snap2;
      }(window || exports);
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var elproto = Element.prototype, is = Snap2.is, Str = String, unit2px = Snap2._unit2px, $ = Snap2._.$, make = Snap2._.make, getSomeDefs = Snap2._.getSomeDefs, has = "hasOwnProperty", wrap = Snap2._.wrap;
        elproto.getBBox = function(isWithoutTransform) {
          if (this.type == "tspan") {
            return Snap2._.box(this.node.getClientRects().item(0));
          }
          if (!Snap2.Matrix || !Snap2.path) {
            return this.node.getBBox();
          }
          var el = this, m = new Snap2.Matrix();
          if (el.removed) {
            return Snap2._.box();
          }
          while (el.type == "use") {
            if (!isWithoutTransform) {
              m = m.add(el.transform().localMatrix.translate(el.attr("x") || 0, el.attr("y") || 0));
            }
            if (el.original) {
              el = el.original;
            } else {
              var href = el.attr("xlink:href");
              el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf("#") + 1));
            }
          }
          var _ = el._, pathfinder = Snap2.path.get[el.type] || Snap2.path.get.deflt;
          try {
            if (isWithoutTransform) {
              _.bboxwt = pathfinder ? Snap2.path.getBBox(el.realPath = pathfinder(el)) : Snap2._.box(el.node.getBBox());
              return Snap2._.box(_.bboxwt);
            } else {
              el.realPath = pathfinder(el);
              el.matrix = el.transform().localMatrix;
              _.bbox = Snap2.path.getBBox(Snap2.path.map(el.realPath, m.add(el.matrix)));
              return Snap2._.box(_.bbox);
            }
          } catch (e) {
            return Snap2._.box();
          }
        };
        var propString = function() {
          return this.string;
        };
        function extractTransform(el, tstr) {
          if (tstr == null) {
            var doReturn = true;
            if (el.type == "linearGradient" || el.type == "radialGradient") {
              tstr = el.node.getAttribute("gradientTransform");
            } else if (el.type == "pattern") {
              tstr = el.node.getAttribute("patternTransform");
            } else {
              tstr = el.node.getAttribute("transform");
            }
            if (!tstr) {
              return new Snap2.Matrix();
            }
            tstr = Snap2._.svgTransform2string(tstr);
          } else {
            if (!Snap2._.rgTransform.test(tstr)) {
              tstr = Snap2._.svgTransform2string(tstr);
            } else {
              tstr = Str(tstr).replace(/\.{3}|\u2026/g, el._.transform || "");
            }
            if (is(tstr, "array")) {
              tstr = Snap2.path ? Snap2.path.toString.call(tstr) : Str(tstr);
            }
            el._.transform = tstr;
          }
          var m = Snap2._.transform2matrix(tstr, el.getBBox(1));
          if (doReturn) {
            return m;
          } else {
            el.matrix = m;
          }
        }
        elproto.transform = function(tstr) {
          var _ = this._;
          if (tstr == null) {
            var papa = this, global2 = new Snap2.Matrix(this.node.getCTM()), local = extractTransform(this), ms = [local], m = new Snap2.Matrix(), i4, localString = local.toTransformString(), string2 = Str(local) == Str(this.matrix) ? Str(_.transform) : localString;
            while (papa.type != "svg" && (papa = papa.parent())) {
              ms.push(extractTransform(papa));
            }
            i4 = ms.length;
            while (i4--) {
              m.add(ms[i4]);
            }
            return {
              string: string2,
              globalMatrix: global2,
              totalMatrix: m,
              localMatrix: local,
              diffMatrix: global2.clone().add(local.invert()),
              global: global2.toTransformString(),
              total: m.toTransformString(),
              local: localString,
              toString: propString
            };
          }
          if (tstr instanceof Snap2.Matrix) {
            this.matrix = tstr;
            this._.transform = tstr.toTransformString();
          } else {
            extractTransform(this, tstr);
          }
          if (this.node) {
            if (this.type == "linearGradient" || this.type == "radialGradient") {
              $(this.node, { gradientTransform: this.matrix });
            } else if (this.type == "pattern") {
              $(this.node, { patternTransform: this.matrix });
            } else {
              $(this.node, { transform: this.matrix });
            }
          }
          return this;
        };
        elproto.parent = function() {
          return wrap(this.node.parentNode);
        };
        elproto.append = elproto.add = function(el) {
          if (el) {
            if (el.type == "set") {
              var it = this;
              el.forEach(function(el2) {
                it.add(el2);
              });
              return this;
            }
            el = wrap(el);
            this.node.appendChild(el.node);
            el.paper = this.paper;
          }
          return this;
        };
        elproto.appendTo = function(el) {
          if (el) {
            el = wrap(el);
            el.append(this);
          }
          return this;
        };
        elproto.prepend = function(el) {
          if (el) {
            if (el.type == "set") {
              var it = this, first;
              el.forEach(function(el2) {
                if (first) {
                  first.after(el2);
                } else {
                  it.prepend(el2);
                }
                first = el2;
              });
              return this;
            }
            el = wrap(el);
            var parent = el.parent();
            this.node.insertBefore(el.node, this.node.firstChild);
            this.add && this.add();
            el.paper = this.paper;
            this.parent() && this.parent().add();
            parent && parent.add();
          }
          return this;
        };
        elproto.prependTo = function(el) {
          el = wrap(el);
          el.prepend(this);
          return this;
        };
        elproto.before = function(el) {
          if (el.type == "set") {
            var it = this;
            el.forEach(function(el2) {
              var parent2 = el2.parent();
              it.node.parentNode.insertBefore(el2.node, it.node);
              parent2 && parent2.add();
            });
            this.parent().add();
            return this;
          }
          el = wrap(el);
          var parent = el.parent();
          this.node.parentNode.insertBefore(el.node, this.node);
          this.parent() && this.parent().add();
          parent && parent.add();
          el.paper = this.paper;
          return this;
        };
        elproto.after = function(el) {
          el = wrap(el);
          var parent = el.parent();
          if (this.node.nextSibling) {
            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);
          } else {
            this.node.parentNode.appendChild(el.node);
          }
          this.parent() && this.parent().add();
          parent && parent.add();
          el.paper = this.paper;
          return this;
        };
        elproto.insertBefore = function(el) {
          el = wrap(el);
          var parent = this.parent();
          el.node.parentNode.insertBefore(this.node, el.node);
          this.paper = el.paper;
          parent && parent.add();
          el.parent() && el.parent().add();
          return this;
        };
        elproto.insertAfter = function(el) {
          el = wrap(el);
          var parent = this.parent();
          el.node.parentNode.insertBefore(this.node, el.node.nextSibling);
          this.paper = el.paper;
          parent && parent.add();
          el.parent() && el.parent().add();
          return this;
        };
        elproto.remove = function() {
          var parent = this.parent();
          this.node.parentNode && this.node.parentNode.removeChild(this.node);
          delete this.paper;
          this.removed = true;
          parent && parent.add();
          return this;
        };
        elproto.select = function(query) {
          return wrap(this.node.querySelector(query));
        };
        elproto.selectAll = function(query) {
          var nodelist = this.node.querySelectorAll(query), set = (Snap2.set || Array)();
          for (var i4 = 0; i4 < nodelist.length; i4++) {
            set.push(wrap(nodelist[i4]));
          }
          return set;
        };
        elproto.asPX = function(attr, value) {
          if (value == null) {
            value = this.attr(attr);
          }
          return +unit2px(this, attr, value);
        };
        elproto.use = function() {
          var use, id = this.node.id;
          if (!id) {
            id = this.id;
            $(this.node, {
              id
            });
          }
          if (this.type == "linearGradient" || this.type == "radialGradient" || this.type == "pattern") {
            use = make(this.type, this.node.parentNode);
          } else {
            use = make("use", this.node.parentNode);
          }
          $(use.node, {
            "xlink:href": "#" + id
          });
          use.original = this;
          return use;
        };
        function fixids(el) {
          var els = el.selectAll("*"), it, url4 = /^\s*url\(("|'|)(.*)\1\)\s*$/, ids = [], uses = {};
          function urltest(it2, name2) {
            var val = $(it2.node, name2);
            val = val && val.match(url4);
            val = val && val[2];
            if (val && val.charAt() == "#") {
              val = val.substring(1);
            } else {
              return;
            }
            if (val) {
              uses[val] = (uses[val] || []).concat(function(id) {
                var attr = {};
                attr[name2] = Snap2.url(id);
                $(it2.node, attr);
              });
            }
          }
          function linktest(it2) {
            var val = $(it2.node, "xlink:href");
            if (val && val.charAt() == "#") {
              val = val.substring(1);
            } else {
              return;
            }
            if (val) {
              uses[val] = (uses[val] || []).concat(function(id) {
                it2.attr("xlink:href", "#" + id);
              });
            }
          }
          for (var i4 = 0, ii = els.length; i4 < ii; i4++) {
            it = els[i4];
            urltest(it, "fill");
            urltest(it, "stroke");
            urltest(it, "filter");
            urltest(it, "mask");
            urltest(it, "clip-path");
            linktest(it);
            var oldid = $(it.node, "id");
            if (oldid) {
              $(it.node, { id: it.id });
              ids.push({
                old: oldid,
                id: it.id
              });
            }
          }
          for (i4 = 0, ii = ids.length; i4 < ii; i4++) {
            var fs = uses[ids[i4].old];
            if (fs) {
              for (var j = 0, jj = fs.length; j < jj; j++) {
                fs[j](ids[i4].id);
              }
            }
          }
        }
        elproto.clone = function() {
          var clone = wrap(this.node.cloneNode(true));
          if ($(clone.node, "id")) {
            $(clone.node, { id: clone.id });
          }
          fixids(clone);
          clone.insertAfter(this);
          return clone;
        };
        elproto.toDefs = function() {
          var defs = getSomeDefs(this);
          defs.appendChild(this.node);
          return this;
        };
        elproto.pattern = elproto.toPattern = function(x3, y4, width, height) {
          var p2 = make("pattern", getSomeDefs(this));
          if (x3 == null) {
            x3 = this.getBBox();
          }
          if (is(x3, "object") && "x" in x3) {
            y4 = x3.y;
            width = x3.width;
            height = x3.height;
            x3 = x3.x;
          }
          $(p2.node, {
            x: x3,
            y: y4,
            width,
            height,
            patternUnits: "userSpaceOnUse",
            id: p2.id,
            viewBox: [x3, y4, width, height].join(" ")
          });
          p2.node.appendChild(this.node);
          return p2;
        };
        elproto.marker = function(x3, y4, width, height, refX, refY) {
          var p2 = make("marker", getSomeDefs(this));
          if (x3 == null) {
            x3 = this.getBBox();
          }
          if (is(x3, "object") && "x" in x3) {
            y4 = x3.y;
            width = x3.width;
            height = x3.height;
            refX = x3.refX || x3.cx;
            refY = x3.refY || x3.cy;
            x3 = x3.x;
          }
          $(p2.node, {
            viewBox: [x3, y4, width, height].join(" "),
            markerWidth: width,
            markerHeight: height,
            orient: "auto",
            refX: refX || 0,
            refY: refY || 0,
            id: p2.id
          });
          p2.node.appendChild(this.node);
          return p2;
        };
        var eldata = {};
        elproto.data = function(key, value) {
          var data = eldata[this.id] = eldata[this.id] || {};
          if (arguments.length == 0) {
            eve("snap.data.get." + this.id, this, data, null);
            return data;
          }
          if (arguments.length == 1) {
            if (Snap2.is(key, "object")) {
              for (var i4 in key)
                if (key[has](i4)) {
                  this.data(i4, key[i4]);
                }
              return this;
            }
            eve("snap.data.get." + this.id, this, data[key], key);
            return data[key];
          }
          data[key] = value;
          eve("snap.data.set." + this.id, this, value, key);
          return this;
        };
        elproto.removeData = function(key) {
          if (key == null) {
            eldata[this.id] = {};
          } else {
            eldata[this.id] && delete eldata[this.id][key];
          }
          return this;
        };
        elproto.outerSVG = elproto.toString = toString(1);
        elproto.innerSVG = toString();
        function toString(type) {
          return function() {
            var res2 = type ? "<" + this.type : "", attr = this.node.attributes, chld = this.node.childNodes;
            if (type) {
              for (var i4 = 0, ii = attr.length; i4 < ii; i4++) {
                res2 += " " + attr[i4].name + '="' + attr[i4].value.replace(/"/g, '\\"') + '"';
              }
            }
            if (chld.length) {
              type && (res2 += ">");
              for (i4 = 0, ii = chld.length; i4 < ii; i4++) {
                if (chld[i4].nodeType == 3) {
                  res2 += chld[i4].nodeValue;
                } else if (chld[i4].nodeType == 1) {
                  res2 += wrap(chld[i4]).toString();
                }
              }
              type && (res2 += "</" + this.type + ">");
            } else {
              type && (res2 += "/>");
            }
            return res2;
          };
        }
        elproto.toDataURL = function() {
          if (window && window.btoa) {
            var bb = this.getBBox(), svg = Snap2.format('<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>', {
              x: +bb.x.toFixed(3),
              y: +bb.y.toFixed(3),
              width: +bb.width.toFixed(3),
              height: +bb.height.toFixed(3),
              contents: this.outerSVG()
            });
            return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svg)));
          }
        };
        Fragment.prototype.select = elproto.select;
        Fragment.prototype.selectAll = elproto.selectAll;
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var objectToString = Object.prototype.toString, Str = String, math2 = Math, E3 = "";
        function Matrix(a, b, c, d2, e, f) {
          if (b == null && objectToString.call(a) == "[object SVGMatrix]") {
            this.a = a.a;
            this.b = a.b;
            this.c = a.c;
            this.d = a.d;
            this.e = a.e;
            this.f = a.f;
            return;
          }
          if (a != null) {
            this.a = +a;
            this.b = +b;
            this.c = +c;
            this.d = +d2;
            this.e = +e;
            this.f = +f;
          } else {
            this.a = 1;
            this.b = 0;
            this.c = 0;
            this.d = 1;
            this.e = 0;
            this.f = 0;
          }
        }
        (function(matrixproto) {
          matrixproto.add = function(a, b, c, d2, e, f) {
            if (a && a instanceof Matrix) {
              return this.add(a.a, a.b, a.c, a.d, a.e, a.f);
            }
            var aNew = a * this.a + b * this.c, bNew = a * this.b + b * this.d;
            this.e += e * this.a + f * this.c;
            this.f += e * this.b + f * this.d;
            this.c = c * this.a + d2 * this.c;
            this.d = c * this.b + d2 * this.d;
            this.a = aNew;
            this.b = bNew;
            return this;
          };
          Matrix.prototype.multLeft = function(a, b, c, d2, e, f) {
            if (a && a instanceof Matrix) {
              return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);
            }
            var aNew = a * this.a + c * this.b, cNew = a * this.c + c * this.d, eNew = a * this.e + c * this.f + e;
            this.b = b * this.a + d2 * this.b;
            this.d = b * this.c + d2 * this.d;
            this.f = b * this.e + d2 * this.f + f;
            this.a = aNew;
            this.c = cNew;
            this.e = eNew;
            return this;
          };
          matrixproto.invert = function() {
            var me = this, x3 = me.a * me.d - me.b * me.c;
            return new Matrix(me.d / x3, -me.b / x3, -me.c / x3, me.a / x3, (me.c * me.f - me.d * me.e) / x3, (me.b * me.e - me.a * me.f) / x3);
          };
          matrixproto.clone = function() {
            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);
          };
          matrixproto.translate = function(x3, y4) {
            this.e += x3 * this.a + y4 * this.c;
            this.f += x3 * this.b + y4 * this.d;
            return this;
          };
          matrixproto.scale = function(x3, y4, cx, cy) {
            y4 == null && (y4 = x3);
            (cx || cy) && this.translate(cx, cy);
            this.a *= x3;
            this.b *= x3;
            this.c *= y4;
            this.d *= y4;
            (cx || cy) && this.translate(-cx, -cy);
            return this;
          };
          matrixproto.rotate = function(a, x3, y4) {
            a = Snap2.rad(a);
            x3 = x3 || 0;
            y4 = y4 || 0;
            var cos = +math2.cos(a).toFixed(9), sin = +math2.sin(a).toFixed(9);
            this.add(cos, sin, -sin, cos, x3, y4);
            return this.add(1, 0, 0, 1, -x3, -y4);
          };
          matrixproto.skewX = function(x3) {
            return this.skew(x3, 0);
          };
          matrixproto.skewY = function(y4) {
            return this.skew(0, y4);
          };
          matrixproto.skew = function(x3, y4) {
            x3 = x3 || 0;
            y4 = y4 || 0;
            x3 = Snap2.rad(x3);
            y4 = Snap2.rad(y4);
            var c = math2.tan(x3).toFixed(9);
            var b = math2.tan(y4).toFixed(9);
            return this.add(1, b, c, 1, 0, 0);
          };
          matrixproto.x = function(x3, y4) {
            return x3 * this.a + y4 * this.c + this.e;
          };
          matrixproto.y = function(x3, y4) {
            return x3 * this.b + y4 * this.d + this.f;
          };
          matrixproto.get = function(i4) {
            return +this[Str.fromCharCode(97 + i4)].toFixed(4);
          };
          matrixproto.toString = function() {
            return "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")";
          };
          matrixproto.offset = function() {
            return [this.e.toFixed(4), this.f.toFixed(4)];
          };
          function norm(a) {
            return a[0] * a[0] + a[1] * a[1];
          }
          function normalize(a) {
            var mag = math2.sqrt(norm(a));
            a[0] && (a[0] /= mag);
            a[1] && (a[1] /= mag);
          }
          matrixproto.determinant = function() {
            return this.a * this.d - this.b * this.c;
          };
          matrixproto.split = function() {
            var out = {};
            out.dx = this.e;
            out.dy = this.f;
            var row = [[this.a, this.b], [this.c, this.d]];
            out.scalex = math2.sqrt(norm(row[0]));
            normalize(row[0]);
            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];
            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];
            out.scaley = math2.sqrt(norm(row[1]));
            normalize(row[1]);
            out.shear /= out.scaley;
            if (this.determinant() < 0) {
              out.scalex = -out.scalex;
            }
            var sin = row[0][1], cos = row[1][1];
            if (cos < 0) {
              out.rotate = Snap2.deg(math2.acos(cos));
              if (sin < 0) {
                out.rotate = 360 - out.rotate;
              }
            } else {
              out.rotate = Snap2.deg(math2.asin(sin));
            }
            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);
            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;
            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;
            return out;
          };
          matrixproto.toTransformString = function(shorter) {
            var s = shorter || this.split();
            if (!+s.shear.toFixed(9)) {
              s.scalex = +s.scalex.toFixed(4);
              s.scaley = +s.scaley.toFixed(4);
              s.rotate = +s.rotate.toFixed(4);
              return (s.dx || s.dy ? "t" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E3) + (s.rotate ? "r" + [+s.rotate.toFixed(4), 0, 0] : E3) + (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E3);
            } else {
              return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];
            }
          };
        })(Matrix.prototype);
        Snap2.Matrix = Matrix;
        Snap2.matrix = function(a, b, c, d2, e, f) {
          return new Matrix(a, b, c, d2, e, f);
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var has = "hasOwnProperty", make = Snap2._.make, wrap = Snap2._.wrap, is = Snap2.is, getSomeDefs = Snap2._.getSomeDefs, reURLValue = /^url\((['"]?)([^)]+)\1\)$/, $ = Snap2._.$, URL2 = Snap2.url, Str = String, separator = Snap2._.separator, E3 = "";
        Snap2.deurl = function(value) {
          var res2 = String(value).match(reURLValue);
          return res2 ? res2[2] : value;
        };
        eve.on("snap.util.attr.mask", function(value) {
          if (value instanceof Element || value instanceof Fragment) {
            eve.stop();
            if (value instanceof Fragment && value.node.childNodes.length == 1) {
              value = value.node.firstChild;
              getSomeDefs(this).appendChild(value);
              value = wrap(value);
            }
            if (value.type == "mask") {
              var mask = value;
            } else {
              mask = make("mask", getSomeDefs(this));
              mask.node.appendChild(value.node);
            }
            !mask.node.id && $(mask.node, {
              id: mask.id
            });
            $(this.node, {
              mask: URL2(mask.id)
            });
          }
        });
        (function(clipIt) {
          eve.on("snap.util.attr.clip", clipIt);
          eve.on("snap.util.attr.clip-path", clipIt);
          eve.on("snap.util.attr.clipPath", clipIt);
        })(function(value) {
          if (value instanceof Element || value instanceof Fragment) {
            eve.stop();
            var clip, node = value.node;
            while (node) {
              if (node.nodeName === "clipPath") {
                clip = new Element(node);
                break;
              }
              if (node.nodeName === "svg") {
                clip = void 0;
                break;
              }
              node = node.parentNode;
            }
            if (!clip) {
              clip = make("clipPath", getSomeDefs(this));
              clip.node.appendChild(value.node);
              !clip.node.id && $(clip.node, {
                id: clip.id
              });
            }
            $(this.node, {
              "clip-path": URL2(clip.node.id || clip.id)
            });
          }
        });
        function fillStroke(name2) {
          return function(value) {
            eve.stop();
            if (value instanceof Fragment && value.node.childNodes.length == 1 && (value.node.firstChild.tagName == "radialGradient" || value.node.firstChild.tagName == "linearGradient" || value.node.firstChild.tagName == "pattern")) {
              value = value.node.firstChild;
              getSomeDefs(this).appendChild(value);
              value = wrap(value);
            }
            if (value instanceof Element) {
              if (value.type == "radialGradient" || value.type == "linearGradient" || value.type == "pattern") {
                if (!value.node.id) {
                  $(value.node, {
                    id: value.id
                  });
                }
                var fill = URL2(value.node.id);
              } else {
                fill = value.attr(name2);
              }
            } else {
              fill = Snap2.color(value);
              if (fill.error) {
                var grad = Snap2(getSomeDefs(this).ownerSVGElement).gradient(value);
                if (grad) {
                  if (!grad.node.id) {
                    $(grad.node, {
                      id: grad.id
                    });
                  }
                  fill = URL2(grad.node.id);
                } else {
                  fill = value;
                }
              } else {
                fill = Str(fill);
              }
            }
            var attrs = {};
            attrs[name2] = fill;
            $(this.node, attrs);
            this.node.style[name2] = E3;
          };
        }
        eve.on("snap.util.attr.fill", fillStroke("fill"));
        eve.on("snap.util.attr.stroke", fillStroke("stroke"));
        var gradrg = /^([lr])(?:\(([^)]*)\))?(.*)$/i;
        eve.on("snap.util.grad.parse", function parseGrad(string2) {
          string2 = Str(string2);
          var tokens = string2.match(gradrg);
          if (!tokens) {
            return null;
          }
          var type = tokens[1], params2 = tokens[2], stops = tokens[3];
          params2 = params2.split(/\s*,\s*/).map(function(el) {
            return +el == el ? +el : el;
          });
          if (params2.length == 1 && params2[0] == 0) {
            params2 = [];
          }
          stops = stops.split("-");
          stops = stops.map(function(el) {
            el = el.split(":");
            var out = {
              color: el[0]
            };
            if (el[1]) {
              out.offset = parseFloat(el[1]);
            }
            return out;
          });
          var len = stops.length, start = 0, j = 0;
          function seed(i5, end) {
            var step = (end - start) / (i5 - j);
            for (var k = j; k < i5; k++) {
              stops[k].offset = +(+start + step * (k - j)).toFixed(2);
            }
            j = i5;
            start = end;
          }
          len--;
          for (var i4 = 0; i4 < len; i4++)
            if ("offset" in stops[i4]) {
              seed(i4, stops[i4].offset);
            }
          stops[len].offset = stops[len].offset || 100;
          seed(len, stops[len].offset);
          return {
            type,
            params: params2,
            stops
          };
        });
        eve.on("snap.util.attr.d", function(value) {
          eve.stop();
          if (is(value, "array") && is(value[0], "array")) {
            value = Snap2.path.toString.call(value);
          }
          value = Str(value);
          if (value.match(/[ruo]/i)) {
            value = Snap2.path.toAbsolute(value);
          }
          $(this.node, { d: value });
        })(-1);
        eve.on("snap.util.attr.#text", function(value) {
          eve.stop();
          value = Str(value);
          var txt = glob.doc.createTextNode(value);
          while (this.node.firstChild) {
            this.node.removeChild(this.node.firstChild);
          }
          this.node.appendChild(txt);
        })(-1);
        eve.on("snap.util.attr.path", function(value) {
          eve.stop();
          this.attr({ d: value });
        })(-1);
        eve.on("snap.util.attr.class", function(value) {
          eve.stop();
          this.node.className.baseVal = value;
        })(-1);
        eve.on("snap.util.attr.viewBox", function(value) {
          var vb;
          if (is(value, "object") && "x" in value) {
            vb = [value.x, value.y, value.width, value.height].join(" ");
          } else if (is(value, "array")) {
            vb = value.join(" ");
          } else {
            vb = value;
          }
          $(this.node, {
            viewBox: vb
          });
          eve.stop();
        })(-1);
        eve.on("snap.util.attr.transform", function(value) {
          this.transform(value);
          eve.stop();
        })(-1);
        eve.on("snap.util.attr.r", function(value) {
          if (this.type == "rect") {
            eve.stop();
            $(this.node, {
              rx: value,
              ry: value
            });
          }
        })(-1);
        eve.on("snap.util.attr.textpath", function(value) {
          eve.stop();
          if (this.type == "text") {
            var id, tp, node;
            if (!value && this.textPath) {
              tp = this.textPath;
              while (tp.node.firstChild) {
                this.node.appendChild(tp.node.firstChild);
              }
              tp.remove();
              delete this.textPath;
              return;
            }
            if (is(value, "string")) {
              var defs = getSomeDefs(this), path = wrap(defs.parentNode).path(value);
              defs.appendChild(path.node);
              id = path.id;
              path.attr({ id });
            } else {
              value = wrap(value);
              if (value instanceof Element) {
                id = value.attr("id");
                if (!id) {
                  id = value.id;
                  value.attr({ id });
                }
              }
            }
            if (id) {
              tp = this.textPath;
              node = this.node;
              if (tp) {
                tp.attr({ "xlink:href": "#" + id });
              } else {
                tp = $("textPath", {
                  "xlink:href": "#" + id
                });
                while (node.firstChild) {
                  tp.appendChild(node.firstChild);
                }
                node.appendChild(tp);
                this.textPath = wrap(tp);
              }
            }
          }
        })(-1);
        eve.on("snap.util.attr.text", function(value) {
          if (this.type == "text") {
            var i4 = 0, node = this.node, tuner = function(chunk) {
              var out = $("tspan");
              if (is(chunk, "array")) {
                for (var i5 = 0; i5 < chunk.length; i5++) {
                  out.appendChild(tuner(chunk[i5]));
                }
              } else {
                out.appendChild(glob.doc.createTextNode(chunk));
              }
              out.normalize && out.normalize();
              return out;
            };
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            var tuned = tuner(value);
            while (tuned.firstChild) {
              node.appendChild(tuned.firstChild);
            }
          }
          eve.stop();
        })(-1);
        function setFontSize(value) {
          eve.stop();
          if (value == +value) {
            value += "px";
          }
          this.node.style.fontSize = value;
        }
        eve.on("snap.util.attr.fontSize", setFontSize)(-1);
        eve.on("snap.util.attr.font-size", setFontSize)(-1);
        eve.on("snap.util.getattr.transform", function() {
          eve.stop();
          return this.transform();
        })(-1);
        eve.on("snap.util.getattr.textpath", function() {
          eve.stop();
          return this.textPath;
        })(-1);
        (function() {
          function getter(end) {
            return function() {
              eve.stop();
              var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue("marker-" + end);
              if (style == "none") {
                return style;
              } else {
                return Snap2(glob.doc.getElementById(style.match(reURLValue)[1]));
              }
            };
          }
          function setter(end) {
            return function(value) {
              eve.stop();
              var name2 = "marker" + end.charAt(0).toUpperCase() + end.substring(1);
              if (value == "" || !value) {
                this.node.style[name2] = "none";
                return;
              }
              if (value.type == "marker") {
                var id = value.node.id;
                if (!id) {
                  $(value.node, { id: value.id });
                }
                this.node.style[name2] = URL2(id);
                return;
              }
            };
          }
          eve.on("snap.util.getattr.marker-end", getter("end"))(-1);
          eve.on("snap.util.getattr.markerEnd", getter("end"))(-1);
          eve.on("snap.util.getattr.marker-start", getter("start"))(-1);
          eve.on("snap.util.getattr.markerStart", getter("start"))(-1);
          eve.on("snap.util.getattr.marker-mid", getter("mid"))(-1);
          eve.on("snap.util.getattr.markerMid", getter("mid"))(-1);
          eve.on("snap.util.attr.marker-end", setter("end"))(-1);
          eve.on("snap.util.attr.markerEnd", setter("end"))(-1);
          eve.on("snap.util.attr.marker-start", setter("start"))(-1);
          eve.on("snap.util.attr.markerStart", setter("start"))(-1);
          eve.on("snap.util.attr.marker-mid", setter("mid"))(-1);
          eve.on("snap.util.attr.markerMid", setter("mid"))(-1);
        })();
        eve.on("snap.util.getattr.r", function() {
          if (this.type == "rect" && $(this.node, "rx") == $(this.node, "ry")) {
            eve.stop();
            return $(this.node, "rx");
          }
        })(-1);
        function textExtract(node) {
          var out = [];
          var children = node.childNodes;
          for (var i4 = 0, ii = children.length; i4 < ii; i4++) {
            var chi = children[i4];
            if (chi.nodeType == 3) {
              out.push(chi.nodeValue);
            }
            if (chi.tagName == "tspan") {
              if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {
                out.push(chi.firstChild.nodeValue);
              } else {
                out.push(textExtract(chi));
              }
            }
          }
          return out;
        }
        eve.on("snap.util.getattr.text", function() {
          if (this.type == "text" || this.type == "tspan") {
            eve.stop();
            var out = textExtract(this.node);
            return out.length == 1 ? out[0] : out;
          }
        })(-1);
        eve.on("snap.util.getattr.#text", function() {
          return this.node.textContent;
        })(-1);
        eve.on("snap.util.getattr.fill", function(internal) {
          if (internal) {
            return;
          }
          eve.stop();
          var value = eve("snap.util.getattr.fill", this, true).firstDefined();
          return Snap2(Snap2.deurl(value)) || value;
        })(-1);
        eve.on("snap.util.getattr.stroke", function(internal) {
          if (internal) {
            return;
          }
          eve.stop();
          var value = eve("snap.util.getattr.stroke", this, true).firstDefined();
          return Snap2(Snap2.deurl(value)) || value;
        })(-1);
        eve.on("snap.util.getattr.viewBox", function() {
          eve.stop();
          var vb = $(this.node, "viewBox");
          if (vb) {
            vb = vb.split(separator);
            return Snap2._.box(+vb[0], +vb[1], +vb[2], +vb[3]);
          } else {
            return;
          }
        })(-1);
        eve.on("snap.util.getattr.points", function() {
          var p2 = $(this.node, "points");
          eve.stop();
          if (p2) {
            return p2.split(separator);
          } else {
            return;
          }
        })(-1);
        eve.on("snap.util.getattr.path", function() {
          var p2 = $(this.node, "d");
          eve.stop();
          return p2;
        })(-1);
        eve.on("snap.util.getattr.class", function() {
          return this.node.className.baseVal;
        })(-1);
        function getFontSize() {
          eve.stop();
          return this.node.style.fontSize;
        }
        eve.on("snap.util.getattr.fontSize", getFontSize)(-1);
        eve.on("snap.util.getattr.font-size", getFontSize)(-1);
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var rgNotSpace = /\S+/g, rgBadSpace = /[\t\r\n\f]/g, rgTrim = /(^\s+|\s+$)/g, Str = String, elproto = Element.prototype;
        elproto.addClass = function(value) {
          var classes = Str(value || "").match(rgNotSpace) || [], elem = this.node, className = elem.className.baseVal, curClasses = className.match(rgNotSpace) || [], j, pos, clazz, finalValue;
          if (classes.length) {
            j = 0;
            while (clazz = classes[j++]) {
              pos = curClasses.indexOf(clazz);
              if (!~pos) {
                curClasses.push(clazz);
              }
            }
            finalValue = curClasses.join(" ");
            if (className != finalValue) {
              elem.className.baseVal = finalValue;
            }
          }
          return this;
        };
        elproto.removeClass = function(value) {
          var classes = Str(value || "").match(rgNotSpace) || [], elem = this.node, className = elem.className.baseVal, curClasses = className.match(rgNotSpace) || [], j, pos, clazz, finalValue;
          if (curClasses.length) {
            j = 0;
            while (clazz = classes[j++]) {
              pos = curClasses.indexOf(clazz);
              if (~pos) {
                curClasses.splice(pos, 1);
              }
            }
            finalValue = curClasses.join(" ");
            if (className != finalValue) {
              elem.className.baseVal = finalValue;
            }
          }
          return this;
        };
        elproto.hasClass = function(value) {
          var elem = this.node, className = elem.className.baseVal, curClasses = className.match(rgNotSpace) || [];
          return !!~curClasses.indexOf(value);
        };
        elproto.toggleClass = function(value, flag) {
          if (flag != null) {
            if (flag) {
              return this.addClass(value);
            } else {
              return this.removeClass(value);
            }
          }
          var classes = (value || "").match(rgNotSpace) || [], elem = this.node, className = elem.className.baseVal, curClasses = className.match(rgNotSpace) || [], j, pos, clazz, finalValue;
          j = 0;
          while (clazz = classes[j++]) {
            pos = curClasses.indexOf(clazz);
            if (~pos) {
              curClasses.splice(pos, 1);
            } else {
              curClasses.push(clazz);
            }
          }
          finalValue = curClasses.join(" ");
          if (className != finalValue) {
            elem.className.baseVal = finalValue;
          }
          return this;
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var operators = {
          "+": function(x3, y4) {
            return x3 + y4;
          },
          "-": function(x3, y4) {
            return x3 - y4;
          },
          "/": function(x3, y4) {
            return x3 / y4;
          },
          "*": function(x3, y4) {
            return x3 * y4;
          }
        }, Str = String, reUnit = /[a-z]+$/i, reAddon = /^\s*([+\-\/*])\s*=\s*([\d.eE+\-]+)\s*([^\d\s]+)?\s*$/;
        function getNumber(val) {
          return val;
        }
        function getUnit(unit) {
          return function(val) {
            return +val.toFixed(3) + unit;
          };
        }
        eve.on("snap.util.attr", function(val) {
          var plus = Str(val).match(reAddon);
          if (plus) {
            var evnt = eve.nt(), name2 = evnt.substring(evnt.lastIndexOf(".") + 1), a = this.attr(name2), atr = {};
            eve.stop();
            var unit = plus[3] || "", aUnit = a.match(reUnit), op = operators[plus[1]];
            if (aUnit && aUnit == unit) {
              val = op(parseFloat(a), +plus[2]);
            } else {
              a = this.asPX(name2);
              val = op(this.asPX(name2), this.asPX(name2, plus[2] + unit));
            }
            if (isNaN(a) || isNaN(val)) {
              return;
            }
            atr[name2] = val;
            this.attr(atr);
          }
        })(-10);
        eve.on("snap.util.equal", function(name2, b) {
          var A4, B3, a = Str(this.attr(name2) || ""), el = this, bplus = Str(b).match(reAddon);
          if (bplus) {
            eve.stop();
            var unit = bplus[3] || "", aUnit = a.match(reUnit), op = operators[bplus[1]];
            if (aUnit && aUnit == unit) {
              return {
                from: parseFloat(a),
                to: op(parseFloat(a), +bplus[2]),
                f: getUnit(aUnit)
              };
            } else {
              a = this.asPX(name2);
              return {
                from: a,
                to: op(a, this.asPX(name2, bplus[2] + unit)),
                f: getNumber
              };
            }
          }
        })(-10);
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var proto = Paper.prototype, is = Snap2.is;
        proto.rect = function(x3, y4, w, h, rx, ry) {
          var attr;
          if (ry == null) {
            ry = rx;
          }
          if (is(x3, "object") && x3 == "[object Object]") {
            attr = x3;
          } else if (x3 != null) {
            attr = {
              x: x3,
              y: y4,
              width: w,
              height: h
            };
            if (rx != null) {
              attr.rx = rx;
              attr.ry = ry;
            }
          }
          return this.el("rect", attr);
        };
        proto.circle = function(cx, cy, r) {
          var attr;
          if (is(cx, "object") && cx == "[object Object]") {
            attr = cx;
          } else if (cx != null) {
            attr = {
              cx,
              cy,
              r
            };
          }
          return this.el("circle", attr);
        };
        var preload = function() {
          function onerror() {
            this.parentNode.removeChild(this);
          }
          return function(src, f) {
            var img = glob.doc.createElement("img"), body = glob.doc.body;
            img.style.cssText = "position:absolute;left:-9999em;top:-9999em";
            img.onload = function() {
              f.call(img);
              img.onload = img.onerror = null;
              body.removeChild(img);
            };
            img.onerror = onerror;
            body.appendChild(img);
            img.src = src;
          };
        }();
        proto.image = function(src, x3, y4, width, height) {
          var el = this.el("image");
          if (is(src, "object") && "src" in src) {
            el.attr(src);
          } else if (src != null) {
            var set = {
              "xlink:href": src,
              preserveAspectRatio: "none"
            };
            if (x3 != null && y4 != null) {
              set.x = x3;
              set.y = y4;
            }
            if (width != null && height != null) {
              set.width = width;
              set.height = height;
            } else {
              preload(src, function() {
                Snap2._.$(el.node, {
                  width: this.offsetWidth,
                  height: this.offsetHeight
                });
              });
            }
            Snap2._.$(el.node, set);
          }
          return el;
        };
        proto.ellipse = function(cx, cy, rx, ry) {
          var attr;
          if (is(cx, "object") && cx == "[object Object]") {
            attr = cx;
          } else if (cx != null) {
            attr = {
              cx,
              cy,
              rx,
              ry
            };
          }
          return this.el("ellipse", attr);
        };
        proto.path = function(d2) {
          var attr;
          if (is(d2, "object") && !is(d2, "array")) {
            attr = d2;
          } else if (d2) {
            attr = { d: d2 };
          }
          return this.el("path", attr);
        };
        proto.group = proto.g = function(first) {
          var attr, el = this.el("g");
          if (arguments.length == 1 && first && !first.type) {
            el.attr(first);
          } else if (arguments.length) {
            el.add(Array.prototype.slice.call(arguments, 0));
          }
          return el;
        };
        proto.svg = function(x3, y4, width, height, vbx, vby, vbw, vbh) {
          var attrs = {};
          if (is(x3, "object") && y4 == null) {
            attrs = x3;
          } else {
            if (x3 != null) {
              attrs.x = x3;
            }
            if (y4 != null) {
              attrs.y = y4;
            }
            if (width != null) {
              attrs.width = width;
            }
            if (height != null) {
              attrs.height = height;
            }
            if (vbx != null && vby != null && vbw != null && vbh != null) {
              attrs.viewBox = [vbx, vby, vbw, vbh];
            }
          }
          return this.el("svg", attrs);
        };
        proto.mask = function(first) {
          var attr, el = this.el("mask");
          if (arguments.length == 1 && first && !first.type) {
            el.attr(first);
          } else if (arguments.length) {
            el.add(Array.prototype.slice.call(arguments, 0));
          }
          return el;
        };
        proto.ptrn = function(x3, y4, width, height, vx, vy, vw, vh) {
          if (is(x3, "object")) {
            var attr = x3;
          } else {
            attr = { patternUnits: "userSpaceOnUse" };
            if (x3) {
              attr.x = x3;
            }
            if (y4) {
              attr.y = y4;
            }
            if (width != null) {
              attr.width = width;
            }
            if (height != null) {
              attr.height = height;
            }
            if (vx != null && vy != null && vw != null && vh != null) {
              attr.viewBox = [vx, vy, vw, vh];
            } else {
              attr.viewBox = [x3 || 0, y4 || 0, width || 0, height || 0];
            }
          }
          return this.el("pattern", attr);
        };
        proto.use = function(id) {
          if (id != null) {
            if (id instanceof Element) {
              if (!id.attr("id")) {
                id.attr({ id: Snap2._.id(id) });
              }
              id = id.attr("id");
            }
            if (String(id).charAt() == "#") {
              id = id.substring(1);
            }
            return this.el("use", { "xlink:href": "#" + id });
          } else {
            return Element.prototype.use.call(this);
          }
        };
        proto.symbol = function(vx, vy, vw, vh) {
          var attr = {};
          if (vx != null && vy != null && vw != null && vh != null) {
            attr.viewBox = [vx, vy, vw, vh];
          }
          return this.el("symbol", attr);
        };
        proto.text = function(x3, y4, text) {
          var attr = {};
          if (is(x3, "object")) {
            attr = x3;
          } else if (x3 != null) {
            attr = {
              x: x3,
              y: y4,
              text: text || ""
            };
          }
          return this.el("text", attr);
        };
        proto.line = function(x1, y1, x22, y22) {
          var attr = {};
          if (is(x1, "object")) {
            attr = x1;
          } else if (x1 != null) {
            attr = {
              x1,
              x2: x22,
              y1,
              y2: y22
            };
          }
          return this.el("line", attr);
        };
        proto.polyline = function(points) {
          if (arguments.length > 1) {
            points = Array.prototype.slice.call(arguments, 0);
          }
          var attr = {};
          if (is(points, "object") && !is(points, "array")) {
            attr = points;
          } else if (points != null) {
            attr = { points };
          }
          return this.el("polyline", attr);
        };
        proto.polygon = function(points) {
          if (arguments.length > 1) {
            points = Array.prototype.slice.call(arguments, 0);
          }
          var attr = {};
          if (is(points, "object") && !is(points, "array")) {
            attr = points;
          } else if (points != null) {
            attr = { points };
          }
          return this.el("polygon", attr);
        };
        (function() {
          var $ = Snap2._.$;
          function Gstops() {
            return this.selectAll("stop");
          }
          function GaddStop(color, offset) {
            var stop = $("stop"), attr = {
              offset: +offset + "%"
            };
            color = Snap2.color(color);
            attr["stop-color"] = color.hex;
            if (color.opacity < 1) {
              attr["stop-opacity"] = color.opacity;
            }
            $(stop, attr);
            var stops = this.stops(), inserted;
            for (var i4 = 0; i4 < stops.length; i4++) {
              var stopOffset = parseFloat(stops[i4].attr("offset"));
              if (stopOffset > offset) {
                this.node.insertBefore(stop, stops[i4].node);
                inserted = true;
                break;
              }
            }
            if (!inserted) {
              this.node.appendChild(stop);
            }
            return this;
          }
          function GgetBBox() {
            if (this.type == "linearGradient") {
              var x1 = $(this.node, "x1") || 0, x22 = $(this.node, "x2") || 1, y1 = $(this.node, "y1") || 0, y22 = $(this.node, "y2") || 0;
              return Snap2._.box(x1, y1, math.abs(x22 - x1), math.abs(y22 - y1));
            } else {
              var cx = this.node.cx || 0.5, cy = this.node.cy || 0.5, r = this.node.r || 0;
              return Snap2._.box(cx - r, cy - r, r * 2, r * 2);
            }
          }
          function GsetStops(str6) {
            var grad = str6, stops = this.stops();
            if (typeof str6 == "string") {
              grad = eve("snap.util.grad.parse", null, "l(0,0,0,1)" + str6).firstDefined().stops;
            }
            if (!Snap2.is(grad, "array")) {
              return;
            }
            for (var i4 = 0; i4 < stops.length; i4++) {
              if (grad[i4]) {
                var color = Snap2.color(grad[i4].color), attr = { "offset": grad[i4].offset + "%" };
                attr["stop-color"] = color.hex;
                if (color.opacity < 1) {
                  attr["stop-opacity"] = color.opacity;
                }
                stops[i4].attr(attr);
              } else {
                stops[i4].remove();
              }
            }
            for (i4 = stops.length; i4 < grad.length; i4++) {
              this.addStop(grad[i4].color, grad[i4].offset);
            }
            return this;
          }
          function gradient(defs, str6) {
            var grad = eve("snap.util.grad.parse", null, str6).firstDefined(), el;
            if (!grad) {
              return null;
            }
            grad.params.unshift(defs);
            if (grad.type.toLowerCase() == "l") {
              el = gradientLinear.apply(0, grad.params);
            } else {
              el = gradientRadial.apply(0, grad.params);
            }
            if (grad.type != grad.type.toLowerCase()) {
              $(el.node, {
                gradientUnits: "userSpaceOnUse"
              });
            }
            var stops = grad.stops, len = stops.length;
            for (var i4 = 0; i4 < len; i4++) {
              var stop = stops[i4];
              el.addStop(stop.color, stop.offset);
            }
            return el;
          }
          function gradientLinear(defs, x1, y1, x22, y22) {
            var el = Snap2._.make("linearGradient", defs);
            el.stops = Gstops;
            el.addStop = GaddStop;
            el.getBBox = GgetBBox;
            el.setStops = GsetStops;
            if (x1 != null) {
              $(el.node, {
                x1,
                y1,
                x2: x22,
                y2: y22
              });
            }
            return el;
          }
          function gradientRadial(defs, cx, cy, r, fx, fy) {
            var el = Snap2._.make("radialGradient", defs);
            el.stops = Gstops;
            el.addStop = GaddStop;
            el.getBBox = GgetBBox;
            if (cx != null) {
              $(el.node, {
                cx,
                cy,
                r
              });
            }
            if (fx != null && fy != null) {
              $(el.node, {
                fx,
                fy
              });
            }
            return el;
          }
          proto.gradient = function(str6) {
            return gradient(this.defs, str6);
          };
          proto.gradientLinear = function(x1, y1, x22, y22) {
            return gradientLinear(this.defs, x1, y1, x22, y22);
          };
          proto.gradientRadial = function(cx, cy, r, fx, fy) {
            return gradientRadial(this.defs, cx, cy, r, fx, fy);
          };
          proto.toString = function() {
            var doc = this.node.ownerDocument, f = doc.createDocumentFragment(), d2 = doc.createElement("div"), svg = this.node.cloneNode(true), res2;
            f.appendChild(d2);
            d2.appendChild(svg);
            Snap2._.$(svg, { xmlns: "http://www.w3.org/2000/svg" });
            res2 = d2.innerHTML;
            f.removeChild(f.firstChild);
            return res2;
          };
          proto.toDataURL = function() {
            if (window && window.btoa) {
              return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(this)));
            }
          };
          proto.clear = function() {
            var node = this.node.firstChild, next;
            while (node) {
              next = node.nextSibling;
              if (node.tagName != "defs") {
                node.parentNode.removeChild(node);
              } else {
                proto.clear.call({ node });
              }
              node = next;
            }
          };
        })();
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var elproto = Element.prototype, is = Snap2.is, clone = Snap2._.clone, has = "hasOwnProperty", p2s = /,?([a-z]),?/gi, toFloat = parseFloat, math2 = Math, PI = math2.PI, mmin = math2.min, mmax = math2.max, pow = math2.pow, abs = math2.abs;
        function paths(ps) {
          var p2 = paths.ps = paths.ps || {};
          if (p2[ps]) {
            p2[ps].sleep = 100;
          } else {
            p2[ps] = {
              sleep: 100
            };
          }
          setTimeout(function() {
            for (var key in p2)
              if (p2[has](key) && key != ps) {
                p2[key].sleep--;
                !p2[key].sleep && delete p2[key];
              }
          });
          return p2[ps];
        }
        function box(x3, y4, width, height) {
          if (x3 == null) {
            x3 = y4 = width = height = 0;
          }
          if (y4 == null) {
            y4 = x3.y;
            width = x3.width;
            height = x3.height;
            x3 = x3.x;
          }
          return {
            x: x3,
            y: y4,
            width,
            w: width,
            height,
            h: height,
            x2: x3 + width,
            y2: y4 + height,
            cx: x3 + width / 2,
            cy: y4 + height / 2,
            r1: math2.min(width, height) / 2,
            r2: math2.max(width, height) / 2,
            r0: math2.sqrt(width * width + height * height) / 2,
            path: rectPath(x3, y4, width, height),
            vb: [x3, y4, width, height].join(" ")
          };
        }
        function toString() {
          return this.join(",").replace(p2s, "$1");
        }
        function pathClone(pathArray) {
          var res2 = clone(pathArray);
          res2.toString = toString;
          return res2;
        }
        function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {
          if (length == null) {
            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);
          } else {
            return findDotsAtSegment(
              p1x,
              p1y,
              c1x,
              c1y,
              c2x,
              c2y,
              p2x,
              p2y,
              getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length)
            );
          }
        }
        function getLengthFactory(istotal, subpath) {
          function O(val) {
            return +(+val).toFixed(3);
          }
          return Snap2._.cacher(function(path, length, onlystart) {
            if (path instanceof Element) {
              path = path.attr("d");
            }
            path = path2curve(path);
            var x3, y4, p2, l, sp = "", subpaths = {}, point, len = 0;
            for (var i4 = 0, ii = path.length; i4 < ii; i4++) {
              p2 = path[i4];
              if (p2[0] == "M") {
                x3 = +p2[1];
                y4 = +p2[2];
              } else {
                l = getPointAtSegmentLength(x3, y4, p2[1], p2[2], p2[3], p2[4], p2[5], p2[6]);
                if (len + l > length) {
                  if (subpath && !subpaths.start) {
                    point = getPointAtSegmentLength(x3, y4, p2[1], p2[2], p2[3], p2[4], p2[5], p2[6], length - len);
                    sp += [
                      "C" + O(point.start.x),
                      O(point.start.y),
                      O(point.m.x),
                      O(point.m.y),
                      O(point.x),
                      O(point.y)
                    ];
                    if (onlystart) {
                      return sp;
                    }
                    subpaths.start = sp;
                    sp = [
                      "M" + O(point.x),
                      O(point.y) + "C" + O(point.n.x),
                      O(point.n.y),
                      O(point.end.x),
                      O(point.end.y),
                      O(p2[5]),
                      O(p2[6])
                    ].join();
                    len += l;
                    x3 = +p2[5];
                    y4 = +p2[6];
                    continue;
                  }
                  if (!istotal && !subpath) {
                    point = getPointAtSegmentLength(x3, y4, p2[1], p2[2], p2[3], p2[4], p2[5], p2[6], length - len);
                    return point;
                  }
                }
                len += l;
                x3 = +p2[5];
                y4 = +p2[6];
              }
              sp += p2.shift() + p2;
            }
            subpaths.end = sp;
            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x3, y4, p2[0], p2[1], p2[2], p2[3], p2[4], p2[5], 1);
            return point;
          }, null, Snap2._.clone);
        }
        var getTotalLength = getLengthFactory(1), getPointAtLength = getLengthFactory(), getSubpathsAtLength = getLengthFactory(0, 1);
        function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t3) {
          var t1 = 1 - t3, t13 = pow(t1, 3), t12 = pow(t1, 2), t22 = t3 * t3, t32 = t22 * t3, x3 = t13 * p1x + t12 * 3 * t3 * c1x + t1 * 3 * t3 * t3 * c2x + t32 * p2x, y4 = t13 * p1y + t12 * 3 * t3 * c1y + t1 * 3 * t3 * t3 * c2y + t32 * p2y, mx = p1x + 2 * t3 * (c1x - p1x) + t22 * (c2x - 2 * c1x + p1x), my = p1y + 2 * t3 * (c1y - p1y) + t22 * (c2y - 2 * c1y + p1y), nx = c1x + 2 * t3 * (c2x - c1x) + t22 * (p2x - 2 * c2x + c1x), ny = c1y + 2 * t3 * (c2y - c1y) + t22 * (p2y - 2 * c2y + c1y), ax = t1 * p1x + t3 * c1x, ay = t1 * p1y + t3 * c1y, cx = t1 * c2x + t3 * p2x, cy = t1 * c2y + t3 * p2y, alpha = 90 - math2.atan2(mx - nx, my - ny) * 180 / PI;
          return {
            x: x3,
            y: y4,
            m: { x: mx, y: my },
            n: { x: nx, y: ny },
            start: { x: ax, y: ay },
            end: { x: cx, y: cy },
            alpha
          };
        }
        function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
          if (!Snap2.is(p1x, "array")) {
            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
          }
          var bbox = curveDim.apply(null, p1x);
          return box(
            bbox.min.x,
            bbox.min.y,
            bbox.max.x - bbox.min.x,
            bbox.max.y - bbox.min.y
          );
        }
        function isPointInsideBBox(bbox, x3, y4) {
          return x3 >= bbox.x && x3 <= bbox.x + bbox.width && y4 >= bbox.y && y4 <= bbox.y + bbox.height;
        }
        function isBBoxIntersect(bbox1, bbox2) {
          bbox1 = box(bbox1);
          bbox2 = box(bbox2);
          return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
        }
        function base3(t3, p1, p2, p3, p4) {
          var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4, t22 = t3 * t1 + 6 * p1 - 12 * p2 + 6 * p3;
          return t3 * t22 - 3 * p1 + 3 * p2;
        }
        function bezlen(x1, y1, x22, y22, x3, y32, x4, y4, z3) {
          if (z3 == null) {
            z3 = 1;
          }
          z3 = z3 > 1 ? 1 : z3 < 0 ? 0 : z3;
          var z22 = z3 / 2, n = 12, Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816], Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472], sum = 0;
          for (var i4 = 0; i4 < n; i4++) {
            var ct = z22 * Tvalues[i4] + z22, xbase = base3(ct, x1, x22, x3, x4), ybase = base3(ct, y1, y22, y32, y4), comb = xbase * xbase + ybase * ybase;
            sum += Cvalues[i4] * math2.sqrt(comb);
          }
          return z22 * sum;
        }
        function getTotLen(x1, y1, x22, y22, x3, y32, x4, y4, ll) {
          if (ll < 0 || bezlen(x1, y1, x22, y22, x3, y32, x4, y4) < ll) {
            return;
          }
          var t3 = 1, step = t3 / 2, t22 = t3 - step, l, e = 0.01;
          l = bezlen(x1, y1, x22, y22, x3, y32, x4, y4, t22);
          while (abs(l - ll) > e) {
            step /= 2;
            t22 += (l < ll ? 1 : -1) * step;
            l = bezlen(x1, y1, x22, y22, x3, y32, x4, y4, t22);
          }
          return t22;
        }
        function intersect(x1, y1, x22, y22, x3, y32, x4, y4) {
          if (mmax(x1, x22) < mmin(x3, x4) || mmin(x1, x22) > mmax(x3, x4) || mmax(y1, y22) < mmin(y32, y4) || mmin(y1, y22) > mmax(y32, y4)) {
            return;
          }
          var nx = (x1 * y22 - y1 * x22) * (x3 - x4) - (x1 - x22) * (x3 * y4 - y32 * x4), ny = (x1 * y22 - y1 * x22) * (y32 - y4) - (y1 - y22) * (x3 * y4 - y32 * x4), denominator = (x1 - x22) * (y32 - y4) - (y1 - y22) * (x3 - x4);
          if (!denominator) {
            return;
          }
          var px = nx / denominator, py = ny / denominator, px2 = +px.toFixed(2), py2 = +py.toFixed(2);
          if (px2 < +mmin(x1, x22).toFixed(2) || px2 > +mmax(x1, x22).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y22).toFixed(2) || py2 > +mmax(y1, y22).toFixed(2) || py2 < +mmin(y32, y4).toFixed(2) || py2 > +mmax(y32, y4).toFixed(2)) {
            return;
          }
          return { x: px, y: py };
        }
        function inter(bez1, bez2) {
          return interHelper(bez1, bez2);
        }
        function interCount(bez1, bez2) {
          return interHelper(bez1, bez2, 1);
        }
        function interHelper(bez1, bez2, justCount) {
          var bbox1 = bezierBBox(bez1), bbox2 = bezierBBox(bez2);
          if (!isBBoxIntersect(bbox1, bbox2)) {
            return justCount ? 0 : [];
          }
          var l1 = bezlen.apply(0, bez1), l2 = bezlen.apply(0, bez2), n1 = ~~(l1 / 8), n2 = ~~(l2 / 8), dots1 = [], dots2 = [], xy = {}, res2 = justCount ? 0 : [];
          for (var i4 = 0; i4 < n1 + 1; i4++) {
            var p2 = findDotsAtSegment.apply(0, bez1.concat(i4 / n1));
            dots1.push({ x: p2.x, y: p2.y, t: i4 / n1 });
          }
          for (i4 = 0; i4 < n2 + 1; i4++) {
            p2 = findDotsAtSegment.apply(0, bez2.concat(i4 / n2));
            dots2.push({ x: p2.x, y: p2.y, t: i4 / n2 });
          }
          for (i4 = 0; i4 < n1; i4++) {
            for (var j = 0; j < n2; j++) {
              var di = dots1[i4], di1 = dots1[i4 + 1], dj = dots2[j], dj1 = dots2[j + 1], ci = abs(di1.x - di.x) < 1e-3 ? "y" : "x", cj = abs(dj1.x - dj.x) < 1e-3 ? "y" : "x", is2 = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
              if (is2) {
                if (xy[is2.x.toFixed(4)] == is2.y.toFixed(4)) {
                  continue;
                }
                xy[is2.x.toFixed(4)] = is2.y.toFixed(4);
                var t1 = di.t + abs((is2[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t), t22 = dj.t + abs((is2[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
                if (t1 >= 0 && t1 <= 1 && t22 >= 0 && t22 <= 1) {
                  if (justCount) {
                    res2++;
                  } else {
                    res2.push({
                      x: is2.x,
                      y: is2.y,
                      t1,
                      t2: t22
                    });
                  }
                }
              }
            }
          }
          return res2;
        }
        function pathIntersection(path1, path2) {
          return interPathHelper(path1, path2);
        }
        function pathIntersectionNumber(path1, path2) {
          return interPathHelper(path1, path2, 1);
        }
        function interPathHelper(path1, path2, justCount) {
          path1 = path2curve(path1);
          path2 = path2curve(path2);
          var x1, y1, x22, y22, x1m, y1m, x2m, y2m, bez1, bez2, res2 = justCount ? 0 : [];
          for (var i4 = 0, ii = path1.length; i4 < ii; i4++) {
            var pi = path1[i4];
            if (pi[0] == "M") {
              x1 = x1m = pi[1];
              y1 = y1m = pi[2];
            } else {
              if (pi[0] == "C") {
                bez1 = [x1, y1].concat(pi.slice(1));
                x1 = bez1[6];
                y1 = bez1[7];
              } else {
                bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
                x1 = x1m;
                y1 = y1m;
              }
              for (var j = 0, jj = path2.length; j < jj; j++) {
                var pj = path2[j];
                if (pj[0] == "M") {
                  x22 = x2m = pj[1];
                  y22 = y2m = pj[2];
                } else {
                  if (pj[0] == "C") {
                    bez2 = [x22, y22].concat(pj.slice(1));
                    x22 = bez2[6];
                    y22 = bez2[7];
                  } else {
                    bez2 = [x22, y22, x22, y22, x2m, y2m, x2m, y2m];
                    x22 = x2m;
                    y22 = y2m;
                  }
                  var intr = interHelper(bez1, bez2, justCount);
                  if (justCount) {
                    res2 += intr;
                  } else {
                    for (var k = 0, kk = intr.length; k < kk; k++) {
                      intr[k].segment1 = i4;
                      intr[k].segment2 = j;
                      intr[k].bez1 = bez1;
                      intr[k].bez2 = bez2;
                    }
                    res2 = res2.concat(intr);
                  }
                }
              }
            }
          }
          return res2;
        }
        function isPointInsidePath(path, x3, y4) {
          var bbox = pathBBox(path);
          return isPointInsideBBox(bbox, x3, y4) && interPathHelper(path, [["M", x3, y4], ["H", bbox.x2 + 10]], 1) % 2 == 1;
        }
        function pathBBox(path) {
          var pth = paths(path);
          if (pth.bbox) {
            return clone(pth.bbox);
          }
          if (!path) {
            return box();
          }
          path = path2curve(path);
          var x3 = 0, y4 = 0, X2 = [], Y2 = [], p2;
          for (var i4 = 0, ii = path.length; i4 < ii; i4++) {
            p2 = path[i4];
            if (p2[0] == "M") {
              x3 = p2[1];
              y4 = p2[2];
              X2.push(x3);
              Y2.push(y4);
            } else {
              var dim = curveDim(x3, y4, p2[1], p2[2], p2[3], p2[4], p2[5], p2[6]);
              X2 = X2.concat(dim.min.x, dim.max.x);
              Y2 = Y2.concat(dim.min.y, dim.max.y);
              x3 = p2[5];
              y4 = p2[6];
            }
          }
          var xmin = mmin.apply(0, X2), ymin = mmin.apply(0, Y2), xmax = mmax.apply(0, X2), ymax = mmax.apply(0, Y2), bb = box(xmin, ymin, xmax - xmin, ymax - ymin);
          pth.bbox = clone(bb);
          return bb;
        }
        function rectPath(x3, y4, w, h, r) {
          if (r) {
            return [
              ["M", +x3 + +r, y4],
              ["l", w - r * 2, 0],
              ["a", r, r, 0, 0, 1, r, r],
              ["l", 0, h - r * 2],
              ["a", r, r, 0, 0, 1, -r, r],
              ["l", r * 2 - w, 0],
              ["a", r, r, 0, 0, 1, -r, -r],
              ["l", 0, r * 2 - h],
              ["a", r, r, 0, 0, 1, r, -r],
              ["z"]
            ];
          }
          var res2 = [["M", x3, y4], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];
          res2.toString = toString;
          return res2;
        }
        function ellipsePath(x3, y4, rx, ry, a) {
          if (a == null && ry == null) {
            ry = rx;
          }
          x3 = +x3;
          y4 = +y4;
          rx = +rx;
          ry = +ry;
          if (a != null) {
            var rad = Math.PI / 180, x1 = x3 + rx * Math.cos(-ry * rad), x22 = x3 + rx * Math.cos(-a * rad), y1 = y4 + rx * Math.sin(-ry * rad), y22 = y4 + rx * Math.sin(-a * rad), res2 = [["M", x1, y1], ["A", rx, rx, 0, +(a - ry > 180), 0, x22, y22]];
          } else {
            res2 = [
              ["M", x3, y4],
              ["m", 0, -ry],
              ["a", rx, ry, 0, 1, 1, 0, 2 * ry],
              ["a", rx, ry, 0, 1, 1, 0, -2 * ry],
              ["z"]
            ];
          }
          res2.toString = toString;
          return res2;
        }
        var unit2px = Snap2._unit2px, getPath = {
          path: function(el) {
            return el.attr("path");
          },
          circle: function(el) {
            var attr = unit2px(el);
            return ellipsePath(attr.cx, attr.cy, attr.r);
          },
          ellipse: function(el) {
            var attr = unit2px(el);
            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);
          },
          rect: function(el) {
            var attr = unit2px(el);
            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);
          },
          image: function(el) {
            var attr = unit2px(el);
            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);
          },
          line: function(el) {
            return "M" + [el.attr("x1") || 0, el.attr("y1") || 0, el.attr("x2"), el.attr("y2")];
          },
          polyline: function(el) {
            return "M" + el.attr("points");
          },
          polygon: function(el) {
            return "M" + el.attr("points") + "z";
          },
          deflt: function(el) {
            var bbox = el.node.getBBox();
            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);
          }
        };
        function pathToRelative(pathArray) {
          var pth = paths(pathArray), lowerCase = String.prototype.toLowerCase;
          if (pth.rel) {
            return pathClone(pth.rel);
          }
          if (!Snap2.is(pathArray, "array") || !Snap2.is(pathArray && pathArray[0], "array")) {
            pathArray = Snap2.parsePathString(pathArray);
          }
          var res2 = [], x3 = 0, y4 = 0, mx = 0, my = 0, start = 0;
          if (pathArray[0][0] == "M") {
            x3 = pathArray[0][1];
            y4 = pathArray[0][2];
            mx = x3;
            my = y4;
            start++;
            res2.push(["M", x3, y4]);
          }
          for (var i4 = start, ii = pathArray.length; i4 < ii; i4++) {
            var r = res2[i4] = [], pa = pathArray[i4];
            if (pa[0] != lowerCase.call(pa[0])) {
              r[0] = lowerCase.call(pa[0]);
              switch (r[0]) {
                case "a":
                  r[1] = pa[1];
                  r[2] = pa[2];
                  r[3] = pa[3];
                  r[4] = pa[4];
                  r[5] = pa[5];
                  r[6] = +(pa[6] - x3).toFixed(3);
                  r[7] = +(pa[7] - y4).toFixed(3);
                  break;
                case "v":
                  r[1] = +(pa[1] - y4).toFixed(3);
                  break;
                case "m":
                  mx = pa[1];
                  my = pa[2];
                default:
                  for (var j = 1, jj = pa.length; j < jj; j++) {
                    r[j] = +(pa[j] - (j % 2 ? x3 : y4)).toFixed(3);
                  }
              }
            } else {
              r = res2[i4] = [];
              if (pa[0] == "m") {
                mx = pa[1] + x3;
                my = pa[2] + y4;
              }
              for (var k = 0, kk = pa.length; k < kk; k++) {
                res2[i4][k] = pa[k];
              }
            }
            var len = res2[i4].length;
            switch (res2[i4][0]) {
              case "z":
                x3 = mx;
                y4 = my;
                break;
              case "h":
                x3 += +res2[i4][len - 1];
                break;
              case "v":
                y4 += +res2[i4][len - 1];
                break;
              default:
                x3 += +res2[i4][len - 2];
                y4 += +res2[i4][len - 1];
            }
          }
          res2.toString = toString;
          pth.rel = pathClone(res2);
          return res2;
        }
        function pathToAbsolute(pathArray) {
          var pth = paths(pathArray);
          if (pth.abs) {
            return pathClone(pth.abs);
          }
          if (!is(pathArray, "array") || !is(pathArray && pathArray[0], "array")) {
            pathArray = Snap2.parsePathString(pathArray);
          }
          if (!pathArray || !pathArray.length) {
            return [["M", 0, 0]];
          }
          var res2 = [], x3 = 0, y4 = 0, mx = 0, my = 0, start = 0, pa0;
          if (pathArray[0][0] == "M") {
            x3 = +pathArray[0][1];
            y4 = +pathArray[0][2];
            mx = x3;
            my = y4;
            start++;
            res2[0] = ["M", x3, y4];
          }
          var crz = pathArray.length == 3 && pathArray[0][0] == "M" && pathArray[1][0].toUpperCase() == "R" && pathArray[2][0].toUpperCase() == "Z";
          for (var r, pa, i4 = start, ii = pathArray.length; i4 < ii; i4++) {
            res2.push(r = []);
            pa = pathArray[i4];
            pa0 = pa[0];
            if (pa0 != pa0.toUpperCase()) {
              r[0] = pa0.toUpperCase();
              switch (r[0]) {
                case "A":
                  r[1] = pa[1];
                  r[2] = pa[2];
                  r[3] = pa[3];
                  r[4] = pa[4];
                  r[5] = pa[5];
                  r[6] = +pa[6] + x3;
                  r[7] = +pa[7] + y4;
                  break;
                case "V":
                  r[1] = +pa[1] + y4;
                  break;
                case "H":
                  r[1] = +pa[1] + x3;
                  break;
                case "R":
                  var dots = [x3, y4].concat(pa.slice(1));
                  for (var j = 2, jj = dots.length; j < jj; j++) {
                    dots[j] = +dots[j] + x3;
                    dots[++j] = +dots[j] + y4;
                  }
                  res2.pop();
                  res2 = res2.concat(catmullRom2bezier(dots, crz));
                  break;
                case "O":
                  res2.pop();
                  dots = ellipsePath(x3, y4, pa[1], pa[2]);
                  dots.push(dots[0]);
                  res2 = res2.concat(dots);
                  break;
                case "U":
                  res2.pop();
                  res2 = res2.concat(ellipsePath(x3, y4, pa[1], pa[2], pa[3]));
                  r = ["U"].concat(res2[res2.length - 1].slice(-2));
                  break;
                case "M":
                  mx = +pa[1] + x3;
                  my = +pa[2] + y4;
                default:
                  for (j = 1, jj = pa.length; j < jj; j++) {
                    r[j] = +pa[j] + (j % 2 ? x3 : y4);
                  }
              }
            } else if (pa0 == "R") {
              dots = [x3, y4].concat(pa.slice(1));
              res2.pop();
              res2 = res2.concat(catmullRom2bezier(dots, crz));
              r = ["R"].concat(pa.slice(-2));
            } else if (pa0 == "O") {
              res2.pop();
              dots = ellipsePath(x3, y4, pa[1], pa[2]);
              dots.push(dots[0]);
              res2 = res2.concat(dots);
            } else if (pa0 == "U") {
              res2.pop();
              res2 = res2.concat(ellipsePath(x3, y4, pa[1], pa[2], pa[3]));
              r = ["U"].concat(res2[res2.length - 1].slice(-2));
            } else {
              for (var k = 0, kk = pa.length; k < kk; k++) {
                r[k] = pa[k];
              }
            }
            pa0 = pa0.toUpperCase();
            if (pa0 != "O") {
              switch (r[0]) {
                case "Z":
                  x3 = +mx;
                  y4 = +my;
                  break;
                case "H":
                  x3 = r[1];
                  break;
                case "V":
                  y4 = r[1];
                  break;
                case "M":
                  mx = r[r.length - 2];
                  my = r[r.length - 1];
                default:
                  x3 = r[r.length - 2];
                  y4 = r[r.length - 1];
              }
            }
          }
          res2.toString = toString;
          pth.abs = pathClone(res2);
          return res2;
        }
        function l2c(x1, y1, x22, y22) {
          return [x1, y1, x22, y22, x22, y22];
        }
        function q2c(x1, y1, ax, ay, x22, y22) {
          var _13 = 1 / 3, _23 = 2 / 3;
          return [
            _13 * x1 + _23 * ax,
            _13 * y1 + _23 * ay,
            _13 * x22 + _23 * ax,
            _13 * y22 + _23 * ay,
            x22,
            y22
          ];
        }
        function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x22, y22, recursive) {
          var _120 = PI * 120 / 180, rad = PI / 180 * (+angle || 0), res2 = [], xy, rotate = Snap2._.cacher(function(x4, y5, rad2) {
            var X2 = x4 * math2.cos(rad2) - y5 * math2.sin(rad2), Y2 = x4 * math2.sin(rad2) + y5 * math2.cos(rad2);
            return { x: X2, y: Y2 };
          });
          if (!rx || !ry) {
            return [x1, y1, x22, y22, x22, y22];
          }
          if (!recursive) {
            xy = rotate(x1, y1, -rad);
            x1 = xy.x;
            y1 = xy.y;
            xy = rotate(x22, y22, -rad);
            x22 = xy.x;
            y22 = xy.y;
            var cos = math2.cos(PI / 180 * angle), sin = math2.sin(PI / 180 * angle), x3 = (x1 - x22) / 2, y4 = (y1 - y22) / 2;
            var h = x3 * x3 / (rx * rx) + y4 * y4 / (ry * ry);
            if (h > 1) {
              h = math2.sqrt(h);
              rx = h * rx;
              ry = h * ry;
            }
            var rx2 = rx * rx, ry2 = ry * ry, k = (large_arc_flag == sweep_flag ? -1 : 1) * math2.sqrt(abs((rx2 * ry2 - rx2 * y4 * y4 - ry2 * x3 * x3) / (rx2 * y4 * y4 + ry2 * x3 * x3))), cx = k * rx * y4 / ry + (x1 + x22) / 2, cy = k * -ry * x3 / rx + (y1 + y22) / 2, f1 = math2.asin(((y1 - cy) / ry).toFixed(9)), f2 = math2.asin(((y22 - cy) / ry).toFixed(9));
            f1 = x1 < cx ? PI - f1 : f1;
            f2 = x22 < cx ? PI - f2 : f2;
            f1 < 0 && (f1 = PI * 2 + f1);
            f2 < 0 && (f2 = PI * 2 + f2);
            if (sweep_flag && f1 > f2) {
              f1 = f1 - PI * 2;
            }
            if (!sweep_flag && f2 > f1) {
              f2 = f2 - PI * 2;
            }
          } else {
            f1 = recursive[0];
            f2 = recursive[1];
            cx = recursive[2];
            cy = recursive[3];
          }
          var df = f2 - f1;
          if (abs(df) > _120) {
            var f2old = f2, x2old = x22, y2old = y22;
            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
            x22 = cx + rx * math2.cos(f2);
            y22 = cy + ry * math2.sin(f2);
            res2 = a2c(x22, y22, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
          }
          df = f2 - f1;
          var c1 = math2.cos(f1), s1 = math2.sin(f1), c2 = math2.cos(f2), s2 = math2.sin(f2), t3 = math2.tan(df / 4), hx = 4 / 3 * rx * t3, hy = 4 / 3 * ry * t3, m1 = [x1, y1], m2 = [x1 + hx * s1, y1 - hy * c1], m3 = [x22 + hx * s2, y22 - hy * c2], m4 = [x22, y22];
          m2[0] = 2 * m1[0] - m2[0];
          m2[1] = 2 * m1[1] - m2[1];
          if (recursive) {
            return [m2, m3, m4].concat(res2);
          } else {
            res2 = [m2, m3, m4].concat(res2).join().split(",");
            var newres = [];
            for (var i4 = 0, ii = res2.length; i4 < ii; i4++) {
              newres[i4] = i4 % 2 ? rotate(res2[i4 - 1], res2[i4], rad).y : rotate(res2[i4], res2[i4 + 1], rad).x;
            }
            return newres;
          }
        }
        function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t3) {
          var t1 = 1 - t3;
          return {
            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t3 * c1x + t1 * 3 * t3 * t3 * c2x + pow(t3, 3) * p2x,
            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t3 * c1y + t1 * 3 * t3 * t3 * c2y + pow(t3, 3) * p2y
          };
        }
        function curveDim(x0, y0, x1, y1, x22, y22, x3, y32) {
          var tvalues = [], bounds = [[], []], a, b, c, t3, t1, t22, b2ac, sqrtb2ac;
          for (var i4 = 0; i4 < 2; ++i4) {
            if (i4 == 0) {
              b = 6 * x0 - 12 * x1 + 6 * x22;
              a = -3 * x0 + 9 * x1 - 9 * x22 + 3 * x3;
              c = 3 * x1 - 3 * x0;
            } else {
              b = 6 * y0 - 12 * y1 + 6 * y22;
              a = -3 * y0 + 9 * y1 - 9 * y22 + 3 * y32;
              c = 3 * y1 - 3 * y0;
            }
            if (abs(a) < 1e-12) {
              if (abs(b) < 1e-12) {
                continue;
              }
              t3 = -c / b;
              if (0 < t3 && t3 < 1) {
                tvalues.push(t3);
              }
              continue;
            }
            b2ac = b * b - 4 * c * a;
            sqrtb2ac = math2.sqrt(b2ac);
            if (b2ac < 0) {
              continue;
            }
            t1 = (-b + sqrtb2ac) / (2 * a);
            if (0 < t1 && t1 < 1) {
              tvalues.push(t1);
            }
            t22 = (-b - sqrtb2ac) / (2 * a);
            if (0 < t22 && t22 < 1) {
              tvalues.push(t22);
            }
          }
          var x4, y4, j = tvalues.length, jlen = j, mt;
          while (j--) {
            t3 = tvalues[j];
            mt = 1 - t3;
            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t3 * x1 + 3 * mt * t3 * t3 * x22 + t3 * t3 * t3 * x3;
            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t3 * y1 + 3 * mt * t3 * t3 * y22 + t3 * t3 * t3 * y32;
          }
          bounds[0][jlen] = x0;
          bounds[1][jlen] = y0;
          bounds[0][jlen + 1] = x3;
          bounds[1][jlen + 1] = y32;
          bounds[0].length = bounds[1].length = jlen + 2;
          return {
            min: { x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1]) },
            max: { x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1]) }
          };
        }
        function path2curve(path, path2) {
          var pth = !path2 && paths(path);
          if (!path2 && pth.curve) {
            return pathClone(pth.curve);
          }
          var p2 = pathToAbsolute(path), p22 = path2 && pathToAbsolute(path2), attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, processPath = function(path3, d2, pcom2) {
            var nx, ny;
            if (!path3) {
              return ["C", d2.x, d2.y, d2.x, d2.y, d2.x, d2.y];
            }
            !(path3[0] in { T: 1, Q: 1 }) && (d2.qx = d2.qy = null);
            switch (path3[0]) {
              case "M":
                d2.X = path3[1];
                d2.Y = path3[2];
                break;
              case "A":
                path3 = ["C"].concat(a2c.apply(0, [d2.x, d2.y].concat(path3.slice(1))));
                break;
              case "S":
                if (pcom2 == "C" || pcom2 == "S") {
                  nx = d2.x * 2 - d2.bx;
                  ny = d2.y * 2 - d2.by;
                } else {
                  nx = d2.x;
                  ny = d2.y;
                }
                path3 = ["C", nx, ny].concat(path3.slice(1));
                break;
              case "T":
                if (pcom2 == "Q" || pcom2 == "T") {
                  d2.qx = d2.x * 2 - d2.qx;
                  d2.qy = d2.y * 2 - d2.qy;
                } else {
                  d2.qx = d2.x;
                  d2.qy = d2.y;
                }
                path3 = ["C"].concat(q2c(d2.x, d2.y, d2.qx, d2.qy, path3[1], path3[2]));
                break;
              case "Q":
                d2.qx = path3[1];
                d2.qy = path3[2];
                path3 = ["C"].concat(q2c(d2.x, d2.y, path3[1], path3[2], path3[3], path3[4]));
                break;
              case "L":
                path3 = ["C"].concat(l2c(d2.x, d2.y, path3[1], path3[2]));
                break;
              case "H":
                path3 = ["C"].concat(l2c(d2.x, d2.y, path3[1], d2.y));
                break;
              case "V":
                path3 = ["C"].concat(l2c(d2.x, d2.y, d2.x, path3[1]));
                break;
              case "Z":
                path3 = ["C"].concat(l2c(d2.x, d2.y, d2.X, d2.Y));
                break;
            }
            return path3;
          }, fixArc = function(pp, i5) {
            if (pp[i5].length > 7) {
              pp[i5].shift();
              var pi = pp[i5];
              while (pi.length) {
                pcoms1[i5] = "A";
                p22 && (pcoms2[i5] = "A");
                pp.splice(i5++, 0, ["C"].concat(pi.splice(0, 6)));
              }
              pp.splice(i5, 1);
              ii = mmax(p2.length, p22 && p22.length || 0);
            }
          }, fixM = function(path1, path22, a1, a2, i5) {
            if (path1 && path22 && path1[i5][0] == "M" && path22[i5][0] != "M") {
              path22.splice(i5, 0, ["M", a2.x, a2.y]);
              a1.bx = 0;
              a1.by = 0;
              a1.x = path1[i5][1];
              a1.y = path1[i5][2];
              ii = mmax(p2.length, p22 && p22.length || 0);
            }
          }, pcoms1 = [], pcoms2 = [], pfirst = "", pcom = "";
          for (var i4 = 0, ii = mmax(p2.length, p22 && p22.length || 0); i4 < ii; i4++) {
            p2[i4] && (pfirst = p2[i4][0]);
            if (pfirst != "C") {
              pcoms1[i4] = pfirst;
              i4 && (pcom = pcoms1[i4 - 1]);
            }
            p2[i4] = processPath(p2[i4], attrs, pcom);
            if (pcoms1[i4] != "A" && pfirst == "C")
              pcoms1[i4] = "C";
            fixArc(p2, i4);
            if (p22) {
              p22[i4] && (pfirst = p22[i4][0]);
              if (pfirst != "C") {
                pcoms2[i4] = pfirst;
                i4 && (pcom = pcoms2[i4 - 1]);
              }
              p22[i4] = processPath(p22[i4], attrs2, pcom);
              if (pcoms2[i4] != "A" && pfirst == "C") {
                pcoms2[i4] = "C";
              }
              fixArc(p22, i4);
            }
            fixM(p2, p22, attrs, attrs2, i4);
            fixM(p22, p2, attrs2, attrs, i4);
            var seg = p2[i4], seg2 = p22 && p22[i4], seglen = seg.length, seg2len = p22 && seg2.length;
            attrs.x = seg[seglen - 2];
            attrs.y = seg[seglen - 1];
            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;
            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;
            attrs2.bx = p22 && (toFloat(seg2[seg2len - 4]) || attrs2.x);
            attrs2.by = p22 && (toFloat(seg2[seg2len - 3]) || attrs2.y);
            attrs2.x = p22 && seg2[seg2len - 2];
            attrs2.y = p22 && seg2[seg2len - 1];
          }
          if (!p22) {
            pth.curve = pathClone(p2);
          }
          return p22 ? [p2, p22] : p2;
        }
        function mapPath(path, matrix) {
          if (!matrix) {
            return path;
          }
          var x3, y4, i4, j, ii, jj, pathi;
          path = path2curve(path);
          for (i4 = 0, ii = path.length; i4 < ii; i4++) {
            pathi = path[i4];
            for (j = 1, jj = pathi.length; j < jj; j += 2) {
              x3 = matrix.x(pathi[j], pathi[j + 1]);
              y4 = matrix.y(pathi[j], pathi[j + 1]);
              pathi[j] = x3;
              pathi[j + 1] = y4;
            }
          }
          return path;
        }
        function catmullRom2bezier(crp, z3) {
          var d2 = [];
          for (var i4 = 0, iLen = crp.length; iLen - 2 * !z3 > i4; i4 += 2) {
            var p2 = [
              { x: +crp[i4 - 2], y: +crp[i4 - 1] },
              { x: +crp[i4], y: +crp[i4 + 1] },
              { x: +crp[i4 + 2], y: +crp[i4 + 3] },
              { x: +crp[i4 + 4], y: +crp[i4 + 5] }
            ];
            if (z3) {
              if (!i4) {
                p2[0] = { x: +crp[iLen - 2], y: +crp[iLen - 1] };
              } else if (iLen - 4 == i4) {
                p2[3] = { x: +crp[0], y: +crp[1] };
              } else if (iLen - 2 == i4) {
                p2[2] = { x: +crp[0], y: +crp[1] };
                p2[3] = { x: +crp[2], y: +crp[3] };
              }
            } else {
              if (iLen - 4 == i4) {
                p2[3] = p2[2];
              } else if (!i4) {
                p2[0] = { x: +crp[i4], y: +crp[i4 + 1] };
              }
            }
            d2.push([
              "C",
              (-p2[0].x + 6 * p2[1].x + p2[2].x) / 6,
              (-p2[0].y + 6 * p2[1].y + p2[2].y) / 6,
              (p2[1].x + 6 * p2[2].x - p2[3].x) / 6,
              (p2[1].y + 6 * p2[2].y - p2[3].y) / 6,
              p2[2].x,
              p2[2].y
            ]);
          }
          return d2;
        }
        Snap2.path = paths;
        Snap2.path.getTotalLength = getTotalLength;
        Snap2.path.getPointAtLength = getPointAtLength;
        Snap2.path.getSubpath = function(path, from, to) {
          if (this.getTotalLength(path) - to < 1e-6) {
            return getSubpathsAtLength(path, from).end;
          }
          var a = getSubpathsAtLength(path, to, 1);
          return from ? getSubpathsAtLength(a, from).end : a;
        };
        elproto.getTotalLength = function() {
          if (this.node.getTotalLength) {
            return this.node.getTotalLength();
          }
        };
        elproto.getPointAtLength = function(length) {
          return getPointAtLength(this.attr("d"), length);
        };
        elproto.getSubpath = function(from, to) {
          return Snap2.path.getSubpath(this.attr("d"), from, to);
        };
        Snap2._.box = box;
        Snap2.path.findDotsAtSegment = findDotsAtSegment;
        Snap2.path.bezierBBox = bezierBBox;
        Snap2.path.isPointInsideBBox = isPointInsideBBox;
        Snap2.closest = function(x3, y4, X2, Y2) {
          var r = 100, b = box(x3 - r / 2, y4 - r / 2, r, r), inside = [], getter = X2[0].hasOwnProperty("x") ? function(i5) {
            return {
              x: X2[i5].x,
              y: X2[i5].y
            };
          } : function(i5) {
            return {
              x: X2[i5],
              y: Y2[i5]
            };
          }, found = 0;
          while (r <= 1e6 && !found) {
            for (var i4 = 0, ii = X2.length; i4 < ii; i4++) {
              var xy = getter(i4);
              if (isPointInsideBBox(b, xy.x, xy.y)) {
                found++;
                inside.push(xy);
                break;
              }
            }
            if (!found) {
              r *= 2;
              b = box(x3 - r / 2, y4 - r / 2, r, r);
            }
          }
          if (r == 1e6) {
            return;
          }
          var len = Infinity, res2;
          for (i4 = 0, ii = inside.length; i4 < ii; i4++) {
            var l = Snap2.len(x3, y4, inside[i4].x, inside[i4].y);
            if (len > l) {
              len = l;
              inside[i4].len = l;
              res2 = inside[i4];
            }
          }
          return res2;
        };
        Snap2.path.isBBoxIntersect = isBBoxIntersect;
        Snap2.path.intersection = pathIntersection;
        Snap2.path.intersectionNumber = pathIntersectionNumber;
        Snap2.path.isPointInside = isPointInsidePath;
        Snap2.path.getBBox = pathBBox;
        Snap2.path.get = getPath;
        Snap2.path.toRelative = pathToRelative;
        Snap2.path.toAbsolute = pathToAbsolute;
        Snap2.path.toCubic = path2curve;
        Snap2.path.map = mapPath;
        Snap2.path.toString = toString;
        Snap2.path.clone = pathClone;
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var mmax = Math.max, mmin = Math.min;
        var Set2 = function(items) {
          this.items = [];
          this.bindings = {};
          this.length = 0;
          this.type = "set";
          if (items) {
            for (var i4 = 0, ii = items.length; i4 < ii; i4++) {
              if (items[i4]) {
                this[this.items.length] = this.items[this.items.length] = items[i4];
                this.length++;
              }
            }
          }
        }, setproto = Set2.prototype;
        setproto.push = function() {
          var item, len;
          for (var i4 = 0, ii = arguments.length; i4 < ii; i4++) {
            item = arguments[i4];
            if (item) {
              len = this.items.length;
              this[len] = this.items[len] = item;
              this.length++;
            }
          }
          return this;
        };
        setproto.pop = function() {
          this.length && delete this[this.length--];
          return this.items.pop();
        };
        setproto.forEach = function(callback, thisArg) {
          for (var i4 = 0, ii = this.items.length; i4 < ii; i4++) {
            if (callback.call(thisArg, this.items[i4], i4) === false) {
              return this;
            }
          }
          return this;
        };
        setproto.animate = function(attrs, ms, easing, callback) {
          if (typeof easing == "function" && !easing.length) {
            callback = easing;
            easing = mina.linear;
          }
          if (attrs instanceof Snap2._.Animation) {
            callback = attrs.callback;
            easing = attrs.easing;
            ms = easing.dur;
            attrs = attrs.attr;
          }
          var args = arguments;
          if (Snap2.is(attrs, "array") && Snap2.is(args[args.length - 1], "array")) {
            var each = true;
          }
          var begin, handler = function() {
            if (begin) {
              this.b = begin;
            } else {
              begin = this.b;
            }
          }, cb = 0, set = this, callbacker = callback && function() {
            if (++cb == set.length) {
              callback.call(this);
            }
          };
          return this.forEach(function(el, i4) {
            eve.once("snap.animcreated." + el.id, handler);
            if (each) {
              args[i4] && el.animate.apply(el, args[i4]);
            } else {
              el.animate(attrs, ms, easing, callbacker);
            }
          });
        };
        setproto.remove = function() {
          while (this.length) {
            this.pop().remove();
          }
          return this;
        };
        setproto.bind = function(attr, a, b) {
          var data = {};
          if (typeof a == "function") {
            this.bindings[attr] = a;
          } else {
            var aname = b || attr;
            this.bindings[attr] = function(v2) {
              data[aname] = v2;
              a.attr(data);
            };
          }
          return this;
        };
        setproto.attr = function(value) {
          var unbound = {};
          for (var k in value) {
            if (this.bindings[k]) {
              this.bindings[k](value[k]);
            } else {
              unbound[k] = value[k];
            }
          }
          for (var i4 = 0, ii = this.items.length; i4 < ii; i4++) {
            this.items[i4].attr(unbound);
          }
          return this;
        };
        setproto.clear = function() {
          while (this.length) {
            this.pop();
          }
        };
        setproto.splice = function(index, count, insertion) {
          index = index < 0 ? mmax(this.length + index, 0) : index;
          count = mmax(0, mmin(this.length - index, count));
          var tail = [], todel = [], args = [], i4;
          for (i4 = 2; i4 < arguments.length; i4++) {
            args.push(arguments[i4]);
          }
          for (i4 = 0; i4 < count; i4++) {
            todel.push(this[index + i4]);
          }
          for (; i4 < this.length - index; i4++) {
            tail.push(this[index + i4]);
          }
          var arglen = args.length;
          for (i4 = 0; i4 < arglen + tail.length; i4++) {
            this.items[index + i4] = this[index + i4] = i4 < arglen ? args[i4] : tail[i4 - arglen];
          }
          i4 = this.items.length = this.length -= count - arglen;
          while (this[i4]) {
            delete this[i4++];
          }
          return new Set2(todel);
        };
        setproto.exclude = function(el) {
          for (var i4 = 0, ii = this.length; i4 < ii; i4++)
            if (this[i4] == el) {
              this.splice(i4, 1);
              return true;
            }
          return false;
        };
        setproto.insertAfter = function(el) {
          var i4 = this.items.length;
          while (i4--) {
            this.items[i4].insertAfter(el);
          }
          return this;
        };
        setproto.getBBox = function() {
          var x3 = [], y4 = [], x22 = [], y22 = [];
          for (var i4 = this.items.length; i4--; )
            if (!this.items[i4].removed) {
              var box = this.items[i4].getBBox();
              x3.push(box.x);
              y4.push(box.y);
              x22.push(box.x + box.width);
              y22.push(box.y + box.height);
            }
          x3 = mmin.apply(0, x3);
          y4 = mmin.apply(0, y4);
          x22 = mmax.apply(0, x22);
          y22 = mmax.apply(0, y22);
          return {
            x: x3,
            y: y4,
            x2: x22,
            y2: y22,
            width: x22 - x3,
            height: y22 - y4,
            cx: x3 + (x22 - x3) / 2,
            cy: y4 + (y22 - y4) / 2
          };
        };
        setproto.clone = function(s) {
          s = new Set2();
          for (var i4 = 0, ii = this.items.length; i4 < ii; i4++) {
            s.push(this.items[i4].clone());
          }
          return s;
        };
        setproto.toString = function() {
          return "Snap\u2018s set";
        };
        setproto.type = "set";
        Snap2.Set = Set2;
        Snap2.set = function() {
          var set = new Set2();
          if (arguments.length) {
            set.push.apply(set, Array.prototype.slice.call(arguments, 0));
          }
          return set;
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var names = {}, reUnit = /[%a-z]+$/i, Str = String;
        names.stroke = names.fill = "colour";
        function getEmpty(item) {
          var l = item[0];
          switch (l.toLowerCase()) {
            case "t":
              return [l, 0, 0];
            case "m":
              return [l, 1, 0, 0, 1, 0, 0];
            case "r":
              if (item.length == 4) {
                return [l, 0, item[2], item[3]];
              } else {
                return [l, 0];
              }
            case "s":
              if (item.length == 5) {
                return [l, 1, 1, item[3], item[4]];
              } else if (item.length == 3) {
                return [l, 1, 1];
              } else {
                return [l, 1];
              }
          }
        }
        function equaliseTransform(t1, t22, getBBox) {
          t1 = t1 || new Snap2.Matrix();
          t22 = t22 || new Snap2.Matrix();
          t1 = Snap2.parseTransformString(t1.toTransformString()) || [];
          t22 = Snap2.parseTransformString(t22.toTransformString()) || [];
          var maxlength = Math.max(t1.length, t22.length), from = [], to = [], i4 = 0, j, jj, tt1, tt2;
          for (; i4 < maxlength; i4++) {
            tt1 = t1[i4] || getEmpty(t22[i4]);
            tt2 = t22[i4] || getEmpty(tt1);
            if (tt1[0] != tt2[0] || tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) || tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])) {
              t1 = Snap2._.transform2matrix(t1, getBBox());
              t22 = Snap2._.transform2matrix(t22, getBBox());
              from = [["m", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];
              to = [["m", t22.a, t22.b, t22.c, t22.d, t22.e, t22.f]];
              break;
            }
            from[i4] = [];
            to[i4] = [];
            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {
              j in tt1 && (from[i4][j] = tt1[j]);
              j in tt2 && (to[i4][j] = tt2[j]);
            }
          }
          return {
            from: path2array(from),
            to: path2array(to),
            f: getPath(from)
          };
        }
        function getNumber(val) {
          return val;
        }
        function getUnit(unit) {
          return function(val) {
            return +val.toFixed(3) + unit;
          };
        }
        function getViewBox(val) {
          return val.join(" ");
        }
        function getColour(clr) {
          return Snap2.rgb(clr[0], clr[1], clr[2], clr[3]);
        }
        function getPath(path) {
          var k = 0, i4, ii, j, jj, out, a, b = [];
          for (i4 = 0, ii = path.length; i4 < ii; i4++) {
            out = "[";
            a = ['"' + path[i4][0] + '"'];
            for (j = 1, jj = path[i4].length; j < jj; j++) {
              a[j] = "val[" + k++ + "]";
            }
            out += a + "]";
            b[i4] = out;
          }
          return Function("val", "return Snap.path.toString.call([" + b + "])");
        }
        function path2array(path) {
          var out = [];
          for (var i4 = 0, ii = path.length; i4 < ii; i4++) {
            for (var j = 1, jj = path[i4].length; j < jj; j++) {
              out.push(path[i4][j]);
            }
          }
          return out;
        }
        function isNumeric(obj) {
          return isFinite(obj);
        }
        function arrayEqual(arr1, arr2) {
          if (!Snap2.is(arr1, "array") || !Snap2.is(arr2, "array")) {
            return false;
          }
          return arr1.toString() == arr2.toString();
        }
        Element.prototype.equal = function(name2, b) {
          return eve("snap.util.equal", this, name2, b).firstDefined();
        };
        eve.on("snap.util.equal", function(name2, b) {
          var A4, B3, a = Str(this.attr(name2) || ""), el = this;
          if (names[name2] == "colour") {
            A4 = Snap2.color(a);
            B3 = Snap2.color(b);
            return {
              from: [A4.r, A4.g, A4.b, A4.opacity],
              to: [B3.r, B3.g, B3.b, B3.opacity],
              f: getColour
            };
          }
          if (name2 == "viewBox") {
            A4 = this.attr(name2).vb.split(" ").map(Number);
            B3 = b.split(" ").map(Number);
            return {
              from: A4,
              to: B3,
              f: getViewBox
            };
          }
          if (name2 == "transform" || name2 == "gradientTransform" || name2 == "patternTransform") {
            if (typeof b == "string") {
              b = Str(b).replace(/\.{3}|\u2026/g, a);
            }
            a = this.matrix;
            if (!Snap2._.rgTransform.test(b)) {
              b = Snap2._.transform2matrix(Snap2._.svgTransform2string(b), this.getBBox());
            } else {
              b = Snap2._.transform2matrix(b, this.getBBox());
            }
            return equaliseTransform(a, b, function() {
              return el.getBBox(1);
            });
          }
          if (name2 == "d" || name2 == "path") {
            A4 = Snap2.path.toCubic(a, b);
            return {
              from: path2array(A4[0]),
              to: path2array(A4[1]),
              f: getPath(A4[0])
            };
          }
          if (name2 == "points") {
            A4 = Str(a).split(Snap2._.separator);
            B3 = Str(b).split(Snap2._.separator);
            return {
              from: A4,
              to: B3,
              f: function(val) {
                return val;
              }
            };
          }
          if (isNumeric(a) && isNumeric(b)) {
            return {
              from: parseFloat(a),
              to: parseFloat(b),
              f: getNumber
            };
          }
          var aUnit = a.match(reUnit), bUnit = Str(b).match(reUnit);
          if (aUnit && arrayEqual(aUnit, bUnit)) {
            return {
              from: parseFloat(a),
              to: parseFloat(b),
              f: getUnit(aUnit)
            };
          } else {
            return {
              from: this.asPX(name2),
              to: this.asPX(name2, b),
              f: getNumber
            };
          }
        });
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var elproto = Element.prototype, has = "hasOwnProperty", supportsTouch = "createTouch" in glob.doc, events = [
          "click",
          "dblclick",
          "mousedown",
          "mousemove",
          "mouseout",
          "mouseover",
          "mouseup",
          "touchstart",
          "touchmove",
          "touchend",
          "touchcancel"
        ], touchMap = {
          mousedown: "touchstart",
          mousemove: "touchmove",
          mouseup: "touchend"
        }, getScroll = function(xy, el) {
          var name2 = xy == "y" ? "scrollTop" : "scrollLeft", doc = el && el.node ? el.node.ownerDocument : glob.doc;
          return doc[name2 in doc.documentElement ? "documentElement" : "body"][name2];
        }, preventDefault = function() {
          this.returnValue = false;
        }, preventTouch = function() {
          return this.originalEvent.preventDefault();
        }, stopPropagation = function() {
          this.cancelBubble = true;
        }, stopTouch = function() {
          return this.originalEvent.stopPropagation();
        }, addEvent = function(obj, type, fn, element) {
          var realName = supportsTouch && touchMap[type] ? touchMap[type] : type, f = function(e) {
            var scrollY = getScroll("y", element), scrollX = getScroll("x", element);
            if (supportsTouch && touchMap[has](type)) {
              for (var i5 = 0, ii = e.targetTouches && e.targetTouches.length; i5 < ii; i5++) {
                if (e.targetTouches[i5].target == obj || obj.contains(e.targetTouches[i5].target)) {
                  var olde = e;
                  e = e.targetTouches[i5];
                  e.originalEvent = olde;
                  e.preventDefault = preventTouch;
                  e.stopPropagation = stopTouch;
                  break;
                }
              }
            }
            var x3 = e.clientX + scrollX, y4 = e.clientY + scrollY;
            return fn.call(element, e, x3, y4);
          };
          if (type !== realName) {
            obj.addEventListener(type, f, false);
          }
          obj.addEventListener(realName, f, false);
          return function() {
            if (type !== realName) {
              obj.removeEventListener(type, f, false);
            }
            obj.removeEventListener(realName, f, false);
            return true;
          };
        }, drag = [], dragMove = function(e) {
          var x3 = e.clientX, y4 = e.clientY, scrollY = getScroll("y"), scrollX = getScroll("x"), dragi, j = drag.length;
          while (j--) {
            dragi = drag[j];
            if (supportsTouch) {
              var i5 = e.touches && e.touches.length, touch;
              while (i5--) {
                touch = e.touches[i5];
                if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {
                  x3 = touch.clientX;
                  y4 = touch.clientY;
                  (e.originalEvent ? e.originalEvent : e).preventDefault();
                  break;
                }
              }
            } else {
              e.preventDefault();
            }
            var node = dragi.el.node, o, next = node.nextSibling, parent = node.parentNode, display = node.style.display;
            x3 += scrollX;
            y4 += scrollY;
            eve("snap.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x3 - dragi.el._drag.x, y4 - dragi.el._drag.y, x3, y4, e);
          }
        }, dragUp = function(e) {
          Snap2.unmousemove(dragMove).unmouseup(dragUp);
          var i5 = drag.length, dragi;
          while (i5--) {
            dragi = drag[i5];
            dragi.el._drag = {};
            eve("snap.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);
            eve.off("snap.drag.*." + dragi.el.id);
          }
          drag = [];
        };
        for (var i4 = events.length; i4--; ) {
          (function(eventName) {
            Snap2[eventName] = elproto[eventName] = function(fn, scope) {
              if (Snap2.is(fn, "function")) {
                this.events = this.events || [];
                this.events.push({
                  name: eventName,
                  f: fn,
                  unbind: addEvent(this.node || document, eventName, fn, scope || this)
                });
              } else {
                for (var i5 = 0, ii = this.events.length; i5 < ii; i5++)
                  if (this.events[i5].name == eventName) {
                    try {
                      this.events[i5].f.call(this);
                    } catch (e) {
                    }
                  }
              }
              return this;
            };
            Snap2["un" + eventName] = elproto["un" + eventName] = function(fn) {
              var events2 = this.events || [], l = events2.length;
              while (l--)
                if (events2[l].name == eventName && (events2[l].f == fn || !fn)) {
                  events2[l].unbind();
                  events2.splice(l, 1);
                  !events2.length && delete this.events;
                  return this;
                }
              return this;
            };
          })(events[i4]);
        }
        elproto.hover = function(f_in, f_out, scope_in, scope_out) {
          return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);
        };
        elproto.unhover = function(f_in, f_out) {
          return this.unmouseover(f_in).unmouseout(f_out);
        };
        var draggable = [];
        elproto.drag = function(onmove, onstart, onend, move_scope, start_scope, end_scope) {
          var el = this;
          if (!arguments.length) {
            var origTransform;
            return el.drag(function(dx, dy) {
              this.attr({
                transform: origTransform + (origTransform ? "T" : "t") + [dx, dy]
              });
            }, function() {
              origTransform = this.transform().local;
            });
          }
          function start(e, x3, y4) {
            (e.originalEvent || e).preventDefault();
            el._drag.x = x3;
            el._drag.y = y4;
            el._drag.id = e.identifier;
            !drag.length && Snap2.mousemove(dragMove).mouseup(dragUp);
            drag.push({ el, move_scope, start_scope, end_scope });
            onstart && eve.on("snap.drag.start." + el.id, onstart);
            onmove && eve.on("snap.drag.move." + el.id, onmove);
            onend && eve.on("snap.drag.end." + el.id, onend);
            eve("snap.drag.start." + el.id, start_scope || move_scope || el, x3, y4, e);
          }
          function init2(e, x3, y4) {
            eve("snap.draginit." + el.id, el, e, x3, y4);
          }
          eve.on("snap.draginit." + el.id, start);
          el._drag = {};
          draggable.push({ el, start, init: init2 });
          el.mousedown(init2);
          return el;
        };
        elproto.undrag = function() {
          var i5 = draggable.length;
          while (i5--)
            if (draggable[i5].el == this) {
              this.unmousedown(draggable[i5].init);
              draggable.splice(i5, 1);
              eve.unbind("snap.drag.*." + this.id);
              eve.unbind("snap.draginit." + this.id);
            }
          !draggable.length && Snap2.unmousemove(dragMove).unmouseup(dragUp);
          return this;
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var elproto = Element.prototype, pproto = Paper.prototype, rgurl = /^\s*url\((.+)\)/, Str = String, $ = Snap2._.$;
        Snap2.filter = {};
        pproto.filter = function(filstr) {
          var paper = this;
          if (paper.type != "svg") {
            paper = paper.paper;
          }
          var f = Snap2.parse(Str(filstr)), id = Snap2._.id(), width = paper.node.offsetWidth, height = paper.node.offsetHeight, filter = $("filter");
          $(filter, {
            id,
            filterUnits: "userSpaceOnUse"
          });
          filter.appendChild(f.node);
          paper.defs.appendChild(filter);
          return new Element(filter);
        };
        eve.on("snap.util.getattr.filter", function() {
          eve.stop();
          var p2 = $(this.node, "filter");
          if (p2) {
            var match = Str(p2).match(rgurl);
            return match && Snap2.select(match[1]);
          }
        });
        eve.on("snap.util.attr.filter", function(value) {
          if (value instanceof Element && value.type == "filter") {
            eve.stop();
            var id = value.node.id;
            if (!id) {
              $(value.node, { id: value.id });
              id = value.id;
            }
            $(this.node, {
              filter: Snap2.url(id)
            });
          }
          if (!value || value == "none") {
            eve.stop();
            this.node.removeAttribute("filter");
          }
        });
        Snap2.filter.blur = function(x3, y4) {
          if (x3 == null) {
            x3 = 2;
          }
          var def = y4 == null ? x3 : [x3, y4];
          return Snap2.format('<feGaussianBlur stdDeviation="{def}"/>', {
            def
          });
        };
        Snap2.filter.blur.toString = function() {
          return this();
        };
        Snap2.filter.shadow = function(dx, dy, blur, color, opacity) {
          if (opacity == null) {
            if (color == null) {
              opacity = blur;
              blur = 4;
              color = "#000";
            } else {
              opacity = color;
              color = blur;
              blur = 4;
            }
          }
          if (blur == null) {
            blur = 4;
          }
          if (opacity == null) {
            opacity = 1;
          }
          if (dx == null) {
            dx = 0;
            dy = 2;
          }
          if (dy == null) {
            dy = dx;
          }
          color = Snap2.color(color);
          return Snap2.format('<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>', {
            color,
            dx,
            dy,
            blur,
            opacity
          });
        };
        Snap2.filter.shadow.toString = function() {
          return this();
        };
        Snap2.filter.grayscale = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>', {
            a: 0.2126 + 0.7874 * (1 - amount),
            b: 0.7152 - 0.7152 * (1 - amount),
            c: 0.0722 - 0.0722 * (1 - amount),
            d: 0.2126 - 0.2126 * (1 - amount),
            e: 0.7152 + 0.2848 * (1 - amount),
            f: 0.0722 - 0.0722 * (1 - amount),
            g: 0.2126 - 0.2126 * (1 - amount),
            h: 0.0722 + 0.9278 * (1 - amount)
          });
        };
        Snap2.filter.grayscale.toString = function() {
          return this();
        };
        Snap2.filter.sepia = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>', {
            a: 0.393 + 0.607 * (1 - amount),
            b: 0.769 - 0.769 * (1 - amount),
            c: 0.189 - 0.189 * (1 - amount),
            d: 0.349 - 0.349 * (1 - amount),
            e: 0.686 + 0.314 * (1 - amount),
            f: 0.168 - 0.168 * (1 - amount),
            g: 0.272 - 0.272 * (1 - amount),
            h: 0.534 - 0.534 * (1 - amount),
            i: 0.131 + 0.869 * (1 - amount)
          });
        };
        Snap2.filter.sepia.toString = function() {
          return this();
        };
        Snap2.filter.saturate = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feColorMatrix type="saturate" values="{amount}"/>', {
            amount: 1 - amount
          });
        };
        Snap2.filter.saturate.toString = function() {
          return this();
        };
        Snap2.filter.hueRotate = function(angle) {
          angle = angle || 0;
          return Snap2.format('<feColorMatrix type="hueRotate" values="{angle}"/>', {
            angle
          });
        };
        Snap2.filter.hueRotate.toString = function() {
          return this();
        };
        Snap2.filter.invert = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>', {
            amount,
            amount2: 1 - amount
          });
        };
        Snap2.filter.invert.toString = function() {
          return this();
        };
        Snap2.filter.brightness = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>', {
            amount
          });
        };
        Snap2.filter.brightness.toString = function() {
          return this();
        };
        Snap2.filter.contrast = function(amount) {
          if (amount == null) {
            amount = 1;
          }
          return Snap2.format('<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>', {
            amount,
            amount2: 0.5 - amount / 2
          });
        };
        Snap2.filter.contrast.toString = function() {
          return this();
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var box = Snap2._.box, is = Snap2.is, firstLetter = /^[^a-z]*([tbmlrc])/i, toString = function() {
          return "T" + this.dx + "," + this.dy;
        };
        Element.prototype.getAlign = function(el, way) {
          if (way == null && is(el, "string")) {
            way = el;
            el = null;
          }
          el = el || this.paper;
          var bx = el.getBBox ? el.getBBox() : box(el), bb = this.getBBox(), out = {};
          way = way && way.match(firstLetter);
          way = way ? way[1].toLowerCase() : "c";
          switch (way) {
            case "t":
              out.dx = 0;
              out.dy = bx.y - bb.y;
              break;
            case "b":
              out.dx = 0;
              out.dy = bx.y2 - bb.y2;
              break;
            case "m":
              out.dx = 0;
              out.dy = bx.cy - bb.cy;
              break;
            case "l":
              out.dx = bx.x - bb.x;
              out.dy = 0;
              break;
            case "r":
              out.dx = bx.x2 - bb.x2;
              out.dy = 0;
              break;
            default:
              out.dx = bx.cx - bb.cx;
              out.dy = 0;
              break;
          }
          out.toString = toString;
          return out;
        };
        Element.prototype.align = function(el, way) {
          return this.transform("..." + this.getAlign(el, way));
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob, Fragment) {
        var elproto = Element.prototype, is = Snap2.is, Str = String, has = "hasOwnProperty";
        function slice(from, to, f) {
          return function(arr) {
            var res2 = arr.slice(from, to);
            if (res2.length == 1) {
              res2 = res2[0];
            }
            return f ? f(res2) : res2;
          };
        }
        var Animation = function(attr, ms, easing, callback) {
          if (typeof easing == "function" && !easing.length) {
            callback = easing;
            easing = mina.linear;
          }
          this.attr = attr;
          this.dur = ms;
          easing && (this.easing = easing);
          callback && (this.callback = callback);
        };
        Snap2._.Animation = Animation;
        Snap2.animation = function(attr, ms, easing, callback) {
          return new Animation(attr, ms, easing, callback);
        };
        elproto.inAnim = function() {
          var el = this, res2 = [];
          for (var id in el.anims)
            if (el.anims[has](id)) {
              (function(a) {
                res2.push({
                  anim: new Animation(a._attrs, a.dur, a.easing, a._callback),
                  mina: a,
                  curStatus: a.status(),
                  status: function(val) {
                    return a.status(val);
                  },
                  stop: function() {
                    a.stop();
                  }
                });
              })(el.anims[id]);
            }
          return res2;
        };
        Snap2.animate = function(from, to, setter, ms, easing, callback) {
          if (typeof easing == "function" && !easing.length) {
            callback = easing;
            easing = mina.linear;
          }
          var now = mina.time(), anim = mina(from, to, now, now + ms, mina.time, setter, easing);
          callback && eve.once("mina.finish." + anim.id, callback);
          return anim;
        };
        elproto.stop = function() {
          var anims = this.inAnim();
          for (var i4 = 0, ii = anims.length; i4 < ii; i4++) {
            anims[i4].stop();
          }
          return this;
        };
        elproto.animate = function(attrs, ms, easing, callback) {
          if (typeof easing == "function" && !easing.length) {
            callback = easing;
            easing = mina.linear;
          }
          if (attrs instanceof Animation) {
            callback = attrs.callback;
            easing = attrs.easing;
            ms = attrs.dur;
            attrs = attrs.attr;
          }
          var fkeys = [], tkeys = [], keys4 = {}, from, to, f, eq, el = this;
          for (var key in attrs)
            if (attrs[has](key)) {
              if (el.equal) {
                eq = el.equal(key, Str(attrs[key]));
                from = eq.from;
                to = eq.to;
                f = eq.f;
              } else {
                from = +el.attr(key);
                to = +attrs[key];
              }
              var len = is(from, "array") ? from.length : 1;
              keys4[key] = slice(fkeys.length, fkeys.length + len, f);
              fkeys = fkeys.concat(from);
              tkeys = tkeys.concat(to);
            }
          var now = mina.time(), anim = mina(fkeys, tkeys, now, now + ms, mina.time, function(val) {
            var attr = {};
            for (var key2 in keys4)
              if (keys4[has](key2)) {
                attr[key2] = keys4[key2](val);
              }
            el.attr(attr);
          }, easing);
          el.anims[anim.id] = anim;
          anim._attrs = attrs;
          anim._callback = callback;
          eve("snap.animcreated." + el.id, anim);
          eve.once("mina.finish." + anim.id, function() {
            eve.off("mina.*." + anim.id);
            delete el.anims[anim.id];
            callback && callback.call(el);
          });
          eve.once("mina.stop." + anim.id, function() {
            eve.off("mina.*." + anim.id);
            delete el.anims[anim.id];
          });
          return el;
        };
      });
      Snap.plugin(function(Snap2, Element, Paper, glob) {
        var red = "#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000", pink = "#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162", purple = "#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF", deeppurple = "#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA", indigo = "#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE", blue = "#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF", lightblue = "#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA", cyan = "#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4", teal = "#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5", green = "#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853", lightgreen = "#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17", lime = "#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00", yellow = "#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600", amber = "#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00", orange = "#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00", deeporange = "#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00", brown = "#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723", grey = "#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121", bluegrey = "#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238";
        Snap2.mui = {};
        Snap2.flat = {};
        function saveColor(colors) {
          colors = colors.split(/(?=#)/);
          var color = new String(colors[5]);
          color[50] = colors[0];
          color[100] = colors[1];
          color[200] = colors[2];
          color[300] = colors[3];
          color[400] = colors[4];
          color[500] = colors[5];
          color[600] = colors[6];
          color[700] = colors[7];
          color[800] = colors[8];
          color[900] = colors[9];
          if (colors[10]) {
            color.A100 = colors[10];
            color.A200 = colors[11];
            color.A400 = colors[12];
            color.A700 = colors[13];
          }
          return color;
        }
        Snap2.mui.red = saveColor(red);
        Snap2.mui.pink = saveColor(pink);
        Snap2.mui.purple = saveColor(purple);
        Snap2.mui.deeppurple = saveColor(deeppurple);
        Snap2.mui.indigo = saveColor(indigo);
        Snap2.mui.blue = saveColor(blue);
        Snap2.mui.lightblue = saveColor(lightblue);
        Snap2.mui.cyan = saveColor(cyan);
        Snap2.mui.teal = saveColor(teal);
        Snap2.mui.green = saveColor(green);
        Snap2.mui.lightgreen = saveColor(lightgreen);
        Snap2.mui.lime = saveColor(lime);
        Snap2.mui.yellow = saveColor(yellow);
        Snap2.mui.amber = saveColor(amber);
        Snap2.mui.orange = saveColor(orange);
        Snap2.mui.deeporange = saveColor(deeporange);
        Snap2.mui.brown = saveColor(brown);
        Snap2.mui.grey = saveColor(grey);
        Snap2.mui.bluegrey = saveColor(bluegrey);
        Snap2.flat.turquoise = "#1abc9c";
        Snap2.flat.greensea = "#16a085";
        Snap2.flat.sunflower = "#f1c40f";
        Snap2.flat.orange = "#f39c12";
        Snap2.flat.emerland = "#2ecc71";
        Snap2.flat.nephritis = "#27ae60";
        Snap2.flat.carrot = "#e67e22";
        Snap2.flat.pumpkin = "#d35400";
        Snap2.flat.peterriver = "#3498db";
        Snap2.flat.belizehole = "#2980b9";
        Snap2.flat.alizarin = "#e74c3c";
        Snap2.flat.pomegranate = "#c0392b";
        Snap2.flat.amethyst = "#9b59b6";
        Snap2.flat.wisteria = "#8e44ad";
        Snap2.flat.clouds = "#ecf0f1";
        Snap2.flat.silver = "#bdc3c7";
        Snap2.flat.wetasphalt = "#34495e";
        Snap2.flat.midnightblue = "#2c3e50";
        Snap2.flat.concrete = "#95a5a6";
        Snap2.flat.asbestos = "#7f8c8d";
        Snap2.importMUIColors = function() {
          for (var color in Snap2.mui) {
            if (Snap2.mui.hasOwnProperty(color)) {
              window[color] = Snap2.mui[color];
            }
          }
        };
      });
      module2.exports = Snap;
    }
  });

  // node_modules/react-burger-menu/lib/helpers/snapsvgImporter.js
  var require_snapsvgImporter = __commonJS({
    "node_modules/react-burger-menu/lib/helpers/snapsvgImporter.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = function() {
        var Snap = void 0;
        try {
          Snap = require_snap_svg_cjs();
        } finally {
          return Snap;
        }
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/helpers/utils.js
  var require_utils2 = __commonJS({
    "node_modules/react-burger-menu/lib/helpers/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var pxToNum = function pxToNum2(val) {
        return parseInt(val.slice(0, -2), 10);
      };
      exports.pxToNum = pxToNum;
    }
  });

  // node_modules/react-burger-menu/lib/menus/elastic.js
  var require_elastic = __commonJS({
    "node_modules/react-burger-menu/lib/menus/elastic.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _helpersSnapsvgImporter = require_snapsvgImporter();
      var _helpersSnapsvgImporter2 = _interopRequireDefault(_helpersSnapsvgImporter);
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var _helpersUtils = require_utils2();
      var MORPH_SHAPE_WIDTH = 120;
      var styles = {
        svg: {
          lib: _helpersSnapsvgImporter2["default"],
          pathInitial: "M-1,0h101c0,0-97.833,153.603-97.833,396.167C2.167,627.579,100,800,100,800H-1V0z",
          pathOpen: "M-1,0h101c0,0,0-1,0,395c0,404,0,405,0,405H-1V0z",
          animate: function animate4(path) {
            path.animate({ path: this.pathOpen }, 400, window.mina.easeinout);
          }
        },
        morphShape: function morphShape(isOpen, width, right) {
          return {
            position: "absolute",
            width: MORPH_SHAPE_WIDTH,
            height: "100%",
            right: right ? "inherit" : 0,
            left: right ? 0 : "inherit",
            MozTransform: right ? "rotateY(180deg)" : "",
            MsTransform: right ? "rotateY(180deg)" : "",
            OTransform: right ? "rotateY(180deg)" : "",
            WebkitTransform: right ? "rotateY(180deg)" : "",
            transform: right ? "rotateY(180deg)" : ""
          };
        },
        menuWrap: function menuWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            MsTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            OTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            WebkitTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transition: "all 0.3s"
          };
        },
        menu: function menu(isOpen, width, right) {
          return {
            position: "fixed",
            right: right ? 0 : "inherit",
            width: (0, _helpersUtils.pxToNum)(width) - MORPH_SHAPE_WIDTH,
            whiteSpace: "nowrap",
            boxSizing: "border-box",
            overflow: "visible"
          };
        },
        itemList: function itemList(isOpen, width, right) {
          if (right) {
            return {
              position: "relative",
              left: "-110px",
              width: "170%",
              overflow: "auto"
            };
          }
        },
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-100px, 0, 0)" : "translate3d(100px, 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(-100px, 0, 0)" : "translate3d(100px, 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(-100px, 0, 0)" : "translate3d(100px, 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-100px, 0, 0)" : "translate3d(100px, 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(-100px, 0, 0)" : "translate3d(100px, 0, 0)",
            transition: isOpen ? "all 0.3s" : "all 0.3s 0.1s"
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/bubble.js
  var require_bubble = __commonJS({
    "node_modules/react-burger-menu/lib/menus/bubble.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _helpersSnapsvgImporter = require_snapsvgImporter();
      var _helpersSnapsvgImporter2 = _interopRequireDefault(_helpersSnapsvgImporter);
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var _helpersUtils = require_utils2();
      var BUBBLE_WIDTH = 140;
      var styles = {
        svg: {
          lib: _helpersSnapsvgImporter2["default"],
          pathInitial: "M-7.312,0H0c0,0,0,113.839,0,400c0,264.506,0,400,0,400h-7.312V0z",
          pathOpen: "M-7.312,0H15c0,0,66,113.339,66,399.5C81,664.006,15,800,15,800H-7.312V0z;M-7.312,0H100c0,0,0,113.839,0,400c0,264.506,0,400,0,400H-7.312V0z",
          animate: function animate4(path) {
            var pos = 0;
            var steps = this.pathOpen.split(";");
            var stepsTotal = steps.length;
            var mina = window.mina;
            var nextStep = function nextStep2() {
              if (pos > stepsTotal - 1)
                return;
              path.animate({ path: steps[pos] }, pos === 0 ? 400 : 500, pos === 0 ? mina.easein : mina.elastic, function() {
                nextStep2();
              });
              pos++;
            };
            nextStep();
          }
        },
        morphShape: function morphShape(isOpen, width, right) {
          return {
            position: "absolute",
            width: "100%",
            height: "100%",
            right: right ? "inherit" : 0,
            left: right ? 0 : "inherit",
            MozTransform: right ? "rotateY(180deg)" : "rotateY(0deg)",
            MsTransform: right ? "rotateY(180deg)" : "rotateY(0deg)",
            OTransform: right ? "rotateY(180deg)" : "rotateY(0deg)",
            WebkitTransform: right ? "rotateY(180deg)" : "rotateY(0deg)",
            transform: right ? "rotateY(180deg)" : "rotateY(0deg)"
          };
        },
        menuWrap: function menuWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            MsTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            OTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            WebkitTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(100%, 0, 0)" : "translate3d(-100%, 0, 0)",
            transition: isOpen ? "transform 0.4s 0s" : "transform 0.4s"
          };
        },
        menu: function menu(isOpen, width, right) {
          var finalWidth = (0, _helpersUtils.pxToNum)(width) - BUBBLE_WIDTH;
          return {
            position: "fixed",
            MozTransform: isOpen ? "" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transition: isOpen ? "opacity 0.1s 0.4s cubic-bezier(.17, .67, .1, 1.27), transform 0.1s 0.4s cubic-bezier(.17, .67, .1, 1.27)" : "opacity 0s 0.3s cubic-bezier(.17, .67, .1, 1.27), transform 0s 0.3s cubic-bezier(.17, .67, .1, 1.27)",
            opacity: isOpen ? 1 : 0
          };
        },
        item: function item(isOpen, width, right, nthChild) {
          var finalWidth = (0, _helpersUtils.pxToNum)(width) - BUBBLE_WIDTH;
          return {
            MozTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            MsTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            OTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            WebkitTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transition: isOpen ? "opacity 0.3s 0.4s, transform 0.3s 0.4s" : "opacity 0s 0.3s cubic-bezier(.17, .67, .1, 1.27), transform 0s 0.3s cubic-bezier(.17, .67, .1, 1.27)",
            opacity: isOpen ? 1 : 0
          };
        },
        closeButton: function closeButton(isOpen, width, right) {
          var finalWidth = (0, _helpersUtils.pxToNum)(width) - BUBBLE_WIDTH;
          return {
            MozTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            MsTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            OTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            WebkitTransform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transform: isOpen ? "translate3d(0, 0, 0)" : right ? "translate3d(" + finalWidth + ", 0, 0)" : "translate3d(-" + finalWidth + ", 0, 0)",
            transition: isOpen ? "opacity 0.3s 0.4s cubic-bezier(.17, .67, .1, 1.27), transform 0.3s 0.4s cubic-bezier(.17, .67, .1, 1.27)" : "opacity 0s 0.3s cubic-bezier(.17, .67, .1, 1.27), transform 0s 0.3s cubic-bezier(.17, .67, .1, 1.27)",
            opacity: isOpen ? 1 : 0
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/push.js
  var require_push = __commonJS({
    "node_modules/react-burger-menu/lib/menus/push.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transition: "all 0.5s"
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/pushRotate.js
  var require_pushRotate = __commonJS({
    "node_modules/react-burger-menu/lib/menus/pushRotate.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0) rotateY(15deg)" : "translate3d(" + width + ", 0, 0) rotateY(-15deg)",
            MsTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0) rotateY(15deg)" : "translate3d(" + width + ", 0, 0) rotateY(-15deg)",
            OTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0) rotateY(15deg)" : "translate3d(" + width + ", 0, 0) rotateY(-15deg)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0) rotateY(15deg)" : "translate3d(" + width + ", 0, 0) rotateY(-15deg)",
            transform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0) rotateY(15deg)" : "translate3d(" + width + ", 0, 0) rotateY(-15deg)",
            transformOrigin: right ? "100% 50%" : "0% 50%",
            transformStyle: "preserve-3d",
            transition: "all 0.5s"
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            perspective: "1500px",
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/scaleDown.js
  var require_scaleDown = __commonJS({
    "node_modules/react-burger-menu/lib/menus/scaleDown.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        pageWrap: function pageWrap(isOpen, width) {
          return {
            MozTransform: isOpen ? "" : "translate3d(0, 0, -" + width + ")",
            MsTransform: isOpen ? "" : "translate3d(0, 0, -" + width + ")",
            OTransform: isOpen ? "" : "translate3d(0, 0, -" + width + ")",
            WebkitTransform: isOpen ? "" : "translate3d(0, 0, -" + width + ")",
            transform: isOpen ? "" : "translate3d(0, 0, -" + width + ")",
            transformOrigin: "100%",
            transformStyle: "preserve-3d",
            transition: "all 0.5s"
          };
        },
        outerContainer: function outerContainer() {
          return {
            perspective: "1500px"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/scaleRotate.js
  var require_scaleRotate = __commonJS({
    "node_modules/react-burger-menu/lib/menus/scaleRotate.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-100px, 0, -600px) rotateY(20deg)" : "translate3d(100px, 0, -600px) rotateY(-20deg)",
            MsTransform: isOpen ? "" : right ? "translate3d(-100px, 0, -600px) rotateY(20deg)" : "translate3d(100px, 0, -600px) rotateY(-20deg)",
            OTransform: isOpen ? "" : right ? "translate3d(-100px, 0, -600px) rotateY(20deg)" : "translate3d(100px, 0, -600px) rotateY(-20deg)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-100px, 0, -600px) rotateY(20deg)" : "translate3d(100px, 0, -600px) rotateY(-20deg)",
            transform: isOpen ? "" : right ? "translate3d(-100px, 0, -600px) rotateY(20deg)" : "translate3d(100px, 0, -600px) rotateY(-20deg)",
            transformStyle: "preserve-3d",
            transition: "all 0.5s",
            overflow: isOpen ? "" : "hidden"
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            perspective: "1500px",
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/fallDown.js
  var require_fallDown = __commonJS({
    "node_modules/react-burger-menu/lib/menus/fallDown.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        menuWrap: function menuWrap(isOpen) {
          return {
            MozTransform: isOpen ? "" : "translate3d(0, -100%, 0)",
            MsTransform: isOpen ? "" : "translate3d(0, -100%, 0)",
            OTransform: isOpen ? "" : "translate3d(0, -100%, 0)",
            WebkitTransform: isOpen ? "" : "translate3d(0, -100%, 0)",
            transform: isOpen ? "" : "translate3d(0, -100%, 0)",
            transition: "all 0.5s ease-in-out"
          };
        },
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transition: "all 0.5s"
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            perspective: "1500px",
            perspectiveOrigin: "0% 50%",
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/menus/reveal.js
  var require_reveal = __commonJS({
    "node_modules/react-burger-menu/lib/menus/reveal.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      var _menuFactory = require_menuFactory();
      var _menuFactory2 = _interopRequireDefault(_menuFactory);
      var styles = {
        menuWrap: function menuWrap(isOpen, width, right) {
          return {
            MozTransform: "translate3d(0, 0, 0)",
            MsTransform: "translate3d(0, 0, 0)",
            OTransform: "translate3d(0, 0, 0)",
            WebkitTransform: "translate3d(0, 0, 0)",
            transform: "translate3d(0, 0, 0)",
            zIndex: isOpen ? 1e3 : -1
          };
        },
        overlay: function overlay(isOpen, width, right) {
          return {
            zIndex: 1400,
            MozTransform: isOpen ? right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            MsTransform: isOpen ? right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            OTransform: isOpen ? right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            WebkitTransform: isOpen ? right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            transform: isOpen ? right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            transition: "all 0.5s",
            visibility: isOpen ? "visible" : "hidden"
          };
        },
        pageWrap: function pageWrap(isOpen, width, right) {
          return {
            MozTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            MsTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            OTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            WebkitTransform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transform: isOpen ? "" : right ? "translate3d(-" + width + ", 0, 0)" : "translate3d(" + width + ", 0, 0)",
            transition: "all 0.5s",
            zIndex: 1200,
            position: "relative"
          };
        },
        burgerIcon: function burgerIcon(isOpen, width, right) {
          return {
            MozTransform: isOpen ? right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            MsTransform: isOpen ? right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            OTransform: isOpen ? right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            WebkitTransform: isOpen ? right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            transform: isOpen ? right ? "translate3d(" + width + ", 0, 0)" : "translate3d(-" + width + ", 0, 0)" : "translate3d(0, 0, 0)",
            transition: "all 0.1s",
            position: "relative",
            zIndex: 1300
          };
        },
        outerContainer: function outerContainer(isOpen) {
          return {
            overflow: isOpen ? "" : "hidden"
          };
        }
      };
      exports["default"] = (0, _menuFactory2["default"])(styles);
      module2.exports = exports["default"];
    }
  });

  // node_modules/react-burger-menu/lib/BurgerMenu.js
  var require_BurgerMenu = __commonJS({
    "node_modules/react-burger-menu/lib/BurgerMenu.js"(exports, module2) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = {
        slide: require_slide(),
        stack: require_stack(),
        elastic: require_elastic(),
        bubble: require_bubble(),
        push: require_push(),
        pushRotate: require_pushRotate(),
        scaleDown: require_scaleDown(),
        scaleRotate: require_scaleRotate(),
        fallDown: require_fallDown(),
        reveal: require_reveal()
      };
      module2.exports = exports["default"];
    }
  });

  // node_modules/@giveback007/fitbit-api/node_modules/tslib/tslib.es6.js
  var tslib_es6_exports2 = {};
  __export(tslib_es6_exports2, {
    __assign: () => __assign2,
    __asyncDelegator: () => __asyncDelegator2,
    __asyncGenerator: () => __asyncGenerator2,
    __asyncValues: () => __asyncValues2,
    __await: () => __await2,
    __awaiter: () => __awaiter2,
    __classPrivateFieldGet: () => __classPrivateFieldGet2,
    __classPrivateFieldSet: () => __classPrivateFieldSet2,
    __createBinding: () => __createBinding2,
    __decorate: () => __decorate2,
    __exportStar: () => __exportStar2,
    __extends: () => __extends3,
    __generator: () => __generator2,
    __importDefault: () => __importDefault2,
    __importStar: () => __importStar2,
    __makeTemplateObject: () => __makeTemplateObject2,
    __metadata: () => __metadata2,
    __param: () => __param2,
    __read: () => __read2,
    __rest: () => __rest2,
    __spread: () => __spread2,
    __spreadArray: () => __spreadArray3,
    __spreadArrays: () => __spreadArrays2,
    __values: () => __values2
  });
  function __extends3(d2, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics3(d2, b);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  function __rest2(s, e) {
    var t3 = {};
    for (var p2 in s)
      if (Object.prototype.hasOwnProperty.call(s, p2) && e.indexOf(p2) < 0)
        t3[p2] = s[p2];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i4 = 0, p2 = Object.getOwnPropertySymbols(s); i4 < p2.length; i4++) {
        if (e.indexOf(p2[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i4]))
          t3[p2[i4]] = s[p2[i4]];
      }
    return t3;
  }
  function __decorate2(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i4 = decorators.length - 1; i4 >= 0; i4--)
        if (d2 = decorators[i4])
          r = (c < 3 ? d2(r) : c > 3 ? d2(target, key, r) : d2(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __param2(paramIndex, decorator) {
    return function(target, key) {
      decorator(target, key, paramIndex);
    };
  }
  function __metadata2(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
      return Reflect.metadata(metadataKey, metadataValue);
  }
  function __awaiter2(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator2(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t3[0] & 1)
        throw t3[1];
      return t3[1];
    }, trys: [], ops: [] }, f, y4, t3, g2;
    return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n) {
      return function(v2) {
        return step([n, v2]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (f = 1, y4 && (t3 = op[0] & 2 ? y4["return"] : op[0] ? y4["throw"] || ((t3 = y4["return"]) && t3.call(y4), 0) : y4.next) && !(t3 = t3.call(y4, op[1])).done)
            return t3;
          if (y4 = 0, t3)
            op = [op[0] & 2, t3.value];
          switch (op[0]) {
            case 0:
            case 1:
              t3 = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y4 = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t3 = _.trys, t3 = t3.length > 0 && t3[t3.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t3 || op[1] > t3[0] && op[1] < t3[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t3[1]) {
                _.label = t3[1];
                t3 = op;
                break;
              }
              if (t3 && _.label < t3[2]) {
                _.label = t3[2];
                _.ops.push(op);
                break;
              }
              if (t3[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y4 = 0;
        } finally {
          f = t3 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __exportStar2(m, o) {
    for (var p2 in m)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o, p2))
        __createBinding2(o, m, p2);
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i4 = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i4 >= o.length)
            o = void 0;
          return { value: o && o[i4++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __read2(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m)
      return o;
    var i4 = m.call(o), r, ar = [], e;
    try {
      while ((n === void 0 || n-- > 0) && !(r = i4.next()).done)
        ar.push(r.value);
    } catch (error) {
      e = { error };
    } finally {
      try {
        if (r && !r.done && (m = i4["return"]))
          m.call(i4);
      } finally {
        if (e)
          throw e.error;
      }
    }
    return ar;
  }
  function __spread2() {
    for (var ar = [], i4 = 0; i4 < arguments.length; i4++)
      ar = ar.concat(__read2(arguments[i4]));
    return ar;
  }
  function __spreadArrays2() {
    for (var s = 0, i4 = 0, il = arguments.length; i4 < il; i4++)
      s += arguments[i4].length;
    for (var r = Array(s), k = 0, i4 = 0; i4 < il; i4++)
      for (var a = arguments[i4], j = 0, jl = a.length; j < jl; j++, k++)
        r[k] = a[j];
    return r;
  }
  function __spreadArray3(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i4 = 0, l = from.length, ar; i4 < l; i4++) {
        if (ar || !(i4 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i4);
          ar[i4] = from[i4];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __await2(v2) {
    return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
  }
  function __asyncGenerator2(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i4, q = [];
    return i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4;
    function verb(n) {
      if (g2[n])
        i4[n] = function(v2) {
          return new Promise(function(a, b) {
            q.push([n, v2, a, b]) > 1 || resume(n, v2);
          });
        };
    }
    function resume(n, v2) {
      try {
        step(g2[n](v2));
      } catch (e) {
        settle(q[0][3], e);
      }
    }
    function step(r) {
      r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f, v2) {
      if (f(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  }
  function __asyncDelegator2(o) {
    var i4, p2;
    return i4 = {}, verb("next"), verb("throw", function(e) {
      throw e;
    }), verb("return"), i4[Symbol.iterator] = function() {
      return this;
    }, i4;
    function verb(n, f) {
      i4[n] = o[n] ? function(v2) {
        return (p2 = !p2) ? { value: __await2(o[n](v2)), done: n === "return" } : f ? f(v2) : v2;
      } : f;
    }
  }
  function __asyncValues2(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i4;
    return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i4 = {}, verb("next"), verb("throw"), verb("return"), i4[Symbol.asyncIterator] = function() {
      return this;
    }, i4);
    function verb(n) {
      i4[n] = o[n] && function(v2) {
        return new Promise(function(resolve, reject) {
          v2 = o[n](v2), settle(resolve, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve({ value: v3, done: d2 });
      }, reject);
    }
  }
  function __makeTemplateObject2(cooked, raw) {
    if (Object.defineProperty) {
      Object.defineProperty(cooked, "raw", { value: raw });
    } else {
      cooked.raw = raw;
    }
    return cooked;
  }
  function __importStar2(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding2(result, mod, k);
    }
    __setModuleDefault2(result, mod);
    return result;
  }
  function __importDefault2(mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  }
  function __classPrivateFieldGet2(receiver, state4, kind, f) {
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a getter");
    if (typeof state4 === "function" ? receiver !== state4 || !f : !state4.has(receiver))
      throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state4.get(receiver);
  }
  function __classPrivateFieldSet2(receiver, state4, value, kind, f) {
    if (kind === "m")
      throw new TypeError("Private method is not writable");
    if (kind === "a" && !f)
      throw new TypeError("Private accessor was defined without a setter");
    if (typeof state4 === "function" ? receiver !== state4 || !f : !state4.has(receiver))
      throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state4.set(receiver, value), value;
  }
  var extendStatics3, __assign2, __createBinding2, __setModuleDefault2;
  var init_tslib_es62 = __esm({
    "node_modules/@giveback007/fitbit-api/node_modules/tslib/tslib.es6.js"() {
      extendStatics3 = function(d2, b) {
        extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b2) {
          d3.__proto__ = b2;
        } || function(d3, b2) {
          for (var p2 in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p2))
              d3[p2] = b2[p2];
        };
        return extendStatics3(d2, b);
      };
      __assign2 = function() {
        __assign2 = Object.assign || function __assign3(t3) {
          for (var s, i4 = 1, n = arguments.length; i4 < n; i4++) {
            s = arguments[i4];
            for (var p2 in s)
              if (Object.prototype.hasOwnProperty.call(s, p2))
                t3[p2] = s[p2];
          }
          return t3;
        };
        return __assign2.apply(this, arguments);
      };
      __createBinding2 = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __setModuleDefault2 = Object.create ? function(o, v2) {
        Object.defineProperty(o, "default", { enumerable: true, value: v2 });
      } : function(o, v2) {
        o["default"] = v2;
      };
    }
  });

  // node_modules/@giveback007/util-lib/dist/@types.js
  var require_types2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/@types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/util-lib/dist/array.js
  var require_array2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/array.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.arrHas = exports.arrLast = exports.arrToBoolDict = exports.arrToIdxDict = exports.arrToDict = exports.arrRemoveValues = exports.arrReplace = exports.arrDeepFlatten = exports.arrFlatten = exports.arrDivide = exports.arrGetByIds = exports.arrRemoveById = exports.arrGen = void 0;
      var _1 = require_dist3();
      var arrGen = (length) => Array(length).fill(null);
      exports.arrGen = arrGen;
      function arrRemoveById(arr, idArr, idKey = "id") {
        const objDict = arrToDict(arr, idKey);
        const keep = _1.objRemoveKeys(objDict, idArr);
        return _1.objVals(keep);
      }
      exports.arrRemoveById = arrRemoveById;
      function arrGetByIds(arr, idArr, idKey = "id") {
        const dict = arrToBoolDict(idArr);
        return arr.filter((x3) => dict[x3[idKey]]);
      }
      exports.arrGetByIds = arrGetByIds;
      function arrDivide(arr, maxRowLength) {
        const rows = Math.ceil(arr.length / maxRowLength);
        const newArr = exports.arrGen(rows).map(() => []);
        arr.forEach((x3, i4) => newArr[Math.floor(i4 / maxRowLength)].push(x3));
        return newArr;
      }
      exports.arrDivide = arrDivide;
      function arrFlatten(arr) {
        return [].concat.apply([], arr);
      }
      exports.arrFlatten = arrFlatten;
      var arrDeepFlatten = (arr) => arr.reduce((newArr, x3) => newArr.concat(_1.isType(x3, "array") ? exports.arrDeepFlatten(x3) : x3), []);
      exports.arrDeepFlatten = arrDeepFlatten;
      function arrReplace(arr) {
        const newArr = [...arr];
        return {
          all: (item) => {
            const idxs = [];
            arr.forEach((match, i4) => _1.equal(item, match) ? idxs[i4] = i4 : null);
            return {
              with: (newItem) => {
                if (!idxs.length)
                  return arr;
                idxs.forEach((i4) => newArr[i4] = newItem);
                return newArr;
              }
            };
          },
          first: (item) => {
            const idx = arr.findIndex((match) => _1.equal(item, match));
            return {
              with: (newItem) => {
                if (_1.nonValue(idx))
                  return arr;
                newArr[idx] = newItem;
                return newArr;
              }
            };
          }
        };
      }
      exports.arrReplace = arrReplace;
      function arrRemoveValues(arr, valsToRemove) {
        let newArr = [...arr];
        valsToRemove.forEach((removeVal) => newArr = newArr.filter((x3) => !_1.equal(x3, removeVal)));
        return newArr;
      }
      exports.arrRemoveValues = arrRemoveValues;
      function arrToDict(arr, idKey) {
        const dict = {};
        arr.forEach((obj) => dict[obj[idKey]] = obj);
        return dict;
      }
      exports.arrToDict = arrToDict;
      function arrToIdxDict(arr) {
        const dict = {};
        arr.forEach((x3, idx) => dict[x3] = idx + "");
        return dict;
      }
      exports.arrToIdxDict = arrToIdxDict;
      function arrToBoolDict(arr) {
        const dict = {};
        arr.forEach((x3) => dict[x3] = true);
        return dict;
      }
      exports.arrToBoolDict = arrToBoolDict;
      var arrLast = (arr) => arr[arr.length - 1];
      exports.arrLast = arrLast;
      function arrHas(arr, find, equivalent = false) {
        const fct = equivalent ? (x3) => _1.equal(x3, find) : (x3) => x3 === find;
        return arr.findIndex(fct) !== -1;
      }
      exports.arrHas = arrHas;
    }
  });

  // node_modules/@giveback007/util-lib/dist/clone.js
  var require_clone2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/clone.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.clone = void 0;
      function clone(o) {
        let c, x3, l, i4, k, a, q;
        if (typeof o !== "object" || o === null)
          return o;
        if (o instanceof Date)
          return new Date(o);
        x3 = Object.keys(o);
        l = x3.length;
        if (Array.isArray(o)) {
          a = new Array(l);
          for (i4 = 0; i4 < l; i4++) {
            k = x3[i4];
            c = o[k];
            if (typeof c !== "object" || c === null)
              a[k] = c;
            else if (c instanceof Date)
              a[k] = new Date(c);
            else
              a[k] = clone(c);
          }
          return a;
        }
        q = {};
        for (i4 = 0; i4 < l; i4++) {
          k = x3[i4];
          c = o[k];
          if (Object.hasOwnProperty.call(o, k) === false)
            continue;
          if (typeof c !== "object" || c === null)
            q[k] = c;
          else if (c instanceof Date)
            q[k] = new Date(c);
          else
            q[k] = clone(c);
        }
        return q;
      }
      exports.clone = clone;
    }
  });

  // node_modules/@giveback007/util-lib/dist/equality.js
  var require_equality2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/equality.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.equal = void 0;
      function equal(a, b) {
        if (a === b)
          return true;
        if (a && b && typeof a === "object" && typeof b === "object") {
          if (a.constructor !== b.constructor)
            return false;
          var length, i4, keys4;
          if (Array.isArray(a)) {
            length = a.length;
            if (length !== b.length)
              return false;
            for (i4 = length; i4-- !== 0; )
              if (!equal(a[i4], b[i4]))
                return false;
            return true;
          }
          if (a instanceof Map && b instanceof Map) {
            if (a.size !== b.size)
              return false;
            for (i4 of a.entries())
              if (!b.has(i4[0]))
                return false;
            for (i4 of a.entries())
              if (!equal(i4[1], b.get(i4[0])))
                return false;
            return true;
          }
          if (a instanceof Set && b instanceof Set) {
            if (a.size !== b.size)
              return false;
            for (i4 of a.entries())
              if (!b.has(i4[0]))
                return false;
            return true;
          }
          if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
            length = a.length;
            if (length != b.length)
              return false;
            for (i4 = length; i4-- !== 0; )
              if (a[i4] !== b[i4])
                return false;
            return true;
          }
          if (a.constructor === RegExp)
            return a.source === b.source && a.flags === b.flags;
          if (a.valueOf !== Object.prototype.valueOf)
            return a.valueOf() === b.valueOf();
          if (a.toString !== Object.prototype.toString)
            return a.toString() === b.toString();
          keys4 = Object.keys(a);
          length = keys4.length;
          if (length !== Object.keys(b).length)
            return false;
          for (i4 = length; i4-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b, keys4[i4]))
              return false;
          for (i4 = length; i4-- !== 0; ) {
            var key = keys4[i4];
            if (key === "_owner" && a.$$typeof) {
              continue;
            }
            if (!equal(a[key], b[key]))
              return false;
          }
          return true;
        }
        return a !== a && b !== b;
      }
      exports.equal = equal;
    }
  });

  // node_modules/@giveback007/util-lib/dist/general.js
  var require_general2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/general.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.promiseOut = exports.debounceTimeOut = exports.randomColorHex = exports.uiid = exports.assertType = exports.type = exports.cloneLog = exports.unsubAll = exports.wait = exports.interval = void 0;
      var _1 = require_dist3();
      var interval = (funct, ms, times) => {
        if (_1.isType(times, "number") && times < 1)
          throw Error(`argument "times" can't be less than 1`);
        let i4 = 0;
        const intv = setInterval(() => {
          funct(i4);
          i4++;
          if (times && i4 >= times)
            clearInterval(intv);
        }, ms);
        return { stop: () => clearInterval(intv) };
      };
      exports.interval = interval;
      var wait = (ms) => new Promise((res2) => setTimeout(() => res2(), ms));
      exports.wait = wait;
      var usubAllFunct = (x3, unsubName = "unsubscribe") => _1.isType(x3, "object") && _1.hasKey(x3, unsubName) ? x3[unsubName]() : null;
      function unsubAll(objOrArr, unsubName = "unsubscribe") {
        if (_1.isType(objOrArr, "array"))
          objOrArr.forEach((x3) => usubAllFunct(x3, unsubName));
        else if (_1.isType(objOrArr, "object"))
          _1.objMap(objOrArr, ({ val }) => usubAllFunct(val, unsubName));
        else
          throw Error('argument "objOrArr" must be of type "object" or "array"');
      }
      exports.unsubAll = unsubAll;
      var cloneLog = (x3) => console.log(_1.clone(x3));
      exports.cloneLog = cloneLog;
      function type(val) {
        if (typeof val === "object") {
          if (Array.isArray(val))
            return "array";
          else if (val === null)
            return "null";
          else
            return "object";
        } else {
          if (val !== val)
            return "NaN";
          else
            return typeof val;
        }
      }
      exports.type = type;
      function assertType(val, types) {
        if (!_1.isType(types, "array"))
          types = [types];
        for (const t3 of types)
          if (_1.isType(val, t3))
            return;
        throw Error(`value needs to be of type ${types.join(" || ")}`);
      }
      exports.assertType = assertType;
      var uiid = () => {
        let d2 = (/* @__PURE__ */ new Date()).getTime();
        let d22 = performance && performance.now && performance.now() * 1e3 || 0;
        const str6 = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
        return str6.replace(/[xy]/g, (c) => {
          let r = Math.random() * 16;
          if (d2 > 0) {
            r = (d2 + r) % 16 | 0;
            d2 = Math.floor(d2 / 16);
          } else {
            r = (d22 + r) % 16 | 0;
            d22 = Math.floor(d22 / 16);
          }
          return (c === "x" ? r : r & 3 | 8).toString(16);
        });
      };
      exports.uiid = uiid;
      var randomColorHex = () => "#" + ((1 << 24) * Math.random() | 0).toString(16);
      exports.randomColorHex = randomColorHex;
      function debounceTimeOut() {
        let timeoutId = null;
        return (fct, ms) => {
          if (timeoutId)
            clearTimeout(timeoutId);
          timeoutId = setTimeout(fct, ms);
        };
      }
      exports.debounceTimeOut = debounceTimeOut;
      function promiseOut() {
        let resolve;
        const promise = new Promise((res2) => resolve = res2);
        return { resolve, promise };
      }
      exports.promiseOut = promiseOut;
    }
  });

  // node_modules/@giveback007/util-lib/dist/iterate.js
  var require_iterate2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/iterate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.iterate = void 0;
      var array_1 = require_array2();
      function iterate(xLength, yLength, zLength) {
        const iterator = (fct, nested = false) => {
          const arr = [];
          for (let x3 = 0; x3 < xLength; x3++) {
            if (!yLength)
              arr.push(fct({ x: x3 }));
            else
              for (let y4 = 0; y4 < yLength; y4++) {
                if (!zLength)
                  arr.push(fct({ x: x3, y: y4 }));
                else
                  for (let z3 = 0; z3 < zLength; z3++) {
                    arr.push(fct({ x: x3, y: y4, z: z3 }));
                  }
              }
          }
          if (!nested)
            return arr;
          if (zLength && yLength) {
            const newArr = array_1.arrDivide(arr, yLength * zLength);
            return newArr.map((yArr) => array_1.arrDivide(yArr, zLength));
          } else if (yLength) {
            return array_1.arrDivide(arr, yLength);
          } else {
            return arr;
          }
        };
        return {
          for: (fct) => {
            iterator(fct);
          },
          map: (fct) => iterator(fct),
          nestedMap: (fct) => iterator(fct, true)
        };
      }
      exports.iterate = iterate;
    }
  });

  // node_modules/@giveback007/util-lib/dist/number.js
  var require_number2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.newNumFromRange = exports.numberWithCommas = exports.decPlace = exports.average = exports.rand = void 0;
      var _1 = require_dist3();
      var rand = (min, max) => Math.floor(Math.random() * (max + 1 - min)) + min;
      exports.rand = rand;
      var average = (nArr) => nArr.reduce((a = 0, b = 0) => a + b, 0) / nArr.length;
      exports.average = average;
      var decPlace = (n, places) => parseFloat(n.toFixed(places));
      exports.decPlace = decPlace;
      var numberWithCommas = (n) => n.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      exports.numberWithCommas = numberWithCommas;
      function newNumFromRange(prevNum, min, max) {
        let num;
        let loop4 = 0;
        const dict = _1.isType(prevNum, "array") ? _1.arrToBoolDict(prevNum) : { [prevNum]: true };
        do {
          num = exports.rand(min, max);
          loop4++;
          if (loop4 > 1e6) {
            console.error("Check for infinite loops");
            throw new Error("Looped 1 million times");
          }
        } while (dict[num]);
        return num;
      }
      exports.newNumFromRange = newNumFromRange;
    }
  });

  // node_modules/@giveback007/util-lib/dist/object.js
  var require_object2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/object.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.objPromiseAll = exports.objSortKeys = exports.objResolve = exports.objExtract = exports.objKeyVals = exports.objVals = exports.objKeys = exports.objRemoveKeys = exports.objFilter = exports.objMap = void 0;
      function objMap(o, funct) {
        const newObj = {};
        for (const key in o) {
          newObj[key] = funct({ key, val: o[key] });
        }
        return newObj;
      }
      exports.objMap = objMap;
      function objFilter(o, funct) {
        const newObj = Object.assign({}, o);
        for (const key in o) {
          if (!funct({ key, val: o[key] }))
            delete newObj[key];
        }
        return newObj;
      }
      exports.objFilter = objFilter;
      function objRemoveKeys(obj, filterOut) {
        const newObj = Object.assign({}, obj);
        filterOut.forEach((key) => delete newObj[key]);
        return newObj;
      }
      exports.objRemoveKeys = objRemoveKeys;
      function objKeys(o) {
        if (Object.keys)
          return Object.keys(o);
        const keys4 = [];
        for (const k in o)
          keys4.push(k);
        return keys4;
      }
      exports.objKeys = objKeys;
      var objVals = (o) => Object.values ? Object.values(o) : objKeys(o).map((key) => o[key]);
      exports.objVals = objVals;
      var objKeyVals = (o) => objKeys(o).map((key) => ({ key, val: o[key] }));
      exports.objKeyVals = objKeyVals;
      function objExtract(extract, keys4) {
        const newObj = {};
        keys4.forEach((key) => newObj[key] = extract[key]);
        return newObj;
      }
      exports.objExtract = objExtract;
      var objResolve = (o, path) => path.split(".").reduce((prev, key) => prev[key], o);
      exports.objResolve = objResolve;
      var objSortKeys = (o, compareFn) => {
        const newObj = {};
        const keys4 = objKeys(o).sort(compareFn);
        keys4.map((k) => newObj[k] = o[k]);
        return newObj;
      };
      exports.objSortKeys = objSortKeys;
      function objPromiseAll(obj) {
        const keyValues = exports.objKeyVals(obj);
        const toEqual = keyValues.length;
        const values = {};
        let total = 0;
        return new Promise((resolve) => keyValues.forEach(({ key, val: x3 }) => x3.then((data) => {
          values[key] = data;
          total++;
          if (toEqual === total)
            resolve(values);
        })));
      }
      exports.objPromiseAll = objPromiseAll;
    }
  });

  // node_modules/@giveback007/util-lib/dist/string.js
  var require_string2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/string.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.minAppend = exports.strRemove = exports.strIncludes = void 0;
      var strIncludes = (str6, subStr) => str6.indexOf(subStr) !== -1;
      exports.strIncludes = strIncludes;
      var strRemove = (str6, remove) => str6.replace(new RegExp(remove, "g"), "");
      exports.strRemove = strRemove;
      var minAppend = (item, length, append = "0") => {
        item = item + "";
        if (length < 1)
          throw Error("length can not be less than 1");
        if (item.length > length)
          throw Error("item can not exceed length");
        return (append.repeat(length - 1) + item).slice(-length);
      };
      exports.minAppend = minAppend;
    }
  });

  // node_modules/@giveback007/util-lib/dist/test.js
  var require_test2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/test.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isValidEmail = exports.nonValue = exports.nullOrEmpty = exports.isType = exports.hasKeys = exports.hasKey = void 0;
      var _1 = require_dist3();
      var hasKey = (obj, key) => exports.isType(obj, "object") && obj.hasOwnProperty(key);
      exports.hasKey = hasKey;
      function hasKeys(obj, keys4) {
        if (!exports.isType(obj, "object"))
          return false;
        for (const key of keys4)
          if (!obj.hasOwnProperty(key))
            return false;
        return true;
      }
      exports.hasKeys = hasKeys;
      var isType = (val, testType) => _1.type(val) === testType;
      exports.isType = isType;
      function nullOrEmpty(x3) {
        if (exports.nonValue(x3))
          return true;
        if (exports.isType(x3, "string") || exports.isType(x3, "array"))
          return !x3.length;
        if (exports.isType(x3, "object"))
          return !_1.objVals(x3).length;
        return false;
      }
      exports.nullOrEmpty = nullOrEmpty;
      var nonValue = (val) => val === null || val === void 0;
      exports.nonValue = nonValue;
      var isValidEmail = (email) => /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(email);
      exports.isValidEmail = isValidEmail;
    }
  });

  // node_modules/@giveback007/util-lib/dist/time.js
  var require_time2 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/time.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.yearStartEnd = exports.monthStartEnd = exports.weekStartEnd = exports.getDayStartEnd = exports.wks = exports.weeks = exports.dys = exports.days = exports.hrs = exports.hours = exports.min = exports.minutes = exports.sec = exports.seconds = exports.msToTime = exports.msToWks = exports.msToDys = exports.msToHrs = exports.msToMin = exports.msToSec = exports.dateTimeToString = exports.weekTuple = exports.msTime = void 0;
      var _1 = require_dist3();
      exports.msTime = {
        s: 1e3,
        m: 6e4,
        h: 36e5,
        d: 864e5,
        w: 6048e5
      };
      exports.weekTuple = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
      function dateTimeToString(dt = /* @__PURE__ */ new Date()) {
        const h = ("0" + dt.getHours()).slice(-2);
        const m = ("0" + dt.getMinutes()).slice(-2);
        const s = ("0" + dt.getSeconds()).slice(-2);
        const ms = ("00" + dt.getMilliseconds()).slice(-3);
        return `${h}:${m}:${s}:${ms}`;
      }
      exports.dateTimeToString = dateTimeToString;
      var msToSec = (ms) => ms / exports.msTime.s;
      exports.msToSec = msToSec;
      var msToMin = (ms) => ms / exports.msTime.m;
      exports.msToMin = msToMin;
      var msToHrs = (ms) => ms / exports.msTime.h;
      exports.msToHrs = msToHrs;
      var msToDys = (ms) => ms / exports.msTime.d;
      exports.msToDys = msToDys;
      var msToWks = (ms) => ms / exports.msTime.w;
      exports.msToWks = msToWks;
      function msToTime(msT, toObj = false) {
        const msN = msT % 1e3;
        let sN = Math.floor(msT / 1e3);
        let mN = Math.floor(sN / 60);
        sN = sN % 60;
        let hN = Math.floor(mN / 60);
        mN = mN % 60;
        const dN = Math.floor(hN / 24);
        hN = hN % 24;
        const d2 = ("00" + dN).slice(-3);
        const h = ("0" + hN).slice(-2);
        const m = ("0" + mN).slice(-2);
        const s = ("0" + sN).slice(-2);
        const ms = ("00" + msN).slice(-3);
        if (toObj)
          return { d: dN, h: hN, m: mN, s: sN, ms: msN };
        return `${dN ? d2 + ":" : ""}${h}:${m}:${s}:${ms}`;
      }
      exports.msToTime = msToTime;
      var seconds = (s) => s * exports.msTime.s;
      exports.seconds = seconds;
      exports.sec = exports.seconds;
      var minutes = (m) => m * exports.msTime.m;
      exports.minutes = minutes;
      exports.min = exports.minutes;
      var hours = (h) => h * exports.msTime.h;
      exports.hours = hours;
      exports.hrs = exports.hours;
      var days = (d2) => d2 * exports.msTime.d;
      exports.days = days;
      exports.dys = exports.days;
      var weeks = (w) => w * exports.msTime.w;
      exports.weeks = weeks;
      exports.wks = exports.weeks;
      function getDayStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        const m = t3.getMonth();
        const d2 = t3.getDate();
        let start = new Date(y4, m, d2);
        let end = new Date(y4, m, d2, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.getDayStartEnd = getDayStartEnd;
      function weekStartEnd(t3, weekStart = "sun", type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const wd = t3.getDay();
        const startOffset = wd * -1 + (weekStart === "mon" ? 1 : 0);
        const endOffset = 6 + startOffset;
        const s = new Date(t3.getTime() + exports.days(startOffset));
        const e = new Date(t3.getTime() + exports.days(endOffset));
        let start = new Date(s.getFullYear(), s.getMonth(), s.getDate());
        let end = new Date(e.getFullYear(), e.getMonth(), e.getDate(), 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.weekStartEnd = weekStartEnd;
      function monthStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        const m = t3.getMonth();
        let start = new Date(y4, m, 1);
        let end = new Date(y4, m, 0, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.monthStartEnd = monthStartEnd;
      function yearStartEnd(t3, type = "local") {
        if (_1.isType(t3, "number"))
          t3 = new Date(t3);
        const y4 = t3.getFullYear();
        let start = new Date(y4, 0, 1);
        let end = new Date(y4, 12, 0, 23, 59, 59, 999);
        if (type === "unix") {
          const tzOffset = exports.min(start.getTimezoneOffset());
          start = new Date(start.getTime() + tzOffset);
          end = new Date(end.getTime() + tzOffset);
        }
        return { start, end };
      }
      exports.yearStartEnd = yearStartEnd;
    }
  });

  // node_modules/@giveback007/util-lib/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/@giveback007/util-lib/dist/index.js"(exports) {
      "use strict";
      var __createBinding3 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar3 = exports && exports.__exportStar || function(m, exports2) {
        for (var p2 in m)
          if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
            __createBinding3(exports2, m, p2);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar3(require_types2(), exports);
      __exportStar3(require_array2(), exports);
      __exportStar3(require_clone2(), exports);
      __exportStar3(require_equality2(), exports);
      __exportStar3(require_general2(), exports);
      __exportStar3(require_iterate2(), exports);
      __exportStar3(require_number2(), exports);
      __exportStar3(require_object2(), exports);
      __exportStar3(require_string2(), exports);
      __exportStar3(require_test2(), exports);
      __exportStar3(require_time2(), exports);
    }
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/@babel/runtime/helpers/typeof.js"(exports, module2) {
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(obj);
      }
      module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toPrimitive.js
  var require_toPrimitive = __commonJS({
    "node_modules/@babel/runtime/helpers/toPrimitive.js"(exports, module2) {
      var _typeof = require_typeof()["default"];
      function _toPrimitive(input, hint) {
        if (_typeof(input) !== "object" || input === null)
          return input;
        var prim = input[Symbol.toPrimitive];
        if (prim !== void 0) {
          var res2 = prim.call(input, hint || "default");
          if (_typeof(res2) !== "object")
            return res2;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return (hint === "string" ? String : Number)(input);
      }
      module2.exports = _toPrimitive, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/toPropertyKey.js
  var require_toPropertyKey = __commonJS({
    "node_modules/@babel/runtime/helpers/toPropertyKey.js"(exports, module2) {
      var _typeof = require_typeof()["default"];
      var toPrimitive = require_toPrimitive();
      function _toPropertyKey(arg) {
        var key = toPrimitive(arg, "string");
        return _typeof(key) === "symbol" ? key : String(key);
      }
      module2.exports = _toPropertyKey, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/defineProperty.js
  var require_defineProperty = __commonJS({
    "node_modules/@babel/runtime/helpers/defineProperty.js"(exports, module2) {
      var toPropertyKey = require_toPropertyKey();
      function _defineProperty(obj, key, value) {
        key = toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      module2.exports = _defineProperty, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/rest-api-handler/dist/resolveProcessors.js
  var require_resolveProcessors = __commonJS({
    "node_modules/rest-api-handler/dist/resolveProcessors.js"(exports, module2) {
      "use strict";
      async function resolveProcessors(response, list, request, i4 = 0) {
        const processor = list[i4];
        if (!processor) {
          return response;
        }
        const processedResponse = typeof processor === "function" ? await processor(response, request) : await processor.processResponse(response, request);
        if (list[i4 + 1]) {
          return resolveProcessors(processedResponse, list, request, i4 + 1);
        }
        return processedResponse;
      }
      module2.exports = resolveProcessors;
    }
  });

  // node_modules/rest-api-handler/dist/data-formats.js
  var require_data_formats = __commonJS({
    "node_modules/rest-api-handler/dist/data-formats.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var JSON2 = "json";
      var FORM_DATA = "formdata";
      var URL_ENCODED = "urlencoded";
      exports.FORM_DATA = FORM_DATA;
      exports.JSON = JSON2;
      exports.URL_ENCODED = URL_ENCODED;
    }
  });

  // node_modules/rest-api-handler/dist/Api.js
  var require_Api = __commonJS({
    "node_modules/rest-api-handler/dist/Api.js"(exports, module2) {
      "use strict";
      var _defineProperty = require_defineProperty();
      var resolveProcessors = require_resolveProcessors();
      var dataFormats = require_data_formats();
      function _interopDefaultLegacy(e) {
        return e && typeof e === "object" && "default" in e ? e : { "default": e };
      }
      var _defineProperty__default = /* @__PURE__ */ _interopDefaultLegacy(_defineProperty);
      function ownKeys(object, enumerableOnly) {
        var keys4 = Object.keys(object);
        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }
          keys4.push.apply(keys4, symbols);
        }
        return keys4;
      }
      function _objectSpread(target) {
        for (var i4 = 1; i4 < arguments.length; i4++) {
          var source = arguments[i4] != null ? arguments[i4] : {};
          if (i4 % 2) {
            ownKeys(Object(source), true).forEach(function(key) {
              _defineProperty__default["default"](target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function(key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }
        return target;
      }
      var Api = class {
        /**
         * Base api url
         */
        /**
         * Base http headers
         */
        /**
         * Base settings for Fetch Request
         */
        /**
         * List of processors that parse response from server.
         */
        /**
         * List of formatter you can use to process content of body request.
         */
        /**
         * Constructor.
         *
         * @param apiUrl - Base api url
         * @param processors - List of processors that parse response from server.
         * @param defaultHeaders - Base settings for Fetch Request
         * @param defaultOptions - List of processors that parse response from server.
         */
        constructor(apiUrl, processors = [], defaultHeaders = {}, defaultOptions = {}) {
          this.apiUrl = void 0;
          this.defaultHeaders = void 0;
          this.defaultOptions = void 0;
          this.processors = void 0;
          this.apiUrl = apiUrl;
          this.defaultHeaders = defaultHeaders;
          this.defaultOptions = defaultOptions;
          this.processors = processors;
        }
        /**
         * Convert data in object to format of Fetch body.
         *
         * @param data - Data to convert
         * @param to - Format to which convert the data. Default is JSON.
         * @returns Converted data
         *
         * @example
         * const body = Api.convertData({ a: 'b' }, Api.FORMATS.JSON);
         * // output is {"a":"b"}
         */
        static convertData(data, to = dataFormats.JSON) {
          if (to === dataFormats.FORM_DATA) {
            const formData = new FormData();
            Object.entries(data).forEach(([key, value]) => {
              formData.append(key, value);
            });
            return formData;
          }
          if (to === dataFormats.URL_ENCODED) {
            return Api.convertParametersToUrl(data).slice(1);
          }
          return JSON.stringify(data);
        }
        /**
         * Convert object to url parameters string.
         *
         * @param parameters - List of parameters
         * @returns Encoded string with ? prefix and variables separated by &
         *
         * @example
         * const parameters = Api.convertData({ a: '%b%' });
         * // output is ?a=%25b%25
         */
        static convertParametersToUrl(parameters) {
          const keys4 = Object.keys(parameters);
          if (keys4.length === 0) {
            return "";
          }
          return `?${keys4.map((key) => {
            return `${key}=${encodeURIComponent(parameters[key])}`;
          }).join("&")}`;
        }
        /**
         * Set default headers.
         *
         * @param headers - HTTP headers
         */
        setDefaultHeaders(headers) {
          this.defaultHeaders = headers;
        }
        /**
         * Add default HTTP header.
         *
         * @param name - Name of header
         * @param value - Value for header
         * @example
         * api.setDefaultHeader('content-type', 'application/json');
         */
        setDefaultHeader(name2, value) {
          this.defaultHeaders[name2] = value;
        }
        /**
         * Remove default header.
         *
         * @param name - Name of header
         */
        removeDefaultHeader(name2) {
          delete this.defaultHeaders[name2];
        }
        /**
         * Get default headers.
         *
         * @returns Get Default headers
         */
        getDefaultHeaders() {
          return this.defaultHeaders;
        }
        /**
         * Fetch API url.
         *
         * @protected
         * @param request - Fetch request
         * @returns Fetch response
         */
        fetchRequest(request) {
          return fetch(request);
        }
        /**
         * Request given API endpoint.
         *
         * @param namespace - Api endpoint or full url
         * @param method - Request method eg. POST or GET
         * @param options - Fetch options
         * @param headers - Custom headers
         * @returns processed response
         * @example
         * const { data } = await api.request('ad', 'POST', {
         *     body: '{"ad":1}'
         * })
         *
         * const { data } = await api.request('http://i-can-request-full-url.com/?a=b', 'GET')
         */
        async request(namespace, method, options = {}, headers = {}) {
          const urlToRequest = namespace.indexOf("http") === 0 ? namespace : `${this.apiUrl}/${namespace}`;
          const request = new Request(urlToRequest, _objectSpread(_objectSpread({}, this.defaultOptions), {}, {
            method,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            // eslint-disable-next-line compat/compat
            headers: new Headers(_objectSpread(_objectSpread({}, this.getDefaultHeaders()), headers))
          }, options));
          const response = await this.fetchRequest(request);
          return resolveProcessors(response, this.processors, request);
        }
        /**
         * Send a request with body.
         *
         * @protected
         * @param namespace - api endpoint
         * @param method - api method
         * @param data - body JSON parameters
         * @param format - format of body request
         * @param headers - custom headers
         * @returns processed response
         */
        requestWithBody(namespace, method, data, format, headers = {}) {
          return this.request(namespace, method, {
            body: Api.convertData(data, format)
          }, headers);
        }
        /**
         * Send a GET request.
         *
         * @param namespace - api endpoint
         * @param parameters - get parameters
         * @param headers - custom headers
         * @returns processed response
         *
         * @example
         * const { data } = await api.get('brand', { id: 5 })
         * // will call YOUR_URI/brand?id=5
         * console.log(data);
         */
        get(namespace, parameters = {}, headers = {}) {
          return this.request(`${namespace}${Api.convertParametersToUrl(parameters)}`, "GET", {}, headers);
        }
        /**
         * Send a POST request.
         *
         * @param namespace - Api endpoint
         * @param data - Request object
         * @param format - Format of body request
         * @param headers - custom headers
         * @returns Processed response
         */
        post(namespace, data = {}, format = dataFormats.JSON, headers = {}) {
          return this.requestWithBody(namespace, "POST", data, format, headers);
        }
        /**
         * Send a PUT request.
         *
         * @param namespace - Api endpoint
         * @param data - Request object
         * @param format - Format of body request
         * @param headers - custom headers
         * @returns Processed response
         */
        put(namespace, data = {}, format = dataFormats.JSON, headers = {}) {
          return this.requestWithBody(namespace, "PUT", data, format, headers);
        }
        /**
         * Send a DELETE request.
         *
         * @param namespace - Api endpoint
         * @param headers - custom headers
         * @returns Processed response
         */
        delete(namespace, headers = {}) {
          return this.request(namespace, "DELETE", {}, headers);
        }
      };
      Api.FORMATS = dataFormats;
      module2.exports = Api;
    }
  });

  // node_modules/rest-api-handler/dist/DefaultResponseProcessor.js
  var require_DefaultResponseProcessor = __commonJS({
    "node_modules/rest-api-handler/dist/DefaultResponseProcessor.js"(exports, module2) {
      "use strict";
      var DefaultResponseProcessor = class {
        /**
         * Constructor.
         *
         * @param Exception - Exception class that will be throwed if request fails.
         * @param decoder - Define custom response body decoder.
         */
        constructor(Exception, decoder3) {
          this.Exception = void 0;
          this.decoder = void 0;
          this.Exception = Exception;
          this.decoder = decoder3 || DefaultResponseProcessor.decodeResponse;
        }
        async processResponse(response, request) {
          const decodedResponse = await this.decoder(response);
          const toRespond = {
            data: decodedResponse,
            status: response.status,
            source: response,
            request
          };
          if (!response.ok) {
            throw new this.Exception(toRespond, request);
          }
          return toRespond;
        }
        static decodeResponse(response) {
          const contentType = response.headers.get("content-type");
          if (!contentType) {
            return response.text();
          }
          if (contentType.includes("json")) {
            return response.json();
          }
          if (contentType.includes("text") || contentType.includes("xml")) {
            return response.text();
          }
          return response.blob();
        }
      };
      module2.exports = DefaultResponseProcessor;
    }
  });

  // node_modules/rest-api-handler/dist/DefaultApiException.js
  var require_DefaultApiException = __commonJS({
    "node_modules/rest-api-handler/dist/DefaultApiException.js"(exports, module2) {
      "use strict";
      var DefaultApiException = class extends Error {
        /**
         * Response from server that throwed an error.
         */
        /**
         * Constructor.
         *
         * @param response - Processed response from server.
         */
        constructor(response) {
          super(`Api exception: ${JSON.stringify(response.data)}`);
          this.response = void 0;
          this.response = response;
        }
        getResponse() {
          return this.response;
        }
        getRequest() {
          return this.response.request;
        }
      };
      module2.exports = DefaultApiException;
    }
  });

  // node_modules/rest-api-handler/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/rest-api-handler/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var Api = require_Api();
      var DefaultResponseProcessor = require_DefaultResponseProcessor();
      var DefaultApiException = require_DefaultApiException();
      exports.Api = Api;
      exports.DefaultResponseProcessor = DefaultResponseProcessor;
      exports.DefaultApiException = DefaultApiException;
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/fitbit.api.js
  var require_fitbit_api = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/fitbit.api.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.FitbitApi = exports.dictToUrlParams = void 0;
      var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
      var util_lib_1 = require_dist3();
      var rest_api_handler_1 = require_dist4();
      function dictToUrlParams(dict) {
        let search = "";
        (0, util_lib_1.objKeyVals)(dict).forEach(({ key, val }, i4) => !(0, util_lib_1.nonValue)(val) && (search += `${i4 ? "&" : "?"}${key}=${val}`));
        return search;
      }
      exports.dictToUrlParams = dictToUrlParams;
      var fromDateObj = (o) => new Date(o.y, (o.m || 1) - 1, o.d || 1, o.hr || 0, o.min || 0, o.sec || 0, o.ms || 0);
      var toDate = (anyDate) => {
        const dt = anyDate instanceof Date ? anyDate : anyDate === "now" ? /* @__PURE__ */ new Date() : anyDate === "today" ? (0, util_lib_1.getDayStartEnd)(/* @__PURE__ */ new Date()).start : anyDate === "yesterday" ? (0, util_lib_1.getDayStartEnd)(Date.now() - (0, util_lib_1.days)(1)).start : (0, util_lib_1.isType)(anyDate, "number") || (0, util_lib_1.isType)(anyDate, "string") ? new Date(anyDate) : fromDateObj(anyDate);
        if (dt.toDateString() === "Invalid Date") {
          console.error(`date: "${anyDate.toString()}" is an invalid date`);
          throw new Error("Invalid Date");
        }
        return dt;
      };
      function dayAndTime(time, useSeconds = false) {
        const dt = toDate(time);
        const dayStr = `${dt.getFullYear()}-${(0, util_lib_1.minAppend)(dt.getMonth() + 1, 2, "0")}-${(0, util_lib_1.minAppend)(dt.getDate(), 2, "0")}`;
        const timeStr = `${(0, util_lib_1.minAppend)(dt.getHours(), 2, "0")}:${(0, util_lib_1.minAppend)(dt.getMinutes(), 2, "0")}` + (useSeconds ? ":" + (0, util_lib_1.minAppend)(dt.getSeconds(), 2, "0") : "");
        return [dayStr, timeStr];
      }
      var FitbitApi2 = class {
        constructor(accessToken, fitBitUserId = "-", getToken) {
          this.accessToken = accessToken;
          this.fitBitUserId = fitBitUserId;
          this.getToken = getToken;
          this.api = new rest_api_handler_1.Api("https://api.fitbit.com");
          this.url = (version2, namespace, noUser = false) => noUser ? `${version2}/${namespace}` : `${version2}/user/${this.fitBitUserId}/${namespace}`;
          this.getApiInfo = () => ({
            accessToken: this.accessToken,
            fitBitUserId: this.fitBitUserId
          });
          this.sleep = {
            /** Returns a list of a user's sleep log entries before `beforeDate` or after `afterDate` a given date specifying offset, limit and sort order.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/get-sleep-log-list/
             */
            getLogList: (opts) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const params2 = Object.assign({ limit: opts.limit || 100, offset: opts.offset || 0 }, (0, util_lib_1.hasKey)(opts, "afterDate") ? { afterDate: dayAndTime(opts.afterDate)[0], sort: opts.sort || "asc" } : { beforeDate: dayAndTime(opts.beforeDate)[0], sort: opts.sort || "desc" });
              if (params2.limit > 100 || params2.limit < 1)
                throw new Error(`Invalid limit: ${params2.limit}, needs to be between 1 to 100`);
              const url4 = this.url(1.2, `sleep/list.json${dictToUrlParams(params2)}`);
              return this.pageGenerator(url4, "sleep");
            }),
            /** Deletes a sleep log with the given log id.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/delete-sleep-log/
             */
            deleteLog: (sleepLogId) => this.handleData(() => this.api.delete(this.url(1.2, `sleep/${sleepLogId}.json`))),
            /** Creates a log entry for a sleep event and returns a response in the format requested.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/create-sleep-log/
             */
            createLog: ({ time, duration }) => {
              const [date, startTime] = dayAndTime(time);
              const url4 = this.url(1.2, `sleep.json${dictToUrlParams({ duration, date, startTime })}`);
              return this.handleData(() => this.api.post(url4));
            },
            /** Returns a list of a user's sleep log entries for a given date.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/get-sleep-log-by-date/
             */
            getByDate: ({ date }) => this.handleData(() => this.api.get(this.url(1.2, `sleep/date/${dayAndTime(date)[0]}.json`))),
            /** Returns a list of a user's sleep log entries for a given date range.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/get-sleep-log-by-date-range/
             */
            getByDateRange: (opts) => {
              const url4 = this.url(1.2, `sleep/date/${dayAndTime(opts.startDate)[0]}/${dayAndTime(opts.endDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Create or update a user's sleep goal.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/create-sleep-goals/
             */
            createGoal: (opts) => this.handleData(() => this.api.post(this.url(1.2, `sleep/goal.json${dictToUrlParams(opts)}`))),
            /** Returns a user's current sleep goal.
             *
             * https://dev.fitbit.com/build/reference/web-api/sleep/get-sleep-goals/
             */
            getGoal: () => this.handleData(() => this.api.get(this.url(1.2, "sleep/goal.json")))
          };
          this.heartRate = {
            /** Retrieves the heart rate time series data over a period of time by specifying a date and time period or a date range. The response will include only the daily summary values.
             *
             * https://dev.fitbit.com/build/reference/web-api/heartrate-timeseries/get-heartrate-timeseries-by-date/
             */
            getTimeSeries: (opts) => {
              const url4 = this.url(1, opts.type === "By_Date" ? `activities/heart/date/${dayAndTime(opts.date)[0]}/${opts.period || "1d"}.json` : `activities/heart/date/${dayAndTime(opts.fromDate)[0]}/${dayAndTime(opts.toDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Retrieves the heart rate intraday time series data on a specific date or date range for a 24 hour period.
             *
             * Can't exceed 24 hours, or an error will be given.
             *
             * https://dev.fitbit.com/build/reference/web-api/intraday/get-heartrate-intraday-by-date/
             */
            getIntraday: (opts) => {
              let url4;
              if (opts.type === "By_Date") {
                url4 = this.url(1, `activities/heart/date/${dayAndTime(opts.date)[0]}/1d/${opts.detailLevel}.json`);
              } else {
                const start = dayAndTime(opts.fromTime);
                const end = dayAndTime(opts.toTime);
                url4 = this.url(1, `activities/heart/date/${start[0]}/${end[0]}/${opts.detailLevel}/time/${start[1]}/${end[1]}.json`);
              }
              return this.handleData(() => this.api.get(url4));
            }
          };
          this.user = {
            /** Retrieves a list of the user’s badges.
             *
             * https://dev.fitbit.com/build/reference/web-api/user/get-badges/
             */
            getBadges: () => this.handleData(() => this.api.get(this.url(1, `badges.json`))),
            /** Retrieves the user's profile data.
             *
             * https://dev.fitbit.com/build/reference/web-api/user/get-profile/
             */
            getProfile: () => this.handleData(() => this.api.get(this.url(1, `profile.json`))),
            /** Modifies a user's profile data.
             *
             * https://dev.fitbit.com/build/reference/web-api/user/update-profile/
             */
            updateProfile: (opts) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              return this.handleData(() => this.api.post(this.url(1, `profile.json${dictToUrlParams(opts)}`)));
            })
          };
          this.body = {
            /** Retrieves a list of all user's weight or fat log entries for a given date or date range.
             *
             * https://dev.fitbit.com/build/reference/web-api/body/get-weight-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/body/get-bodyfat-log/
             */
            getLogs: (opts) => {
              const url4 = this.url(1, opts.type === "By_Date" ? `body/log/${opts.data}/date/${dayAndTime(opts.date)[0]}/${opts.period || "1d"}.json` : `body/log/${opts.data}/date/${dayAndTime(opts.fromDate)[0]}/${dayAndTime(opts.toDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Returns time series data in the specified range for weight, fat, or bmi.
             *
             * https://dev.fitbit.com/build/reference/web-api/body-timeseries/
            */
            getTimeSeries: (opts) => {
              const url4 = this.url(1, opts.type === "By_Date" ? `body/${opts.data}/date/${dayAndTime(opts.date)[0]}/${opts.period || "1d"}.json` : `body/${opts.data}/date/${dayAndTime(opts.fromDate)[0]}/${dayAndTime(opts.toDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Retrieves a user's body fat and weight goals.
             *
             * https://dev.fitbit.com/build/reference/web-api/body/get-body-goals/
             */
            getGoals: (opts) => this.handleData(() => this.api.get(this.url(1, `body/log/${opts.data}/goal.json`))),
            /** Updates a user's body fat and weight goals.
             *
             * https://dev.fitbit.com/build/reference/web-api/body/create-weight-goal/
             *
             * https://dev.fitbit.com/build/reference/web-api/body/create-bodyfat-goal/
             */
            createGoals: (opts) => this.handleData(() => this.api.post(this.url(1, `body/log/${opts.data}/goal.json`))),
            /** Creates a body fat or weight log entry.
             *
             * https://dev.fitbit.com/build/reference/web-api/body/create-bodyfat-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/body/create-weight-log/
             */
            createLog: (opts) => {
              const [date, time] = dayAndTime(opts.time, true);
              const url4 = this.url(1, `body/log/${opts.data}.json${dictToUrlParams({ [opts.data]: opts.unit, date, time })}`);
              return this.handleData(() => this.api.post(url4));
            },
            /** Deletes a body fat or weight log entry
             *
             * https://dev.fitbit.com/build/reference/web-api/body/delete-bodyfat-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/body/delete-weight-log/
             */
            deleteLog: ({ logId, data }) => this.handleData(() => this.api.delete(this.url(1, `body/log/${data}/${logId}.json`)))
          };
          this.activity = {
            /** Retrieves the user's activity statistics.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-lifetime-stats/
             */
            getLifetimeStats: () => this.handleData(() => this.api.get(this.url(1, `activities.json`))),
            /** Retrieves a user's current daily or weekly activity goals.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-activity-goals/
             */
            getGoals: (opts) => this.handleData(() => this.api.get(this.url(1, `activities/goals/${opts.period}.json`))),
            /** Creates or updates a user's daily or weekly activity goal.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/create-activity-goals/
             */
            createGoals: ({ period, type, value }) => this.handleData(() => this.api.post(this.url(1, `activities/goals/${period}.json${dictToUrlParams({ type, value })}`))),
            /** Creates a log entry containing the Fitbit user's activity or private custom activity.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/create-activity-log/
             */
            createLog: (opts) => {
              const [date, startTime] = dayAndTime(opts.startTime);
              const url4 = this.url(1, `activities.json${dictToUrlParams(Object.assign(Object.assign({}, opts), { date, startTime }))}`);
              return this.handleData(() => this.api.post(url4));
            },
            /** Deletes a user’s activity log entry with the given ID.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/delete-activity-log/
             */
            deleteLog: (activityLogId) => this.handleData(() => this.api.delete(this.url(1, `activities/${activityLogId}.json`))),
            /** Retrieves a list of a user's activity log entries before or after a given day.
             *
             * @returns generator, call .next() to get data, keep calling .next() to continue loading data beforeDate or afterDate offset by data already loaded.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-activity-log-list/
             */
            getLogList: (opts) => (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
              const params2 = Object.assign({ limit: opts.limit || 100, offset: opts.offset || 0 }, (0, util_lib_1.hasKey)(opts, "afterDate") ? { afterDate: dayAndTime(opts.afterDate)[0], sort: opts.sort || "asc" } : { beforeDate: dayAndTime(opts.beforeDate)[0], sort: opts.sort || "desc" });
              if (params2.limit > 100 || params2.limit < 1)
                throw new Error(`Invalid limit: ${opts.limit}, needs to be a number between 1 to 100`);
              const url4 = this.url(1, `activities/list.json${dictToUrlParams(params2)}`);
              return this.pageGenerator(url4, "activities");
            }),
            /** Retrieves a list of all valid Fitbit public activities and private, user-created activities. If available, activity level details will display.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-all-activity-types/
             */
            getAllTypes: () => this.handleData(() => this.api.get(this.url(1, `activities.json`))),
            /** Retrieves the details for a single activity. If available, activity level details will display.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-activity-type/
             */
            getType: (activityId) => this.handleData(() => this.api.get(this.url(1, `activities/${activityId}.json`))),
            /** Retrieves a list of a user's favorite activities.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-favorite-activities/
             */
            getFavorite: () => this.handleData(() => this.api.get(this.url(1, `activities/favorite.json`))),
            /** Adds the activity with the given ID to user's list of favorite activities.
             *
             * For the list of available ids use: `.activity.getAllTypes()`
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/create-favorite-activity/
             */
            createFavorite: (activityId) => this.handleData(() => this.api.post(this.url(1, `activities/favorite/${activityId}.json`))),
            /** Adds the activity with the given ID to user's list of favorite activities.
             *
             * For the list of available ids use: `.activity.getAllTypes()`
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/create-favorite-activity/
             */
            deleteFavorite: (activityId) => this.handleData(() => this.api.delete(this.url(1, `activities/favorite/${activityId}.json`))),
            /** Retrieves a list of a user's recent activities types logged with some details of the last activity log of that type.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-recent-activity-types/
             */
            getRecent: () => this.handleData(() => this.api.get(this.url(1, `activities/recent.json`))),
            /** Retrieves a summary and list of a user’s activities and activity log entries for a given day.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-daily-activity-summary/
             */
            getDailySummary: () => this.handleData(() => this.api.get(this.url(1, `activities/recent.json`))),
            /** Retrieves a list of a user's frequent activities.
             *
             * https://dev.fitbit.com/build/reference/web-api/activity/get-frequent-activities/
             */
            getFrequent: () => this.handleData(() => this.api.get(this.url(1, `activities/frequent.json`))),
            /** Returns time series data in the specified range for weight, fat, or bmi.
             *
             * https://dev.fitbit.com/build/reference/web-api/body-timeseries/
            */
            getTimeSeries: (opts) => {
              const url4 = this.url(1, opts.type === "By_Date" ? `activities/${opts.data}/date/${dayAndTime(opts.date)[0]}/${opts.period || "1d"}.json` : `activities/${opts.data}/date/${dayAndTime(opts.fromDate)[0]}/${dayAndTime(opts.toDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Retrieves the activity intraday time series data for a given resource on a specific date or 24 hour period.
             *
             * Can't exceed 24 hours, or an error will be given.
             *
             * https://dev.fitbit.com/build/reference/web-api/intraday/get-activity-intraday-by-date/
             */
            getIntraday: (opts) => {
              let url4;
              if (opts.type === "By_Date") {
                url4 = this.url(1, `activities/${opts.data}/date/${dayAndTime(opts.date)[0]}/1d/${opts.detailLevel}.json`);
              } else {
                const start = dayAndTime(opts.fromTime);
                const end = dayAndTime(opts.toTime);
                url4 = this.url(1, `activities/${opts.data}/date/${start[0]}/${end[0]}/${opts.detailLevel}/time/${start[1]}/${end[1]}.json`);
              }
              return this.handleData(() => this.api.get(url4));
            }
          };
          this.devices = {
            /** Get Devices retrieves a list of devices paired to the user's account.
             *
             * https://dev.fitbit.com/build/reference/web-api/devices/get-devices/
             */
            getList: () => this.handleData(() => this.api.get(this.url(1, `devices.json`))),
            /** Create Alarm creates an alarm for the given device.
             *
             * https://dev.fitbit.com/build/reference/web-api/devices/create-alarm/
             */
            createAlarm: (opts) => {
              const params2 = (0, util_lib_1.objRemoveKeys)(opts, ["deviceTrackerId"]);
              const url4 = this.url(1, `devices/tracker/${opts.deviceTrackerId}/alarms.json${dictToUrlParams(params2)}`);
              return this.handleData(() => this.api.post(url4));
            },
            /** Update Alarm updates an alarm for the given device.
             *
             * https://dev.fitbit.com/build/reference/web-api/devices/update-alarm/
             */
            updateAlarm: ({ deviceTrackerId, alarmId }, update) => this.handleData(() => this.api.post(this.url(1, `devices/tracker/${deviceTrackerId}/alarms/${alarmId}.json${dictToUrlParams(Object.assign(Object.assign({}, update), { weekDays: update.weekDays.join() }))}`))),
            /** Retrieves the alarms enabled for a specific device. This endpoint is supported for trackers that support alarms.
             *
             * https://dev.fitbit.com/build/reference/web-api/devices/get-alarms/
             */
            getAlarms: (deviceTrackerId) => this.handleData(() => this.api.get(this.url(1, `devices/tracker/${deviceTrackerId}/alarms.json`))),
            /** Delete Alarm deletes an alarm for the given device.
             *
             * https://dev.fitbit.com/build/reference/web-api/devices/delete-alarm/
             */
            deleteAlarm: ({ deviceTrackerId, alarmId }) => this.handleData(() => this.api.delete(this.url(1, `devices/tracker/${deviceTrackerId}/alarms/${alarmId}.json`)))
          };
          this.friends = {
            /** Retrieves a list of the Fitbit user's friends.
             *
             * https://dev.fitbit.com/build/reference/web-api/friends/get-friends/
             */
            getList: () => this.handleData(() => this.api.get(this.url(1.1, `friends.json`))),
            /** Retrieves the user's friends leaderboard in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
             *
             * https://dev.fitbit.com/build/reference/web-api/friends/get-friends-leaderboard/
             */
            getLeaderboard: () => this.handleData(() => this.api.get(this.url(1.1, `leaderboard/friends.json`)))
          };
          this.nutrition = {
            // --- // FOODS INFO // --- //
            /** Retrieves a list of public foods from the Fitbit foods database and private foods the user created in the format requested.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/search-foods/
             */
            searchFood: (query) => this.handleData(() => this.api.get(this.url(1, `foods/search.json${dictToUrlParams({ query })}`, true))),
            /** Retrieves the details of a specific food stored in the Fitbit food database or a private food the authorized user has entered.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-food/
             */
            getFood: (foodId) => this.handleData(() => this.api.get(this.url(1, `${foodId}.json`, true))),
            /** Retrieves the food locales used to search, log or create food.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-food-locales/
             */
            getFoodLocales: () => this.handleData(() => this.api.get(this.url(1, `foods/locales.json`, true))),
            /** Retrieves a list of all valid Fitbit food units in the format requested.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-food-units/
             */
            getFoodUnits: () => this.handleData(() => this.api.get(this.url(1, `foods/units.json`, true))),
            /** Creates a new private food for a user.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-food/
             */
            createFood: (params2, addNutritionInfo = "") => this.handleData(() => this.api.post(this.url(1, `foods.json${dictToUrlParams(params2)}${addNutritionInfo}`))),
            /** Deletes a custom food created by the user.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/delete-custom-food/
             */
            deleteFood: (foodId) => this.handleData(() => this.api.delete(this.url(1, `foods/${foodId}.json`))),
            // --- // FOOD // --- //
            /** Retrieves a list of user-specific frequent consumed foods.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-frequent-foods/
             */
            getFrequentFoods: () => this.handleData(() => this.api.get(this.url(1, `foods/log/frequent.json`))),
            /** Retrieves a list of user-specific recently consumed foods.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-recent-foods/
             */
            getRecentFoods: () => this.handleData(() => this.api.get(this.url(1, `foods/log/recent.json`))),
            // --- // LOGS FOOD & WATER // --- //
            /** Creates a food log entry for a given day. (OR) Create a user's water log entry.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-food-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-water-log/
             */
            createLog: (opts) => {
              const [date] = dayAndTime(opts.date)[0];
              const params2 = Object.assign(Object.assign({}, (0, util_lib_1.objRemoveKeys)(opts, ["data", "date"])), { date });
              const url4 = this.url(1, `foods/log${opts.data === "water" ? "/water" : ""}.json${dictToUrlParams(params2)}`);
              return this.handleData(() => this.api.post(url4));
            },
            /** Retrieves a summary of the user's food log entry for a given day. (OR) Retrieves a summary and list of a user's water log entries for a given day.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-food-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-water-log/
             */
            getLog: (opts) => {
              const [date] = dayAndTime(opts.date)[0];
              const params2 = Object.assign(Object.assign({}, (0, util_lib_1.objRemoveKeys)(opts, ["data", "date"])), { date });
              const url4 = this.url(1, `foods/log${opts.data === "water" ? "/water" : ""}.json${dictToUrlParams(params2)}`);
              return this.handleData(() => this.api.get(url4));
            },
            /** Deletes a user's food log entry using the given log ID. (OR) Deleted a user's water log entry using the given log ID.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/delete-food-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/delete-water-log/
             */
            deleteLog: ({ logId, data }) => this.handleData(() => this.api.delete(this.url(1, `foods/log${data === "water" ? "/water" : ""}/${logId}.json`))),
            /** Update food or water log.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/update-food-log/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/update-water-log/
             */
            updateLog: (opts) => {
              const { logId, data } = opts;
              const params2 = (0, util_lib_1.objRemoveKeys)(opts, ["data", "logId"]);
              this.handleData(() => this.api.post(this.url(1, `foods/log${data === "water" ? "/water" : ""}/${logId}.json${dictToUrlParams(params2)}`)));
            },
            // --- // MEALS // --- //
            /** Creates a meal with the given food.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-meal/
             *
             * Endpoint doesn't match the documentation:
             * https://community.fitbit.com/t5/Web-API-Development/Create-a-meal-using-the-API-return-emtpy-array-and-I-don-t-understand-why/m-p/4839132#M13151
             *
             * To get the correct input use the type definitions in opts.
             */
            createMeal: (opts) => this.handleData(() => this.api.post(this.url(1, `meals.json`), opts)),
            /** Retrieves a single meal created by the user from their food log given the meal id.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-meal/
             */
            getMeal: (mealId) => this.handleData(() => this.api.get(this.url(1, `meals/${mealId}.json`))),
            /** Retrieves a list of meals created by the user from their food log.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-meals/
             */
            getMealList: () => this.handleData(() => this.api.get(this.url(1, `meals.json`))),
            /** Updates an existing meal with the contents of the request.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/update-meal/
             */
            updateMeal: (opts) => this.handleData(() => this.api.post(this.url(1, `meals/${opts.mealId}.json`), (0, util_lib_1.objRemoveKeys)(opts, ["mealId"]))),
            /** Deletes an existing meal of the given meal ID.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/delete-meal/
             */
            deleteMeal: (mealId) => this.handleData(() => this.api.delete(this.url(1, `meals/${mealId}.json`))),
            // --- // FAVORITE FOODS // --- //
            /** Adds a food with the given ID to the user's list of favorite foods.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/add-favorite-foods/
             */
            addFavoriteFood: (foodId) => this.handleData(() => this.api.post(this.url(1, `foods/log/favorite/${foodId}.json`))),
            /** Retrieves a list of user-specific favorite consumed foods.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-favorite-foods/
             */
            getFavoriteFoodList: () => this.handleData(() => this.api.get(this.url(1, `foods/log/favorite.json`))),
            /** Deletes a food with the given ID from the user's list of favorite foods.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/delete-favorite-foods/
             */
            deleteFavoriteFood: (foodId) => this.handleData(() => this.api.delete(this.url(1, `foods/log/favorite/${foodId}.json`))),
            // Delete Favorite Foods deletes a food from the user's favorite food list.
            // --- // GOALS FOOD & WATER // --- //
            /** Creates or updates a user's daily calorie consumption or food plan goals. (OR) Creates or updates a user's daily water consumption goal.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-food-goal/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/create-water-goal/
             */
            createGoal: (opts) => this.handleData(() => this.api.post(this.url(1, `foods/log${opts.data === "water" ? "/water" : ""}/goal.json${dictToUrlParams(opts)}`))),
            /** Retrieves the user's current daily calorie consumption goal and/or food plan. (OR) Retrieves a user's daily water consumption goal.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-food-goals/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition/get-water-goal/
             */
            getGoal: (data) => this.handleData(() => this.api.get(this.url(1, `foods/log${data === "water" ? "/water" : ""}/goal.json`))),
            // --- // TIME SERIES // --- //
            /** Retrieves the food and water consumption data for a given resource over a period of time by specifying a date or date range. The response will include only the daily summary values.
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition-timeseries/get-nutrition-timeseries-by-date/
             *
             * https://dev.fitbit.com/build/reference/web-api/nutrition-timeseries/get-nutrition-timeseries-by-date-range/
            */
            getTimeSeries: (opts) => {
              const resource = opts.data === "food" ? "caloriesIn" : "water";
              const url4 = this.url(1, opts.type === "By_Date" ? `foods/log/${resource}/date/${dayAndTime(opts.date)[0]}/${opts.period || "1d"}.json` : `foods/log/${resource}/date/${dayAndTime(opts.fromDate)[0]}/${dayAndTime(opts.toDate)[0]}.json`);
              return this.handleData(() => this.api.get(url4));
            }
          };
          this.subscription = {
            create: ({ collection, subscriptionId, subscriberId }) => {
              const url4 = this.subUrl(collection, subscriptionId);
              return this.handleData(() => this.api.post(url4, void 0, void 0, subscriberId ? { "X-Fitbit-Subscriber-Id": subscriberId } : {}));
            },
            getList: ({ collection, subscriberId }) => this.handleData(() => this.api.get(this.subUrl(collection), void 0, subscriberId ? { "X-Fitbit-Subscriber-Id": subscriberId } : {})),
            delete: ({ collection, subscriptionId, subscriberId }) => this.handleData(() => this.api.delete(this.subUrl(collection, subscriptionId), subscriberId ? { "X-Fitbit-Subscriber-Id": subscriberId } : {}))
          };
          this.subUrl = (cl, id) => this.url(1, `${cl === "all" ? "" : `${cl}/`}apiSubscriptions${id ? `/${id}` : ""}.json`);
          this.setAccessToken(accessToken);
        }
        setAccessToken(token) {
          this.accessToken = token;
          this.api.setDefaultHeader("Authorization", `Bearer ${this.accessToken}`);
        }
        handleData(dataCall, nRecur = 0) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            const response = yield dataCall();
            const headers = {};
            const iter = response.headers.entries();
            for (const [key, val] of iter)
              headers[key] = val;
            let json;
            try {
              json = yield response.json();
            } catch (_a) {
              if (!response.ok) {
                const code2 = response.status;
                console.error(`${code2 === 500 ? "Fitbit Internal" : "Unhandled"} Error.`);
                if (code2 !== 500)
                  throw new Error("Unhandled Error");
              }
              json = null;
            }
            if (!response.ok || json && (0, util_lib_1.hasKey)(json, "errors")) {
              let error = null;
              if ((0, util_lib_1.hasKey)(json, "errors")) {
                error = json;
                const { errorType: err } = json.errors[0];
                if ((err === "expired_token" || err === "invalid_token") && this.getToken && nRecur < 2) {
                  try {
                    const token = yield this.getToken();
                    this.setAccessToken(token);
                    return yield this.handleData(dataCall, nRecur + 1);
                  } catch (err2) {
                    console.error(err2);
                  }
                }
              }
              return {
                type: "ERROR",
                isSuccess: false,
                code: response.status,
                error,
                response,
                headers
              };
            }
            return {
              type: "SUCCESS",
              isSuccess: true,
              code: response.status,
              data: json,
              response,
              headers
            };
          });
        }
        pageGenerator(startingUrl, dataKey) {
          return (0, tslib_1.__awaiter)(this, void 0, void 0, function* () {
            let lastResponse = yield this.handleData(() => this.api.get(startingUrl));
            return function(self2) {
              return (0, tslib_1.__asyncGenerator)(this, arguments, function* () {
                let allData = lastResponse.isSuccess ? [...lastResponse.data[dataKey]] : [];
                let totalCalls = 1;
                const getObj = () => ({ lastResponse, allData, totalCalls });
                if (lastResponse.type === "ERROR")
                  return yield (0, tslib_1.__await)(getObj());
                yield yield (0, tslib_1.__await)(getObj());
                let nextUrl = lastResponse.data.pagination.next;
                while (nextUrl) {
                  lastResponse = yield (0, tslib_1.__await)(self2.handleData(() => self2.api.get(nextUrl)));
                  totalCalls++;
                  if (lastResponse.type === "ERROR")
                    return yield (0, tslib_1.__await)(getObj());
                  nextUrl = lastResponse.data.pagination.next;
                  allData = [...allData, ...lastResponse.data[dataKey]];
                  if (nextUrl)
                    yield yield (0, tslib_1.__await)(getObj());
                }
                return yield (0, tslib_1.__await)(getObj());
              });
            }(this);
          });
        }
      };
      exports.FitbitApi = FitbitApi2;
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Activity.type.js
  var require_Activity_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Activity.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Badges.type.js
  var require_Badges_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Badges.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BadgeType = void 0;
      var BadgeType;
      (function(BadgeType2) {
        BadgeType2["DailyFloors"] = "DAILY_FLOORS";
        BadgeType2["DailySteps"] = "DAILY_STEPS";
        BadgeType2["LifetimeDistance"] = "LIFETIME_DISTANCE";
      })(BadgeType = exports.BadgeType || (exports.BadgeType = {}));
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Devices.type.js
  var require_Devices_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Devices.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/FitbitError.type.js
  var require_FitbitError_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/FitbitError.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Friends.type.js
  var require_Friends_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Friends.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/General.type.js
  var require_General_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/General.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/HeartRate.type.js
  var require_HeartRate_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/HeartRate.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Nutrition.type.js
  var require_Nutrition_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Nutrition.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Profile.type.js
  var require_Profile_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Profile.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Sleep.type.js
  var require_Sleep_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Sleep.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Subscription.type.js
  var require_Subscription_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Subscription.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/types/Weight.type.js
  var require_Weight_type = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/types/Weight.type.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/@giveback007/fitbit-api/dist/index.js
  var require_dist5 = __commonJS({
    "node_modules/@giveback007/fitbit-api/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
      (0, tslib_1.__exportStar)(require_fitbit_api(), exports);
      (0, tslib_1.__exportStar)(require_Activity_type(), exports);
      (0, tslib_1.__exportStar)(require_Badges_type(), exports);
      (0, tslib_1.__exportStar)(require_Devices_type(), exports);
      (0, tslib_1.__exportStar)(require_FitbitError_type(), exports);
      (0, tslib_1.__exportStar)(require_Friends_type(), exports);
      (0, tslib_1.__exportStar)(require_General_type(), exports);
      (0, tslib_1.__exportStar)(require_HeartRate_type(), exports);
      (0, tslib_1.__exportStar)(require_Nutrition_type(), exports);
      (0, tslib_1.__exportStar)(require_Profile_type(), exports);
      (0, tslib_1.__exportStar)(require_Sleep_type(), exports);
      (0, tslib_1.__exportStar)(require_Subscription_type(), exports);
      (0, tslib_1.__exportStar)(require_Weight_type(), exports);
    }
  });

  // index.tsx
  var import_react9 = __toESM(require_react(), 1);
  var import_client6 = __toESM(require_client(), 1);

  // src/app.tsx
  var import_react8 = __toESM(require_react(), 1);

  // node_modules/graphscript/dist/index.esm.js
  var __create2 = Object.create;
  var __defProp2 = Object.defineProperty;
  var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames2 = Object.getOwnPropertyNames;
  var __getProtoOf2 = Object.getPrototypeOf;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __require2 = ((x3) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x3, { get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b] }) : x3)(function(x3) {
    if (typeof __require !== "undefined")
      return __require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __commonJS2 = (cb, mod) => function __require23() {
    return mod || (0, cb[__getOwnPropNames2(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps2 = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames2(from))
        if (!__hasOwnProp2.call(to, key) && key !== except)
          __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target, mod));
  var require_browser = __commonJS2({ "node_modules/web-worker/cjs/browser.js"(exports, module2) {
    module2.exports = Worker;
  } });
  var EventHandler = class {
    constructor(data) {
      this.pushToState = {};
      this.data = {};
      this.triggers = {};
      this.ctr = 0;
      this.setState = (updateObj) => {
        Object.assign(this.data, updateObj);
        let props = Object.getOwnPropertyNames(updateObj);
        for (const prop of props) {
          this.triggerEvent(prop, this.data[prop]);
        }
        if (this.triggers[statesubKey]) {
          let run = (fn) => {
            fn(updateObj);
          };
          this.triggers[statesubKey].forEach((v2) => {
            run(v2.onchange);
          });
        }
        return this.data;
      };
      this.setValue = (key, value) => {
        this.data[key] = value;
        this.triggerEvent(key, value);
      };
      this.triggerEvent = (key, value) => {
        if (this.triggers[key]) {
          let fn = (obj) => obj.onchange(value, this.triggers[key]);
          this.triggers[key].forEach(fn);
        }
      };
      this.subscribeState = (onchange) => {
        return this.subscribeEvent(statesubKey, onchange);
      };
      this.unsubscribeState = (sub) => {
        return this.unsubscribeEvent(statesubKey, sub);
      };
      this.subscribeEvent = (key, onchange, refObject, refKey) => {
        if (key) {
          if (refObject && refKey && !this.triggers[key]) {
            Object.defineProperty(this.data, key, { get: () => {
              return refObject[refKey];
            }, set: (value) => {
              refObject[refKey] = value;
            }, enumerable: true, configurable: true });
          }
          if (!this.triggers[key]) {
            this.triggers[key] = [];
          }
          let l = this.ctr;
          this.ctr++;
          this.triggers[key].push({ sub: l, onchange });
          return l;
        } else
          return void 0;
      };
      this.unsubscribeEvent = (key, sub) => {
        let triggers = this.triggers[key];
        if (triggers) {
          if (sub === void 0) {
            delete this.triggers[key];
            delete this.data[key];
          } else {
            let idx = void 0;
            let obj = triggers.find((o, i22) => {
              if (o.sub === sub) {
                idx = i22;
                return true;
              }
            });
            if (obj)
              triggers.splice(idx, 1);
            if (Object.keys(triggers).length === 0) {
              delete this.triggers[key];
              delete this.data[key];
            }
            if (this.onRemoved)
              this.onRemoved(obj);
            return true;
          }
        }
      };
      this.subscribeEventOnce = (key, onchange) => {
        let sub;
        let changed = (value) => {
          onchange(value);
          this.unsubscribeEvent(key, sub);
        };
        sub = this.subscribeEvent(key, changed);
      };
      this.getEvent = (key, sub) => {
        for (const s in this.triggers[key]) {
          if (this.triggers[key][s].sub === sub)
            return this.triggers[key][s];
        }
      };
      this.getSnapshot = () => {
        const snapshot = {};
        for (const key in this.data) {
          snapshot[key] = this.data[key];
        }
      };
      if (typeof data === "object")
        this.data = data;
    }
  };
  var statesubKey = "*s";
  var state = new EventHandler();
  var GraphNode = class {
    constructor(properties, parent, graph3) {
      this.__node = { tag: `node${Math.floor(Math.random() * 1e15)}`, unique: `${Math.floor(Math.random() * 1e15)}`, state };
      this.__setProperties = (properties2, parent2, graph4) => {
        let enforceProperties = () => {
          let orig = properties2;
          if (!("__node" in properties2))
            properties2.__node = {};
          if (typeof properties2 === "function") {
            if (isNativeClass(properties2)) {
              properties2 = new properties2();
            } else
              properties2 = { __operator: properties2, __node: { forward: true, tag: properties2.name } };
          } else if (typeof properties2 === "string") {
            if (graph4?.get(properties2)) {
              properties2 = graph4.get(properties2);
            }
          }
          if (!properties2.__node.initial)
            properties2.__node.initial = orig;
        };
        enforceProperties();
        if (typeof properties2 === "object") {
          let assignState = () => {
            if (properties2.__node?.state)
              this.__node.state = properties2.__node.state;
          };
          let setProps22 = () => {
            if (properties2.__props) {
              if (typeof properties2.__props === "function")
                properties2.__props = new properties2.__props();
              if (typeof properties2.__props === "object") {
                this.__proxyObject(properties2.__props);
              }
            }
          };
          let setTag = () => {
            if (!properties2.__node.tag) {
              if (properties2.__operator?.name)
                properties2.__node.tag = properties2.__operator.name;
              else
                properties2.__node.tag = `node${Math.floor(Math.random() * 1e15)}`;
            }
          };
          let setNode = () => {
            if (typeof properties2.__node === "string") {
              if (graph4?.get(properties2.__node.tag)) {
                properties2 = graph4.get(properties2.__node.tag);
              } else
                properties2.__node = {};
            } else if (!properties2.__node)
              properties2.__node = {};
            if (graph4) {
              properties2.__node.graph = graph4;
            }
            if (properties2 instanceof Graph)
              properties2.__node.source = properties2;
          };
          let setParent = () => {
            if (!properties2.__parent && parent2)
              properties2.__parent = parent2;
            if (parent2?.__node && !(parent2 instanceof Graph || properties2 instanceof Graph))
              properties2.__node.tag = parent2.__node.tag + "." + properties2.__node.tag;
            if (parent2 instanceof Graph && properties2 instanceof Graph) {
              if (properties2.__node.loaders)
                Object.assign(parent2.__node.loaders ? parent2.__node.loaders : {}, properties2.__node.loaders);
              if (parent2.__node.mapGraphs) {
                properties2.__node.nodes.forEach((n) => {
                  parent2.set(properties2.__node.tag + "." + n.__node.tag, n);
                });
                let ondelete = () => {
                  properties2.__node.nodes.forEach((n) => {
                    parent2.__node.nodes.delete(properties2.__node.tag + "." + n.__node.tag);
                  });
                };
                this.__addOndisconnected(ondelete);
              }
            }
          };
          let setOp = () => {
            if (typeof properties2.default === "function" && !properties2.__operator) {
              properties2.__operator = properties2.default;
            }
            if (properties2.__operator) {
              if (typeof properties2.__operator === "string") {
                if (graph4) {
                  let n = graph4.get(properties2.__operator);
                  if (n)
                    properties2.__operator = n.__operator;
                  if (!properties2.__node.tag && properties2.__operator.name)
                    properties2.__node.tag = properties2.__operator.name;
                }
              }
              if (typeof properties2.__operator === "function")
                properties2.__operator = this.__setOperator(properties2.__operator);
              if (properties2.default)
                properties2.default = properties2.__operator;
            }
          };
          let assignProps = () => {
            properties2.__node = Object.assign(this.__node, properties2.__node);
            let keys22 = Object.getOwnPropertyNames(properties2);
            for (const key of keys22) {
              this[key] = properties2[key];
            }
          };
          let bindCallbacks = () => {
            if (this.__onconnected) {
              if (typeof this.__onconnected === "function") {
                this.__onconnected = this.__onconnected.bind(this);
              } else if (Array.isArray(this.__onconnected)) {
                this.__onconnected = this.__onconnected.map((f) => {
                  return f.bind(this);
                });
              }
              if (typeof this.__ondisconnected === "function") {
                this.__ondisconnected = this.__ondisconnected.bind(this);
              } else if (Array.isArray(this.__ondisconnected)) {
                this.__ondisconnected = this.__ondisconnected.map((f) => {
                  return f.bind(this);
                });
              }
            }
          };
          assignState();
          setTag();
          setProps22();
          setNode();
          setParent();
          assignProps();
          bindCallbacks();
          setOp();
        }
      };
      this.__subscribe = (callback, key, subInput, bound, target) => {
        const subscribeToFunction = (k, setTarget = (callback2, target2) => callback2, triggerCallback = callback) => {
          let sub = this.__node.state.subscribeEvent(k, triggerCallback, this, key);
          let trigger = this.__node.state.getEvent(k, sub);
          if (!trigger)
            return sub;
          trigger.source = this.__node.tag;
          if (key)
            trigger.key = key;
          trigger.target = setTarget(callback);
          if (bound)
            trigger.bound = bound;
          return sub;
        };
        const subscribeToGraph = (callback2) => {
          let fn = this.__node.graph.get(callback2);
          if (!fn && callback2.includes(".")) {
            let n = this.__node.graph.get(callback2.substring(0, callback2.lastIndexOf(".")));
            let key2 = callback2.substring(callback2.lastIndexOf(".") + 1);
            if (n && typeof n[key2] === "function")
              callback2 = (...args) => {
                return n[key2](...args);
              };
          }
        };
        if (key) {
          if (!this.__node.localState || !this.__node.localState[key]) {
            this.__addLocalState(this, key);
          }
          if (typeof callback === "string") {
            if (target) {
              if (this.__node.graph?.get(target)) {
                let n = this.__node.graph?.get(target);
                if (typeof n[callback] === "function") {
                  let fn = n[callback];
                  callback = (...inp) => {
                    fn(...inp);
                  };
                } else {
                  let k2 = callback;
                  let setter = (inp) => {
                    n[k2] = inp;
                  };
                  callback = setter;
                }
              }
            } else if (typeof this[callback] === "function") {
              let fn = this[callback];
              callback = (...inp) => {
                fn(...inp);
              };
            } else if (this.__node.graph?.get(callback))
              subscribeToGraph(callback);
            if (typeof callback !== "function")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        } else {
          if (typeof callback === "string") {
            if (this.__node.graph.get(callback))
              callback = this.__node.graph.get(callback);
            if (typeof callback !== "object")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "input" : this.__node.unique;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        }
      };
      this.__unsubscribe = (sub, key, unsubInput) => {
        if (key) {
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key, sub);
        } else
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "input" : this.__node.unique, sub);
      };
      this.__setOperator = (fn) => {
        fn = fn.bind(this);
        if (this.__args && this.__node.graph) {
          fn = wrapArgs(fn, this.__args, this.__node.graph);
        }
        let inpstr = `${this.__node.unique}input`;
        this.__operator = (...args) => {
          if (this.__node.state.triggers[inpstr])
            this.__node.state.setValue(inpstr, args);
          let result = fn(...args);
          if (this.__node.state.triggers[this.__node.unique]) {
            if (typeof result?.then === "function") {
              result.then((res2) => {
                if (res2 !== void 0)
                  this.__node.state.setValue(this.__node.unique, res2);
              }).catch(console.error);
            } else if (result !== void 0)
              this.__node.state.setValue(this.__node.unique, result);
          }
          return result;
        };
        if (this.__parent instanceof GraphNode && !this.__subscribedToParent) {
          if (this.__parent.__operator) {
            let sub = this.__parent.__subscribe(this);
            let ondelete = () => {
              this.__parent?.__unsubscribe(sub);
              delete this.__subscribedToParent;
            };
            this.__addOndisconnected(ondelete);
            this.__subscribedToParent = true;
          }
        }
        return this.__operator;
      };
      this.__addLocalState = (props, key) => {
        if (!props)
          return;
        if (!this.__node.localState) {
          this.__node.localState = {};
        }
        const localState = this.__node.localState;
        const initState = (props2, k) => {
          let str6 = this.__node.unique + "." + k;
          let inpstr = `${str6}input`;
          if (typeof props2[k] === "function" && k !== "__operator") {
            let fn = props2[k].bind(this);
            props2[k] = (...args) => {
              if (this.__node.state.triggers[inpstr])
                this.__node.state.setValue(inpstr, args);
              let result = fn(...args);
              if (this.__node.state.triggers[str6]) {
                if (typeof result?.then === "function") {
                  result.then((res2) => {
                    this.__node.state.triggerEvent(str6, res2);
                  }).catch(console.error);
                } else
                  this.__node.state.triggerEvent(str6, result);
              }
              return result;
            };
          } else {
            let get, set;
            if (this.__props?.[k]) {
              get = () => {
                return this.__props[k];
              };
              set = (v2) => {
                this.__props[k] = v2;
                if (this.__node.state.triggers[str6])
                  this.__node.state.triggerEvent(str6, v2);
              };
            } else {
              localState[k] = props2[k];
              get = () => {
                return localState[k];
              };
              set = (v2) => {
                localState[k] = v2;
                if (this.__node.state.triggers[str6])
                  this.__node.state.triggerEvent(str6, v2);
              };
            }
            const descriptor = { get, set, enumerable: true, configurable: true };
            Object.defineProperty(props2, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        };
        if (key)
          initState(props, key);
        else {
          for (let k in props) {
            initState(props, k);
          }
        }
      };
      this.__proxyObject = (obj) => {
        const allProps = getAllProperties(obj);
        for (const k of allProps) {
          if (typeof obj[k] === "function") {
            this[k] = (...args) => {
              return obj[k](...args);
            };
          } else {
            const descriptor = { get: () => {
              return obj[k];
            }, set: (value) => {
              obj[k] = value;
            }, enumerable: true, configurable: true };
            Object.defineProperty(this, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        }
      };
      this.__setProperties(properties, parent, graph3);
    }
    __addOnconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__onconnected)) {
        this.__onconnected.push(callback);
      } else if (typeof this.__onconnected === "function") {
        this.__onconnected = [callback, this.__onconnected];
      } else
        this.__onconnected = callback;
    }
    __addOndisconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__ondisconnected)) {
        this.__ondisconnected.push(callback);
      } else if (typeof this.__ondisconnected === "function") {
        this.__ondisconnected = [callback, this.__ondisconnected];
      } else
        this.__ondisconnected = callback;
    }
    __callConnected(node = this) {
      if (typeof this.__onconnected === "function") {
        this.__onconnected(this);
      } else if (Array.isArray(this.__onconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__onconnected.forEach(fn);
      }
    }
    __callDisconnected(node = this) {
      if (typeof this.__ondisconnected === "function")
        this.__ondisconnected(this);
      else if (Array.isArray(this.__ondisconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__ondisconnected.forEach(fn);
      }
    }
  };
  var Graph = class {
    constructor(options) {
      this.__node = { tag: `graph${Math.floor(Math.random() * 1e15)}`, unique: `${Math.random()}`, nodes: /* @__PURE__ */ new Map(), state, roots: {} };
      this.init = (options2) => {
        if (options2) {
          let cpy = Object.assign({}, options2);
          delete cpy.roots;
          recursivelyAssign(this.__node, cpy);
          if (options2.roots)
            this.load(options2.roots);
        }
      };
      this.load = (roots) => {
        function recursivelyAssignChildren(target, obj, inChildren = true, top = true) {
          if (top) {
            if (target)
              Object.assign(target, obj);
            else
              target = Object.assign({}, obj);
            recursivelyAssignChildren(target, obj, true, false);
          }
          if (obj.__children && !inChildren) {
            if (obj.__children?.constructor.name === "Object") {
              if (target.__children?.constructor.name === "Object")
                recursivelyAssignChildren(target.__children, obj.__children, true, false);
              else
                target.__children = recursivelyAssignChildren({}, obj.__children, true, false);
            } else {
              target.__children = obj.__children;
            }
          } else if (inChildren) {
            for (const key in obj) {
              target[key] = Object.assign({}, obj[key]);
              if (obj[key].__children) {
                recursivelyAssignChildren({}, obj[key].__children, false, false);
              }
            }
          }
          return target;
        }
        this.__node.roots = recursivelyAssignChildren(this.__node.roots ? this.__node.roots : {}, roots);
        let cpy = Object.assign({}, roots);
        if (cpy.__node)
          delete cpy.__node;
        let listeners = this.recursiveSet(cpy, this, void 0, roots);
        if (roots.__node) {
          if (!roots.__node.tag)
            roots.__node._tag = `roots${Math.floor(Math.random() * 1e15)}`;
          else if (!this.get(roots.__node.tag)) {
            let node = new GraphNode(roots, this, this);
            this.set(node.__node.tag, node);
            this.runLoaders(node, this, roots, roots.__node.tag);
            if (node.__listeners) {
              listeners[node.__node.tag] = node.__listeners;
            }
          }
        } else if (roots.__listeners) {
          this.setListeners(roots.__listeners);
        }
        this.setListeners(listeners);
        return cpy;
      };
      this.setLoaders = (loaders22, replace) => {
        if (replace)
          this.__node.loaders = loaders22;
        else
          Object.assign(this.__node.loaders, loaders22);
        return this.__node.loaders;
      };
      this.runLoaders = (node, parent, properties, key) => {
        for (const l in this.__node.loaders) {
          if (typeof this.__node.loaders[l] === "object") {
            if (this.__node.loaders[l].init)
              this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
            if (this.__node.loaders[l].connected)
              node.__addOnconnected(this.__node.loaders[l].connect);
            if (this.__node.loaders[l].disconnected)
              node.__addOndisconnected(this.__node.loaders[l].disconnect);
          } else if (typeof this.__node.loaders[l] === "function")
            this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
        }
      };
      this.add = (properties, parent) => {
        let listeners = {};
        if (typeof parent === "string")
          parent = this.get(parent);
        let instanced;
        if (typeof properties === "function") {
          if (isNativeClass(properties)) {
            if (properties.prototype instanceof GraphNode) {
              properties = properties.prototype.constructor(properties, parent, this);
              instanced = true;
            } else
              properties = new properties();
          } else
            properties = { __operator: properties };
        } else if (typeof properties === "string") {
          properties = this.__node.roots[properties];
        }
        if (!properties)
          return;
        if (!instanced) {
          let keys22 = Object.getOwnPropertyNames(properties);
          let cpy = {};
          for (const key of keys22) {
            cpy[key] = properties[key];
          }
          properties = cpy;
        }
        if (!properties.__node)
          properties.__node = {};
        properties.__node.initial = properties;
        if (typeof properties === "object" && (!properties?.__node?.tag || !this.get(properties.__node.tag))) {
          let node;
          if (instanced)
            node = properties;
          else
            node = new GraphNode(properties, parent, this);
          this.set(node.__node.tag, node);
          this.runLoaders(node, parent, properties, node.__node.tag);
          this.__node.roots[node.__node.tag] = properties;
          if (node.__children) {
            node.__children = Object.assign({}, node.__children);
            this.recursiveSet(node.__children, node, listeners, node.__children);
          }
          if (node.__listeners) {
            listeners[node.__node.tag] = Object.assign({}, node.__listeners);
            for (const key in node.__listeners) {
              let listener = node.__listeners[key];
              if (node[key]) {
                delete listeners[node.__node.tag][key];
                listeners[node.__node.tag][node.__node.tag + "." + key] = listener;
              }
              if (typeof listener === "string") {
                if (node.__children?.[listener]) {
                  listeners[node.__node.tag][key] = node.__node.tag + "." + listener;
                } else if (parent instanceof GraphNode && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                  listeners[node.__node.tag][key] = parent.__node.tag;
                }
              }
            }
          }
          this.setListeners(listeners);
          node.__callConnected();
          return node;
        }
        return;
      };
      this.recursiveSet = (t22, parent, listeners = {}, origin) => {
        let keys22 = Object.getOwnPropertyNames(origin);
        for (const key of keys22) {
          if (key.includes("__"))
            continue;
          let p2 = origin[key];
          if (Array.isArray(p2))
            continue;
          let instanced;
          if (typeof p2 === "function") {
            if (isNativeClass(p2)) {
              p2 = new p2();
              if (p2 instanceof GraphNode) {
                p2 = p2.prototype.constructor(p2, parent, this);
                instanced = true;
              }
            } else
              p2 = { __operator: p2 };
          } else if (typeof p2 === "string") {
            if (this.__node.nodes.get(p2))
              p2 = this.__node.nodes.get(p2);
            else
              p2 = this.__node.roots[p2];
          } else if (typeof p2 === "boolean") {
            if (this.__node.nodes.get(key))
              p2 = this.__node.nodes.get(key);
            else
              p2 = this.__node.roots[key];
          }
          if (typeof p2 === "object") {
            if (!instanced && !(p2 instanceof GraphNode)) {
              let keys32 = Object.getOwnPropertyNames(p2);
              let cpy = {};
              for (const key2 of keys32) {
                cpy[key2] = p2[key2];
              }
              p2 = cpy;
            }
            if (!p2.__node)
              p2.__node = {};
            if (!p2.__node.tag)
              p2.__node.tag = key;
            if (!p2.__node.initial)
              p2.__node.initial = t22[key];
            if (this.get(p2.__node.tag) && !(!(parent instanceof Graph) && parent?.__node) || parent?.__node && this.get(parent.__node.tag + "." + p2.__node.tag))
              continue;
            let node;
            let newnode = false;
            if (instanced || p2 instanceof GraphNode) {
              node = p2;
            } else {
              node = new GraphNode(p2, parent, this);
              newnode = true;
            }
            if (!newnode && p2 instanceof GraphNode && !instanced && parent instanceof GraphNode) {
              let sub = this.subscribe(parent.__node.tag, node.__node.tag);
              let ondelete = (node2) => {
                this.unsubscribe(parent.__node.tag, sub);
              };
              node.__addOndisconnected(ondelete);
            } else {
              this.set(node.__node.tag, node);
              this.runLoaders(node, parent, t22[key], key);
              t22[key] = node;
              this.__node.roots[node.__node.tag] = p2;
              if (node.__children) {
                node.__children = Object.assign({}, node.__children);
                this.recursiveSet(node.__children, node, listeners, node.__children);
              }
              if (node.__listeners) {
                listeners[node.__node.tag] = Object.assign({}, node.__listeners);
                for (const key2 in node.__listeners) {
                  let listener = node.__listeners[key2];
                  let k = key2;
                  if (node[key2]) {
                    delete listeners[node.__node.tag][key2];
                    k = node.__node.tag + "." + key2;
                    listeners[node.__node.tag][k] = listener;
                  }
                  if (typeof listener === "string") {
                    if (node.__children?.[listener]) {
                      listeners[node.__node.tag][k] = node.__node.tag + "." + listener;
                    } else if (parent instanceof GraphNode && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                      listeners[node.__node.tag][k] = parent.__node.tag;
                    }
                  }
                }
              }
              node.__callConnected();
            }
          }
        }
        return listeners;
      };
      this.remove = (node, clearListeners = true) => {
        this.unsubscribe(node);
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode) {
          this.delete(node.__node.tag);
          delete this.__node.roots[node.__node.tag];
          if (clearListeners) {
            this.clearListeners(node);
          }
          node.__callDisconnected();
          const recursiveRemove = (t22) => {
            for (const key in t22) {
              this.unsubscribe(t22[key]);
              this.delete(t22[key].__node.tag);
              delete this.__node.roots[t22[key].__node.tag];
              this.delete(key);
              delete this.__node.roots[key];
              t22[key].__node.tag = t22[key].__node.tag.substring(t22[key].__node.tag.lastIndexOf(".") + 1);
              if (clearListeners) {
                this.clearListeners(t22[key]);
              }
              t22[key].__callDisconnected();
              if (t22[key].__children) {
                recursiveRemove(t22[key].__children);
              }
            }
          };
          if (node.__children) {
            recursiveRemove(node.__children);
          }
        }
        if (node?.__node.tag && node?.__parent) {
          delete node?.__parent;
          node.__node.tag = node.__node.tag.substring(node.__node.tag.indexOf(".") + 1);
        }
        if (node?.__node.graph)
          node.__node.graph = void 0;
        return node;
      };
      this.run = (node, ...args) => {
        if (typeof node === "string") {
          let nd = this.get(node);
          if (!nd && node.includes(".")) {
            nd = this.get(node.substring(0, node.lastIndexOf(".")));
            if (typeof nd?.[node.substring(node.lastIndexOf(".") + 1)] === "function")
              return nd[node.substring(node.lastIndexOf(".") + 1)](...args);
          } else if (nd?.__operator)
            return nd.__operator(...args);
        }
        if (node?.__operator) {
          return node?.__operator(...args);
        }
      };
      this.setListeners = (listeners) => {
        for (const key in listeners) {
          let node = this.get(key);
          if (!node)
            continue;
          if (typeof listeners[key] === "object") {
            for (const k in listeners[key]) {
              let n = this.get(k);
              let sub;
              if (typeof listeners[key][k] !== "object")
                listeners[key][k] = { __callback: listeners[key][k] };
              else if (!listeners[key][k].__callback) {
                for (const kk in listeners[key][k]) {
                  if (typeof listeners[key][k][kk] !== "object") {
                    listeners[key][k][kk] = { __callback: listeners[key][k][kk] };
                    if (node.__operator && (listeners[key][k][kk].__callback === true || typeof listeners[key][k][kk].__callback === "undefined"))
                      listeners[key][k][kk].__callback = node.__operator;
                  }
                  let nn = this.get(kk);
                  if (!nn) {
                    let tag = k.substring(0, k.lastIndexOf("."));
                    nn = this.get(tag);
                    if (nn) {
                      let prop = k.substring(k.lastIndexOf(".") + 1);
                      if (typeof node.__listeners[k][kk] !== "object")
                        node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState, target: key, bound: k };
                      sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k][kk].__args, prop, listeners[key][k][kk].inputState, key, k);
                      node.__listeners[k][kk].sub = sub;
                    }
                  } else {
                    if (typeof node.__listeners[k][kk] !== "object")
                      node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState, target: key, bound: k };
                    sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                    node.__listeners[k][kk].sub = sub;
                  }
                }
              }
              if ("__callback" in listeners[key][k]) {
                if (listeners[key][k].__callback === true || typeof listeners[key][k].__callback === "undefined")
                  listeners[key][k].__callback = node.__operator;
                if (typeof listeners[key][k].__callback === "function")
                  listeners[key][k].__callback = listeners[key][k].__callback.bind(node);
                if (typeof node.__listeners !== "object")
                  node.__listeners = {};
                if (!n) {
                  let tag = k.substring(0, k.lastIndexOf("."));
                  n = this.get(tag);
                  if (n) {
                    if (typeof node.__listeners[k] !== "object")
                      node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState, target: key, bound: k };
                    sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, k.substring(k.lastIndexOf(".") + 1), listeners[key][k].inputState, key, k);
                    node.__listeners[k].sub = sub;
                  }
                } else {
                  if (typeof node.__listeners[k] !== "object")
                    node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState, target: key, bound: k };
                  sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                  node.__listeners[k].sub = sub;
                }
              }
            }
          }
        }
      };
      this.clearListeners = (node, listener) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node?.__listeners) {
          for (const key in node.__listeners) {
            if (listener && key !== listener)
              continue;
            if (typeof node.__listeners[key]?.sub !== "number")
              continue;
            let n = this.get(key);
            if (!n) {
              n = this.get(key.substring(0, key.lastIndexOf(".")));
              if (n) {
                if (typeof node.__listeners[key] === "object" && !node.__listeners[key]?.__callback) {
                  for (const k in node.__listeners[key]) {
                    if (typeof node.__listeners[key][k]?.sub === "number") {
                      this.unsubscribe(n, node.__listeners[key][k].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key][k].inputState);
                      node.__listeners[key][k].sub = void 0;
                    }
                  }
                } else if (typeof node.__listeners[key]?.sub === "number") {
                  this.unsubscribe(n, node.__listeners[key].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key].inputState);
                  node.__listeners[key].sub = void 0;
                }
              }
            } else {
              if (typeof !node.__listeners[key]?.__callback === "number") {
                for (const k in node.__listeners[key]) {
                  if (node.__listeners[key][k]?.sub) {
                    this.unsubscribe(n, node.__listeners[key][k].sub, void 0, node.__listeners[key][k].inputState);
                    node.__listeners[key][k].sub = void 0;
                  }
                }
              } else if (typeof node.__listeners[key]?.sub === "number") {
                this.unsubscribe(n, node.__listeners[key].sub, void 0, node.__listeners[key].inputState);
                node.__listeners[key].sub = void 0;
              }
            }
          }
        }
      };
      this.get = (tag) => {
        return this.__node.nodes.get(tag);
      };
      this.set = (tag, node) => {
        return this.__node.nodes.set(tag, node);
      };
      this.delete = (tag) => {
        return this.__node.nodes.delete(tag);
      };
      this.getProps = (node, getInitial) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode) {
          let cpy;
          if (getInitial)
            cpy = Object.assign({}, this.__node.roots[node.__node.tag]);
          else {
            cpy = Object.assign({}, node);
            for (const key in cpy) {
              if (key.includes("__"))
                delete cpy[key];
            }
          }
        }
      };
      this.subscribe = (nodeEvent, onEvent, args, key, subInput, target, bound) => {
        let nd = nodeEvent;
        if (typeof nodeEvent === "string") {
          nd = this.get(nodeEvent);
          if (!nd && nodeEvent.includes(".")) {
            nd = this.get(nodeEvent.substring(0, nodeEvent.lastIndexOf(".")));
            key = nodeEvent.substring(nodeEvent.lastIndexOf(".") + 1);
          }
        }
        if (target instanceof GraphNode)
          target = target.__node.tag;
        if (typeof onEvent === "string") {
          let key2 = onEvent;
          let setOnEventFromString = (onEvent2) => {
            if (this.get(onEvent2)?.__operator) {
              let node = this.get(onEvent2);
              onEvent2 = function(...inp) {
                return node.__operator(...inp);
              };
            } else if (onEvent2.includes(".")) {
              let n = this.get(onEvent2.substring(0, onEvent2.lastIndexOf(".")));
              let key3 = onEvent2.substring(onEvent2.lastIndexOf(".") + 1);
              if (typeof n[key3] === "function") {
                if (n[key3] instanceof GraphNode)
                  onEvent2 = n[key3];
                else
                  onEvent2 = function(...inp) {
                    return n[key3](...inp);
                  };
              } else {
                onEvent2 = function(inp) {
                  n[key3] = inp;
                  return n[key3];
                };
              }
            }
            return onEvent2;
          };
          if (target) {
            let node = this.get(target);
            if (typeof node?.[onEvent] === "function") {
              onEvent = function(...inp) {
                return node[key2](...inp);
              };
            } else if (node[key2]) {
              if (node[key2] instanceof GraphNode)
                onEvent = node[key2];
              else
                onEvent = function(inp) {
                  node[key2] = inp;
                  return node[key2];
                };
            } else {
              onEvent = setOnEventFromString(onEvent);
            }
          } else {
            onEvent = setOnEventFromString(onEvent);
          }
        }
        if ((typeof onEvent === "function" || onEvent instanceof GraphNode) && args) {
          if (onEvent instanceof GraphNode && onEvent.__operator)
            onEvent = function(inp) {
              return onEvent.__operator(inp);
            };
          onEvent = wrapArgs(onEvent, args, this);
        }
        let sub;
        if (nd instanceof GraphNode) {
          const doSub = () => {
            sub = nd.__subscribe(onEvent, key, subInput, target, bound);
            if (target && this.get(target) && this.get(target).__listeners[bound]) {
              if (typeof this.get(target).__listeners[bound] !== "object") {
                this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
              }
            }
            this.get(target).__listeners[bound].sub = sub;
            let ondelete = () => {
              if (sub !== void 0)
                nd.__unsubscribe(sub, key, subInput);
              sub = void 0;
            };
            nd.__addOndisconnected(() => {
              ondelete();
              nd.__addOnconnected(() => {
                if (sub === void 0 && nd.__node.graph.__node.tag === this.__node.tag)
                  doSub();
              });
            });
            if (typeof onEvent === "string" && this.get(onEvent))
              onEvent = this.get(onEvent);
            if (onEvent instanceof GraphNode) {
              onEvent.__addOndisconnected(() => {
                ondelete();
              });
            }
          };
          doSub();
        } else if (typeof nodeEvent === "string") {
          let node = this.get(nodeEvent);
          if (node) {
            if (onEvent instanceof GraphNode && onEvent.__operator) {
              const doSub = () => {
                sub = node.__subscribe(onEvent.__operator, key, subInput, target, bound);
                if (target && this.get(target) && this.get(target).__listeners[bound]) {
                  if (typeof this.get(target).__listeners[bound] !== "object") {
                    this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
                  }
                  this.get(target).__listeners[bound].sub = sub;
                }
                let ondelete = () => {
                  if (sub !== void 0)
                    node.__unsubscribe(sub, key, subInput);
                };
                node.__addOndisconnected(() => {
                  ondelete();
                  node.__addOnconnected(() => {
                    if (sub === void 0 && node.__node.graph.__node.tag === this.__node.tag)
                      doSub();
                  });
                });
                onEvent.__addOndisconnected(ondelete);
              };
              doSub();
            } else if (typeof onEvent === "function" || typeof onEvent === "string") {
              const doSub = () => {
                sub = node.__subscribe(onEvent, key, subInput, target, bound);
                if (target && this.get(target) && this.get(target).__listeners[bound]) {
                  if (typeof this.get(target).__listeners[bound] !== "object") {
                    this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
                  }
                  this.get(target).__listeners[bound].sub = sub;
                }
                let ondelete = () => {
                  if (sub !== void 0)
                    node.__unsubscribe(sub, key, subInput);
                  sub = void 0;
                };
                node.__addOndisconnected(() => {
                  ondelete();
                  node.__addOnconnected(() => {
                    if (sub === void 0 && node.__node.graph.__node.tag === this.__node.tag)
                      doSub();
                  });
                });
                if (typeof onEvent === "string" && this.get(onEvent))
                  this.get(onEvent).__addOndisconnected(ondelete);
                this.__node.state.getEvent(node.__node.unique, sub).source = nodeEvent;
              };
              doSub();
            }
          } else {
            if (typeof onEvent === "string")
              onEvent = this.__node.nodes.get(onEvent).__operator;
            if (typeof onEvent === "function")
              sub = this.__node.state.subscribeEvent(nodeEvent, onEvent);
          }
        }
        return sub;
      };
      this.unsubscribe = (node, sub, key, subInput) => {
        if (node instanceof GraphNode) {
          return node.__unsubscribe(sub, key, subInput);
        } else
          return this.get(node)?.__unsubscribe(sub, key, subInput);
      };
      this.setState = (update) => {
        this.__node.state.setState(update);
      };
      this.init(options);
    }
  };
  function recursivelyAssign(target, obj) {
    for (const key in obj) {
      if (obj[key]?.constructor.name === "Object") {
        if (target[key]?.constructor.name === "Object")
          recursivelyAssign(target[key], obj[key]);
        else
          target[key] = recursivelyAssign({}, obj[key]);
      } else {
        target[key] = obj[key];
      }
    }
    return target;
  }
  function getAllProperties(obj) {
    var allProps = [], curr = obj;
    do {
      var props = Object.getOwnPropertyNames(curr);
      let fn = function(prop) {
        if (allProps.indexOf(prop) === -1)
          allProps.push(prop);
      };
      props.forEach(fn);
    } while (curr = Object.getPrototypeOf(curr));
    return allProps;
  }
  function isNativeClass(thing) {
    return isFunction(thing) === "class";
  }
  function isFunction(x3) {
    const res2 = typeof x3 === "function" ? x3.prototype ? Object.getOwnPropertyDescriptor(x3, "prototype")?.writable ? "function" : "class" : x3.constructor.name === "AsyncFunction" ? "async" : "arrow" : "";
    return res2;
  }
  var wrapArgs = (callback, argOrder, graph3) => {
    let args = [];
    let getCallbackFromString = (a) => {
      if (graph3.get(a)?.__operator) {
        let node = graph3.get(a);
        return (...inp) => {
          node.__operator(...inp);
        };
      } else if (a.includes(".")) {
        let split = a.split(".");
        let popped = split.pop();
        let joined = split.join(".");
        let node = graph3.get(joined);
        if (typeof graph3.get(joined)?.[popped] === "function") {
          return (...inp) => {
            return node[popped](...inp);
          };
        } else
          return () => {
            return node[popped];
          };
      } else if (graph3.get(a)) {
        let node = graph3.get(a);
        return () => {
          return node;
        };
      } else {
        let arg = a;
        return () => {
          return arg;
        };
      }
    };
    let forArg = (a, i22) => {
      if (a === "__output" || a === "__input") {
        args[i22] = (inp) => {
          return inp;
        };
      } else if (typeof a === "string") {
        args[i22] = getCallbackFromString(a);
      } else if (typeof a === "function") {
        let fn2 = a;
        args[i22] = (...inp) => {
          return fn2(...inp);
        };
      } else if (typeof a === "object" && a.__input) {
        let recursivelyCreateCallback = function(c) {
          let input = c.__input;
          if (typeof c.__input === "string") {
            input = getCallbackFromString(c.__input);
          }
          if (c.__args) {
            input = wrapArgs(input, c.__args, graph3);
          }
          if (c.__output) {
            let output = c.__output;
            if (typeof c.__output === "string") {
              output = getCallbackFromString(output);
            } else if (typeof a.__output === "object") {
              output = recursivelyCreateCallback(output);
            }
            if (typeof output === "function") {
              let fn2 = input;
              input = (...inp) => {
                return output(fn2(...inp));
              };
            }
          }
          return input;
        };
        args[i22] = recursivelyCreateCallback(a);
      } else {
        let arg = a;
        args[i22] = () => {
          return arg;
        };
      }
    };
    argOrder.forEach(forArg);
    if (typeof callback === "string")
      callback = getCallbackFromString(callback);
    let fn = callback;
    callback = function(...inp) {
      let mapArg = (arg) => {
        return arg(...inp);
      };
      return fn(...args.map(mapArg));
    };
    return callback;
  };
  var backprop = (node, parent, graph3) => {
    if (node.__node.backward && parent instanceof GraphNode) {
      graph3.setListeners({ [parent.__node.tag]: { [node.__node.tag]: parent } });
    }
  };
  var loop = (node, parent, graph3) => {
    if (node.__operator && !node.__node.looperSet) {
      if (typeof node.__node.delay === "number") {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            setTimeout(async () => {
              res2(await fn(...args));
            }, node.__node.delay);
          });
        });
      } else if (node.__node.frame === true) {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            requestAnimationFrame(async () => {
              res2(await fn(...args));
            });
          });
        });
      }
      if (typeof node.__node.repeat === "number" || typeof node.__node.recursive === "number") {
        let fn = node.__operator;
        node.__setOperator(async (...args) => {
          let i22 = node.__node.repeat ? node.__node.repeat : node.__node.recursive;
          let result;
          let repeater = async (tick, ...inp) => {
            while (tick > 0) {
              if (node.__node.delay || node.__node.frame) {
                fn(...inp).then(async (res2) => {
                  if (node.__node.recursive) {
                    await repeater(tick, res2);
                  } else
                    await repeater(tick, ...inp);
                });
                break;
              } else
                result = await fn(...args);
              tick--;
            }
          };
          await repeater(i22, ...args);
          return result;
        });
      }
      if (node.__node.loop && typeof node.__node.loop === "number") {
        node.__node.looperSet = true;
        let fn = node.__operator;
        let time = node.__node.loop;
        node.__setOperator((...args) => {
          if (!("looping" in node.__node))
            node.__node.looping = true;
          if (node.__node.looping) {
            let last = performance.now();
            fn(...args);
            setTimeout(() => {
              let now = performance.now();
              let overshoot = now - last - node.__node.loop;
              if (overshoot > 0)
                time = node.__node.loop - overshoot;
              else
                time = node.__node.loop;
              if (time <= 0)
                time = node.__node.loop;
              node.__operator(...args);
            }, time);
          }
        });
        if (node.__node.looping)
          node.__operator();
        let ondelete = (node2) => {
          if (node2.__node.looping)
            node2.__node.looping = false;
        };
        node.__addOndisconnected(ondelete);
      }
    }
  };
  var animate = (node, parent, graph3) => {
    if (node.__node.animate === true || node.__animation) {
      let fn = node.__operator;
      node.__setOperator((...args) => {
        if (!("animating" in node.__node))
          node.__node.animating = true;
        if (node.__node.animating) {
          if (typeof node.__animation === "function")
            node.__animation(...args);
          else
            fn(...args);
          requestAnimationFrame(() => {
            node.__operator(...args);
          });
        }
      });
      if (node.__node.animating || (!("animating" in node.__node) || node.__node.animating) && node.__animation)
        setTimeout(() => {
          requestAnimationFrame(node.__operator);
        }, 10);
      let ondelete = (node2) => {
        if (node2.__node.animating)
          node2.__node.animating = false;
      };
      node.__addOndisconnected(ondelete);
    }
  };
  var branching = (node, parent, graph3) => {
    if (typeof node.__branch === "object" && node.__operator && !node.__branchApplied) {
      let fn = node.__operator;
      node.__branchApplied = true;
      node.__operator = (...args) => {
        let result = fn(...args);
        for (const key in node.__branch) {
          let triggered = () => {
            if (typeof node.__branch[key].then === "function") {
              node.__branch[key].then(result);
            } else if (node.__branch[key].then instanceof GraphNode && node.__branch[key].then.__operator) {
              node.__branch[key].then.__operator(result);
            } else
              result = node.__branch[key].then;
          };
          if (typeof node.__branch[key].if === "function") {
            if (node.__branch[key].if(result) == true) {
              triggered();
            }
          } else if (node.__branch[key].if === result) {
            triggered();
          }
        }
        return result;
      };
    }
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].branch && !node.__listeners[key].branchApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].branchApplied = true;
            node.__listeners.callback = (ret) => {
              let triggered = () => {
                if (typeof node.__listeners[key].branch.then === "function") {
                  ret = node.__listeners[key].branch.then(ret);
                } else if (node.__listeners[key].branch.then instanceof GraphNode && node.__listeners[key].branch.then.__operator) {
                  ret = node.__listeners[key].branch.then.__operator(ret);
                } else
                  ret = node.__listeners[key].branch.then;
              };
              if (typeof node.__listeners[key].branch.if === "function") {
                if (node.__listeners[key].branch.if(ret)) {
                  triggered();
                }
              } else if (node.__listeners[key].branch.if === ret) {
                triggered();
              }
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var triggerListenerOncreate = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].oncreate) {
            node.__listeners[key].callback(node.__listeners[key].oncreate);
          }
        }
      }
    }
  };
  var bindListener = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].binding === "object") {
            node.__listeners.callback = node.__listeners.callback.bind(node.__listeners[key].binding);
          }
        }
      }
    }
  };
  var transformListenerResult = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].transform === "function" && !node.__listeners[key].transformApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].transformApplied = true;
            node.__listeners.callback = (ret) => {
              ret = node.__listeners[key].transform(ret);
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var substitute__operator = (node, parent, graph3) => {
    if (node.post && !node.__operator) {
      node.__setOperator(node.post);
    } else if (!node.__operator && typeof node.get == "function") {
      node.__setOperator(node.get);
    }
    if (!node.get && node.__operator) {
      node.get = node.__operator;
    }
    if (node.aliases) {
      node.aliases.forEach((a) => {
        graph3.set(a, node);
        let ondelete = (node2) => {
          graph3.__node.nodes.delete(a);
        };
        node.__addOndisconnected(ondelete);
      });
    }
    if (typeof graph3.__node.roots?.[node.__node.tag] === "object" && node.get)
      graph3.__node.roots[node.__node.tag].get = node.get;
  };
  var loaders = { backprop, loop, animate, branching, triggerListenerOncreate, bindListener, transformListenerResult, substitute__operator };
  var stringifyWithCircularRefs = function() {
    const refs = /* @__PURE__ */ new Map();
    const parents = [];
    const path = ["this"];
    function clear() {
      refs.clear();
      parents.length = 0;
      path.length = 1;
    }
    function updateParents(key, value) {
      var idx = parents.length - 1;
      var prev = parents[idx];
      if (typeof prev === "object") {
        if (prev[key] === value || idx === 0) {
          path.push(key);
          parents.push(value.pushed);
        } else {
          while (idx-- >= 0) {
            prev = parents[idx];
            if (typeof prev === "object") {
              if (prev[key] === value) {
                idx += 2;
                parents.length = idx;
                path.length = idx;
                --idx;
                parents[idx] = value;
                path[idx] = key;
                break;
              }
            }
            idx--;
          }
        }
      }
    }
    function checkCircular(key, value) {
      if (value != null) {
        if (typeof value === "object") {
          if (key) {
            updateParents(key, value);
          }
          let other = refs.get(value);
          if (other) {
            return "[Circular Reference]" + other;
          } else {
            refs.set(value, path.join("."));
          }
        }
      }
      return value;
    }
    return function stringifyWithCircularRefs22(obj, space) {
      try {
        parents.push(obj);
        return JSON.stringify(obj, checkCircular, space);
      } finally {
        clear();
      }
    };
  }();
  if (JSON.stringifyWithCircularRefs === void 0) {
    JSON.stringifyWithCircularRefs = stringifyWithCircularRefs;
  }
  var stringifyFast = function() {
    const refs = /* @__PURE__ */ new Map();
    const parents = [];
    const path = ["this"];
    function clear() {
      refs.clear();
      parents.length = 0;
      path.length = 1;
    }
    function updateParents(key, value) {
      var idx = parents.length - 1;
      if (parents[idx]) {
        var prev = parents[idx];
        if (typeof prev === "object") {
          if (prev[key] === value || idx === 0) {
            path.push(key);
            parents.push(value.pushed);
          } else {
            while (idx-- >= 0) {
              prev = parents[idx];
              if (typeof prev === "object") {
                if (prev[key] === value) {
                  idx += 2;
                  parents.length = idx;
                  path.length = idx;
                  --idx;
                  parents[idx] = value;
                  path[idx] = key;
                  break;
                }
              }
              idx++;
            }
          }
        }
      }
    }
    function checkValues(key, value) {
      let val;
      if (value != null) {
        if (typeof value === "object") {
          let c = value.constructor.name;
          if (key && c === "Object") {
            updateParents(key, value);
          }
          let other = refs.get(value);
          if (other) {
            return "[Circular Reference]" + other;
          } else {
            refs.set(value, path.join("."));
          }
          if (c === "Array") {
            if (value.length > 20) {
              val = value.slice(value.length - 20);
            } else
              val = value;
          } else if (c.includes("Set")) {
            val = Array.from(value);
          } else if (c !== "Object" && c !== "Number" && c !== "String" && c !== "Boolean") {
            val = "instanceof_" + c;
          } else if (c === "Object") {
            let obj = {};
            for (const prop in value) {
              if (value[prop] == null) {
                obj[prop] = value[prop];
              } else if (Array.isArray(value[prop])) {
                if (value[prop].length > 20)
                  obj[prop] = value[prop].slice(value[prop].length - 20);
                else
                  obj[prop] = value[prop];
              } else if (value[prop].constructor.name === "Object") {
                obj[prop] = {};
                for (const p2 in value[prop]) {
                  if (Array.isArray(value[prop][p2])) {
                    if (value[prop][p2].length > 20)
                      obj[prop][p2] = value[prop][p2].slice(value[prop][p2].length - 20);
                    else
                      obj[prop][p2] = value[prop][p2];
                  } else {
                    if (value[prop][p2] != null) {
                      let con = value[prop][p2].constructor.name;
                      if (con.includes("Set")) {
                        obj[prop][p2] = Array.from(value[prop][p2]);
                      } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                        obj[prop][p2] = "instanceof_" + con;
                      } else {
                        obj[prop][p2] = value[prop][p2];
                      }
                    } else {
                      obj[prop][p2] = value[prop][p2];
                    }
                  }
                }
              } else {
                let con = value[prop].constructor.name;
                if (con.includes("Set")) {
                  obj[prop] = Array.from(value[prop]);
                } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                  obj[prop] = "instanceof_" + con;
                } else {
                  obj[prop] = value[prop];
                }
              }
            }
            val = obj;
          } else {
            val = value;
          }
        } else {
          val = value;
        }
      }
      return val;
    }
    return function stringifyFast22(obj, space) {
      parents.push(obj);
      let res2 = JSON.stringify(obj, checkValues, space);
      clear();
      return res2;
    };
  }();
  if (JSON.stringifyFast === void 0) {
    JSON.stringifyFast = stringifyFast;
  }
  var Service = class extends Graph {
    constructor(options) {
      super({ ...options, loaders: options?.loaders ? Object.assign({ ...loaders }, options.loaders) : { ...loaders } });
      this.name = `service${Math.floor(Math.random() * 1e15)}`;
      this.addServices = (services) => {
        for (const s in services) {
          if (typeof services[s] === "function")
            services[s] = new services[s]();
          if (services[s]?.__node?.loaders)
            Object.assign(this.__node.loaders, services[s].__node.loaders);
          if (services[s]?.__node?.nodes) {
            services[s].__node.nodes.forEach((n, tag) => {
              if (!this.get(tag)) {
                this.set(tag, n);
              } else
                this.set(s + "." + tag, n);
            });
            this.__node.nodes.forEach((n, k) => {
              if (!services[s].__node.nodes.get(k))
                services[s].__node.nodes.set(k, n);
            });
            let set = this.set;
            this.set = (tag, node) => {
              services[s].set(tag, node);
              return set(tag, node);
            };
            let del = this.delete;
            this.delete = (tag) => {
              services[s].delete(tag);
              return del(tag);
            };
          } else if (typeof services[s] === "object") {
            this.load(services[s]);
          }
        }
      };
      this.handleMethod = (route, method, args) => {
        let m = method.toLowerCase();
        let src = this.__node.nodes.get(route);
        if (!src) {
          src = this.__node.roots[route];
        }
        if (src?.[m]) {
          if (typeof src[m] !== "function") {
            if (args) {
              if (Array.isArray(args) && args.length === 1)
                src[m] = args[0];
              else
                src[m] = args;
              return;
            }
            return src[m];
          } else {
            if (Array.isArray(args))
              return src[m](...args);
            else
              return src[m](args);
          }
        } else
          return this.handleServiceMessage({ route, args, method });
      };
      this.transmit = (...args) => {
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.receive = (...args) => {
        if (args[0]) {
          if (typeof args[0] === "string") {
            let substr = args[0].substring(0, 8);
            if (substr.includes("{") || substr.includes("[")) {
              if (substr.includes("\\"))
                args[0] = args[0].replace(/\\/g, "");
              if (args[0][0] === '"') {
                args[0] = args[0].substring(1, args[0].length - 1);
              }
              ;
              args[0] = JSON.parse(args[0]);
            }
          }
        }
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.pipe = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode) {
          if (callback)
            return this.subscribe(source, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.subscribe(source, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.subscribe(source, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.pipeOnce = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode) {
          if (callback)
            return source.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.terminate = (...args) => {
      };
      this.isTypedArray = isTypedArray;
      this.recursivelyAssign = recursivelyAssign2;
      this.spliceTypedArray = spliceTypedArray;
      this.ping = () => {
        console.log("pinged!");
        return "pong";
      };
      this.echo = (...args) => {
        this.transmit(...args);
        return args;
      };
      this.log = (...args) => {
        console.log(...args);
        return true;
      };
      this.error = (...args) => {
        console.error(...args);
        return true;
      };
      if (options?.services)
        this.addServices(options.services);
      this.load(this);
    }
    handleServiceMessage(message) {
      let call;
      if (typeof message === "object") {
        if (message.route)
          call = message.route;
        else if (message.node)
          call = message.node;
      }
      if (call) {
        if (Array.isArray(message.args))
          return this.run(call, ...message.args);
        else
          return this.run(call, message.args);
      } else
        return message;
    }
    handleGraphNodeCall(route, args) {
      if (!route)
        return args;
      if (args?.args) {
        this.handleServiceMessage(args);
      } else if (Array.isArray(args))
        return this.run(route, ...args);
      else
        return this.run(route, args);
    }
  };
  function isTypedArray(x3) {
    return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
  }
  var recursivelyAssign2 = (target, obj) => {
    for (const key in obj) {
      if (obj[key]?.constructor.name === "Object" && !Array.isArray(obj[key])) {
        if (target[key]?.constructor.name === "Object" && !Array.isArray(target[key]))
          recursivelyAssign2(target[key], obj[key]);
        else
          target[key] = recursivelyAssign2({}, obj[key]);
      } else
        target[key] = obj[key];
    }
    return target;
  };
  function spliceTypedArray(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let ta;
    if (s.length > 0 || e?.length > 0)
      ta = new arr.constructor(s.length + e.length);
    if (ta) {
      if (s.length > 0)
        ta.set(s);
      if (e && e.length > 0)
        ta.set(e, s.length);
    }
    return ta;
  }
  var sjcl = { cipher: {}, hash: {}, keyexchange: {}, mode: {}, misc: {}, codec: {}, exception: { corrupt: function(a) {
    this.toString = function() {
      return "CORRUPT: " + this.message;
    };
    this.message = a;
  }, invalid: function(a) {
    this.toString = function() {
      return "INVALID: " + this.message;
    };
    this.message = a;
  }, bug: function(a) {
    this.toString = function() {
      return "BUG: " + this.message;
    };
    this.message = a;
  }, notReady: function(a) {
    this.toString = function() {
      return "NOT READY: " + this.message;
    };
    this.message = a;
  } } };
  sjcl.cipher.aes = function(a) {
    this.s[0][0][0] || this.O();
    var b, c, d2, e, f = this.s[0][4], g2 = this.s[1];
    b = a.length;
    var h = 1;
    if (4 !== b && 6 !== b && 8 !== b)
      throw new sjcl.exception.invalid("invalid aes key size");
    this.b = [d2 = a.slice(0), e = []];
    for (a = b; a < 4 * b + 28; a++) {
      c = d2[a - 1];
      if (0 === a % b || 8 === b && 4 === a % b)
        c = f[c >>> 24] << 24 ^ f[c >> 16 & 255] << 16 ^ f[c >> 8 & 255] << 8 ^ f[c & 255], 0 === a % b && (c = c << 8 ^ c >>> 24 ^ h << 24, h = h << 1 ^ 283 * (h >> 7));
      d2[a] = d2[a - b] ^ c;
    }
    for (b = 0; a; b++, a--)
      c = d2[b & 3 ? a : a - 4], e[b] = 4 >= a || 4 > b ? c : g2[0][f[c >>> 24]] ^ g2[1][f[c >> 16 & 255]] ^ g2[2][f[c >> 8 & 255]] ^ g2[3][f[c & 255]];
  };
  sjcl.cipher.aes.prototype = { encrypt: function(a) {
    return t(this, a, 0);
  }, decrypt: function(a) {
    return t(this, a, 1);
  }, s: [[[], [], [], [], []], [[], [], [], [], []]], O: function() {
    var a = this.s[0], b = this.s[1], c = a[4], d2 = b[4], e, f, g2, h = [], k = [], l, n, m, p2;
    for (e = 0; 256 > e; e++)
      k[(h[e] = e << 1 ^ 283 * (e >> 7)) ^ e] = e;
    for (f = g2 = 0; !c[f]; f ^= l || 1, g2 = k[g2] || 1)
      for (m = g2 ^ g2 << 1 ^ g2 << 2 ^ g2 << 3 ^ g2 << 4, m = m >> 8 ^ m & 255 ^ 99, c[f] = m, d2[m] = f, n = h[e = h[l = h[f]]], p2 = 16843009 * n ^ 65537 * e ^ 257 * l ^ 16843008 * f, n = 257 * h[m] ^ 16843008 * m, e = 0; 4 > e; e++)
        a[e][f] = n = n << 24 ^ n >>> 8, b[e][m] = p2 = p2 << 24 ^ p2 >>> 8;
    for (e = 0; 5 > e; e++)
      a[e] = a[e].slice(0), b[e] = b[e].slice(0);
  } };
  function t(a, b, c) {
    if (4 !== b.length)
      throw new sjcl.exception.invalid("invalid aes block size");
    var d2 = a.b[c], e = b[0] ^ d2[0], f = b[c ? 3 : 1] ^ d2[1], g2 = b[2] ^ d2[2];
    b = b[c ? 1 : 3] ^ d2[3];
    var h, k, l, n = d2.length / 4 - 2, m, p2 = 4, r = [0, 0, 0, 0];
    h = a.s[c];
    a = h[0];
    var q = h[1], v2 = h[2], w = h[3], x3 = h[4];
    for (m = 0; m < n; m++)
      h = a[e >>> 24] ^ q[f >> 16 & 255] ^ v2[g2 >> 8 & 255] ^ w[b & 255] ^ d2[p2], k = a[f >>> 24] ^ q[g2 >> 16 & 255] ^ v2[b >> 8 & 255] ^ w[e & 255] ^ d2[p2 + 1], l = a[g2 >>> 24] ^ q[b >> 16 & 255] ^ v2[e >> 8 & 255] ^ w[f & 255] ^ d2[p2 + 2], b = a[b >>> 24] ^ q[e >> 16 & 255] ^ v2[f >> 8 & 255] ^ w[g2 & 255] ^ d2[p2 + 3], p2 += 4, e = h, f = k, g2 = l;
    for (m = 0; 4 > m; m++)
      r[c ? 3 & -m : m] = x3[e >>> 24] << 24 ^ x3[f >> 16 & 255] << 16 ^ x3[g2 >> 8 & 255] << 8 ^ x3[b & 255] ^ d2[p2++], h = e, e = f, f = g2, g2 = b, b = h;
    return r;
  }
  sjcl.bitArray = { bitSlice: function(a, b, c) {
    a = sjcl.bitArray.$(a.slice(b / 32), 32 - (b & 31)).slice(1);
    return void 0 === c ? a : sjcl.bitArray.clamp(a, c - b);
  }, extract: function(a, b, c) {
    var d2 = Math.floor(-b - c & 31);
    return ((b + c - 1 ^ b) & -32 ? a[b / 32 | 0] << 32 - d2 ^ a[b / 32 + 1 | 0] >>> d2 : a[b / 32 | 0] >>> d2) & (1 << c) - 1;
  }, concat: function(a, b) {
    if (0 === a.length || 0 === b.length)
      return a.concat(b);
    var c = a[a.length - 1], d2 = sjcl.bitArray.getPartial(c);
    return 32 === d2 ? a.concat(b) : sjcl.bitArray.$(b, d2, c | 0, a.slice(0, a.length - 1));
  }, bitLength: function(a) {
    var b = a.length;
    return 0 === b ? 0 : 32 * (b - 1) + sjcl.bitArray.getPartial(a[b - 1]);
  }, clamp: function(a, b) {
    if (32 * a.length < b)
      return a;
    a = a.slice(0, Math.ceil(b / 32));
    var c = a.length;
    b = b & 31;
    0 < c && b && (a[c - 1] = sjcl.bitArray.partial(b, a[c - 1] & 2147483648 >> b - 1, 1));
    return a;
  }, partial: function(a, b, c) {
    return 32 === a ? b : (c ? b | 0 : b << 32 - a) + 1099511627776 * a;
  }, getPartial: function(a) {
    return Math.round(a / 1099511627776) || 32;
  }, equal: function(a, b) {
    if (sjcl.bitArray.bitLength(a) !== sjcl.bitArray.bitLength(b))
      return false;
    var c = 0, d2;
    for (d2 = 0; d2 < a.length; d2++)
      c |= a[d2] ^ b[d2];
    return 0 === c;
  }, $: function(a, b, c, d2) {
    var e;
    e = 0;
    for (void 0 === d2 && (d2 = []); 32 <= b; b -= 32)
      d2.push(c), c = 0;
    if (0 === b)
      return d2.concat(a);
    for (e = 0; e < a.length; e++)
      d2.push(c | a[e] >>> b), c = a[e] << 32 - b;
    e = a.length ? a[a.length - 1] : 0;
    a = sjcl.bitArray.getPartial(e);
    d2.push(sjcl.bitArray.partial(b + a & 31, 32 < b + a ? c : d2.pop(), 1));
    return d2;
  }, i: function(a, b) {
    return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
  }, byteswapM: function(a) {
    var b, c;
    for (b = 0; b < a.length; ++b)
      c = a[b], a[b] = c >>> 24 | c >>> 8 & 65280 | (c & 65280) << 8 | c << 24;
    return a;
  } };
  sjcl.codec.utf8String = { fromBits: function(a) {
    var b = "", c = sjcl.bitArray.bitLength(a), d2, e;
    for (d2 = 0; d2 < c / 8; d2++)
      0 === (d2 & 3) && (e = a[d2 / 4]), b += String.fromCharCode(e >>> 8 >>> 8 >>> 8), e <<= 8;
    return decodeURIComponent(escape(b));
  }, toBits: function(a) {
    a = unescape(encodeURIComponent(a));
    var b = [], c, d2 = 0;
    for (c = 0; c < a.length; c++)
      d2 = d2 << 8 | a.charCodeAt(c), 3 === (c & 3) && (b.push(d2), d2 = 0);
    c & 3 && b.push(sjcl.bitArray.partial(8 * (c & 3), d2));
    return b;
  } };
  sjcl.codec.hex = { fromBits: function(a) {
    var b = "", c;
    for (c = 0; c < a.length; c++)
      b += ((a[c] | 0) + 263882790666240).toString(16).substr(4);
    return b.substr(0, sjcl.bitArray.bitLength(a) / 4);
  }, toBits: function(a) {
    var b, c = [], d2;
    a = a.replace(/\s|0x/g, "");
    d2 = a.length;
    a = a + "00000000";
    for (b = 0; b < a.length; b += 8)
      c.push(parseInt(a.substr(b, 8), 16) ^ 0);
    return sjcl.bitArray.clamp(c, 4 * d2);
  } };
  sjcl.codec.base32 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", X: "0123456789ABCDEFGHIJKLMNOPQRSTUV", BITS: 32, BASE: 5, REMAINING: 27, fromBits: function(a, b, c) {
    var d2 = sjcl.codec.base32.BASE, e = sjcl.codec.base32.REMAINING, f = "", g2 = 0, h = sjcl.codec.base32.B, k = 0, l = sjcl.bitArray.bitLength(a);
    c && (h = sjcl.codec.base32.X);
    for (c = 0; f.length * d2 < l; )
      f += h.charAt((k ^ a[c] >>> g2) >>> e), g2 < d2 ? (k = a[c] << d2 - g2, g2 += e, c++) : (k <<= d2, g2 -= d2);
    for (; f.length & 7 && !b; )
      f += "=";
    return f;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "").toUpperCase();
    var c = sjcl.codec.base32.BITS, d2 = sjcl.codec.base32.BASE, e = sjcl.codec.base32.REMAINING, f = [], g2, h = 0, k = sjcl.codec.base32.B, l = 0, n, m = "base32";
    b && (k = sjcl.codec.base32.X, m = "base32hex");
    for (g2 = 0; g2 < a.length; g2++) {
      n = k.indexOf(a.charAt(g2));
      if (0 > n) {
        if (!b)
          try {
            return sjcl.codec.base32hex.toBits(a);
          } catch (p2) {
          }
        throw new sjcl.exception.invalid("this isn't " + m + "!");
      }
      h > e ? (h -= e, f.push(l ^ n >>> h), l = n << c - h) : (h += d2, l ^= n << c - h);
    }
    h & 56 && f.push(sjcl.bitArray.partial(h & 56, l, 1));
    return f;
  } };
  sjcl.codec.base32hex = { fromBits: function(a, b) {
    return sjcl.codec.base32.fromBits(a, b, 1);
  }, toBits: function(a) {
    return sjcl.codec.base32.toBits(a, 1);
  } };
  sjcl.codec.base64 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", fromBits: function(a, b, c) {
    var d2 = "", e = 0, f = sjcl.codec.base64.B, g2 = 0, h = sjcl.bitArray.bitLength(a);
    c && (f = f.substr(0, 62) + "-_");
    for (c = 0; 6 * d2.length < h; )
      d2 += f.charAt((g2 ^ a[c] >>> e) >>> 26), 6 > e ? (g2 = a[c] << 6 - e, e += 26, c++) : (g2 <<= 6, e -= 6);
    for (; d2.length & 3 && !b; )
      d2 += "=";
    return d2;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "");
    var c = [], d2, e = 0, f = sjcl.codec.base64.B, g2 = 0, h;
    b && (f = f.substr(0, 62) + "-_");
    for (d2 = 0; d2 < a.length; d2++) {
      h = f.indexOf(a.charAt(d2));
      if (0 > h)
        throw new sjcl.exception.invalid("this isn't base64!");
      26 < e ? (e -= 26, c.push(g2 ^ h >>> e), g2 = h << 32 - e) : (e += 6, g2 ^= h << 32 - e);
    }
    e & 56 && c.push(sjcl.bitArray.partial(e & 56, g2, 1));
    return c;
  } };
  sjcl.codec.base64url = { fromBits: function(a) {
    return sjcl.codec.base64.fromBits(a, 1, 1);
  }, toBits: function(a) {
    return sjcl.codec.base64.toBits(a, 1);
  } };
  sjcl.hash.sha256 = function(a) {
    this.b[0] || this.O();
    a ? (this.F = a.F.slice(0), this.A = a.A.slice(0), this.l = a.l) : this.reset();
  };
  sjcl.hash.sha256.hash = function(a) {
    return new sjcl.hash.sha256().update(a).finalize();
  };
  sjcl.hash.sha256.prototype = { blockSize: 512, reset: function() {
    this.F = this.Y.slice(0);
    this.A = [];
    this.l = 0;
    return this;
  }, update: function(a) {
    "string" === typeof a && (a = sjcl.codec.utf8String.toBits(a));
    var b, c = this.A = sjcl.bitArray.concat(this.A, a);
    b = this.l;
    a = this.l = b + sjcl.bitArray.bitLength(a);
    if (9007199254740991 < a)
      throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits");
    if ("undefined" !== typeof Uint32Array) {
      var d2 = new Uint32Array(c), e = 0;
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u(this, d2.subarray(16 * e, 16 * (e + 1))), e += 1;
      c.splice(0, 16 * e);
    } else
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u(this, c.splice(0, 16));
    return this;
  }, finalize: function() {
    var a, b = this.A, c = this.F, b = sjcl.bitArray.concat(b, [sjcl.bitArray.partial(1, 1)]);
    for (a = b.length + 2; a & 15; a++)
      b.push(0);
    b.push(Math.floor(this.l / 4294967296));
    for (b.push(this.l | 0); b.length; )
      u(this, b.splice(0, 16));
    this.reset();
    return c;
  }, Y: [], b: [], O: function() {
    function a(a2) {
      return 4294967296 * (a2 - Math.floor(a2)) | 0;
    }
    for (var b = 0, c = 2, d2, e; 64 > b; c++) {
      e = true;
      for (d2 = 2; d2 * d2 <= c; d2++)
        if (0 === c % d2) {
          e = false;
          break;
        }
      e && (8 > b && (this.Y[b] = a(Math.pow(c, 0.5))), this.b[b] = a(Math.pow(c, 1 / 3)), b++);
    }
  } };
  function u(a, b) {
    var c, d2, e, f = a.F, g2 = a.b, h = f[0], k = f[1], l = f[2], n = f[3], m = f[4], p2 = f[5], r = f[6], q = f[7];
    for (c = 0; 64 > c; c++)
      16 > c ? d2 = b[c] : (d2 = b[c + 1 & 15], e = b[c + 14 & 15], d2 = b[c & 15] = (d2 >>> 7 ^ d2 >>> 18 ^ d2 >>> 3 ^ d2 << 25 ^ d2 << 14) + (e >>> 17 ^ e >>> 19 ^ e >>> 10 ^ e << 15 ^ e << 13) + b[c & 15] + b[c + 9 & 15] | 0), d2 = d2 + q + (m >>> 6 ^ m >>> 11 ^ m >>> 25 ^ m << 26 ^ m << 21 ^ m << 7) + (r ^ m & (p2 ^ r)) + g2[c], q = r, r = p2, p2 = m, m = n + d2 | 0, n = l, l = k, k = h, h = d2 + (k & l ^ n & (k ^ l)) + (k >>> 2 ^ k >>> 13 ^ k >>> 22 ^ k << 30 ^ k << 19 ^ k << 10) | 0;
    f[0] = f[0] + h | 0;
    f[1] = f[1] + k | 0;
    f[2] = f[2] + l | 0;
    f[3] = f[3] + n | 0;
    f[4] = f[4] + m | 0;
    f[5] = f[5] + p2 | 0;
    f[6] = f[6] + r | 0;
    f[7] = f[7] + q | 0;
  }
  sjcl.mode.ccm = { name: "ccm", G: [], listenProgress: function(a) {
    sjcl.mode.ccm.G.push(a);
  }, unListenProgress: function(a) {
    a = sjcl.mode.ccm.G.indexOf(a);
    -1 < a && sjcl.mode.ccm.G.splice(a, 1);
  }, fa: function(a) {
    var b = sjcl.mode.ccm.G.slice(), c;
    for (c = 0; c < b.length; c += 1)
      b[c](a);
  }, encrypt: function(a, b, c, d2, e) {
    var f, g2 = b.slice(0), h = sjcl.bitArray, k = h.bitLength(c) / 8, l = h.bitLength(g2) / 8;
    e = e || 64;
    d2 = d2 || [];
    if (7 > k)
      throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");
    for (f = 2; 4 > f && l >>> 8 * f; f++)
      ;
    f < 15 - k && (f = 15 - k);
    c = h.clamp(c, 8 * (15 - f));
    b = sjcl.mode.ccm.V(a, b, c, d2, e, f);
    g2 = sjcl.mode.ccm.C(a, g2, c, b, e, f);
    return h.concat(g2.data, g2.tag);
  }, decrypt: function(a, b, c, d2, e) {
    e = e || 64;
    d2 = d2 || [];
    var f = sjcl.bitArray, g2 = f.bitLength(c) / 8, h = f.bitLength(b), k = f.clamp(b, h - e), l = f.bitSlice(b, h - e), h = (h - e) / 8;
    if (7 > g2)
      throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");
    for (b = 2; 4 > b && h >>> 8 * b; b++)
      ;
    b < 15 - g2 && (b = 15 - g2);
    c = f.clamp(c, 8 * (15 - b));
    k = sjcl.mode.ccm.C(a, k, c, l, e, b);
    a = sjcl.mode.ccm.V(a, k.data, c, d2, e, b);
    if (!f.equal(k.tag, a))
      throw new sjcl.exception.corrupt("ccm: tag doesn't match");
    return k.data;
  }, na: function(a, b, c, d2, e, f) {
    var g2 = [], h = sjcl.bitArray, k = h.i;
    d2 = [h.partial(8, (b.length ? 64 : 0) | d2 - 2 << 2 | f - 1)];
    d2 = h.concat(d2, c);
    d2[3] |= e;
    d2 = a.encrypt(d2);
    if (b.length)
      for (c = h.bitLength(b) / 8, 65279 >= c ? g2 = [h.partial(16, c)] : 4294967295 >= c && (g2 = h.concat([h.partial(16, 65534)], [c])), g2 = h.concat(g2, b), b = 0; b < g2.length; b += 4)
        d2 = a.encrypt(k(d2, g2.slice(b, b + 4).concat([0, 0, 0])));
    return d2;
  }, V: function(a, b, c, d2, e, f) {
    var g2 = sjcl.bitArray, h = g2.i;
    e /= 8;
    if (e % 2 || 4 > e || 16 < e)
      throw new sjcl.exception.invalid("ccm: invalid tag length");
    if (4294967295 < d2.length || 4294967295 < b.length)
      throw new sjcl.exception.bug("ccm: can't deal with 4GiB or more data");
    c = sjcl.mode.ccm.na(a, d2, c, e, g2.bitLength(b) / 8, f);
    for (d2 = 0; d2 < b.length; d2 += 4)
      c = a.encrypt(h(c, b.slice(d2, d2 + 4).concat([0, 0, 0])));
    return g2.clamp(c, 8 * e);
  }, C: function(a, b, c, d2, e, f) {
    var g2, h = sjcl.bitArray;
    g2 = h.i;
    var k = b.length, l = h.bitLength(b), n = k / 50, m = n;
    c = h.concat([h.partial(8, f - 1)], c).concat([0, 0, 0]).slice(0, 4);
    d2 = h.bitSlice(g2(d2, a.encrypt(c)), 0, e);
    if (!k)
      return { tag: d2, data: [] };
    for (g2 = 0; g2 < k; g2 += 4)
      g2 > n && (sjcl.mode.ccm.fa(g2 / k), n += m), c[3]++, e = a.encrypt(c), b[g2] ^= e[0], b[g2 + 1] ^= e[1], b[g2 + 2] ^= e[2], b[g2 + 3] ^= e[3];
    return { tag: d2, data: h.clamp(b, l) };
  } };
  sjcl.mode.ocb2 = { name: "ocb2", encrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl.bitArray.bitLength(c))
      throw new sjcl.exception.invalid("ocb iv must be 128 bits");
    var g2, h = sjcl.mode.ocb2.S, k = sjcl.bitArray, l = k.i, n = [0, 0, 0, 0];
    c = h(a.encrypt(c));
    var m, p2 = [];
    d2 = d2 || [];
    e = e || 64;
    for (g2 = 0; g2 + 4 < b.length; g2 += 4)
      m = b.slice(g2, g2 + 4), n = l(n, m), p2 = p2.concat(l(c, a.encrypt(l(c, m)))), c = h(c);
    m = b.slice(g2);
    b = k.bitLength(m);
    g2 = a.encrypt(l(c, [0, 0, 0, b]));
    m = k.clamp(l(m.concat([0, 0, 0]), g2), b);
    n = l(n, l(m.concat([0, 0, 0]), g2));
    n = a.encrypt(l(n, l(c, h(c))));
    d2.length && (n = l(n, f ? d2 : sjcl.mode.ocb2.pmac(a, d2)));
    return p2.concat(k.concat(m, k.clamp(n, e)));
  }, decrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl.bitArray.bitLength(c))
      throw new sjcl.exception.invalid("ocb iv must be 128 bits");
    e = e || 64;
    var g2 = sjcl.mode.ocb2.S, h = sjcl.bitArray, k = h.i, l = [0, 0, 0, 0], n = g2(a.encrypt(c)), m, p2, r = sjcl.bitArray.bitLength(b) - e, q = [];
    d2 = d2 || [];
    for (c = 0; c + 4 < r / 32; c += 4)
      m = k(n, a.decrypt(k(n, b.slice(c, c + 4)))), l = k(l, m), q = q.concat(m), n = g2(n);
    p2 = r - 32 * c;
    m = a.encrypt(k(n, [0, 0, 0, p2]));
    m = k(m, h.clamp(b.slice(c), p2).concat([0, 0, 0]));
    l = k(l, m);
    l = a.encrypt(k(l, k(n, g2(n))));
    d2.length && (l = k(l, f ? d2 : sjcl.mode.ocb2.pmac(a, d2)));
    if (!h.equal(h.clamp(l, e), h.bitSlice(b, r)))
      throw new sjcl.exception.corrupt("ocb: tag doesn't match");
    return q.concat(h.clamp(m, p2));
  }, pmac: function(a, b) {
    var c, d2 = sjcl.mode.ocb2.S, e = sjcl.bitArray, f = e.i, g2 = [0, 0, 0, 0], h = a.encrypt([0, 0, 0, 0]), h = f(h, d2(d2(h)));
    for (c = 0; c + 4 < b.length; c += 4)
      h = d2(h), g2 = f(g2, a.encrypt(f(h, b.slice(c, c + 4))));
    c = b.slice(c);
    128 > e.bitLength(c) && (h = f(h, d2(h)), c = e.concat(c, [-2147483648, 0, 0, 0]));
    g2 = f(g2, c);
    return a.encrypt(f(d2(f(h, d2(h))), g2));
  }, S: function(a) {
    return [a[0] << 1 ^ a[1] >>> 31, a[1] << 1 ^ a[2] >>> 31, a[2] << 1 ^ a[3] >>> 31, a[3] << 1 ^ 135 * (a[0] >>> 31)];
  } };
  sjcl.mode.gcm = { name: "gcm", encrypt: function(a, b, c, d2, e) {
    var f = b.slice(0);
    b = sjcl.bitArray;
    d2 = d2 || [];
    a = sjcl.mode.gcm.C(true, a, f, d2, c, e || 128);
    return b.concat(a.data, a.tag);
  }, decrypt: function(a, b, c, d2, e) {
    var f = b.slice(0), g2 = sjcl.bitArray, h = g2.bitLength(f);
    e = e || 128;
    d2 = d2 || [];
    e <= h ? (b = g2.bitSlice(f, h - e), f = g2.bitSlice(f, 0, h - e)) : (b = f, f = []);
    a = sjcl.mode.gcm.C(false, a, f, d2, c, e);
    if (!g2.equal(a.tag, b))
      throw new sjcl.exception.corrupt("gcm: tag doesn't match");
    return a.data;
  }, ka: function(a, b) {
    var c, d2, e, f, g2, h = sjcl.bitArray.i;
    e = [0, 0, 0, 0];
    f = b.slice(0);
    for (c = 0; 128 > c; c++) {
      (d2 = 0 !== (a[Math.floor(c / 32)] & 1 << 31 - c % 32)) && (e = h(e, f));
      g2 = 0 !== (f[3] & 1);
      for (d2 = 3; 0 < d2; d2--)
        f[d2] = f[d2] >>> 1 | (f[d2 - 1] & 1) << 31;
      f[0] >>>= 1;
      g2 && (f[0] ^= -520093696);
    }
    return e;
  }, j: function(a, b, c) {
    var d2, e = c.length;
    b = b.slice(0);
    for (d2 = 0; d2 < e; d2 += 4)
      b[0] ^= 4294967295 & c[d2], b[1] ^= 4294967295 & c[d2 + 1], b[2] ^= 4294967295 & c[d2 + 2], b[3] ^= 4294967295 & c[d2 + 3], b = sjcl.mode.gcm.ka(b, a);
    return b;
  }, C: function(a, b, c, d2, e, f) {
    var g2, h, k, l, n, m, p2, r, q = sjcl.bitArray;
    m = c.length;
    p2 = q.bitLength(c);
    r = q.bitLength(d2);
    h = q.bitLength(e);
    g2 = b.encrypt([0, 0, 0, 0]);
    96 === h ? (e = e.slice(0), e = q.concat(e, [1])) : (e = sjcl.mode.gcm.j(g2, [0, 0, 0, 0], e), e = sjcl.mode.gcm.j(g2, e, [0, 0, Math.floor(h / 4294967296), h & 4294967295]));
    h = sjcl.mode.gcm.j(g2, [0, 0, 0, 0], d2);
    n = e.slice(0);
    d2 = h.slice(0);
    a || (d2 = sjcl.mode.gcm.j(g2, h, c));
    for (l = 0; l < m; l += 4)
      n[3]++, k = b.encrypt(n), c[l] ^= k[0], c[l + 1] ^= k[1], c[l + 2] ^= k[2], c[l + 3] ^= k[3];
    c = q.clamp(c, p2);
    a && (d2 = sjcl.mode.gcm.j(g2, h, c));
    a = [Math.floor(r / 4294967296), r & 4294967295, Math.floor(p2 / 4294967296), p2 & 4294967295];
    d2 = sjcl.mode.gcm.j(g2, d2, a);
    k = b.encrypt(e);
    d2[0] ^= k[0];
    d2[1] ^= k[1];
    d2[2] ^= k[2];
    d2[3] ^= k[3];
    return { tag: q.bitSlice(d2, 0, f), data: c };
  } };
  sjcl.misc.hmac = function(a, b) {
    this.W = b = b || sjcl.hash.sha256;
    var c = [[], []], d2, e = b.prototype.blockSize / 32;
    this.w = [new b(), new b()];
    a.length > e && (a = b.hash(a));
    for (d2 = 0; d2 < e; d2++)
      c[0][d2] = a[d2] ^ 909522486, c[1][d2] = a[d2] ^ 1549556828;
    this.w[0].update(c[0]);
    this.w[1].update(c[1]);
    this.R = new b(this.w[0]);
  };
  sjcl.misc.hmac.prototype.encrypt = sjcl.misc.hmac.prototype.mac = function(a) {
    if (this.aa)
      throw new sjcl.exception.invalid("encrypt on already updated hmac called!");
    this.update(a);
    return this.digest(a);
  };
  sjcl.misc.hmac.prototype.reset = function() {
    this.R = new this.W(this.w[0]);
    this.aa = false;
  };
  sjcl.misc.hmac.prototype.update = function(a) {
    this.aa = true;
    this.R.update(a);
  };
  sjcl.misc.hmac.prototype.digest = function() {
    var a = this.R.finalize(), a = new this.W(this.w[1]).update(a).finalize();
    this.reset();
    return a;
  };
  sjcl.misc.pbkdf2 = function(a, b, c, d2, e) {
    c = c || 1e4;
    if (0 > d2 || 0 > c)
      throw new sjcl.exception.invalid("invalid params to pbkdf2");
    "string" === typeof a && (a = sjcl.codec.utf8String.toBits(a));
    "string" === typeof b && (b = sjcl.codec.utf8String.toBits(b));
    e = e || sjcl.misc.hmac;
    a = new e(a);
    var f, g2, h, k, l = [], n = sjcl.bitArray;
    for (k = 1; 32 * l.length < (d2 || 1); k++) {
      e = f = a.encrypt(n.concat(b, [k]));
      for (g2 = 1; g2 < c; g2++)
        for (f = a.encrypt(f), h = 0; h < f.length; h++)
          e[h] ^= f[h];
      l = l.concat(e);
    }
    d2 && (l = n.clamp(l, d2));
    return l;
  };
  sjcl.prng = function(a) {
    this.c = [new sjcl.hash.sha256()];
    this.m = [0];
    this.P = 0;
    this.H = {};
    this.N = 0;
    this.U = {};
    this.Z = this.f = this.o = this.ha = 0;
    this.b = [0, 0, 0, 0, 0, 0, 0, 0];
    this.h = [0, 0, 0, 0];
    this.L = void 0;
    this.M = a;
    this.D = false;
    this.K = { progress: {}, seeded: {} };
    this.u = this.ga = 0;
    this.I = 1;
    this.J = 2;
    this.ca = 65536;
    this.T = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];
    this.da = 3e4;
    this.ba = 80;
  };
  sjcl.prng.prototype = { randomWords: function(a, b) {
    var c = [], d2;
    d2 = this.isReady(b);
    var e;
    if (d2 === this.u)
      throw new sjcl.exception.notReady("generator isn't seeded");
    if (d2 & this.J) {
      d2 = !(d2 & this.I);
      e = [];
      var f = 0, g2;
      this.Z = e[0] = (/* @__PURE__ */ new Date()).valueOf() + this.da;
      for (g2 = 0; 16 > g2; g2++)
        e.push(4294967296 * Math.random() | 0);
      for (g2 = 0; g2 < this.c.length && (e = e.concat(this.c[g2].finalize()), f += this.m[g2], this.m[g2] = 0, d2 || !(this.P & 1 << g2)); g2++)
        ;
      this.P >= 1 << this.c.length && (this.c.push(new sjcl.hash.sha256()), this.m.push(0));
      this.f -= f;
      f > this.o && (this.o = f);
      this.P++;
      this.b = sjcl.hash.sha256.hash(this.b.concat(e));
      this.L = new sjcl.cipher.aes(this.b);
      for (d2 = 0; 4 > d2 && (this.h[d2] = this.h[d2] + 1 | 0, !this.h[d2]); d2++)
        ;
    }
    for (d2 = 0; d2 < a; d2 += 4)
      0 === (d2 + 1) % this.ca && y(this), e = z(this), c.push(e[0], e[1], e[2], e[3]);
    y(this);
    return c.slice(0, a);
  }, setDefaultParanoia: function(a, b) {
    if (0 === a && "Setting paranoia=0 will ruin your security; use it only for testing" !== b)
      throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");
    this.M = a;
  }, addEntropy: function(a, b, c) {
    c = c || "user";
    var d2, e, f = (/* @__PURE__ */ new Date()).valueOf(), g2 = this.H[c], h = this.isReady(), k = 0;
    d2 = this.U[c];
    void 0 === d2 && (d2 = this.U[c] = this.ha++);
    void 0 === g2 && (g2 = this.H[c] = 0);
    this.H[c] = (this.H[c] + 1) % this.c.length;
    switch (typeof a) {
      case "number":
        void 0 === b && (b = 1);
        this.c[g2].update([d2, this.N++, 1, b, f, 1, a | 0]);
        break;
      case "object":
        c = Object.prototype.toString.call(a);
        if ("[object Uint32Array]" === c) {
          e = [];
          for (c = 0; c < a.length; c++)
            e.push(a[c]);
          a = e;
        } else
          for ("[object Array]" !== c && (k = 1), c = 0; c < a.length && !k; c++)
            "number" !== typeof a[c] && (k = 1);
        if (!k) {
          if (void 0 === b)
            for (c = b = 0; c < a.length; c++)
              for (e = a[c]; 0 < e; )
                b++, e = e >>> 1;
          this.c[g2].update([d2, this.N++, 2, b, f, a.length].concat(a));
        }
        break;
      case "string":
        void 0 === b && (b = a.length);
        this.c[g2].update([d2, this.N++, 3, b, f, a.length]);
        this.c[g2].update(a);
        break;
      default:
        k = 1;
    }
    if (k)
      throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");
    this.m[g2] += b;
    this.f += b;
    h === this.u && (this.isReady() !== this.u && A("seeded", Math.max(this.o, this.f)), A("progress", this.getProgress()));
  }, isReady: function(a) {
    a = this.T[void 0 !== a ? a : this.M];
    return this.o && this.o >= a ? this.m[0] > this.ba && (/* @__PURE__ */ new Date()).valueOf() > this.Z ? this.J | this.I : this.I : this.f >= a ? this.J | this.u : this.u;
  }, getProgress: function(a) {
    a = this.T[a ? a : this.M];
    return this.o >= a ? 1 : this.f > a ? 1 : this.f / a;
  }, startCollectors: function() {
    if (!this.D) {
      this.a = { loadTimeCollector: B(this, this.ma), mouseCollector: B(this, this.oa), keyboardCollector: B(this, this.la), accelerometerCollector: B(this, this.ea), touchCollector: B(this, this.qa) };
      if (window.addEventListener)
        window.addEventListener("load", this.a.loadTimeCollector, false), window.addEventListener("mousemove", this.a.mouseCollector, false), window.addEventListener("keypress", this.a.keyboardCollector, false), window.addEventListener("devicemotion", this.a.accelerometerCollector, false), window.addEventListener("touchmove", this.a.touchCollector, false);
      else if (document.attachEvent)
        document.attachEvent("onload", this.a.loadTimeCollector), document.attachEvent("onmousemove", this.a.mouseCollector), document.attachEvent("keypress", this.a.keyboardCollector);
      else
        throw new sjcl.exception.bug("can't attach event");
      this.D = true;
    }
  }, stopCollectors: function() {
    this.D && (window.removeEventListener ? (window.removeEventListener("load", this.a.loadTimeCollector, false), window.removeEventListener("mousemove", this.a.mouseCollector, false), window.removeEventListener("keypress", this.a.keyboardCollector, false), window.removeEventListener("devicemotion", this.a.accelerometerCollector, false), window.removeEventListener("touchmove", this.a.touchCollector, false)) : document.detachEvent && (document.detachEvent("onload", this.a.loadTimeCollector), document.detachEvent("onmousemove", this.a.mouseCollector), document.detachEvent("keypress", this.a.keyboardCollector)), this.D = false);
  }, addEventListener: function(a, b) {
    this.K[a][this.ga++] = b;
  }, removeEventListener: function(a, b) {
    var c, d2, e = this.K[a], f = [];
    for (d2 in e)
      e.hasOwnProperty(d2) && e[d2] === b && f.push(d2);
    for (c = 0; c < f.length; c++)
      d2 = f[c], delete e[d2];
  }, la: function() {
    C(this, 1);
  }, oa: function(a) {
    var b, c;
    try {
      b = a.x || a.clientX || a.offsetX || 0, c = a.y || a.clientY || a.offsetY || 0;
    } catch (d2) {
      c = b = 0;
    }
    0 != b && 0 != c && this.addEntropy([b, c], 2, "mouse");
    C(this, 0);
  }, qa: function(a) {
    a = a.touches[0] || a.changedTouches[0];
    this.addEntropy([a.pageX || a.clientX, a.pageY || a.clientY], 1, "touch");
    C(this, 0);
  }, ma: function() {
    C(this, 2);
  }, ea: function(a) {
    a = a.accelerationIncludingGravity.x || a.accelerationIncludingGravity.y || a.accelerationIncludingGravity.z;
    if (window.orientation) {
      var b = window.orientation;
      "number" === typeof b && this.addEntropy(b, 1, "accelerometer");
    }
    a && this.addEntropy(a, 2, "accelerometer");
    C(this, 0);
  } };
  function A(a, b) {
    var c, d2 = sjcl.random.K[a], e = [];
    for (c in d2)
      d2.hasOwnProperty(c) && e.push(d2[c]);
    for (c = 0; c < e.length; c++)
      e[c](b);
  }
  function C(a, b) {
    "undefined" !== typeof window && window.performance && "function" === typeof window.performance.now ? a.addEntropy(window.performance.now(), b, "loadtime") : a.addEntropy((/* @__PURE__ */ new Date()).valueOf(), b, "loadtime");
  }
  function y(a) {
    a.b = z(a).concat(z(a));
    a.L = new sjcl.cipher.aes(a.b);
  }
  function z(a) {
    for (var b = 0; 4 > b && (a.h[b] = a.h[b] + 1 | 0, !a.h[b]); b++)
      ;
    return a.L.encrypt(a.h);
  }
  function B(a, b) {
    return function() {
      b.apply(a, arguments);
    };
  }
  sjcl.random = new sjcl.prng(6);
  a:
    try {
      if (G = "undefined" !== typeof module && module.exports) {
        try {
          H = __require2("crypto");
        } catch (a) {
          H = null;
        }
        G = E = H;
      }
      if (G && E.randomBytes)
        D = E.randomBytes(128), D = new Uint32Array(new Uint8Array(D).buffer), sjcl.random.addEntropy(D, 1024, "crypto['randomBytes']");
      else if ("undefined" !== typeof window && "undefined" !== typeof Uint32Array) {
        F = new Uint32Array(32);
        if (window.crypto && window.crypto.getRandomValues)
          window.crypto.getRandomValues(F);
        else if (window.msCrypto && window.msCrypto.getRandomValues)
          window.msCrypto.getRandomValues(F);
        else
          break a;
        sjcl.random.addEntropy(F, 1024, "crypto['getRandomValues']");
      }
    } catch (a) {
      "undefined" !== typeof window && window.console && (console.log("There was an error collecting entropy from the browser:"), console.log(a));
    }
  var D;
  var E;
  var F;
  var G;
  var H;
  sjcl.json = { defaults: { v: 1, iter: 1e4, ks: 128, ts: 64, mode: "ccm", adata: "", cipher: "aes" }, ja: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl.json, f = e.g({ iv: sjcl.random.randomWords(4, 0) }, e.defaults), g2;
    e.g(f, c);
    c = f.adata;
    "string" === typeof f.salt && (f.salt = sjcl.codec.base64.toBits(f.salt));
    "string" === typeof f.iv && (f.iv = sjcl.codec.base64.toBits(f.iv));
    if (!sjcl.mode[f.mode] || !sjcl.cipher[f.cipher] || "string" === typeof a && 100 >= f.iter || 64 !== f.ts && 96 !== f.ts && 128 !== f.ts || 128 !== f.ks && 192 !== f.ks && 256 !== f.ks || 2 > f.iv.length || 4 < f.iv.length)
      throw new sjcl.exception.invalid("json encrypt: invalid parameters");
    "string" === typeof a ? (g2 = sjcl.misc.cachedPbkdf2(a, f), a = g2.key.slice(0, f.ks / 32), f.salt = g2.salt) : sjcl.ecc && a instanceof sjcl.ecc.elGamal.publicKey && (g2 = a.kem(), f.kemtag = g2.tag, a = g2.key.slice(0, f.ks / 32));
    "string" === typeof b && (b = sjcl.codec.utf8String.toBits(b));
    "string" === typeof c && (f.adata = c = sjcl.codec.utf8String.toBits(c));
    g2 = new sjcl.cipher[f.cipher](a);
    e.g(d2, f);
    d2.key = a;
    f.ct = "ccm" === f.mode && sjcl.arrayBuffer && sjcl.arrayBuffer.ccm && b instanceof ArrayBuffer ? sjcl.arrayBuffer.ccm.encrypt(g2, b, f.iv, c, f.ts) : sjcl.mode[f.mode].encrypt(g2, b, f.iv, c, f.ts);
    return f;
  }, encrypt: function(a, b, c, d2) {
    var e = sjcl.json, f = e.ja.apply(e, arguments);
    return e.encode(f);
  }, ia: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl.json;
    b = e.g(e.g(e.g({}, e.defaults), b), c, true);
    var f, g2;
    f = b.adata;
    "string" === typeof b.salt && (b.salt = sjcl.codec.base64.toBits(b.salt));
    "string" === typeof b.iv && (b.iv = sjcl.codec.base64.toBits(b.iv));
    if (!sjcl.mode[b.mode] || !sjcl.cipher[b.cipher] || "string" === typeof a && 100 >= b.iter || 64 !== b.ts && 96 !== b.ts && 128 !== b.ts || 128 !== b.ks && 192 !== b.ks && 256 !== b.ks || !b.iv || 2 > b.iv.length || 4 < b.iv.length)
      throw new sjcl.exception.invalid("json decrypt: invalid parameters");
    "string" === typeof a ? (g2 = sjcl.misc.cachedPbkdf2(a, b), a = g2.key.slice(0, b.ks / 32), b.salt = g2.salt) : sjcl.ecc && a instanceof sjcl.ecc.elGamal.secretKey && (a = a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0, b.ks / 32));
    "string" === typeof f && (f = sjcl.codec.utf8String.toBits(f));
    g2 = new sjcl.cipher[b.cipher](a);
    f = "ccm" === b.mode && sjcl.arrayBuffer && sjcl.arrayBuffer.ccm && b.ct instanceof ArrayBuffer ? sjcl.arrayBuffer.ccm.decrypt(g2, b.ct, b.iv, b.tag, f, b.ts) : sjcl.mode[b.mode].decrypt(g2, b.ct, b.iv, f, b.ts);
    e.g(d2, b);
    d2.key = a;
    return 1 === c.raw ? f : sjcl.codec.utf8String.fromBits(f);
  }, decrypt: function(a, b, c, d2) {
    var e = sjcl.json;
    return e.ia(a, e.decode(b), c, d2);
  }, encode: function(a) {
    var b, c = "{", d2 = "";
    for (b in a)
      if (a.hasOwnProperty(b)) {
        if (!b.match(/^[a-z0-9]+$/i))
          throw new sjcl.exception.invalid("json encode: invalid property name");
        c += d2 + '"' + b + '":';
        d2 = ",";
        switch (typeof a[b]) {
          case "number":
          case "boolean":
            c += a[b];
            break;
          case "string":
            c += '"' + escape(a[b]) + '"';
            break;
          case "object":
            c += '"' + sjcl.codec.base64.fromBits(a[b], 0) + '"';
            break;
          default:
            throw new sjcl.exception.bug("json encode: unsupported type");
        }
      }
    return c + "}";
  }, decode: function(a) {
    a = a.replace(/\s/g, "");
    if (!a.match(/^\{.*\}$/))
      throw new sjcl.exception.invalid("json decode: this isn't json!");
    a = a.replace(/^\{|\}$/g, "").split(/,/);
    var b = {}, c, d2;
    for (c = 0; c < a.length; c++) {
      if (!(d2 = a[c].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i)))
        throw new sjcl.exception.invalid("json decode: this isn't json!");
      null != d2[3] ? b[d2[2]] = parseInt(d2[3], 10) : null != d2[4] ? b[d2[2]] = d2[2].match(/^(ct|adata|salt|iv)$/) ? sjcl.codec.base64.toBits(d2[4]) : unescape(d2[4]) : null != d2[5] && (b[d2[2]] = "true" === d2[5]);
    }
    return b;
  }, g: function(a, b, c) {
    void 0 === a && (a = {});
    if (void 0 === b)
      return a;
    for (var d2 in b)
      if (b.hasOwnProperty(d2)) {
        if (c && void 0 !== a[d2] && a[d2] !== b[d2])
          throw new sjcl.exception.invalid("required parameter overridden");
        a[d2] = b[d2];
      }
    return a;
  }, sa: function(a, b) {
    var c = {}, d2;
    for (d2 in a)
      a.hasOwnProperty(d2) && a[d2] !== b[d2] && (c[d2] = a[d2]);
    return c;
  }, ra: function(a, b) {
    var c = {}, d2;
    for (d2 = 0; d2 < b.length; d2++)
      void 0 !== a[b[d2]] && (c[b[d2]] = a[b[d2]]);
    return c;
  } };
  sjcl.encrypt = sjcl.json.encrypt;
  sjcl.decrypt = sjcl.json.decrypt;
  sjcl.misc.pa = {};
  sjcl.misc.cachedPbkdf2 = function(a, b) {
    var c = sjcl.misc.pa, d2;
    b = b || {};
    d2 = b.iter || 1e3;
    c = c[a] = c[a] || {};
    d2 = c[d2] = c[d2] || { firstSalt: b.salt && b.salt.length ? b.salt.slice(0) : sjcl.random.randomWords(2, 0) };
    c = void 0 === b.salt ? d2.firstSalt : b.salt;
    d2[c] = d2[c] || sjcl.misc.pbkdf2(a, c, b.iter);
    return { key: d2[c].slice(0), salt: c.slice(0) };
  };
  var _HTTPfrontend = class extends Service {
    constructor(options, path, fetched) {
      super(options);
      this.name = "http";
      this.fetchProxied = false;
      this.listening = {};
      this.GET = (url4 = "http://localhost:8080/ping", type = "", mimeType) => {
        if (type === "json")
          mimeType = "application/json";
        return new Promise((resolve, reject) => {
          let xhr = _HTTPfrontend.request({ method: "GET", url: url4, responseType: type, mimeType, onload: (ev2) => {
            let data;
            if (xhr.responseType === "" || xhr.responseType === "text")
              data = xhr.responseText;
            else
              data = xhr.response;
            if (url4 instanceof URL)
              url4 = url4.toString();
            this.setState({ [url4]: data });
            resolve(data);
          }, onabort: (er) => {
            reject(er);
          } });
        }).catch(console.error);
      };
      this.POST = (message, url4 = "http://localhost:8080/echo", type = "", mimeType) => {
        if (typeof message === "object" && (type === "json" || type === "text" || !type)) {
          message = JSON.stringify(message);
        }
        if (type === "json")
          mimeType = "application/json";
        return new Promise((resolve, reject) => {
          let xhr = _HTTPfrontend.request({ method: "POST", url: url4, data: message, responseType: type, mimeType, onload: (ev2) => {
            let data;
            if (xhr.responseType === "" || xhr.responseType === "text")
              data = xhr.responseText;
            else
              data = xhr.response;
            if (url4 instanceof URL)
              url4 = url4.toString();
            this.setState({ [url4]: data });
            resolve(data);
          }, onabort: (er) => {
            reject(er);
          } });
        }).catch(console.error);
      };
      this.transmit = (message, url4) => {
        let obj = message;
        if (typeof obj === "object") {
          message = JSON.stringify(obj);
        }
        if (obj?.method?.toLowerCase() == "get" || message?.toLowerCase() === "get")
          return this.GET(url4);
        return this.POST(message, url4);
      };
      this.transponder = (url4, message, type = "", mimeType) => {
        if (typeof message === "object")
          message = JSON.stringify(message);
        let method = "GET";
        if (message) {
          method = "POST";
        }
        if (type === "json")
          mimeType = "application/json";
        else
          return new Promise((resolve, reject) => {
            let xhr = _HTTPfrontend.request({ method, url: url4, data: message, responseType: type, onload: (ev2) => {
              let body = xhr.response;
              if (typeof body === "string") {
                let substr = body.substring(0, 8);
                if (substr.includes("{") || substr.includes("[")) {
                  if (substr.includes("\\"))
                    body = body.replace(/\\/g, "");
                  if (body[0] === '"') {
                    body = body.substring(1, body.length - 1);
                  }
                  ;
                  body = JSON.parse(body);
                }
              }
              if (typeof body?.method === "string") {
                return resolve(this.handleMethod(body.route, body.method, body.args));
              } else if (typeof body?.route === "string") {
                return resolve(this.handleServiceMessage(body));
              } else if (typeof body?.node === "string" || body.node instanceof GraphNode) {
                return resolve(this.handleGraphNodeCall(body.node, body.args));
              } else
                return resolve(body);
            }, onabort: (er) => {
              reject(er);
            } });
          }).catch(console.error);
      };
      this.listen = (path2 = "0", fetched2 = async (clone, args, response) => {
        const result = await clone.text();
        const returned = this.receive(result);
        this.setState({ [response.url]: returned });
      }) => {
        this.listening[path2] = {};
        let listenerId = `${path2}${Math.floor(Math.random() * 1e15)}`;
        this.listening[path2][listenerId] = fetched2;
        if (!this.fetchProxied) {
          globalThis.fetch = new Proxy(globalThis.fetch, { apply(fetch2, that, args) {
            const result = fetch2.apply(that, args);
            result.then((response) => {
              if (!response.ok)
                return;
              if (this.listening["0"]) {
                for (const key in this.listeners) {
                  const clone = response.clone();
                  this.listening["0"][key](clone, args, response);
                }
              } else {
                for (const key in this.listening) {
                  if (response.url.includes(key)) {
                    for (const key2 in this.listening[path2]) {
                      const clone = response.clone();
                      this.listening[path2][key2](clone, args, response);
                    }
                    break;
                  }
                }
              }
            }).catch((er) => {
              console.error(er);
            });
            return result;
          } });
          this.fetchProxied = true;
        }
        return listenerId;
      };
      this.stopListening = (path2, listener) => {
        if (!path2 && path2 !== 0) {
          for (const key in this.listening)
            delete this.listening[key];
        } else {
          if (!listener)
            delete this.listening[path2];
          else
            delete this.listening[listener];
        }
      };
      this.load(this);
      this.listen(path, fetched);
    }
  };
  var HTTPfrontend = _HTTPfrontend;
  HTTPfrontend.request = (options) => {
    const xhr = new XMLHttpRequest();
    if (options.responseType)
      xhr.responseType = options.responseType;
    else
      options.responseType = "json";
    if (options.mimeType) {
      xhr.overrideMimeType(options.mimeType);
    }
    if (options.onload)
      xhr.addEventListener("load", options.onload, false);
    if (options.onprogress)
      xhr.addEventListener("progress", options.onprogress, false);
    if (options.onabort)
      xhr.addEventListener("abort", options.onabort, false);
    if (options.onloadend)
      xhr.addEventListener("loadend", options.onloadend, false);
    if (options.onerror)
      xhr.addEventListener("error", options.onerror, false);
    xhr.open(options.method, options.url, true, options.user, options.pass);
    if (!options.onerror)
      xhr.onerror = function() {
        xhr.abort();
      };
    xhr.send(options.data);
    return xhr;
  };
  var WSSfrontend = class extends Service {
    constructor(options) {
      super(options);
      this.name = "wss";
      this.sockets = {};
      this.connections = { sockets: this.sockets };
      this.openWS = (options2 = { host: "localhost", port: 7e3, path: void 0, protocol: "ws", onclose: (ev2, socket, wsinfo) => {
        if (ev2.target.url)
          delete this.sockets[ev2.target.url];
      } }) => {
        let protocol = options2.protocol;
        if (!protocol)
          protocol = "ws";
        let address = `${protocol}://${options2.host}`;
        if (!("keepState" in options2))
          options2.keepState = true;
        if (options2.port)
          address += ":" + options2.port;
        if (options2.path && !options2.path?.startsWith("/"))
          address += "/";
        if (options2.path)
          address += options2.path;
        if (this.sockets[address]?.socket) {
          if (this.sockets[address].socket.readyState === this.sockets[address].socket.OPEN)
            this.sockets[address].socket.close();
        }
        const socket = new WebSocket(address);
        if (!options2.onmessage) {
          if (!options2._id) {
            options2.onmessage = (data, ws, wsinfo) => {
              if (data) {
                if (typeof data === "string") {
                  let substr = data.substring(0, 8);
                  if (substr.includes("{") || substr.includes("[")) {
                    if (substr.includes("\\"))
                      data = data.replace(/\\/g, "");
                    if (data[0] === '"') {
                      data = data.substring(1, data.length - 1);
                    }
                    ;
                    data = JSON.parse(data);
                    if (data.route === "setId") {
                      this.sockets[address]._id = data.args;
                      options2.onmessage = (data2, ws2, wsinfo2) => {
                        this.receive(data2);
                        if (options2.keepState) {
                          this.setState({ [address]: data2 });
                        }
                      };
                    }
                  }
                }
              }
              let res2 = this.receive(data);
              if (options2.keepState)
                this.setState({ [address]: data });
            };
          } else {
            options2.onmessage = (data, ws, wsinfo) => {
              this.receive(data, socket, this.sockets[address]);
              if (options2.keepState) {
                this.setState({ [address]: data });
              }
            };
          }
        }
        if (options2.onmessage) {
          socket.addEventListener("message", (ev2) => {
            this.sockets[address].onmessage(ev2.data, socket, this.sockets[address]);
          });
        }
        socket.addEventListener("open", (ev2) => {
          if (this.sockets[address].onopen)
            this.sockets[address].onopen(ev2, socket, this.sockets[address]);
        });
        socket.addEventListener("close", (ev2) => {
          if (this.sockets[address].onclose)
            this.sockets[address].onclose(ev2, socket, this.sockets[address]);
        });
        socket.addEventListener("error", (ev2) => {
          if (this.sockets[address].onerror)
            this.sockets[address].onerror(ev2, socket, this.sockets[address]);
        });
        let send = (message) => {
          return this.transmit(message, socket);
        };
        let post = (route, args, method) => {
          let message = { route, args };
          if (method)
            message.method = method;
          return this.transmit(message, socket);
        };
        let run = (route, args, method) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [{ route, args }, this.sockets[address]._id, callbackId] };
            if (method)
              req.args[0].method = method;
            let onmessage = (ev2) => {
              let data = ev2.data;
              if (typeof data === "string" && data.indexOf("{") > -1)
                data = JSON.parse(ev2.data);
              if (typeof data === "object") {
                if (data.callbackId === callbackId) {
                  socket.removeEventListener("message", onmessage);
                  res2(data.args);
                }
              }
            };
            socket.addEventListener("message", onmessage);
            this.transmit(req, socket);
          });
        };
        let request = (message, method) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [message, this.sockets[address]._id, callbackId] };
            if (method)
              req.method = method;
            let onmessage = (ev2) => {
              let data = ev2.data;
              if (typeof data === "string" && data.indexOf("{") > -1)
                data = JSON.parse(ev2.data);
              if (typeof data === "object") {
                if (data.callbackId === callbackId) {
                  socket.removeEventListener("message", onmessage);
                  res2(data.args);
                }
              }
            };
            socket.addEventListener("message", onmessage);
            this.transmit(req, socket);
          });
        };
        let subscribe = (route, callback, args, key, subInput) => {
          return this.subscribeToSocket(route, this.sockets[address]._id, callback, args, key, subInput);
        };
        let unsubscribe = (route, sub) => {
          return run("unsubscribe", [route, sub]);
        };
        let terminate = () => {
          return this.terminate(this.sockets[address]._id);
        };
        this.sockets[address] = { type: "socket", socket, address, send, post, run, request, subscribe, unsubscribe, terminate, graph: this, __node: { tag: address }, ...options2 };
        let node = this.add(this.sockets[address]);
        node.__addOndisconnected(function() {
          terminate();
        });
        return node;
      };
      this.open = this.openWS;
      this.transmit = (data, ws) => {
        if (typeof data === "object")
          data = JSON.stringify(data);
        if (!ws) {
          let s = this.sockets[Object.keys(this.sockets)[0]];
          if (s)
            ws = s.socket;
        }
        if (ws instanceof WebSocket && ws?.readyState === 1)
          ws.send(data);
        return true;
      };
      this.terminate = (ws) => {
        if (!ws) {
          let keys22 = Object.keys(this.sockets);
          for (const key in keys22) {
            this.terminate(key);
          }
        } else if (typeof ws === "string") {
          for (const k in this.sockets) {
            if (k.includes(ws)) {
              ws = this.sockets[k].socket;
              break;
            }
          }
        }
        if (ws instanceof WebSocket) {
          if (ws.readyState === ws.OPEN)
            ws.close();
          if (this.get(ws.url))
            this.remove(ws.url);
        }
        return true;
      };
      this.request = (message, ws, _id, method) => {
        let callbackId = `${Math.random()}`;
        let req = { route: "runRequest", args: [message, _id, callbackId] };
        if (method)
          req.method = method;
        return new Promise((res2, rej) => {
          let onmessage = (ev2) => {
            let data = ev2.data;
            if (typeof data === "string") {
              if (data.includes("callbackId"))
                data = JSON.parse(data);
            }
            if (typeof data === "object") {
              if (data.callbackId === callbackId) {
                ws.removeEventListener("message", onmessage);
                res2(data.args);
              }
            }
          };
          ws.addEventListener("message", onmessage);
          ws.send(JSON.stringify(req));
        });
      };
      this.runRequest = (message, ws, callbackId) => {
        let res2 = this.receive(message);
        if (typeof ws === "string") {
          for (const s in this.sockets) {
            if (s === ws) {
              ws = this.sockets[s].socket;
              break;
            }
          }
        }
        if (ws) {
          if (res2 instanceof Promise) {
            res2.then((v2) => {
              res2 = { args: v2, callbackId };
              if (ws instanceof WebSocket)
                ws.send(JSON.stringify(res2));
            });
          } else {
            res2 = { args: res2, callbackId };
            if (ws instanceof WebSocket)
              ws.send(JSON.stringify(res2));
          }
        }
        return res2;
      };
      this.subscribeSocket = (route, socket, args, key, subInput) => {
        if (typeof socket === "string" && this.sockets[socket]) {
          socket = this.sockets[socket].socket;
        }
        if (typeof socket === "object")
          return this.subscribe(route, (res2) => {
            if (socket.readyState === socket.OPEN) {
              if (res2 instanceof Promise) {
                res2.then((r) => {
                  socket.send(JSON.stringify({ args: r, callbackId: route }));
                });
              } else {
                socket.send(JSON.stringify({ args: res2, callbackId: route }));
              }
            }
          }, args, key, subInput);
      };
      this.subscribeToSocket = (route, socketId, callback, args, key, subInput) => {
        if (typeof socketId === "string" && this.sockets[socketId]) {
          this.__node.state.subscribeEvent(socketId, (res2) => {
            let msg = JSON.parse(res2);
            if (msg?.callbackId === route) {
              if (!callback)
                this.setState({ [socketId]: msg.args });
              else if (typeof callback === "string") {
                this.run(callback, msg.args);
              } else
                callback(msg.args);
            }
          });
          return this.sockets[socketId].request({ route: "subscribeSocket", args: [route, socketId, args, key, subInput] });
        }
      };
      this.load(this);
    }
  };
  var WebRTCfrontend = class extends Service {
    constructor(options, iceServers) {
      super(options);
      this.name = "webrtc";
      this.rtc = {};
      this.iceServers = [{ urls: ["stun:stun.l.google.com:19302"] }, { urls: ["stun:stun1.l.google.com:19302"] }, { urls: ["stun:stun2.l.google.com:19302"] }, { urls: ["stun:stun3.l.google.com:19302"] }, { urls: ["stun:stun4.l.google.com:19302"] }];
      this.connections = { rtc: this.rtc };
      this.openRTC = async (options2) => {
        if (!options2)
          options2 = {};
        if (!options2._id)
          options2._id = `rtc${Math.floor(Math.random() * 1e15)}`;
        if (!options2.config)
          options2.config = { iceServers: this.iceServers };
        let rtc = new RTCPeerConnection(options2.config);
        if (!this.rtc[options2._id]) {
          if (!options2.channels)
            options2.channels = { "data": true };
          let firstChannel;
          for (const key in options2.channels) {
            firstChannel = key;
            break;
          }
          let send = (message) => {
            return this.transmit(message, options2._id, options2.channels[firstChannel]);
          };
          let post = (route, args, method) => {
            let message = { route, args };
            if (method)
              message.method = method;
            return this.transmit(message, options2._id, options2.channels[firstChannel]);
          };
          let run = (route, args, method) => {
            return new Promise((res2, rej) => {
              let callbackId = Math.random();
              let req = { route: "runRequest", args: [{ route, args }, options2._id, callbackId] };
              if (method)
                req.args[0].method = method;
              let sub;
              let ondata = (data) => {
                if (typeof data === "string" && data.indexOf("{") > -1)
                  data = JSON.parse(data);
                if (typeof data === "object") {
                  if (data.callbackId === callbackId) {
                    this.unsubscribe(options2._id, sub);
                    res2(data.args);
                  }
                }
              };
              sub = this.subscribe(options2._id, ondata);
              this.transmit(req, options2._id, options2.channels[firstChannel]);
            });
          };
          let request = (message, method) => {
            return new Promise((res2, rej) => {
              let callbackId = Math.random();
              let req = { route: "runRequest", args: [message, options2._id, callbackId] };
              if (method)
                req.method = method;
              let sub;
              let ondata = (data) => {
                if (typeof data === "string" && data.indexOf("{") > -1)
                  data = JSON.parse(data);
                if (typeof data === "object") {
                  if (data.callbackId === callbackId) {
                    this.unsubscribe(options2._id, sub);
                    res2(data.args);
                  }
                }
              };
              sub = this.subscribe(options2._id, ondata);
              this.transmit(req, options2._id, options2.channels[firstChannel]);
            });
          };
          let subscribe = (route, callback, args, key, subInput, channelId) => {
            return this.subscribeToRTC(route, options2._id, channelId ? channelId : firstChannel, callback, args, key, subInput);
          };
          let unsubscribe = (route, sub) => {
            return run("unsubscribe", [route, sub]);
          };
          let terminate = () => {
            return this.terminate(options2._id);
          };
          this.rtc[options2._id] = { rtc, _id: options2._id, request, run, post, send, subscribe, unsubscribe, terminate, graph: this, ...options2 };
          if (!options2.ondatachannel)
            options2.ondatachannel = (ev2) => {
              this.rtc[options2._id].channels[ev2.channel.label] = ev2.channel;
              if (!options2.ondata) {
                ev2.channel.addEventListener("message", (mev) => {
                  this.receive(mev.data, ev2.channel, this.rtc[options2._id]);
                  this.setState({ [options2._id]: mev.data });
                });
              } else
                ev2.channel.addEventListener("message", (mev) => {
                  options2.ondata(mev.data, ev2.channel, this.rtc[options2._id]);
                });
            };
          if (options2.channels) {
            for (const channel in options2.channels) {
              if (options2.channels[channel] instanceof RTCDataChannel) {
              } else if (typeof options2.channels[channel] === "object") {
                options2.channels[channel] = this.addDataChannel(rtc, channel, options2.channels[channel]);
              } else {
                options2.channels[channel] = this.addDataChannel(rtc, channel);
              }
              options2.channels[channel].addEventListener("message", (mev) => {
                this.receive(mev.data, channel, this.rtc[options2._id]);
                this.setState({ [options2._id]: mev.data });
              });
            }
          }
          rtc.ontrack = options2.ontrack;
          rtc.onicecandidate = options2.onicecandidate;
          rtc.onicecandidateerror = options2.onicecandidateerror;
          rtc.ondatachannel = options2.ondatachannel;
          rtc.onnegotiationneeded = options2.onnegotiationneeded;
          rtc.oniceconnectionstatechange = options2.oniceconnectionstatechange;
          rtc.onconnectionstatechange = options2.onconnectionstatechange;
          rtc.addEventListener("connectionstatechange", (ev2) => {
            if (rtc.connectionState === "closed" || rtc.connectionState === "failed") {
              if (this.rtc[options2._id].onclose) {
                this.rtc[options2._id].onclose(this.rtc[options2._id]);
              }
            }
          });
        } else {
          Object.assign(this.rtc[options2._id], options2);
        }
        if (options2.hostdescription && !options2.peerdescription) {
          if (!options2.onicecandidate)
            options2.onicecandidate = (ev2) => {
              if (ev2.candidate) {
                let icecandidate = ev2.candidate;
                if (!this.rtc[options2._id].peercandidates)
                  this.rtc[options2._id].peercandidates = {};
                this.rtc[options2._id].peercandidates[`peercandidate${Math.floor(Math.random() * 1e15)}`] = icecandidate;
              }
            };
          return await new Promise((res2, rej) => {
            if (typeof options2.hostdescription === "string") {
              options2.hostdescription = JSON.parse(decodeURIComponent(options2.hostdescription));
            }
            const description = new RTCSessionDescription(options2.hostdescription);
            options2.hostdescription = description;
            rtc.setRemoteDescription(description).then(() => {
              if (options2.hostcandidates) {
                for (const prop in options2.hostcandidates) {
                  const candidate = new RTCIceCandidate(options2.hostcandidates[prop]);
                  rtc.addIceCandidate(candidate).catch(console.error);
                }
              }
              rtc.createAnswer(options2.answer).then((answer) => rtc.setLocalDescription(answer)).then(() => {
                this.rtc[options2._id].peerdescription = encodeURIComponent(JSON.stringify(rtc.localDescription));
                res2(this.rtc[options2._id]);
              });
            }).catch(rej);
          });
        }
        if (options2.peerdescription) {
          this.answerPeer(rtc, options2);
        }
        if (!options2.onicecandidate && !this.rtc[options2._id]?.onicecandidate)
          options2.onicecandidate = (ev2) => {
            if (ev2.candidate) {
              let icecandidate = ev2.candidate;
              if (!this.rtc[options2._id].hostcandidates)
                this.rtc[options2._id].hostcandidates = {};
              this.rtc[options2._id].hostcandidates[`hostcandidate${Math.floor(Math.random() * 1e15)}`] = icecandidate;
            }
          };
        return await new Promise((res2, rej) => {
          rtc.createOffer(options2.offer).then((offer) => rtc.setLocalDescription(offer)).then(() => {
            this.rtc[options2._id].hostdescription = encodeURIComponent(JSON.stringify(rtc.localDescription));
            res2(this.rtc[options2._id]);
          });
        });
      };
      this.open = this.openRTC;
      this.createStream = (options2) => {
        let stream = new MediaStream();
        for (const key in options2) {
          let track = options2[key].track;
          if (!(track instanceof MediaStreamTrack) && typeof track === "object") {
            track = new MediaStreamTrack();
            track.applyConstraints(options2[key].track);
            stream.addTrack(track);
          }
          if (track instanceof MediaStreamTrack) {
            stream.addTrack(track);
            track.onmute = options2[key].onmute;
            track.onunmute = options2[key].onunmute;
            track.onended = options2[key].onended;
          }
        }
        return stream;
      };
      this.addUserMedia = (rtc, options2 = { audio: true, video: { optional: [{ minWidth: 320 }, { minWidth: 640 }, { minWidth: 1024 }, { minWidth: 1280 }, { minWidth: 1920 }, { minWidth: 2560 }] } }) => {
        let senders = [];
        navigator.mediaDevices.getUserMedia(options2).then((stream) => {
          let tracks = stream.getTracks();
          tracks.forEach((track) => {
            senders.push(rtc.addTrack(track, stream));
          });
        });
        return senders;
      };
      this.addTrack = (rtc, track, stream) => {
        rtc.addTrack(track, stream);
        return true;
      };
      this.removeTrack = (rtc, sender) => {
        rtc.removeTrack(sender);
        return true;
      };
      this.addDataChannel = (rtc, name2, options2) => {
        return rtc.createDataChannel(name2, options2);
      };
      this.transmit = (data, id, channel) => {
        if (typeof data === "object" || typeof data === "number")
          data = JSON.stringify(data);
        if (!channel && id) {
          let keys22 = Object.keys(this.rtc[id].channels);
          if (keys22[0])
            channel = this.rtc[id].channels[keys22[0]];
        }
        if (typeof channel === "string") {
          if (id) {
            channel = this.rtc[id].channels[channel];
          } else {
            for (const id2 in this.rtc) {
              if (this.rtc[id2].channels[channel] instanceof RTCDataChannel)
                this.rtc[id2].channels[channel].send(data);
            }
          }
        }
        if (channel instanceof RTCDataChannel)
          channel.send(data);
        return true;
      };
      this.terminate = (rtc) => {
        let tx;
        if (typeof rtc === "string") {
          let room = this.rtc[rtc];
          delete this.rtc[rtc];
          if (room) {
            tx = room.rtc;
          }
        } else if (typeof rtc === "object") {
          tx = rtc.rtc;
        }
        if (rtc instanceof RTCPeerConnection) {
          rtc.close();
        } else if (tx) {
          if (tx)
            tx.close();
        }
        return true;
      };
      this.request = (message, channel, _id, method) => {
        let callbackId = `${Math.random()}`;
        let req = { route: "runRequest", args: [message, _id, callbackId] };
        if (method)
          req.method = method;
        return new Promise((res2, rej) => {
          let onmessage = (ev2) => {
            let data = ev2.data;
            if (typeof data === "string" && data.indexOf("{") > -1)
              data = JSON.parse(ev2.data);
            if (typeof data === "object") {
              if (data.callbackId === callbackId) {
                channel.removeEventListener("message", onmessage);
                res2(data.args);
              }
            }
          };
          channel.addEventListener("message", onmessage);
          channel.send(JSON.stringify(req));
        });
      };
      this.runRequest = (message, channel, callbackId) => {
        let res2 = this.receive(message);
        if (channel) {
          if (typeof channel === "string") {
            for (const key in this.rtc) {
              if (key === channel) {
                channel = this.rtc[key].channels.data;
                break;
              }
            }
          }
          if (res2 instanceof Promise)
            res2.then((v2) => {
              res2 = { args: v2, callbackId };
              if (channel instanceof RTCDataChannel)
                channel.send(JSON.stringify(res2));
              return res2;
            });
          else {
            res2 = { args: res2, callbackId };
            if (channel instanceof RTCDataChannel)
              channel.send(JSON.stringify(res2));
          }
        }
        return res2;
      };
      this.subscribeRTC = (route, rtcId, args, key, subInput, channel) => {
        if (typeof channel === "string" && this.rtc[rtcId]) {
          channel = this.rtc[rtcId].channels[channel];
        } else if (!channel) {
          channel = this.rtc[rtcId].channels[Object.keys(this.rtc[rtcId].channels)[0]];
        }
        return this.subscribe(route, (res2) => {
          if (res2 instanceof Promise) {
            res2.then((r) => {
              channel.send(JSON.stringify({ args: r, callbackId: route }));
            });
          } else {
            channel.send(JSON.stringify({ args: res2, callbackId: route }));
          }
        }, args, key, subInput);
      };
      this.subscribeToRTC = (route, rtcId, channelId, callback, args, key, subInput) => {
        if (typeof channelId === "string" && this.rtc[rtcId]) {
          let c = this.rtc[rtcId];
          let channel = c.channels[channelId];
          if (channel) {
            this.__node.state.subscribeEvent(rtcId, (res2) => {
              if (res2?.callbackId === route) {
                if (!callback)
                  this.setState({ [rtcId]: res2.args });
                else if (typeof callback === "string") {
                  this.run(callback, res2.args);
                } else
                  callback(res2.args);
              }
            });
            return c.request({ route: "subscribeRTC", args: [route, rtcId, args, key, subInput, channelId] });
          }
        }
      };
      this.load(this);
      if (iceServers)
        this.iceServers = iceServers;
    }
    addIceCandidate(rtc, candidate) {
      if (typeof rtc === "string")
        rtc = this.rtc[rtc]?.rtc;
      if (rtc)
        return rtc.addIceCandidate(candidate);
    }
    receiveCallInformation(options) {
      if (!options._id)
        options._id = `rtc${Math.floor(Math.random() * 1e15)}`;
      else if (this.rtc[options._id]) {
        if (options.hostcandidates) {
          for (const key in options.hostcandidates)
            this.addIceCandidate(this.rtc[options._id].rtc, options.hostcandidates[key]);
        } else if (options.peercandidates) {
          for (const key in options.peercandidates)
            this.addIceCandidate(this.rtc[options._id].rtc, options.peercandidates[key]);
        }
      } else if (this.unanswered[options._id]) {
        this.recursivelyAssign(this.unanswered[options._id], options);
      }
      return options._id;
    }
    answerCall(options) {
      if (typeof options === "string")
        options = this.unanswered[options];
      delete this.unanswered[options._id];
      return this.openRTC(options);
    }
    answerPeer(rtc, options) {
      if (typeof rtc === "string")
        rtc = this.rtc[rtc]?.rtc;
      return new Promise((res2, rej) => {
        if (typeof options.peerdescription === "string") {
          options.peerdescription = JSON.parse(decodeURIComponent(options.peerdescription));
        }
        const description = new RTCSessionDescription(options.peerdescription);
        options.peerdescription = description;
        if (this.rtc[options._id])
          this.rtc[options._id].peerdescription = description;
        rtc.setRemoteDescription(description).then(() => {
          if (options.peercandidates) {
            for (const prop in options.peercandidates) {
              const candidate = new RTCIceCandidate(options.peercandidates[prop]);
              if (this.rtc[options._id])
                this.rtc[options._id].peercandidates[prop] = options.peercandidates[prop];
              rtc.addIceCandidate(candidate).catch(console.error);
            }
          }
          res2(this.rtc[options._id] ? this.rtc[options._id] : rtc);
        }).catch(rej);
      });
    }
  };
  var import_web_worker = __toESM2(require_browser());
  var WorkerService = class extends Service {
    constructor(options) {
      super();
      this.name = "worker";
      this.workers = {};
      this.threadRot = 0;
      this.loadWorkerRoute = (rt, routeKey) => {
        if (rt.workerUrl)
          rt.url = rt.workerUrl;
        if (rt.workerId)
          rt.__node.tag = rt.workerId;
        if (!rt.__node.tag)
          rt.__node.tag = routeKey;
        rt._id = rt.__node.tag;
        let worker;
        if (this.workers[rt._id])
          worker = this.workers[rt._id];
        else if (rt.worker)
          worker = rt.worker;
        if (!worker) {
          worker = this.addWorker(rt);
        }
        rt.worker = worker;
        if (!rt.worker.__ondisconnected) {
          let ondelete = (rt2) => {
            rt2.worker?.terminate();
          };
          rt.__addOndisconnected(ondelete);
        }
        if (rt.transferFunctions) {
          for (const prop in rt.transferFunctions) {
            this.transferFunction(worker, rt.transferFunctions[prop], prop);
          }
        }
        if (rt.transferClasses) {
          for (const prop in rt.transferClasses) {
            this.transferClass(worker, rt.transferClasses[prop], prop);
          }
        }
        if (worker) {
          if (!rt.__operator) {
            rt.__operator = (...args) => {
              if (rt.callback) {
                if (!this.__node.nodes.get(rt.__node.tag)?.__children)
                  worker.post(rt.callback, args);
                else
                  return worker.run(rt.callback, args);
              } else {
                if (!this.__node.nodes.get(rt.__node.tag)?.__children)
                  worker.send(args);
                else
                  return worker.request(args);
              }
            };
          }
          if (rt.init) {
            worker.run(rt.init, rt.initArgs, void 0, rt.initTransfer);
          }
          return worker;
        }
      };
      this.workerloader = { "workers": (node, parent, graph3, roots) => {
        let rt = node;
        if (!node.parentRoute && (parent?.callback && parent?.worker))
          node.parentRoute = parent?.callback;
        if (rt?.worker || rt?.workerId || rt?.workerUrl) {
          let worker = this.loadWorkerRoute(rt, rt.__node.tag);
          if (worker) {
            if (!rt.parentRoute && rt.__parent?.callback)
              rt.parentRoute = rt.__parent.callback;
            if (rt.__parent && !rt.portId) {
              if (typeof rt.__parent === "string") {
                if (rt.__node.tag !== rt.__parent && worker._id !== rt.__parent)
                  rt.portId = this.establishMessageChannel(worker, rt.__parent);
              } else if (rt.__node.tag !== rt.__parent?.__node?.tag && worker._id !== rt.__parent?.tag) {
                rt.portId = this.establishMessageChannel(worker, rt.__parent.worker);
              }
            }
            ;
            if (rt.parentRoute) {
              if (!rt.stopped) {
                if (typeof rt.__parent === "string" && rt.__parent === worker._id) {
                  worker.run("subscribe", [rt.parentRoute, void 0, void 0, rt.callback]);
                } else if (rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag) {
                  worker.run("subscribe", [rt.parentRoute, void 0, void 0, rt.callback]);
                } else
                  worker.run("subscribeToWorker", [rt.parentRoute, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                    worker.workerSubs[rt.parentRoute + rt.portId].sub = sub;
                  });
              }
              if (!(typeof rt.__parent === "string" && rt.__parent === worker._id) && !(rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag))
                worker.workerSubs[rt.parentRoute + rt.portId] = { sub: null, route: rt.parentRoute, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
            } else if (rt.__parent) {
              if (typeof rt.__parent === "string") {
                if (!rt.stopped) {
                  if (rt.__parent === worker._id) {
                    worker.run("subscribe", [rt.__parent, void 0, rt.callback]);
                  } else
                    worker.run("subscribeToWorker", [rt.__parent, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                      worker.workerSubs[rt.__parent + rt.portId].sub = sub;
                    });
                }
                if (!(typeof rt.__parent === "string" && rt.__parent === worker._id))
                  worker.workerSubs[rt.__parent + rt.portId] = { sub: null, route: worker._id, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
              } else if (rt.__parent?.__node?.tag && rt.__parent?.worker) {
                if (!rt.stopped) {
                  if (rt.__node.tag === rt.__parent.__node.tag || worker._id === rt.__parent.__node.tag) {
                    worker.run("subscribe", [rt.__parent.__node.tag, void 0, void 0, rt.callback]);
                  } else
                    worker.run("subscribeToWorker", [rt.__parent.__node.tag, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                      worker.workerSubs[rt.__parent.__node.tag + rt.portId].sub = sub;
                    });
                }
                if (!(rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag))
                  worker.workerSubs[rt.__parent.__node.tag + rt.portId] = { sub: null, route: rt.__parent.__node.tag, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
              }
            }
          }
        } else if (rt.__parent && rt.parentRoute) {
          if (typeof rt.__parent === "string" && roots[rt.__parent]?.worker) {
            roots[rt.__parent].worker.subscribe(rt.parentRoute, rt.__operator, void 0, void 0, void 0, rt.blocking);
          } else if (rt.__parent?.worker) {
            rt.__parent.worker.subscribe(rt.parentRoute, rt.__operator, void 0, void 0, void 0, rt.blocking);
          }
        }
        return rt;
      } };
      this.addDefaultMessageListener = () => {
        globalThis.onmessage = (ev2) => {
          let result = this.receive(ev2.data);
          if (this.__node.keepState)
            this.setState({ [this.name]: result });
        };
      };
      this.postMessage = (message, target, transfer) => {
        if (this.workers[target]) {
          this.workers[target].send(message, transfer);
        } else {
          globalThis.postMessage(message, target, transfer);
        }
      };
      this.addWorker = (options2) => {
        let worker;
        if (!options2._id)
          options2._id = `worker${Math.floor(Math.random() * 1e15)}`;
        if (options2.url)
          worker = new import_web_worker.default(options2.url);
        else if (options2.port) {
          worker = options2.port;
        } else if (this.workers[options2._id]) {
          if (this.workers[options2._id].port)
            worker = this.workers[options2._id].port;
          else
            worker = this.workers[options2._id].worker;
        }
        if (!worker)
          return;
        let send = (message, transfer) => {
          return this.transmit(message, worker, transfer);
        };
        let post = (route, args, method, transfer) => {
          let message = { route, args };
          if (method)
            message.method = method;
          return this.transmit(message, worker, transfer);
        };
        let run = (route, args, method, transfer) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [{ route, args }, options2._id, callbackId] };
            if (method)
              req.args[0].method = method;
            let onmessage = (ev2) => {
              if (typeof ev2.data === "object") {
                if (ev2.data.callbackId === callbackId) {
                  worker.removeEventListener("message", onmessage);
                  res2(ev2.data.args);
                }
              }
            };
            worker.addEventListener("message", onmessage);
            this.transmit(req, worker, transfer);
          });
        };
        let request = (message, method, transfer) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [message, options2._id, callbackId] };
            if (method)
              req.method = method;
            let onmessage = (ev2) => {
              if (typeof ev2.data === "object") {
                if (ev2.data.callbackId === callbackId) {
                  worker.removeEventListener("message", onmessage);
                  res2(ev2.data.args);
                }
              }
            };
            worker.addEventListener("message", onmessage);
            this.transmit(req, worker, transfer);
          });
        };
        let workerSubs = {};
        let subscribe = (route, callback, args, key, subInput, blocking) => {
          return this.subscribeToWorker(route, options2._id, callback, args, key, subInput, blocking);
        };
        let unsubscribe = (route, sub) => {
          return run("unsubscribe", [route, sub]);
        };
        let start = async (route, portId, callback, blocking) => {
          if (route)
            await run("subscribeToWorker", [route, portId, void 0, callback, blocking]).then((sub) => {
              if (sub)
                workerSubs[route + portId] = { sub, route, portId, callback, blocking };
            });
          else
            for (const key in workerSubs) {
              if (typeof workerSubs[key].sub !== "number")
                await run("subscribeToWorker", [workerSubs[key].route, workerSubs[key].portId, void 0, workerSubs[key].callback, void 0, workerSubs[key].blocking]).then((sub) => {
                  workerSubs[key].sub = sub;
                });
              console.log(JSON.stringify(workerSubs));
            }
          return true;
        };
        let stop = async (route, portId) => {
          if (route && portId && workerSubs[route + portId]) {
            await run("unsubscribe", [route, workerSubs[route + portId].sub]);
            workerSubs[route + portId].sub = false;
          } else {
            for (const key in workerSubs) {
              if (typeof workerSubs[key].sub === "number") {
                await run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]).then(console.log);
              }
              workerSubs[key].sub = false;
            }
          }
          return true;
        };
        let terminate = () => {
          for (const key in workerSubs) {
            if (typeof workerSubs[key].sub === "number") {
              run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]);
            }
            workerSubs[key].sub = false;
          }
          return this.terminate(options2._id);
        };
        if (!options2.onmessage)
          options2.onmessage = (ev2) => {
            this.receive(ev2.data);
            this.setState({ [options2._id]: ev2.data });
          };
        if (!options2.onerror) {
          options2.onerror = (ev2) => {
            console.error(ev2.data);
          };
        }
        worker.onmessage = options2.onmessage;
        worker.onerror = options2.onerror;
        this.workers[options2._id] = { worker, send, post, run, request, subscribe, unsubscribe, terminate, start, stop, postMessage: worker.postMessage, workerSubs, graph: this, ...options2 };
        return this.workers[options2._id];
      };
      this.open = this.addWorker;
      this.toObjectURL = (scriptTemplate) => {
        let blob = new Blob([scriptTemplate], { type: "text/javascript" });
        return URL.createObjectURL(blob);
      };
      this.transmit = (message, worker, transfer) => {
        if (!transfer) {
          transfer = this.getTransferable(message);
        }
        if (worker instanceof import_web_worker.default || worker instanceof MessagePort) {
          worker.postMessage(message, transfer);
        } else if (typeof worker === "string") {
          if (this.workers[worker]) {
            if (this.workers[worker].port)
              this.workers[worker].port.postMessage(message, transfer);
            else if (this.workers[worker].worker)
              this.workers[worker].worker.postMessage(message, transfer);
          }
        } else {
          let keys22 = Object.keys(this.workers);
          this.workers[keys22[this.threadRot]].worker.postMessage(message, transfer);
          this.threadRot++;
          if (this.threadRot === keys22.length)
            this.threadRot = 0;
        }
        return message;
      };
      this.terminate = (worker) => {
        let onclose;
        if (typeof worker === "string") {
          let obj = this.workers[worker];
          if (obj) {
            delete this.workers[worker];
            worker = obj.worker;
            if (obj.onclose)
              onclose = obj.onclose;
          }
        } else if (typeof worker === "object") {
          if (worker?._id) {
            worker = worker.worker;
            delete this.workers[worker?._id];
          }
        }
        if (worker instanceof import_web_worker.default) {
          worker.terminate();
          if (onclose)
            onclose(worker);
          return true;
        }
        if (worker instanceof MessagePort) {
          worker.close();
          if (onclose)
            onclose(worker);
          return true;
        }
        return false;
      };
      this.establishMessageChannel = (worker, worker2) => {
        let workerId;
        if (typeof worker === "string") {
          workerId = worker;
          if (this.workers[worker]) {
            if (this.workers[worker].port)
              worker = this.workers[worker].port;
            else
              worker2 = this.workers[worker].worker;
          }
        } else if (worker?.worker) {
          worker = worker.worker;
        }
        if (typeof worker2 === "string") {
          if (this.workers[worker2]) {
            if (this.workers[worker2].port)
              worker2 = this.workers[worker2].port;
            else
              worker2 = this.workers[worker2].worker;
          }
        } else if (worker2?.worker) {
          worker2 = worker2.worker;
        }
        if (worker instanceof import_web_worker.default || worker instanceof MessagePort) {
          let channel = new MessageChannel();
          let portId = `port${Math.floor(Math.random() * 1e15)}`;
          worker.postMessage({ route: "addWorker", args: { port: channel.port1, _id: portId } }, [channel.port1]);
          if (worker2 instanceof import_web_worker.default || worker2 instanceof MessagePort) {
            worker2.postMessage({ route: "addWorker", args: { port: channel.port2, _id: portId } }, [channel.port2]);
          } else if (workerId && this.workers[workerId]) {
            channel.port2.onmessage = this.workers[workerId].onmessage;
            this.workers[workerId].port = channel.port2;
          }
          return portId;
        }
        return false;
      };
      this.request = (message, workerId, transfer, method) => {
        let worker = this.workers[workerId].worker;
        return new Promise((res2, rej) => {
          let callbackId = Math.random();
          let req = { route: "runRequest", args: [message, callbackId] };
          if (method)
            req.method = method;
          let onmessage = (ev2) => {
            if (typeof ev2.data === "object") {
              if (ev2.data.callbackId === callbackId) {
                worker.removeEventListener("message", onmessage);
                res2(ev2.data.args);
              }
            }
          };
          worker.addEventListener("message", onmessage);
          this.transmit(req, worker, transfer);
        });
      };
      this.runRequest = (message, worker, callbackId) => {
        let res2 = this.receive(message);
        if (typeof worker === "string" && this.workers[worker]) {
          if (this.workers[worker].port)
            worker = this.workers[worker].port;
          else
            worker = this.workers[worker].worker;
        }
        if (res2 instanceof Promise) {
          res2.then((r) => {
            if (worker instanceof import_web_worker.default || worker instanceof MessagePort)
              worker.postMessage({ args: r, callbackId });
            else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
              globalThis.postMessage({ args: r, callbackId });
          });
        } else {
          if (worker instanceof import_web_worker.default || worker instanceof MessagePort)
            worker.postMessage({ args: res2, callbackId });
          else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
            globalThis.postMessage({ args: res2, callbackId });
        }
        return res2;
      };
      this.subscribeWorker = (route, worker, args, key, subInput, blocking) => {
        let callback;
        if (blocking) {
          let blocked = false;
          callback = (res2) => {
            if (!blocked) {
              blocked = true;
              if (res2 instanceof Promise) {
                res2.then((r) => {
                  if (worker?.run)
                    worker.run("triggerSubscription", [route, worker._id, r]).then((ret) => {
                      blocked = false;
                    });
                });
              } else {
                if (worker?.run)
                  worker.run("triggerSubscription", [route, worker._id, res2]).then((ret) => {
                    blocked = false;
                  });
              }
            }
          };
        } else {
          callback = (res2) => {
            if (res2 instanceof Promise) {
              res2.then((r) => {
                if (worker?.postMessage)
                  worker.postMessage({ args: r, callbackId: route });
                else if (globalThis.postMessage)
                  globalThis.postMessage({ args: r, callbackId: route });
              });
            } else {
              if (worker?.postMessage)
                worker.postMessage({ args: res2, callbackId: route });
              else if (globalThis.postMessage)
                globalThis.postMessage({ args: res2, callbackId: route });
            }
          };
        }
        if (!blocking && worker?.port) {
          worker = worker.port;
        } else if (!blocking && worker?.worker) {
          worker = worker.worker;
        } else if (typeof worker === "string" && this.workers[worker]) {
          if (blocking)
            worker = this.workers[worker];
          else if (this.workers[worker].port)
            worker = this.workers[worker].port;
          else
            worker = this.workers[worker].worker;
        }
        return this.subscribe(route, callback, args, key, subInput);
      };
      this.subscribeToWorker = (route, workerId, callback, args, key, subInput, blocking) => {
        if (typeof workerId === "string" && this.workers[workerId]) {
          this.__node.state.subscribeEvent(workerId, (res2) => {
            if (res2?.callbackId === route) {
              if (!callback)
                this.setState({ [workerId]: res2.args });
              else if (typeof callback === "string") {
                this.run(callback, res2.args);
              } else
                callback(res2.args);
            }
          });
          return this.workers[workerId].run("subscribeWorker", [route, workerId, args, key, subInput, blocking]);
        }
      };
      this.triggerSubscription = async (route, workerId, result) => {
        if (this.__node.state.triggers[workerId])
          for (let i22 = 0; i22 < this.__node.state.triggers[workerId].length; i22++) {
            await this.__node.state.triggers[workerId][i22].onchange({ args: result, callbackId: route });
          }
        return true;
      };
      this.pipeWorkers = (sourceWorker, listenerWorker, sourceRoute, listenerRoute, portId, args, key, subInput, blocking) => {
        if (typeof sourceWorker === "string")
          sourceWorker = this.workers[sourceWorker];
        if (typeof listenerWorker === "string")
          listenerWorker = this.workers[listenerWorker];
        if (!portId) {
          portId = this.establishMessageChannel(sourceWorker.worker, listenerWorker.worker);
        }
        return listenerWorker.run("subscribeToWorker", [sourceRoute, portId, listenerRoute, args, key, subInput, blocking]);
      };
      this.unpipeWorkers = (sourceRoute, sourceWorker, sub) => {
        if (typeof sourceWorker === "string")
          sourceWorker = this.workers[sourceWorker];
        if (typeof sourceWorker === "object") {
          return sourceWorker.run("unsubscribe", [sourceRoute, sub]);
        }
      };
      this.connections = { workers: this.workers };
      if (options?.services)
        this.addServices(options.services);
      this.load(this);
      this.setLoaders(this.workerloader);
      if (options)
        this.init(options);
      if (typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope) {
        this.addDefaultMessageListener();
      }
    }
    getTransferable(message) {
      let transfer;
      if (typeof message === "object") {
        if (message.args) {
          if (message.args?.constructor?.name === "Object") {
            for (const key in message.args) {
              if (ArrayBuffer.isView(message.args[key])) {
                if (!transfer)
                  transfer = [message.args[key].buffer];
                else
                  transfer.push(message.args[key].buffer);
              } else if (message.args[key]?.constructor?.name === "ArrayBuffer") {
                if (!transfer)
                  transfer = [message.args[key]];
                else
                  transfer.push(message.args[key]);
              }
            }
          } else if (Array.isArray(message.args) && message.args.length < 11) {
            message.args.forEach((arg) => {
              if (ArrayBuffer.isView(arg)) {
                transfer = [arg.buffer];
              } else if (arg?.constructor?.name === "ArrayBuffer")
                transfer = [arg];
            });
          } else if (ArrayBuffer.isView(message.args)) {
            transfer = [message.args.buffer];
          } else if (message.args?.constructor?.name === "ArrayBuffer") {
            transfer = [message];
          }
        } else if (message?.constructor?.name === "Object") {
          for (const key in message) {
            if (ArrayBuffer.isView(message[key])) {
              if (!transfer)
                transfer = [message[key].buffer];
              else
                transfer.push(message[key].buffer);
            } else if (message[key]?.constructor?.name === "ArrayBuffer") {
              if (!transfer)
                transfer = [message[key]];
              else
                transfer.push(message[key]);
            }
          }
        } else if (Array.isArray(message) && message.length < 11) {
          message.forEach((arg) => {
            if (ArrayBuffer.isView(arg)) {
              transfer = [arg.buffer];
            } else if (arg.constructor?.name === "ArrayBuffer")
              transfer = [arg];
          });
        } else if (ArrayBuffer.isView(message)) {
          transfer = [message.buffer];
        } else if (message.constructor?.name === "ArrayBuffer") {
          transfer = [message];
        }
      }
      return transfer;
    }
  };
  var mouseEventHandler = makeSendPropertiesHandler(["ctrlKey", "metaKey", "altKey", "shiftKey", "button", "which", "pointerType", "clientX", "clientY", "pageX", "pageY", "movementX", "movementY", "x", "y", "which", "timeStamp"]);
  var wheelEventHandlerImpl = makeSendPropertiesHandler(["deltaX", "deltaY"]);
  var keydownEventHandler = makeSendPropertiesHandler(["ctrlKey", "metaKey", "shiftKey", "altKey", "isComposing", "keyCode", "key", "code", "repeat", "timeStamp"]);
  function focusEventHandler(event, sendFn) {
    const data = { type: event.type };
    data.isTrusted = event.isTrusted;
    data.bubbles = event.bubbles;
    data.cancelBubble = event.cancelBubble;
    data.cancelable = event.cancelable;
    data.composed = event.composed;
    data.defaultPrevent = event.defaultPrevented;
    data.eventPhase = event.eventPhase;
    data.returnValue = event.returnValue;
    data.currentTarget = event.currentTarget.id ? event.currentTarget.id : event.currentTarget.constructor.name;
    data.target = data.currentTarget;
    data.srcElement = data.currentTarget;
    sendFn(data);
  }
  function wheelEventHandler(event, sendFn) {
    if (event.preventDefault)
      event.preventDefault();
    wheelEventHandlerImpl(event, sendFn);
  }
  function preventDefaultHandler(event) {
    if (event.preventDefault)
      event.preventDefault();
  }
  function copyProperties(src, properties, dst) {
    for (const name2 of properties) {
      dst[name2] = src[name2];
    }
  }
  function makeSendPropertiesHandler(properties) {
    return function sendProperties(event, sendFn) {
      const data = { type: event.type };
      copyProperties(event, properties, data);
      sendFn(data);
    };
  }
  function touchEventHandler(event, sendFn) {
    const touches = [];
    const data = { type: event.type, touches };
    for (let i22 = 0; i22 < event.touches.length; ++i22) {
      const touch = event.touches[i22];
      touches.push({ pageX: touch.pageX, pageY: touch.pageY });
    }
    sendFn(data);
  }
  var i = 1;
  var keys = {};
  while (i < 222) {
    keys[i] = true;
    i++;
  }
  function filteredKeydownEventHandler(event, sendFn) {
    let { keyCode } = event;
    if (keys[keyCode]) {
      if (event.preventDefault && (keyCode < 110 || keyCode > 123))
        event.preventDefault();
      keydownEventHandler(event, sendFn);
    }
  }
  var eventHandlers = { contextmenu: preventDefaultHandler, mousedown: mouseEventHandler, mousemove: mouseEventHandler, mouseup: mouseEventHandler, pointerdown: mouseEventHandler, pointermove: mouseEventHandler, pointerup: mouseEventHandler, pointerlockchange: mouseEventHandler, webkitpointerlockchange: mouseEventHandler, focus: focusEventHandler, blur: focusEventHandler, pointerout: mouseEventHandler, touchstart: touchEventHandler, touchmove: touchEventHandler, touchend: touchEventHandler, wheel: wheelEventHandler, keydown: filteredKeydownEventHandler, keyup: filteredKeydownEventHandler };
  function initProxyElement(element, worker, id) {
    if (!id)
      id = "proxy" + Math.floor(Math.random() * 1e15);
    const sendEvent = (data) => {
      if (!worker) {
        handleProxyEvent(data, id);
      } else
        worker.postMessage({ route: "handleProxyEvent", args: [data, id] });
    };
    let entries = Object.entries(eventHandlers);
    for (const [eventName, handler] of entries) {
      element.addEventListener(eventName, function(event) {
        handler(event, sendEvent);
      });
    }
    if (eventHandlers.keydown) {
      globalThis.addEventListener("keydown", function(ev2) {
        eventHandlers.keydown(ev2, sendEvent);
      });
    }
    if (eventHandlers.keyup) {
      globalThis.addEventListener("keyup", function(ev2) {
        eventHandlers.keyup(ev2, sendEvent);
      });
    }
    const sendSize = () => {
      const rect = element.getBoundingClientRect();
      sendEvent({ type: "resize", left: rect.left, top: rect.top, width: element.clientWidth, height: element.clientHeight });
    };
    sendSize();
    globalThis.addEventListener("resize", sendSize);
    return id;
  }
  var EventDispatcher = class {
    addEventListener(type, listener) {
      if (this.__listeners === void 0)
        this.__listeners = {};
      const listeners = this.__listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this.__listeners === void 0)
        return false;
      const listeners = this.__listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event, target) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        if (!target)
          event.target = this;
        else
          event.target = target;
        const array = listenerArray.slice(0);
        for (let i22 = 0, l = array.length; i22 < l; i22++) {
          array[i22].call(this, event);
        }
      }
    }
  };
  function noop() {
  }
  var ElementProxyReceiver = class extends EventDispatcher {
    constructor() {
      super();
      this.__listeners = {};
      this.style = {};
      this.setPointerCapture = () => {
      };
      this.releasePointerCapture = () => {
      };
      this.getBoundingClientRect = () => {
        return { left: this.left, top: this.top, width: this.width, height: this.height, right: this.left + this.width, bottom: this.top + this.height };
      };
      this.handleEvent = (data) => {
        if (data.type === "resize") {
          this.left = data.left;
          this.top = data.top;
          this.width = data.width;
          this.height = data.height;
          if (typeof this.proxied === "object") {
            this.proxied.style.width = this.width + "px";
            this.proxied.style.height = this.height + "px";
            this.proxied.clientWidth = this.width;
            this.proxied.clientHeight = this.height;
          }
        }
        data.preventDefault = noop;
        data.stopPropagation = noop;
        this.dispatchEvent(data, this.proxied);
      };
      this.style = {};
    }
    get clientWidth() {
      return this.width;
    }
    get clientHeight() {
      return this.height;
    }
    focus() {
    }
    blur() {
    }
  };
  var ProxyManager = class {
    constructor() {
      this.targets = {};
      this.makeProxy = (id, addTo = void 0) => {
        if (!id)
          id = `proxyReceiver${Math.floor(Math.random() * 1e15)}`;
        let proxy;
        if (this.targets[id])
          proxy = this.targets[id];
        else {
          proxy = new ElementProxyReceiver();
          this.targets[id] = proxy;
        }
        if (typeof addTo === "object") {
          addTo.proxy = proxy;
          proxy.proxied = addTo;
          if (typeof WorkerGlobalScope !== "undefined")
            addTo.style = proxy.style;
          if (proxy.width) {
            addTo.style.width = proxy.width + "px";
            addTo.clientWidth = proxy.width;
          }
          if (proxy.height) {
            addTo.style.height = proxy.height + "px";
            addTo.clientHeight = proxy.height;
          }
          addTo.setPointerCapture = proxy.setPointerCapture.bind(proxy);
          addTo.releasePointerCapture = proxy.releasePointerCapture.bind(proxy);
          addTo.getBoundingClientRect = proxy.getBoundingClientRect.bind(proxy);
          addTo.addEventListener = proxy.addEventListener.bind(proxy);
          addTo.removeEventListener = proxy.removeEventListener.bind(proxy);
          addTo.handleEvent = proxy.handleEvent.bind(proxy);
          addTo.dispatchEvent = proxy.dispatchEvent.bind(proxy);
          addTo.focus = proxy.focus.bind(proxy);
          addTo.blur = proxy.blur.bind(proxy);
        }
      };
      this.getProxy = (id) => {
        return this.targets[id];
      };
      this.handleEvent = (data, id) => {
        if (!this.targets[id])
          this.makeProxy(id);
        if (this.targets[id]) {
          this.targets[id].handleEvent(data);
          return true;
        }
        return void 0;
      };
      if (!globalThis.document)
        globalThis.document = { elementFromPoint: (...args) => {
          return this.targets[Object.keys(this.targets)[0]].proxied;
        } };
    }
  };
  function makeProxy(id, elm) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager();
      this.__node.graph.ProxyManager.makeProxy(id, elm);
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager();
      globalThis.ProxyManager.makeProxy(id, elm);
    }
    return id;
  }
  function handleProxyEvent(data, id) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager();
      if (this.__node.graph.ProxyManager.handleEvent(data, id))
        return data;
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager();
      if (globalThis.ProxyManager.handleEvent(data, id))
        return data;
    }
  }
  var proxyElementWorkerRoutes = { initProxyElement, makeProxy, handleProxyEvent };
  function Renderer(options) {
    if (options.worker) {
      let worker = options.worker;
      let route = options.route;
      if (worker instanceof Blob || typeof worker === "string") {
        worker = new Worker(worker);
      }
      delete options.worker;
      delete options.route;
      return transferCanvas(worker, options, route);
    } else {
      initProxyElement(options.canvas, void 0, options._id);
      return setupCanvas(options);
    }
  }
  function transferCanvas(worker, options, route) {
    console.log(options);
    if (!options)
      return void 0;
    if (!options._id)
      options._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    let offscreen = options.canvas.transferControlToOffscreen();
    if (!options.width)
      options.width = options.canvas.clientWidth;
    if (!options.height)
      options.height = options.canvas.clientHeight;
    let message = { route: route ? route : "setupCanvas", args: { ...options, canvas: offscreen } };
    if (this?.__node?.graph)
      this.__node.graph.run("initProxyElement", options.canvas, worker, options._id);
    else
      initProxyElement(options.canvas, worker, options._id);
    if (options.draw) {
      if (typeof options.draw === "function")
        message.args.draw = options.draw.toString();
      else
        message.args.draw = options.draw;
    }
    if (options.update) {
      if (typeof options.update === "function")
        message.args.update = options.update.toString();
      else
        message.args.update = options.update;
    }
    if (options.init) {
      if (typeof options.init === "function")
        message.args.init = options.init.toString();
      else
        message.args.init = options.init;
    }
    if (options.clear) {
      if (typeof options.clear === "function")
        message.args.clear = options.clear.toString();
      else
        message.args.clear = options.clear;
    }
    let tr = [offscreen];
    if (options.transfer) {
      tr.push(...options.transfer);
      delete options.transfer;
    }
    worker.postMessage(message, tr);
    const canvascontrols = { _id: options._id, width: options.width, height: options.height, worker, draw: (props, transfer) => {
      worker.postMessage({ route: "drawFrame", args: [props, options._id] }, transfer);
    }, update: (props, transfer) => {
      worker.postMessage({ route: "updateCanvas", args: [props, options._id] }, transfer);
    }, clear: () => {
      worker.postMessage({ route: "clearCanvas", args: options._id });
    }, init: () => {
      worker.postMessage({ route: "initCanvas", args: options._id });
    }, stop: () => {
      worker.postMessage({ route: "stopAnim", args: options._id });
    }, start: () => {
      worker.postMessage({ route: "startAnim", args: options._id });
    }, set: (newDrawProps, transfer) => {
      worker.postMessage({ route: "setDraw", args: [newDrawProps, options._id] }, transfer);
    }, terminate: () => {
      worker.terminate();
    } };
    return canvascontrols;
  }
  function setDraw(settings2, _id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (_id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
    } else {
      if (_id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
    }
    if (canvasopts) {
      if (settings2.canvas) {
        canvasopts.canvas = settings2.canvas;
        if (this?.__node?.graph)
          this.__node.graph.run("makeProxy", canvasopts._id, canvasopts.canvas);
        else
          proxyElementWorkerRoutes.makeProxy(canvasopts._id, canvasopts.canvas);
      }
      if (typeof settings2.context === "string")
        canvasopts.context = canvasopts.canvas.getContext(settings2.context);
      else if (settings2.context)
        canvasopts.context = settings2.context;
      if (settings2.width)
        canvasopts.canvas.width = settings2.width;
      if (settings2.height)
        canvasopts.canvas.height = settings2.height;
      if (typeof settings2.draw === "string")
        settings2.draw = parseFunctionFromText3(settings2.draw);
      if (typeof settings2.draw === "function") {
        canvasopts.draw = settings2.draw.bind(settings2);
      }
      if (typeof settings2.update === "string")
        settings2.update = parseFunctionFromText3(settings2.update);
      if (typeof settings2.update === "function") {
        canvasopts.update = settings2.update.bind(settings2);
      }
      if (typeof settings2.init === "string")
        settings2.init = parseFunctionFromText3(settings2.init);
      if (typeof settings2.init === "function") {
        canvasopts.init = settings2.init.bind(settings2);
      }
      if (typeof settings2.clear === "string")
        settings2.clear = parseFunctionFromText3(settings2.clear);
      if (typeof settings2.clear === "function") {
        canvasopts.clear = settings2.clear.bind(settings2);
      }
      return settings2._id;
    }
    return void 0;
  }
  function setupCanvas(options) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.CANVASES)
        this.__node.graph.CANVASES = {};
    } else if (!globalThis.CANVASES)
      globalThis.CANVASES = {};
    let canvasOptions = options;
    options._id ? canvasOptions._id = options._id : canvasOptions._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    typeof options.context === "string" ? canvasOptions.context = options.canvas.getContext(options.context) : canvasOptions.context = options.context;
    "animating" in options ? canvasOptions.animating = options.animating : canvasOptions.animating = true;
    if (this?.__node?.graph?.CANVASES[canvasOptions._id]) {
      this.__node.graph.run("setDraw", canvasOptions);
    } else if (globalThis.CANVASES?.[canvasOptions._id]) {
      setDraw(canvasOptions);
    } else {
      if (this?.__node?.graph) {
        canvasOptions.graph = this.__node.graph;
        if (!canvasOptions.__node) {
          canvasOptions.__node = {};
        }
        if (!canvasOptions.__node.tag)
          canvasOptions.__node.tag = canvasOptions._id;
        canvasOptions = this.__node.graph.add(canvasOptions);
        canvasOptions.__addOndisconnected = () => {
          canvasOptions.stop();
          delete this.__node.graph.CANVASES[canvasOptions._id];
        };
      }
      if (this?.__node?.graph)
        this.__node.graph.CANVASES[canvasOptions._id] = canvasOptions;
      else
        globalThis.CANVASES[canvasOptions._id] = canvasOptions;
      if (this?.__node?.graph)
        this.__node.graph.run("makeProxy", canvasOptions._id, canvasOptions.canvas);
      else
        proxyElementWorkerRoutes.makeProxy(canvasOptions._id, canvasOptions.canvas);
      if (options.width)
        canvasOptions.canvas.width = options.width;
      if (options.height)
        canvasOptions.canvas.height = options.height;
      if (typeof canvasOptions.draw === "string") {
        canvasOptions.draw = parseFunctionFromText3(canvasOptions.draw);
      } else if (typeof canvasOptions.draw === "function") {
        canvasOptions.draw = canvasOptions.draw.bind(canvasOptions);
      }
      if (typeof canvasOptions.update === "string") {
        canvasOptions.update = parseFunctionFromText3(canvasOptions.update);
      } else if (typeof canvasOptions.update === "function") {
        canvasOptions.update = canvasOptions.update.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "string") {
        canvasOptions.init = parseFunctionFromText3(canvasOptions.init);
      } else if (typeof canvasOptions.init === "function") {
        canvasOptions.init = canvasOptions.init.bind(canvasOptions);
      }
      if (typeof canvasOptions.clear === "string") {
        canvasOptions.clear = parseFunctionFromText3(canvasOptions.clear);
      } else if (typeof canvasOptions.clear === "function") {
        canvasOptions.clear = canvasOptions.clear.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "function")
        canvasOptions.init(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      canvasOptions.stop = () => {
        stopAnim(canvasOptions._id);
      };
      canvasOptions.start = (draw) => {
        startAnim(canvasOptions._id, draw);
      };
      canvasOptions.set = (settings2) => {
        setDraw(settings2, canvasOptions._id);
      };
      if (typeof canvasOptions.draw === "function" && canvasOptions.animating) {
        let draw = (s, canvas, context) => {
          if (s.animating) {
            s.draw(s, canvas, context);
            requestAnimationFrame(() => {
              draw(s, canvas, context);
            });
          }
        };
        draw(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      }
    }
    if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
      return canvasOptions._id;
    else {
      const canvascontrols = { _id: options._id, width: options.width, height: options.height, draw: (props) => {
        drawFrame(props, options._id);
      }, update: (props) => {
        updateCanvas(props, options._id);
      }, clear: () => {
        clearCanvas(options._id);
      }, init: () => {
        initCanvas(options._id);
      }, stop: () => {
        stopAnim(options._id);
      }, start: () => {
        startAnim(options._id);
      }, set: (newDrawProps) => {
        setDraw(newDrawProps, options._id);
      }, terminate: () => {
        if (this.__node?.graph)
          this.__node.graph.remove(options._id);
        else {
          stopAnim(options._id);
          if (this?.__node?.graph)
            delete this.__node.graph.CANVASES[canvasOptions._id];
          else
            delete globalThis.CANVASES[canvasOptions._id];
        }
      } };
      return canvascontrols;
    }
  }
  function drawFrame(props, _id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts) {
      if (props)
        Object.assign(canvasopts, props);
      if (canvasopts.draw) {
        canvasopts.draw(canvasopts, canvasopts.canvas, canvasopts.context);
        return _id;
      }
    }
    return void 0;
  }
  function clearCanvas(_id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts?.clear) {
      canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function initCanvas(_id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts?.init) {
      canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function updateCanvas(input, _id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts?.update) {
      canvasopts.update(canvasopts, canvasopts.canvas, canvasopts.context, input);
      return _id;
    }
    return void 0;
  }
  function setProps(props, _id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts) {
      Object.assign(canvasopts, props);
      if (props.width)
        canvasopts.canvas.width = props.width;
      if (props.height)
        canvasopts.canvas.height = props.height;
      return _id;
    }
    return void 0;
  }
  function startAnim(_id, draw) {
    let canvasopts = getCanvas.call(this, _id);
    canvasopts.animating = true;
    if (canvasopts && draw) {
      if (typeof draw === "string")
        draw = parseFunctionFromText3(draw);
      if (typeof draw === "function") {
        canvasopts.draw = draw;
      }
      return _id;
    }
    if (typeof canvasopts?.draw === "function") {
      let draw2 = (s, canvas, context) => {
        if (s.animating) {
          s.draw(s, canvas, context);
          requestAnimationFrame(() => {
            draw2(s, canvas, context);
          });
        }
      };
      if (typeof canvasopts.clear === "function")
        canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      if (typeof canvasopts.init === "function")
        canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      draw2(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function stopAnim(_id) {
    let canvasopts = getCanvas.call(this, _id);
    if (canvasopts) {
      canvasopts.animating = false;
      if (typeof canvasopts.clear === "function")
        requestAnimationFrame(canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context));
      return _id;
    }
    return void 0;
  }
  function getCanvas(_id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (!_id)
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
      else
        canvasopts = this.__node.graph.CANVASES?.[_id];
    } else {
      if (!_id)
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
      else
        canvasopts = globalThis.CANVASES?.[_id];
    }
    return canvasopts;
  }
  var workerCanvasRoutes = { ...proxyElementWorkerRoutes, Renderer, transferCanvas, setupCanvas, setDraw, drawFrame, clearCanvas, initCanvas, updateCanvas, setProps, startAnim, stopAnim, getCanvas };
  function parseFunctionFromText3(method = "") {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf("=>") + 1;
      if (startindex <= 0) {
        startindex = methodString.indexOf("){");
      }
      if (startindex <= 0) {
        startindex = methodString.indexOf(") {");
      }
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    if (newFuncHead.includes("function")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else {
        try {
          newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
        } catch {
        }
      }
    }
    return newFunc;
  }
  var SessionsService = class extends Service {
    constructor(options, users) {
      super(options);
      this.name = "sessions";
      this.users = {};
      this.sessions = { private: {}, shared: {} };
      this.getSessionInfo = (sessionId, userId) => {
        if (!sessionId) {
          return this.sessions.shared;
        } else {
          if (this.sessions.private[sessionId]) {
            let s = this.sessions.private[sessionId];
            if (s.settings) {
              if (s.settings.source === userId || s.settings.listener === userId || s.settings.ownerId === userId || s.settings.admins?.[userId] || s.settings.moderators?.[userId])
                return { private: { [sessionId]: s } };
            }
          } else if (this.sessions.shared[sessionId]) {
            return { shared: { [sessionId]: this.sessions.shared[sessionId] } };
          } else {
            let res2 = {};
            for (const id in this.sessions.shared) {
              if (this.sessions.shared[id].settings?.name)
                res2[id] = this.sessions.shared.settings;
            }
            if (Object.keys(res2).length > 0)
              return res2;
          }
        }
      };
      this.openPrivateSession = (options2 = {}, userId) => {
        if (!options2._id) {
          options2._id = `private${Math.floor(Math.random() * 1e15)}`;
          if (this.sessions.private[options2._id]) {
            delete options2._id;
            this.openPrivateSession(options2, userId);
          }
        }
        if (options2._id && userId && this.users[userId]) {
          if (userId) {
            if (!options2.settings)
              options2.settings = { listener: userId, source: userId, propnames: { latency: true }, admins: { [userId]: true }, ownerId: userId };
            if (!options2.settings.listener)
              options2.settings.listener = userId;
            if (!options2.settings.source)
              options2.settings.source = userId;
            if (!this.users[userId].sessions)
              this.users[userId].sessions = {};
            this.users[userId].sessions[options2._id] = options2;
          }
          if (!options2.data)
            options2.data = {};
          if (this.sessions.private[options2._id]) {
            return this.updateSession(options2, userId);
          } else if (options2.settings?.listener && options2.settings.source)
            this.sessions.private[options2._id] = options2;
        }
        return options2;
      };
      this.openSharedSession = (options2, userId) => {
        if (!options2._id) {
          options2._id = `shared${Math.floor(Math.random() * 1e15)}`;
          if (this.sessions.shared[options2._id]) {
            delete options2._id;
            this.openSharedSession(options2, userId);
          }
        }
        if (options2._id && userId && this.users[userId]) {
          if (typeof userId === "string") {
            if (!options2.settings)
              options2.settings = { name: "shared", propnames: { latency: true }, users: { [userId]: true }, admins: { [userId]: true }, ownerId: userId };
            if (!options2.settings.users)
              options2.settings.users = { [userId]: true };
            if (!options2.settings.admins)
              options2.settings.admins = { [userId]: true };
            if (!options2.settings.ownerId)
              options2.settings.ownerId = userId;
            if (!this.users[userId].sessions)
              this.users[userId].sessions = {};
            this.users[userId].sessions[options2._id] = options2;
          } else if (!options2.settings)
            options2.settings = { name: "shared", propnames: { latency: true }, users: {} };
          if (!options2.data)
            options2.data = { private: {}, shared: {} };
          if (!options2.settings.name)
            options2.name = options2.id;
          if (this.sessions.shared[options2._id]) {
            return this.updateSession(options2, userId);
          } else
            this.sessions.shared[options2._id] = options2;
        }
        return options2;
      };
      this.open = (options2, userId) => {
        if (options2.listener)
          this.openPrivateSession(options2, userId);
        else
          this.openSharedSession(options2, userId);
      };
      this.updateSession = (options2, userId) => {
        let session;
        if (options2._id) {
          session = this.sessions.private[options2._id];
          if (!session)
            session = this.sessions.shared[options2._id];
          if (this.sessions.private[options2._id] && userId) {
            let sesh = this.sessions.shared[options2._id];
            if (sesh.settings && (sesh?.settings.source === userId || sesh.settings.admins?.[userId] || sesh.settings.moderators?.[userId] || sesh.settings.ownerId === userId)) {
              return Object.assign(this.sessions.shared[options2._id], options2);
            }
          } else if (options2.settings?.source) {
            return this.openPrivateSession(options2, userId);
          } else
            return this.openSharedSession(options2, userId);
        }
        return false;
      };
      this.joinSession = (sessionId, userId, options2) => {
        if (!userId && !this.users[userId])
          return false;
        if (!this.users[userId].sessions)
          this.users[userId].sessions = {};
        let sesh = this.sessions.shared[sessionId];
        if (sesh?.settings) {
          if (sesh.settings?.banned) {
            if (sesh.settings.banned[userId])
              return false;
          }
          if (sesh.settings?.password) {
            if (!options2?.settings?.password)
              return false;
            if (options2.settings.password !== sesh.settings.password)
              return false;
          }
          sesh.settings.users[userId] = true;
          this.users[userId].sessions[sessionId] = sesh;
          if (options2) {
            return this.updateSession(options2, userId);
          }
          ;
          return sesh;
        } else if (options2?.source || options2?.listener)
          return this.openPrivateSession(options2, userId);
        else if (options2)
          return this.openSharedSession(options2, userId);
        return false;
      };
      this.leaveSession = (sessionId, userId, clear = true) => {
        let session = this.sessions.private[sessionId];
        if (!session)
          session = this.sessions.shared[sessionId];
        if (session) {
          if (this.sessions.private[sessionId]) {
            if (userId === session.settings.source || userId === session.settings.listener || session.settings.admins?.[userId] || session.settings.moderators?.[userId]) {
              delete this.sessions.private[sessionId];
              delete this.users[userId].sessions[sessionId];
              if (clear) {
                if (session.settings.admins?.[userId])
                  delete (this.sessions.shared[sessionId].settings?.admins)[userId];
                if (session.settings.moderators?.[userId])
                  delete (this.sessions.shared[sessionId].settings?.moderators)[userId];
              }
            }
          } else if (this.sessions.shared[sessionId]) {
            delete this.sessions.shared.settings.users[userId];
            delete this.users[userId].sessions[sessionId];
            if (clear) {
              if (session.settings.admins?.[userId])
                delete (this.sessions.shared[sessionId].settings?.admins)[userId];
              if (session.settings.moderators?.[userId])
                delete (this.sessions.shared[sessionId].settings?.moderators)[userId];
              if (session.data.shared[userId])
                delete this.sessions.shared[sessionId].data?.shared[userId];
              if (session.settings.host === userId) {
                delete session.settings.host;
                delete session.data.shared;
                session.data.shared = {};
                this.swapHost(session);
              }
            }
          }
          return true;
        }
        return false;
      };
      this.swapHost = (session, newHostId) => {
        if (typeof session === "string") {
          if (this.sessions.private[session])
            session = this.sessions.private[session];
          else if (this.sessions.shared[session])
            session = this.sessions.shared[session];
        }
        if (typeof session === "object" && session.settings) {
          delete session.settings.host;
          if (newHostId) {
            if (session.settings.users[newHostId])
              session.settings.host = newHostId;
          }
          if (session.settings.ownerId && !session.settings.host) {
            if (session.settings.users[session.settings.ownerId])
              session.settings.host = session.settings.ownerId;
          }
          if (session.settings.admins && !session.settings.host) {
            let match = this.getFirstMatch(session.settings.users, session.settings.admins);
            if (match)
              session.settings.host = match;
          }
          if (session.settings.moderators && !session.settings.host) {
            let match = this.getFirstMatch(session.settings.users, session.settings.moderators);
            if (match)
              session.settings.host = match;
          }
          if (!session.settings.host)
            session.settings.host = Object.keys(session.settings.users)[0];
          return true;
        }
        return false;
      };
      this.deleteSession = (sessionId, userId) => {
        let session = this.sessions.private[sessionId];
        if (!session)
          session = this.sessions.shared[sessionId];
        if (session) {
          if (session.source === userId || session.listener === userId || session.admins?.[userId] || session.ownerId === userId) {
            for (const user in session.settings.users) {
              if (this.users[user].sessions)
                delete this.users[user].sessions[sessionId];
            }
            if (this.sessions.private[sessionId])
              delete this.sessions.private[sessionId];
            else if (this.sessions.shared[sessionId])
              delete this.sessions.private[sessionId];
          }
        }
        return true;
      };
      this.subscribeToSession = (session, userId, onmessage, onopen, onclose) => {
        if (typeof session === "string") {
          let s = this.sessions.private[session];
          if (!s)
            s = this.sessions.shared[session];
          if (!s)
            return void 0;
          session = s;
        }
        if (typeof session.onopen === "function") {
          let sub = this.subscribe("joinSession", (res2) => {
            if (res2._id === session._id)
              session.onopen(session, userId);
            this.unsubscribe("joinSession", sub);
          });
        }
        if (typeof session === "object") {
          if (onmessage)
            session.onmessage = onmessage;
          if (onopen)
            session.onclose = onopen;
          if (onclose)
            session.onclose = onclose;
        }
        return session;
      };
      this.sessionUpdateCheck = (transmit = true) => {
        let updates = { private: {}, shared: {} };
        for (const session in this.sessions.private) {
          const sesh = this.sessions.private[session];
          const updateObj = { _id: sesh._id, settings: { listener: sesh.listener, source: sesh.source }, data: {} };
          if (!this.users[sesh.source]) {
            delete this.sessions.private[session];
            break;
          }
          if (sesh.settings && sesh.data) {
            for (const prop in sesh.settings.propnames) {
              if (this.users[sesh.source][prop]) {
                if (this.sessions.private[session].data) {
                  if (typeof sesh.data[prop] === "object") {
                    if (this.users[sesh.source][prop] && (stringifyFast(sesh.data[prop]) !== stringifyFast(this.users[sesh.source][prop]) || !(prop in sesh.data)))
                      updateObj.data[prop] = this.users[sesh.source][prop];
                  } else if (this.users[sesh.source][prop] && (sesh.data[prop] !== this.users[sesh.source][prop] || !(prop in sesh.data)))
                    updateObj.data[prop] = this.users[sesh.source][prop];
                } else
                  updateObj.data[prop] = this.users[sesh.source][prop];
              } else if (this.sessions.private[session]?.data?.[prop])
                delete this.sessions.private[session].data[prop];
            }
          }
          if (Object.keys(updateObj.data).length > 0) {
            this.recursivelyAssign(this.sessions.private[session].data, updateObj.data);
            updates.private[sesh._id] = updateObj;
          }
        }
        for (const session in this.sessions.shared) {
          const sesh = this.sessions.shared[session];
          const updateObj = { _id: sesh._id, settings: { name: sesh.name }, data: {} };
          if (sesh.settings?.host) {
            const privateData = {};
            const sharedData = {};
            for (const user in sesh.settings.users) {
              if (!this.users[user]) {
                delete sesh.settings.users[user];
                if (sesh.data?.shared[user])
                  delete sesh.data.shared[user];
                if (sesh.data?.private?.[user])
                  delete sesh.data.shared[user];
                if (sesh.settings.host === user)
                  this.swapHost(sesh);
                updateObj.settings.users = sesh.settings.users;
                updateObj.settings.host = sesh.settings.host;
                continue;
              }
              if (user !== sesh.settings.host) {
                privateData[user] = {};
                for (const prop in sesh.settings.propnames) {
                  if (this.users[user][prop]) {
                    if (sesh.data?.private && !(user in sesh.data.private)) {
                      if (typeof this.users[user][prop] === "object")
                        privateData[user][prop] = this.recursivelyAssign({}, this.users[user][prop]);
                      else
                        privateData[user][prop] = this.users[user][prop];
                    } else if (typeof privateData[user][prop] === "object" && sesh.data) {
                      if (this.users[user][prop] && (stringifyFast(sesh.data?.shared[user][prop]) !== stringifyFast(this.users[user][prop]) || !(prop in sesh.data)))
                        privateData[user][prop] = this.users[user][prop];
                    } else if (this.users[user][prop] && sesh.data?.private?.[prop] !== this.users[user][prop])
                      privateData[user][prop] = this.users[user][prop];
                  } else if (sesh.data?.private?.[user]?.[prop])
                    delete sesh.data.private[user][prop];
                }
                if (Object.keys(privateData[user]).length === 0)
                  delete privateData[user];
              } else {
                sharedData[user] = {};
                for (const prop in sesh.settings.hostprops) {
                  if (this.users[user][prop]) {
                    if (sesh.data && !(user in sesh.data.shared)) {
                      if (typeof this.users[user][prop] === "object")
                        sharedData[user][prop] = this.recursivelyAssign({}, this.users[user][prop]);
                      else
                        sharedData[user][prop] = this.users[user][prop];
                    } else if (typeof sharedData[user][prop] === "object" && sesh.data) {
                      if (this.users[user][prop] && (stringifyFast(sesh.data?.shared[user][prop]) !== stringifyFast(this.users[user][prop]) || !(prop in sesh.data.shared[user])))
                        sharedData[user][prop] = this.users[user][prop];
                    } else if (this.users[user][prop] && sesh.data?.shared[user][prop] !== this.users[user][prop])
                      sharedData[user][prop] = this.users[user][prop];
                  } else if (sesh.data?.shared[user]?.[prop])
                    delete sesh.data.shared[user][prop];
                }
              }
            }
            if (Object.keys(privateData).length > 0) {
              updateObj.data.private = privateData;
            }
            if (Object.keys(sharedData).length > 0) {
              updateObj.data.shared = sharedData;
            }
          } else {
            const sharedData = {};
            if (sesh.settings?.users) {
              for (const user in sesh.settings.users) {
                if (!this.users[user]) {
                  delete sesh.settings.users[user];
                  if (sesh.data?.shared[user])
                    delete sesh.data.shared[user];
                  if (sesh.data?.private?.[user])
                    delete sesh.data.shared[user];
                  if (sesh.settings.host === user)
                    this.swapHost(sesh);
                  updateObj.settings.users = sesh.settings.users;
                  updateObj.settings.host = sesh.settings.host;
                  continue;
                }
                sharedData[user] = {};
                for (const prop in sesh.settings.propnames) {
                  if (this.users[user][prop]) {
                    if (sesh.data && !(user in sesh.data.shared)) {
                      if (typeof this.users[user][prop] === "object")
                        sharedData[user][prop] = this.recursivelyAssign({}, this.users[user][prop]);
                      else
                        sharedData[user][prop] = this.users[user][prop];
                    } else if (typeof sesh.data?.shared[user][prop] === "object") {
                      if (stringifyFast(sesh.data.shared[user][prop]) !== stringifyFast(this.users[user][prop]) || !(prop in sesh.data.shared[user])) {
                        sharedData[user][prop] = this.users[user][prop];
                      }
                    } else if (sesh.data?.shared[user][prop] !== this.users[user][prop])
                      sharedData[user][prop] = this.users[user][prop];
                  } else if (sesh.data?.shared[user]?.[prop])
                    delete sesh.data.shared[user][prop];
                }
                if (Object.keys(sharedData[user]).length === 0)
                  delete sharedData[user];
              }
              if (Object.keys(sharedData).length > 0) {
                updateObj.data.shared = sharedData;
              }
            }
          }
          if (updateObj.data.shared || updateObj.data.private)
            updates.shared[sesh._id] = updateObj;
          if (updateObj.data.shared) {
            this.recursivelyAssign(this.sessions.shared[session].data?.shared, updateObj.data.shared);
          }
          if (updateObj.data.private) {
            this.recursivelyAssign(this.sessions.shared[session].data?.private, updateObj.data.private);
          }
        }
        if (Object.keys(updates.private).length === 0)
          delete updates.private;
        if (Object.keys(updates.shared).length === 0)
          delete updates.shared;
        if (Object.keys(updates).length === 0)
          return void 0;
        if (transmit)
          this.transmitSessionUpdates(updates);
        return updates;
      };
      this.transmitSessionUpdates = (updates) => {
        let users2 = {};
        if (updates.private) {
          for (const s in updates.private) {
            let session = this.sessions.private[s];
            if (session?.settings) {
              let u22 = session.settings.listener;
              if (!users2[u22])
                users2[u22] = { private: {} };
              else if (!users2[u22].private)
                users2[u22].private = {};
              users2[u22].private[s] = updates.private[s];
            }
          }
        }
        if (updates.shared) {
          for (const s in updates.shared) {
            let session = this.sessions.shared[s];
            if (session?.settings) {
              let copy;
              if (session.settings.host) {
                copy = Object.assign({}, updates.shared[s]);
                delete copy.data.private;
              }
              for (const u22 in session.settings.users) {
                if (!users2[u22])
                  users2[u22] = { shared: {} };
                else if (!users2[u22].shared)
                  users2[u22].shared = {};
                if (session.settings.host) {
                  if (u22 !== session.settings.host) {
                    users2[u22].shared[s] = copy;
                  } else
                    users2[u22].shared[s] = updates.shared[s];
                } else
                  users2[u22].shared[s] = updates.shared[s];
              }
            }
          }
        }
        let message = { route: "receiveSessionUpdates", args: null };
        for (const u22 in users2) {
          message.args = [u22, users2[u22]];
          if (this.users[u22].send)
            this.users[u22].send(JSON.stringify(message));
          this.setState({ [u22]: Object.create(message) });
        }
        return users2;
      };
      this.receiveSessionUpdates = (origin, update) => {
        if (update) {
          if (typeof update === "string")
            update = JSON.parse(update);
        }
        if (typeof update === "object") {
          let user = this.users[origin];
          if (!user)
            return void 0;
          if (!user.sessions)
            user.sessions = {};
          if (update.private) {
            for (const key in update.private) {
              if (!user.sessions[key])
                continue;
              this.recursivelyAssign(user.sessions[key].data, update.private[key].data);
              if (user.sessions[key].onmessage)
                user.sessions[key].onmessage(user.sessions[key], user._id);
            }
          }
          if (update.shared) {
            for (const key in update.shared) {
              if (!user.sessions[key])
                continue;
              if (update.shared[key].settings.users)
                user.sessions[key].settings.users = update.shared[key].settings.users;
              if (update.shared[key].settings.host)
                user.sessions[key].settings.host = update.shared[key].settings.host;
              if (update.shared[key].data.private)
                this.recursivelyAssign(user.sessions[key].data.private, update.shared[key].data.private);
              if (update.shared[key].data.shared)
                this.recursivelyAssign(user.sessions[key].data.shared, update.shared[key].data.shared);
              if (user.sessions[key].onmessage)
                user.sessions[key].onmessage(user.sessions[key], user._id);
            }
          }
          return user;
        }
      };
      this.getUpdatedUserData = (user) => {
        const updateObj = {};
        for (const key in user.sessions) {
          let s = user.sessions[key];
          if (s.settings.users[user._id] || s.settings.source === user._id) {
            if (!s.settings.spectators?.[user._id]) {
              if (s.settings.host === user._id) {
                for (const prop in s.settings.hostprops) {
                  if (!updateObj[prop] && prop in user) {
                    if (s.data.shared?.[user._id] && prop in s.data.shared?.[user._id]) {
                      if (typeof user[prop] === "object") {
                        if (stringifyFast(s.data.shared[user._id][prop]) !== stringifyFast(user[prop]))
                          updateObj[prop] = user[prop];
                      } else if (s.data.shared[user._id][prop] !== user[prop])
                        updateObj[prop] = user[prop];
                    } else
                      updateObj[prop] = user[prop];
                  }
                }
              } else {
                for (const prop in s.settings.propnames) {
                  if (!updateObj[prop] && user[prop] !== void 0) {
                    if (s.settings.source) {
                      if (typeof user[prop] === "object" && prop in s.data) {
                        if (stringifyFast(s.data[prop]) !== stringifyFast(user[prop]))
                          updateObj[prop] = user[prop];
                      } else if (s.data[prop] !== user[prop])
                        updateObj[prop] = user[prop];
                    } else {
                      if (s.data.shared?.[user._id] && prop in s.data.shared?.[user._id]) {
                        if (typeof user[prop] === "object") {
                          if (stringifyFast(s.data.shared[user._id][prop]) !== stringifyFast(user[prop]))
                            updateObj[prop] = user[prop];
                        } else if (s.data.shared[user._id][prop] !== user[prop])
                          updateObj[prop] = user[prop];
                      } else
                        updateObj[prop] = user[prop];
                    }
                  }
                }
              }
            }
          }
        }
        return updateObj;
      };
      this.userUpdateCheck = (user) => {
        if (user.sessions) {
          const updateObj = this.getUpdatedUserData(user);
          if (Object.keys(updateObj).length > 0) {
            let message = { route: "setUserProps", args: [user._id, updateObj] };
            if (user.send)
              user.send(message);
            this.setState({ [user._id]: message });
            return updateObj;
          }
        }
        return void 0;
      };
      this.setUserProps = (user, props) => {
        if (user) {
          if (typeof user === "string") {
            user = this.users[user];
            if (!user)
              return false;
          }
        }
        if (props) {
          if (typeof props === "string") {
            props = JSON.parse(props);
          }
        }
        this.recursivelyAssign(user, props);
        return true;
      };
      this.STREAMLATEST = 0;
      this.STREAMALLLATEST = 1;
      this.streamSettings = {};
      this.streamFunctions = { allLatestValues: (prop, setting) => {
        let result = void 0;
        if (Array.isArray(prop)) {
          if (prop.length !== setting.lastRead) {
            result = prop.slice(setting.lastRead);
            setting.lastRead = prop.length;
          }
        } else if (typeof prop === "object") {
          result = {};
          for (const p2 in prop) {
            if (Array.isArray(prop[p2])) {
              if (typeof setting === "number")
                setting = { [p2]: { lastRead: void 0 } };
              else if (!setting[p2])
                setting[p2] = { lastRead: void 0 };
              if (prop[p2].length !== setting[p2].lastRead) {
                result[p2] = prop[p2].slice(setting[p2].lastRead);
                setting[p2].lastRead = prop[p2].length;
              }
            } else {
              if (typeof setting === "number")
                setting = { [p2]: { lastRead: void 0 } };
              else if (!setting[p2])
                setting[p2] = { lastRead: void 0 };
              if (setting[p2].lastRead !== prop[p2]) {
                result[p2] = prop[p2];
                setting[p2].lastRead = prop[p2];
              }
            }
          }
          if (Object.keys(result).length === 0)
            result = void 0;
        } else {
          if (setting.lastRead !== prop) {
            result = prop;
            setting.lastRead = prop;
          }
        }
        return result;
      }, latestValue: (prop, setting) => {
        let result = void 0;
        if (Array.isArray(prop)) {
          if (prop.length !== setting.lastRead) {
            result = prop[prop.length - 1];
            setting.lastRead = prop.length;
          }
        } else if (typeof prop === "object") {
          result = {};
          for (const p2 in prop) {
            if (Array.isArray(prop[p2])) {
              if (typeof setting === "number")
                setting = { [p2]: { lastRead: void 0 } };
              else if (!setting[p2])
                setting[p2] = { lastRead: void 0 };
              if (prop[p2].length !== setting[p2].lastRead) {
                result[p2] = prop[p2][prop[p2].length - 1];
                setting[p2].lastRead = prop[p2].length;
              }
            } else {
              if (typeof setting === "number")
                setting = { [p2]: { lastRead: void 0 } };
              else if (!setting[p2])
                setting[p2] = { lastRead: void 0 };
              if (setting[p2].lastRead !== prop[p2]) {
                result[p2] = prop[p2];
                setting[p2].lastRead = prop[p2];
              }
            }
          }
        } else {
          if (setting.lastRead !== prop) {
            result = prop;
            setting.lastRead = prop;
          }
        }
        return result;
      } };
      this.setStreamFunc = (name2, key, callback = this.streamFunctions.allLatestValues) => {
        if (!this.streamSettings[name2].settings[key])
          this.streamSettings[name2].settings[key] = { lastRead: 0 };
        if (callback === this.STREAMLATEST)
          this.streamSettings[name2].settings[key].callback = this.streamFunctions.latestValue;
        else if (callback === this.STREAMALLLATEST)
          this.streamSettings[name2].settings[key].callback = this.streamFunctions.allLatestValues;
        else if (typeof callback === "string")
          this.streamSettings[name2].settings[key].callback = this.streamFunctions[callback];
        else if (typeof callback === "function")
          this.streamSettings[name2].settings[key].callback = callback;
        if (!this.streamSettings[name2].settings[key].callback)
          this.streamSettings[name2].settings[key].callback = this.streamFunctions.allLatestValues;
        return true;
      };
      this.addStreamFunc = (name2, callback = (data) => {
      }) => {
        this.streamFunctions[name2] = callback;
      };
      this.setStream = (object = {}, settings2 = {}, streamName = `stream${Math.floor(Math.random() * 1e10)}`, onupdate, onclose) => {
        if (settings2.keys) {
          if (settings2.keys.length === 0) {
            let k = Object.keys(object);
            if (k.length > 0) {
              settings2.keys = Array.from(k);
            }
          }
        } else {
          settings2.keys = Array.from(Object.keys(object));
        }
        this.streamSettings[streamName] = { object, settings: settings2, onupdate, onclose };
        this.subscribe(streamName, (res2) => {
          if (this.streamSettings[streamName].onupdate)
            this.streamSettings[streamName].onupdate(res2, this.streamSettings[streamName]);
        });
        settings2.keys.forEach((prop) => {
          if (settings2[prop]?.callback)
            this.setStreamFunc(streamName, prop, settings2[prop].callback);
          else
            this.setStreamFunc(streamName, prop, settings2.callback);
        });
        return this.streamSettings[streamName];
      };
      this.removeStream = (streamName, key) => {
        if (streamName && !key) {
          if (this.streamSettings[streamName].onclose)
            this.streamSettings[streamName].onclose(this.streamSettings[streamName]);
          this.unsubscribe(streamName);
          delete this.streamSettings[streamName];
        } else if (key && this.streamSettings[streamName]?.settings?.keys) {
          let idx = this.streamSettings[streamName].settings.keys.indexOf(key);
          if (idx > -1)
            this.streamSettings[streamName].settings.keys.splice(idx, 1);
          if (this.streamSettings[streamName].settings[key])
            delete this.streamSettings[streamName].settings[key];
          return true;
        }
        return false;
      };
      this.updateStreamData = (streamName, data = {}) => {
        if (this.streamSettings[streamName]) {
          Object.assign(this.streamSettings[streamName].object, data);
          return this.streamSettings[streamName].object;
        }
        return false;
      };
      this.getStreamUpdate = (streamName) => {
        if (!this.streamSettings[streamName])
          return;
        let streamUpdate = {};
        this.streamSettings[streamName].settings.keys.forEach((key) => {
          if (this.streamSettings[streamName].settings[key]) {
            let data = this.streamSettings[streamName].settings[key].callback(this.streamSettings[streamName].object[key], this.streamSettings[streamName].settings[key]);
            if (data !== void 0)
              streamUpdate[key] = data;
          }
        });
        this.setState({ [streamName]: streamUpdate });
        return streamUpdate;
      };
      this.getAllStreamUpdates = () => {
        let updateObj = {};
        for (const streamName in this.streamSettings) {
          let streamUpdate = this.getStreamUpdate(streamName);
          Object.assign(updateObj, streamUpdate);
        }
        return updateObj;
      };
      this.streamLoop = { __operator: this.getAllStreamUpdates, __node: { loop: 10 } };
      this.userUpdateLoop = { __operator: this.userUpdateCheck, __node: { loop: 10 } };
      this.sessionLoop = { __operator: this.sessionUpdateCheck, __node: { loop: 10 } };
      this.setLoaders(loaders);
      this.load(this);
      if (users)
        this.users = users;
    }
    getFirstMatch(obj1, obj2) {
      for (const i22 in obj1) {
        for (const j in obj2) {
          if (i22 === j)
            return i22;
        }
      }
      return false;
    }
  };
  var Router = class extends Service {
    constructor(options) {
      super(options);
      this.name = "router";
      this.connections = {};
      this.sources = {};
      this.services = {};
      this.serviceConnections = {};
      this.users = {};
      this.addUser = async (info, connections, config, receiving) => {
        let user;
        if (!info._id) {
          info._id = `user${Math.floor(Math.random() * 1e15)}`;
        }
        if (this.users[info._id]) {
          user = this.users[info._id];
        } else {
          user = Object.assign({}, info);
        }
        if (connections) {
          for (const key in connections) {
            if (typeof connections[key] === "object") {
              if (!connections[key].connection._id) {
                await new Promise((res2, rej) => {
                  let start = performance.now();
                  let checker = () => {
                    if (!connections[key].connection._id) {
                      if (performance.now() - start > 3e3) {
                        delete connections[key];
                        rej(false);
                      } else {
                        setTimeout(() => {
                          checker();
                        }, 100);
                      }
                    } else {
                      res2(true);
                    }
                  };
                  checker();
                }).catch((er) => {
                  console.error("Connections timed out:", er);
                });
              }
            }
          }
          for (const key in connections) {
            connections[key] = this.addConnection(connections[key], user._id);
          }
        }
        if (config) {
          for (const c in config) {
            this.openConnection(config[c].service, config[c], user._id, config[c].args);
          }
        }
        if (!this.users[info._id]) {
          let send = (message, ...a) => {
            let connection = this.getConnection(user._id, "send");
            if (connection?.send)
              return connection.send(message, ...a);
          };
          let sendAll = (message, ...a) => {
            let connections2 = this.getConnections(user._id, "send");
            for (const key in connections2)
              if (connections2[key]?.send)
                return connections2[key].send(message, ...a);
          };
          let request = (message, method, ...a) => {
            let connection = this.getConnection(user._id, "request");
            if (connection?.request)
              return connection.request(message, method, ...a);
          };
          let requestAll = (message, method, ...a) => {
            let connections2 = this.getConnections(user._id, "request");
            let results = [];
            for (const key in connections2)
              if (connections2[key]?.request)
                results.push(connections2[key].request(message, method, ...a));
            return results;
          };
          let post = (route, args, method, ...a) => {
            let connection = this.getConnection(user._id, "post");
            if (connection?.post)
              return connection.post(route, args, method, ...a);
          };
          let postAll = (route, args, method, ...a) => {
            let connections2 = this.getConnections(user._id, "post");
            for (const key in connections2)
              if (connections2[key]?.post)
                connections2[key].post(route, args, method, ...a);
            return;
          };
          let run = (route, args, method, ...a) => {
            let connection = this.getConnection(user._id, "run");
            if (connection?.run)
              return connection.run(route, args, method, ...a);
          };
          let runAll = (route, args, method, ...a) => {
            let connections2 = this.getConnections(user._id, "run");
            let results = [];
            for (const key in connections2)
              if (connections2[key]?.post)
                results.push(connections2[key].run(route, args, method, ...a));
            return results;
          };
          let subscribe = (route, callback, ...a) => {
            let connection = this.getConnection(user._id, "subscribe");
            if (connection?.subscribe)
              return connection.subscribe(route, callback, ...a);
          };
          let subscribeAll = (route, callback, ...a) => {
            let connections2 = this.getConnections(user._id, "subscribe");
            let results = [];
            for (const key in connections2)
              if (connections2[key]?.post)
                results.push(connections2[key].subscribe(route, callback, ...a));
            return results;
          };
          let unsubscribe = (route, sub, ...a) => {
            let connection = this.getConnection(user._id, "unsubscribe");
            if (connection?.unsubscribe)
              return connection.unsubscribe(route, sub, ...a);
          };
          let unsubscribeAll = (route, subs, ...a) => {
            let connections2 = this.getConnections(user._id, "unsubscribe");
            let results = [];
            for (const key in connections2)
              if (connections2[key]?.post && subs[key])
                results.push(connections2[key].unsubscribe(route, subs[key], ...a));
            return results;
          };
          let terminate = () => {
            return this.removeUser(user);
          };
          user.send = send;
          user.request = request;
          user.post = post;
          user.run = run;
          user.subscribe = subscribe;
          user.unsubscribe = unsubscribe;
          user.terminate = terminate;
          user.sendAll = sendAll;
          user.requestAll = requestAll;
          user.postAll = postAll;
          user.runAll = runAll;
          user.subscribeAll = subscribeAll;
          user.unsubscribeAll = unsubscribeAll;
          user.terminateAll = terminate;
          this.users[user._id] = user;
        }
        if (connections && !receiving) {
          let connectionIds = {};
          let pass = false;
          Object.keys(connections).map((k, i22) => {
            if (connections[k]?._id) {
              connectionIds[`${i22}`] = connections[k]?._id;
              pass = true;
            }
          });
          if (pass) {
            user.send({ route: "addUser", args: [{ _id: user._id }, connectionIds, void 0, true] });
          }
        }
        return user;
      };
      this.getConnection = (sourceId, hasMethod) => {
        if (this.sources[sourceId]) {
          if (this.order) {
            for (let i22 = 0; i22 < this.order.length; i22++) {
              let k = this.order[i22];
              for (const key in this.sources[sourceId]) {
                if (this.sources[sourceId][key].service) {
                  if (typeof this.sources[sourceId][key].service === "object") {
                    if (this.sources[sourceId][key].service.__node.tag === k) {
                      if (this.sources[sourceId][key].connectionType && this.sources[sourceId][key].service?.name) {
                        if (!this.serviceConnections[this.sources[sourceId][key].service.name]) {
                          this.removeConnection(this.sources[sourceId][key]);
                          continue;
                        }
                      }
                      return this.sources[sourceId][key];
                    }
                  } else if (this.sources[sourceId][key].service === k) {
                    if (this.sources[sourceId][key].connectionType && this.sources[sourceId][key].service?.name) {
                      if (!this.serviceConnections[this.sources[sourceId][key].service.name])
                        this.removeConnection(this.sources[sourceId][key]);
                      continue;
                    }
                    return this.sources[sourceId][key];
                  }
                }
              }
            }
          } else {
            for (const k in this.sources[sourceId]) {
              if (this.sources[sourceId][k].connectionType && this.sources[sourceId][k].service?.name) {
                if (!this.serviceConnections[this.sources[sourceId][k].service.name]) {
                  this.removeConnection(this.sources[sourceId][k]);
                  continue;
                }
              }
              if (hasMethod && this.sources[sourceId][k][hasMethod]) {
                return this.sources[sourceId][k];
              } else {
                return this.sources[sourceId][k];
              }
            }
          }
        } else if (this.order) {
          for (let i22 = 0; i22 < this.order.length; i22++) {
            let k = this.order[i22];
            if (this.sources[k]?.[sourceId]) {
              if (this.sources[k][sourceId].connectionType && this.sources[k][sourceId].service?.name) {
                if (!this.serviceConnections[this.sources[k][sourceId].service.service.name]) {
                  this.removeConnection(this.sources[k][sourceId].service);
                  continue;
                }
              }
              if (hasMethod && this.sources[k][sourceId]?.[hasMethod]) {
                return this.sources[k][sourceId];
              } else {
                return this.sources[k][sourceId];
              }
            }
          }
        }
        if (typeof sourceId === "string" && this.connections[sourceId] && this.connections[sourceId].send) {
          return this.connections[sourceId];
        }
      };
      this.getConnections = (sourceId, hasMethod, props) => {
        if (this.sources[sourceId]) {
          if (!props && !hasMethod)
            return this.sources[sourceId];
          let found = {};
          for (const key in this.sources[sourceId]) {
            if (typeof this.sources[sourceId][key] === "object") {
              if (!this.sources[sourceId][key]._id) {
                for (const k in this.sources[sourceId][key]) {
                  if (typeof this.sources[sourceId][key][k] === "object") {
                    let pass = true;
                    if (hasMethod && !this.sources[sourceId][key][k][hasMethod])
                      pass = false;
                    for (const p2 in props) {
                      if (typeof this.sources[sourceId][key][k][p2] === "object" && typeof props[p2] === "object") {
                        for (const pp in props[p2]) {
                          if (props[p2][pp] !== this.sources[sourceId][key][k][p2][pp]) {
                            pass = false;
                            break;
                          }
                        }
                      } else if (this.sources[sourceId][key][k][p2] !== props[p2]) {
                        pass = false;
                      } else {
                        pass = false;
                        break;
                      }
                    }
                    if (pass) {
                      found[this.sources[sourceId][key][k]._id] = this.sources[sourceId][key][k];
                    }
                  }
                }
              } else {
                let pass = true;
                if (hasMethod && !this.sources[sourceId][key][hasMethod])
                  pass = false;
                for (const p2 in props) {
                  if (typeof this.sources[sourceId][key][p2] === "object" && typeof props[p2] === "object") {
                    for (const pp in props[p2]) {
                      if (props[p2][pp] !== this.sources[sourceId][key][p2][pp]) {
                        pass = false;
                        break;
                      }
                    }
                  } else if (this.sources[sourceId][key][p2] !== props[p2]) {
                    pass = false;
                  } else {
                    pass = false;
                    break;
                  }
                }
                if (pass) {
                  if (this.getConnection(this.sources[sourceId][key], hasMethod))
                    found[this.sources[sourceId][key]._id] = this.sources[sourceId][key];
                }
              }
            }
          }
        }
      };
      this.addConnection = (options2, source) => {
        let settings2 = {};
        if (typeof options2 === "string") {
          if (this.connections[options2]) {
            options2 = this.connections[options2];
          } else {
            for (const j in this.serviceConnections) {
              for (const k in this.serviceConnections[j]) {
                if (this.serviceConnections[j][k][options2]) {
                  options2 = { connection: this.serviceConnections[j][k][options2] };
                  options2.service = j;
                  settings2.connectionType = j;
                  settings2.connectionsKey = k;
                  break;
                }
              }
            }
          }
          if (typeof options2 === "string" && this.__node.nodes.get(options2))
            options2 = { connection: this.__node.nodes.get(options2) };
        }
        if (!options2 || typeof options2 === "string")
          return void 0;
        if (source)
          settings2.source = source;
        if (options2.connection instanceof GraphNode) {
          settings2.connection = options2.connection;
          let node = settings2.connection;
          settings2.send = async (message) => {
            if (message.method) {
              if (Array.isArray(message.args)) {
                return node[message.method]?.(...message.args);
              } else
                return node[message.method]?.(message.args);
            } else {
              if (!node.__operator)
                return;
              if (Array.isArray(message.args)) {
                return node.__operator(...message.args);
              } else
                return node.__operator(message.args);
            }
          };
          settings2.request = async (message, method) => {
            if (method) {
              if (Array.isArray(message.args)) {
                return node[method]?.(...message.args);
              } else
                return node[method]?.(message.args);
            } else {
              if (!node.__operator)
                return;
              if (Array.isArray(message.args)) {
                return node.__operator(...message.args);
              } else
                return node.__operator(message.args);
            }
          };
          settings2.post = async (route, args, method) => {
            if (route && node.__node.graph.get(route)) {
              let n = node.__node.graph.get(route);
              if (method) {
                if (Array.isArray(args)) {
                  return n[method]?.(...args);
                } else
                  return n[method]?.(args);
              } else {
                if (Array.isArray(args)) {
                  return n.__operator(...args);
                } else
                  return n.__operator(args);
              }
            } else {
              if (method) {
                if (Array.isArray(args)) {
                  return node[method]?.(...args);
                } else
                  return node[method]?.(args);
              } else {
                if (Array.isArray(args)) {
                  return node.__operator(...args);
                } else
                  return node.__operator(args);
              }
            }
          };
          settings2.run = settings2.post;
          settings2.subscribe = async (callback) => {
            return node.__subscribe(callback);
          };
          settings2.unsubscribe = async (sub) => {
            return node.__unsubscribe(sub);
          };
          settings2.terminate = () => {
            node.__node.graph.remove(node);
            return true;
          };
          settings2.onclose = options2.onclose;
          if (settings2.onclose) {
            node.__addOndisconnected((n) => {
              if (settings2.onclose)
                settings2.onclose(settings2, n);
            });
          }
        } else if (options2.connection instanceof Graph) {
          if (options2.connection.__node.nodes.get("open"))
            settings2.service = options2.connection;
          let graph3 = settings2.connection;
          settings2.send = async (message) => {
            if (Array.isArray(message.args))
              graph3.run(message.route, ...message.args);
            else
              graph3.run(message.route, message.args);
          };
          settings2.request = async (message, method) => {
            if (!message.route)
              return void 0;
            if (method) {
              if (Array.isArray(message.args)) {
                return graph3.__node.nodes.get(message.route)[method]?.(...message.args);
              } else
                return graph3.__node.nodes.get(message.route)[method]?.(message.args);
            } else {
              if (Array.isArray(message.args)) {
                return graph3.run(message.route, ...message.args);
              } else
                return graph3.run(message.route, message.args);
            }
          };
          settings2.post = async (route, args, method) => {
            if (route && graph3.get(route)) {
              let n = graph3.get(route);
              if (method) {
                if (Array.isArray(args)) {
                  return n[method]?.(...args);
                } else
                  return n[method]?.(args);
              } else {
                if (Array.isArray(args)) {
                  return n.run(...args);
                } else
                  return n.run(args);
              }
            }
          };
          settings2.run = settings2.post;
          settings2.subscribe = async (route, callback) => {
            return graph3.subscribe(route, callback);
          };
          settings2.unsubscribe = async (route, sub) => {
            return graph3.unsubscribe(route, sub);
          };
          settings2.terminate = (n) => {
            graph3.remove(n);
            return true;
          };
        } else if (!(options2._id && this.connections[options2._id])) {
          let c = options2.connection;
          if (typeof c === "string") {
            if (this.connections[c])
              c = this.connections[c];
            else if (options2.service) {
              if (typeof options2.service === "string") {
                options2.service = this.services[options2.service];
              }
              if (typeof options2.service === "object") {
                if (options2.service.connections) {
                  for (const key in options2.service.connections) {
                    if (options2.service.connections[key][c]) {
                      c = options2.service.connections[key][c];
                      settings2.connectionType = key;
                      settings2.connectionsKey = c;
                      break;
                    }
                  }
                }
              }
            } else {
              for (const j in this.serviceConnections) {
                for (const k in this.serviceConnections[j]) {
                  if (this.serviceConnections[j][k][c]) {
                    c = this.serviceConnections[j][k][c];
                    options2.service = j;
                    settings2.connectionType = j;
                    settings2.connectionsKey = k;
                    break;
                  }
                }
              }
            }
          }
          if (typeof c !== "object")
            return void 0;
          settings2._id = c._id;
          settings2.connection = options2.connection;
          settings2.send = c.send;
          settings2.request = c.request;
          settings2.run = c.run;
          settings2.post = c.post;
          settings2.subscribe = c.subscribe;
          settings2.unsubscribe = c.unsubscribe;
          settings2.terminate = c.terminate;
          settings2.onclose = options2.onclose;
          if (settings2.onclose) {
            if (!(c.onclose && settings2.onclose.toString() === c.onclose.toString())) {
              let oldonclose = c.onclose;
              c.onclose = (...args) => {
                if (settings2.onclose)
                  settings2.onclose(settings2, ...args);
                if (this.users[settings2.source] && Object.keys(this.sources[settings2.source]).length === 0) {
                  this.removeUser(settings2.source, false);
                }
                if (oldonclose)
                  oldonclose(...args);
              };
            }
          } else {
            let oldonclose = c.onclose;
            c.onclose = (...args) => {
              this.removeConnection(settings2);
              if (this.users[settings2.source] && Object.keys(this.sources[settings2.source]).length === 0) {
                this.removeUser(settings2.source, false);
              }
              if (oldonclose)
                oldonclose(...args);
            };
          }
          if (options2.service) {
            if (typeof options2.service === "string")
              options2.service = this.services[options2.service];
            settings2.service = options2.service;
          } else if (c.graph)
            settings2.service = c.graph;
        }
        if (!settings2.source && options2.source) {
          settings2.source = options2.source;
        } else if (!settings2.source && options2.service) {
          settings2.source = typeof options2.service === "object" ? options2.service?.name : void 0;
        } else if (!settings2.source && (settings2.connection instanceof GraphNode || settings2.connection instanceof Graph)) {
          settings2.source = "local";
          if (!this.order.indexOf("local"))
            this.order.unshift("local");
        }
        if (!settings2._id)
          settings2._id = `connection${Math.floor(Math.random() * 1e15)}`;
        if (settings2.source) {
          if (!this.sources[settings2.source])
            this.sources[settings2.source] = {};
          this.sources[settings2.source][settings2._id] = settings2;
        }
        if (!this.connections[settings2._id])
          this.connections[settings2._id] = settings2;
        return settings2;
      };
      this.removeConnection = (connection, terminate = false) => {
        if (typeof connection === "object" && connection._id)
          connection = connection._id;
        if (typeof connection === "string") {
          if (this.connections[connection]) {
            if (terminate && this.connections[connection])
              this.connections[connection].terminate();
            delete this.connections[connection];
            for (const key in this.sources) {
              if (this.sources[key][connection])
                delete this.sources[key][connection];
              else {
                for (const k in this.sources[key]) {
                  if (this.sources[key][k]?.[connection]) {
                    delete this.sources[key][connection];
                  }
                }
              }
            }
            return true;
          } else if (this.sources[connection]) {
            for (const key in this.sources[connection]) {
              this.removeConnection(this.sources[connection][key], terminate);
            }
            return true;
          }
        }
      };
      this.routeService = (service, connections, source, order) => {
        this.services[service.name] = service;
        if (service.__node?.nodes)
          this.__node.nodes.forEach((n, k) => {
            if (!service.__node?.nodes.get(k)) {
              service.__node?.nodes.set(k, n);
            } else
              service.__node?.nodes.set(this.name + "." + k, n);
          });
        if (service.users)
          service.users = this.users;
        if (connections) {
          if (typeof connections === "string")
            this.addServiceConnections(service, connections, source);
          else {
            for (const c in connections) {
              this.addServiceConnections(service, c, source);
            }
          }
        }
        if (order)
          this.order = order;
        else {
          if (!this.order)
            this.order = [];
          this.order.push(service.name);
        }
      };
      this.addServiceConnections = (service, connectionsKey, source) => {
        if (typeof service === "string") {
          service = this.services[service];
        }
        if (connectionsKey && service[connectionsKey]) {
          let newConnections = {};
          if (!this.serviceConnections[service.name])
            this.serviceConnections[service.name] = {};
          this.serviceConnections[service.name][connectionsKey] = service[connectionsKey];
          for (const key in service[connectionsKey]) {
            if (!this.connections[key]) {
              newConnections[key] = this.addConnection({ connection: service[connectionsKey][key], service }, source);
              newConnections[key].connectionType = connectionsKey;
            }
          }
          return newConnections;
        }
      };
      this.openConnection = async (service, options2, source, ...args) => {
        if (typeof service === "string") {
          service = this.services[service];
        }
        if (service?.__node.nodes) {
          let connection = service.run("open", options2, ...args);
          if (connection instanceof Promise) {
            return connection.then(async (info) => {
              if (!info._id) {
                await connectionHasId(info);
              }
              if (info._id)
                this.addConnection({ connection: info, service }, source);
            });
          } else if (connection) {
            if (!connection._id) {
              await connectionHasId(connection);
            }
            if (connection._id)
              return this.addConnection({ connection, service }, source);
          }
        }
      };
      this.terminate = (connection) => {
        if (typeof connection === "string")
          connection = this.connections[connection];
        return connection.terminate();
      };
      this.runConnection = (endpoint, method, args) => {
        let sendTo;
        if (method.indexOf("All") > -1) {
          sendTo = this.users[endpoint];
        } else {
          sendTo = this.getConnection(endpoint, method);
        }
        if (sendTo)
          return sendTo[method](...args);
      };
      this.subscribeThroughConnection = (route, relay, endpoint, callback, ...args) => {
        if (typeof relay === "string") {
          relay = this.getConnection(relay, "run");
        }
        if (typeof relay === "object")
          return new Promise((res2, rej) => {
            relay.run("routeConnections", [route, endpoint, relay._id, ...args]).then((sub) => {
              this.__node.state.subscribeEvent(endpoint, (res22) => {
                if (res22?.callbackId === route) {
                  if (!callback)
                    this.setState({ [endpoint]: res22.args });
                  else if (typeof callback === "string") {
                    this.setState({ [callback]: res22.args });
                  } else
                    callback(res22.args);
                }
              });
              res2(sub);
            }).catch(rej);
          });
      };
      this.routeConnections = (route, transmitter, receiver, ...args) => {
        let rxsrc;
        if (typeof receiver === "string") {
          if (this.sources[receiver]) {
            rxsrc = receiver;
          }
          receiver = this.getConnection(receiver, "send");
        }
        if (typeof transmitter === "string") {
          transmitter = this.getConnection(transmitter, "subscribe");
        }
        if (transmitter?.subscribe && receiver?.send) {
          let res2 = new Promise((res22, rej) => {
            transmitter.subscribe(route, (res3) => {
              if (!this.connections[receiver._id] && rxsrc) {
                if (this.sources[rxsrc]) {
                  rxsrc = receiver;
                  Object.keys(this.sources[rxsrc]).forEach((k) => {
                    if (this.sources[receiver][k].send) {
                      receiver = this.sources[receiver][k];
                    }
                  });
                }
              }
              if (this.connections[receiver._id])
                receiver.send({ callbackId: route, args: res3 });
            }, ...args).then((sub) => {
              res22(sub);
            });
          });
          return res2;
        }
      };
      this.setUserData = (user, data) => {
        if (user) {
          if (typeof user === "string") {
            user = this.users[user];
            if (!user)
              return false;
          }
        }
        if (data) {
          if (typeof data === "string") {
            data = JSON.parse(data);
          }
        }
        if (typeof data === "object") {
          this.recursivelyAssign(user, data);
          return true;
        }
      };
      this.load(this);
      if (options) {
        if (options.order)
          this.order = options.order;
        if (options.graph) {
          for (const key in options.graph) {
            let opt = options.graph[key];
            if (typeof opt === "function")
              opt = new opt();
            if (opt?.__node?.nodes) {
              opt.name = key;
              opt.__node.tag = key;
              this.addServices({ [opt.name]: opt });
              this.routeService(opt, opt.connections);
            } else {
              if (typeof opt?.service === "function")
                opt.service = new opt.service();
              if (opt?.service?.__node?.nodes) {
                opt.service.name = key;
                opt.service.__node.tag = key;
                this.addServices({ [opt.service.name]: opt.service });
                this.routeService(opt.service);
              }
              if (typeof opt?.service === "object") {
                if (opt.connections) {
                  if (Array.isArray(opt.connections)) {
                    opt.connections.forEach((k) => {
                      this.addServiceConnections(opt[key].service, k);
                    });
                  } else
                    this.addServiceConnections(opt.service, opt.connections);
                }
                if (opt.config) {
                  for (const c in opt.config) {
                    this.openConnection(opt.service, opt.config[c], opt.config[c].source, opt.config[c].args);
                  }
                }
              }
            }
          }
        }
      }
    }
    removeUser(profile, terminate) {
      if (terminate)
        this.removeConnection(profile, terminate);
      if (typeof profile === "string")
        profile = this.users[profile];
      if (typeof profile === "object" && profile._id) {
        delete this.users[profile._id];
        if (profile.onclose)
          profile.onclose(profile);
      }
      return true;
    }
  };
  function connectionHasId(connection) {
    return new Promise((res2, rej) => {
      let start = performance.now();
      let checker = () => {
        if (!connection._id) {
          if (performance.now() - start > 3e3) {
            rej(false);
          } else {
            setTimeout(() => {
              checker();
            }, 100);
          }
        } else {
          res2(true);
        }
      };
      checker();
    }).catch((er) => {
      console.error("Connection timed out:", er);
    });
  }

  // src/components/state.component.tsx
  var import_react = __toESM(require_react(), 1);
  var sComponent = class extends import_react.Component {
    constructor(props = {
      state
      //can apply a new state other than the global state so you can have states for certain pages for example
    }) {
      super(props);
      this.statemgr = state;
      this.UPDATED = [];
      this.unique = `component${Math.floor(Math.random() * 1e15)}`;
      if (props.state)
        this.statemgr = props.state;
      let react_setState = this.setState.bind(this);
      this.setState = (s) => {
        this.UPDATED = Object.keys(s);
        react_setState(s);
        if (typeof s === "object") {
          state.setState(s);
        }
      };
      setTimeout(() => {
        let found = {};
        for (const prop in this.state) {
          if (prop in this.statemgr.data)
            found[prop] = this.statemgr.data[prop];
          let sub = this.statemgr.subscribeEvent(prop, (res2) => {
            let c = this;
            if (typeof c === "undefined") {
              this.statemgr.unsubscribeEvent(prop, sub);
            } else {
              let wasupdated = this.UPDATED.indexOf(prop);
              if (wasupdated > -1) {
                this.UPDATED.splice(wasupdated, 1);
              } else {
                react_setState({ [prop]: res2 });
              }
            }
          });
        }
        if (Object.keys(found).length > 0)
          react_setState(found);
      }, 1e-3);
    }
  };

  // node_modules/bson/dist/bson.browser.esm.js
  function createCommonjsModule(fn, module2) {
    return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
  }
  var byteLength_1 = byteLength;
  var toByteArray_1 = toByteArray;
  var fromByteArray_1 = fromByteArray;
  var lookup = [];
  var revLookup = [];
  var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (i4 = 0, len = code.length; i4 < len; ++i4) {
    lookup[i4] = code[i4];
    revLookup[code.charCodeAt(i4)] = i4;
  }
  var i4;
  var len;
  revLookup["-".charCodeAt(0)] = 62;
  revLookup["_".charCodeAt(0)] = 63;
  function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var validLen = b64.indexOf("=");
    if (validLen === -1)
      validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [validLen, placeHoldersLen];
  }
  function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
  }
  function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i4;
    for (i4 = 0; i4 < len; i4 += 4) {
      tmp = revLookup[b64.charCodeAt(i4)] << 18 | revLookup[b64.charCodeAt(i4 + 1)] << 12 | revLookup[b64.charCodeAt(i4 + 2)] << 6 | revLookup[b64.charCodeAt(i4 + 3)];
      arr[curByte++] = tmp >> 16 & 255;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
      tmp = revLookup[b64.charCodeAt(i4)] << 2 | revLookup[b64.charCodeAt(i4 + 1)] >> 4;
      arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
      tmp = revLookup[b64.charCodeAt(i4)] << 10 | revLookup[b64.charCodeAt(i4 + 1)] << 4 | revLookup[b64.charCodeAt(i4 + 2)] >> 2;
      arr[curByte++] = tmp >> 8 & 255;
      arr[curByte++] = tmp & 255;
    }
    return arr;
  }
  function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
  }
  function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for (var i4 = start; i4 < end; i4 += 3) {
      tmp = (uint8[i4] << 16 & 16711680) + (uint8[i4 + 1] << 8 & 65280) + (uint8[i4 + 2] & 255);
      output.push(tripletToBase64(tmp));
    }
    return output.join("");
  }
  function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3;
    var parts = [];
    var maxChunkLength = 16383;
    for (var i4 = 0, len2 = len - extraBytes; i4 < len2; i4 += maxChunkLength) {
      parts.push(encodeChunk(uint8, i4, i4 + maxChunkLength > len2 ? len2 : i4 + maxChunkLength));
    }
    if (extraBytes === 1) {
      tmp = uint8[len - 1];
      parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "==");
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1];
      parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "=");
    }
    return parts.join("");
  }
  var base64Js = {
    byteLength: byteLength_1,
    toByteArray: toByteArray_1,
    fromByteArray: fromByteArray_1
  };
  var read = function read2(buffer2, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i4 = isLE ? nBytes - 1 : 0;
    var d2 = isLE ? -1 : 1;
    var s = buffer2[offset + i4];
    i4 += d2;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for (; nBits > 0; e = e * 256 + buffer2[offset + i4], i4 += d2, nBits -= 8) {
    }
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer2[offset + i4], i4 += d2, nBits -= 8) {
    }
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : (s ? -1 : 1) * Infinity;
    } else {
      m = m + Math.pow(2, mLen);
      e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
  };
  var write = function write2(buffer2, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i4 = isLE ? 0 : nBytes - 1;
    var d2 = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0;
      e = eMax;
    } else {
      e = Math.floor(Math.log(value) / Math.LN2);
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * Math.pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * Math.pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer2[offset + i4] = m & 255, i4 += d2, m /= 256, mLen -= 8) {
    }
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer2[offset + i4] = e & 255, i4 += d2, e /= 256, eLen -= 8) {
    }
    buffer2[offset + i4 - d2] |= s * 128;
  };
  var ieee754 = {
    read,
    write
  };
  var buffer$1 = createCommonjsModule(function(module2, exports) {
    var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? (
      // eslint-disable-line dot-notation
      Symbol["for"]("nodejs.util.inspect.custom")
    ) : null;
    exports.Buffer = Buffer2;
    exports.SlowBuffer = SlowBuffer;
    exports.INSPECT_MAX_BYTES = 50;
    var K_MAX_LENGTH = 2147483647;
    exports.kMaxLength = K_MAX_LENGTH;
    Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
    if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
      console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
    }
    function typedArraySupport() {
      try {
        var arr = new Uint8Array(1);
        var proto = {
          foo: function foo() {
            return 42;
          }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
      } catch (e) {
        return false;
      }
    }
    Object.defineProperty(Buffer2.prototype, "parent", {
      enumerable: true,
      get: function get() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.buffer;
      }
    });
    Object.defineProperty(Buffer2.prototype, "offset", {
      enumerable: true,
      get: function get() {
        if (!Buffer2.isBuffer(this))
          return void 0;
        return this.byteOffset;
      }
    });
    function createBuffer(length) {
      if (length > K_MAX_LENGTH) {
        throw new RangeError('The value "' + length + '" is invalid for option "size"');
      }
      var buf = new Uint8Array(length);
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function Buffer2(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") {
          throw new TypeError('The "string" argument must be of type string. Received type number');
        }
        return allocUnsafe(arg);
      }
      return from(arg, encodingOrOffset, length);
    }
    Buffer2.poolSize = 8192;
    function from(value, encodingOrOffset, length) {
      if (typeof value === "string") {
        return fromString(value, encodingOrOffset);
      }
      if (ArrayBuffer.isView(value)) {
        return fromArrayView(value);
      }
      if (value == null) {
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
      }
      if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
        return fromArrayBuffer(value, encodingOrOffset, length);
      }
      if (typeof value === "number") {
        throw new TypeError('The "value" argument must not be of type number. Received type number');
      }
      var valueOf = value.valueOf && value.valueOf();
      if (valueOf != null && valueOf !== value) {
        return Buffer2.from(valueOf, encodingOrOffset, length);
      }
      var b = fromObject(value);
      if (b)
        return b;
      if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
        return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
      }
      throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + babelHelpers["typeof"](value));
    }
    Buffer2.from = function(value, encodingOrOffset, length) {
      return from(value, encodingOrOffset, length);
    };
    Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
    Object.setPrototypeOf(Buffer2, Uint8Array);
    function assertSize(size) {
      if (typeof size !== "number") {
        throw new TypeError('"size" argument must be of type number');
      } else if (size < 0) {
        throw new RangeError('The value "' + size + '" is invalid for option "size"');
      }
    }
    function alloc(size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(size);
      }
      if (fill !== void 0) {
        return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
      }
      return createBuffer(size);
    }
    Buffer2.alloc = function(size, fill, encoding) {
      return alloc(size, fill, encoding);
    };
    function allocUnsafe(size) {
      assertSize(size);
      return createBuffer(size < 0 ? 0 : checked(size) | 0);
    }
    Buffer2.allocUnsafe = function(size) {
      return allocUnsafe(size);
    };
    Buffer2.allocUnsafeSlow = function(size) {
      return allocUnsafe(size);
    };
    function fromString(string2, encoding) {
      if (typeof encoding !== "string" || encoding === "") {
        encoding = "utf8";
      }
      if (!Buffer2.isEncoding(encoding)) {
        throw new TypeError("Unknown encoding: " + encoding);
      }
      var length = byteLength2(string2, encoding) | 0;
      var buf = createBuffer(length);
      var actual = buf.write(string2, encoding);
      if (actual !== length) {
        buf = buf.slice(0, actual);
      }
      return buf;
    }
    function fromArrayLike(array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      var buf = createBuffer(length);
      for (var i4 = 0; i4 < length; i4 += 1) {
        buf[i4] = array[i4] & 255;
      }
      return buf;
    }
    function fromArrayView(arrayView) {
      if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
      }
      return fromArrayLike(arrayView);
    }
    function fromArrayBuffer(array, byteOffset, length) {
      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('"offset" is outside of buffer bounds');
      }
      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('"length" is outside of buffer bounds');
      }
      var buf;
      if (byteOffset === void 0 && length === void 0) {
        buf = new Uint8Array(array);
      } else if (length === void 0) {
        buf = new Uint8Array(array, byteOffset);
      } else {
        buf = new Uint8Array(array, byteOffset, length);
      }
      Object.setPrototypeOf(buf, Buffer2.prototype);
      return buf;
    }
    function fromObject(obj) {
      if (Buffer2.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) {
          return buf;
        }
        obj.copy(buf, 0, 0, len);
        return buf;
      }
      if (obj.length !== void 0) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
          return createBuffer(0);
        }
        return fromArrayLike(obj);
      }
      if (obj.type === "Buffer" && Array.isArray(obj.data)) {
        return fromArrayLike(obj.data);
      }
    }
    function checked(length) {
      if (length >= K_MAX_LENGTH) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
      }
      return length | 0;
    }
    function SlowBuffer(length) {
      if (+length != length) {
        length = 0;
      }
      return Buffer2.alloc(+length);
    }
    Buffer2.isBuffer = function isBuffer(b) {
      return b != null && b._isBuffer === true && b !== Buffer2.prototype;
    };
    Buffer2.compare = function compare(a, b) {
      if (isInstance(a, Uint8Array))
        a = Buffer2.from(a, a.offset, a.byteLength);
      if (isInstance(b, Uint8Array))
        b = Buffer2.from(b, b.offset, b.byteLength);
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
      }
      if (a === b)
        return 0;
      var x3 = a.length;
      var y4 = b.length;
      for (var i4 = 0, len = Math.min(x3, y4); i4 < len; ++i4) {
        if (a[i4] !== b[i4]) {
          x3 = a[i4];
          y4 = b[i4];
          break;
        }
      }
      if (x3 < y4)
        return -1;
      if (y4 < x3)
        return 1;
      return 0;
    };
    Buffer2.isEncoding = function isEncoding(encoding) {
      switch (String(encoding).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    Buffer2.concat = function concat(list, length) {
      if (!Array.isArray(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers');
      }
      if (list.length === 0) {
        return Buffer2.alloc(0);
      }
      var i4;
      if (length === void 0) {
        length = 0;
        for (i4 = 0; i4 < list.length; ++i4) {
          length += list[i4].length;
        }
      }
      var buffer2 = Buffer2.allocUnsafe(length);
      var pos = 0;
      for (i4 = 0; i4 < list.length; ++i4) {
        var buf = list[i4];
        if (isInstance(buf, Uint8Array)) {
          if (pos + buf.length > buffer2.length) {
            Buffer2.from(buf).copy(buffer2, pos);
          } else {
            Uint8Array.prototype.set.call(buffer2, buf, pos);
          }
        } else if (!Buffer2.isBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        } else {
          buf.copy(buffer2, pos);
        }
        pos += buf.length;
      }
      return buffer2;
    };
    function byteLength2(string2, encoding) {
      if (Buffer2.isBuffer(string2)) {
        return string2.length;
      }
      if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
        return string2.byteLength;
      }
      if (typeof string2 !== "string") {
        throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + babelHelpers["typeof"](string2));
      }
      var len = string2.length;
      var mustMatch = arguments.length > 2 && arguments[2] === true;
      if (!mustMatch && len === 0)
        return 0;
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "ascii":
          case "latin1":
          case "binary":
            return len;
          case "utf8":
          case "utf-8":
            return utf8ToBytes(string2).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return len * 2;
          case "hex":
            return len >>> 1;
          case "base64":
            return base64ToBytes(string2).length;
          default:
            if (loweredCase) {
              return mustMatch ? -1 : utf8ToBytes(string2).length;
            }
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.byteLength = byteLength2;
    function slowToString(encoding, start, end) {
      var loweredCase = false;
      if (start === void 0 || start < 0) {
        start = 0;
      }
      if (start > this.length) {
        return "";
      }
      if (end === void 0 || end > this.length) {
        end = this.length;
      }
      if (end <= 0) {
        return "";
      }
      end >>>= 0;
      start >>>= 0;
      if (end <= start) {
        return "";
      }
      if (!encoding)
        encoding = "utf8";
      while (true) {
        switch (encoding) {
          case "hex":
            return hexSlice(this, start, end);
          case "utf8":
          case "utf-8":
            return utf8Slice(this, start, end);
          case "ascii":
            return asciiSlice(this, start, end);
          case "latin1":
          case "binary":
            return latin1Slice(this, start, end);
          case "base64":
            return base64Slice(this, start, end);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return utf16leSlice(this, start, end);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer2.prototype._isBuffer = true;
    function swap(b, n, m) {
      var i4 = b[n];
      b[n] = b[m];
      b[m] = i4;
    }
    Buffer2.prototype.swap16 = function swap16() {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var i4 = 0; i4 < len; i4 += 2) {
        swap(this, i4, i4 + 1);
      }
      return this;
    };
    Buffer2.prototype.swap32 = function swap32() {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var i4 = 0; i4 < len; i4 += 4) {
        swap(this, i4, i4 + 3);
        swap(this, i4 + 1, i4 + 2);
      }
      return this;
    };
    Buffer2.prototype.swap64 = function swap64() {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var i4 = 0; i4 < len; i4 += 8) {
        swap(this, i4, i4 + 7);
        swap(this, i4 + 1, i4 + 6);
        swap(this, i4 + 2, i4 + 5);
        swap(this, i4 + 3, i4 + 4);
      }
      return this;
    };
    Buffer2.prototype.toString = function toString() {
      var length = this.length;
      if (length === 0)
        return "";
      if (arguments.length === 0)
        return utf8Slice(this, 0, length);
      return slowToString.apply(this, arguments);
    };
    Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
    Buffer2.prototype.equals = function equals(b) {
      if (!Buffer2.isBuffer(b))
        throw new TypeError("Argument must be a Buffer");
      if (this === b)
        return true;
      return Buffer2.compare(this, b) === 0;
    };
    Buffer2.prototype.inspect = function inspect() {
      var str6 = "";
      var max = exports.INSPECT_MAX_BYTES;
      str6 = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
      if (this.length > max)
        str6 += " ... ";
      return "<Buffer " + str6 + ">";
    };
    if (customInspectSymbol) {
      Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
    }
    Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
      if (isInstance(target, Uint8Array)) {
        target = Buffer2.from(target, target.offset, target.byteLength);
      }
      if (!Buffer2.isBuffer(target)) {
        throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + babelHelpers["typeof"](target));
      }
      if (start === void 0) {
        start = 0;
      }
      if (end === void 0) {
        end = target ? target.length : 0;
      }
      if (thisStart === void 0) {
        thisStart = 0;
      }
      if (thisEnd === void 0) {
        thisEnd = this.length;
      }
      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError("out of range index");
      }
      if (thisStart >= thisEnd && start >= end) {
        return 0;
      }
      if (thisStart >= thisEnd) {
        return -1;
      }
      if (start >= end) {
        return 1;
      }
      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;
      if (this === target)
        return 0;
      var x3 = thisEnd - thisStart;
      var y4 = end - start;
      var len = Math.min(x3, y4);
      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);
      for (var i4 = 0; i4 < len; ++i4) {
        if (thisCopy[i4] !== targetCopy[i4]) {
          x3 = thisCopy[i4];
          y4 = targetCopy[i4];
          break;
        }
      }
      if (x3 < y4)
        return -1;
      if (y4 < x3)
        return 1;
      return 0;
    };
    function bidirectionalIndexOf(buffer2, val, byteOffset, encoding, dir) {
      if (buffer2.length === 0)
        return -1;
      if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 2147483647) {
        byteOffset = 2147483647;
      } else if (byteOffset < -2147483648) {
        byteOffset = -2147483648;
      }
      byteOffset = +byteOffset;
      if (numberIsNaN(byteOffset)) {
        byteOffset = dir ? 0 : buffer2.length - 1;
      }
      if (byteOffset < 0)
        byteOffset = buffer2.length + byteOffset;
      if (byteOffset >= buffer2.length) {
        if (dir)
          return -1;
        else
          byteOffset = buffer2.length - 1;
      } else if (byteOffset < 0) {
        if (dir)
          byteOffset = 0;
        else
          return -1;
      }
      if (typeof val === "string") {
        val = Buffer2.from(val, encoding);
      }
      if (Buffer2.isBuffer(val)) {
        if (val.length === 0) {
          return -1;
        }
        return arrayIndexOf(buffer2, val, byteOffset, encoding, dir);
      } else if (typeof val === "number") {
        val = val & 255;
        if (typeof Uint8Array.prototype.indexOf === "function") {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer2, val, byteOffset);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer2, val, byteOffset);
          }
        }
        return arrayIndexOf(buffer2, [val], byteOffset, encoding, dir);
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;
      if (encoding !== void 0) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
          if (arr.length < 2 || val.length < 2) {
            return -1;
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }
      function read3(buf, i5) {
        if (indexSize === 1) {
          return buf[i5];
        } else {
          return buf.readUInt16BE(i5 * indexSize);
        }
      }
      var i4;
      if (dir) {
        var foundIndex = -1;
        for (i4 = byteOffset; i4 < arrLength; i4++) {
          if (read3(arr, i4) === read3(val, foundIndex === -1 ? 0 : i4 - foundIndex)) {
            if (foundIndex === -1)
              foundIndex = i4;
            if (i4 - foundIndex + 1 === valLength)
              return foundIndex * indexSize;
          } else {
            if (foundIndex !== -1)
              i4 -= i4 - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength)
          byteOffset = arrLength - valLength;
        for (i4 = byteOffset; i4 >= 0; i4--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read3(arr, i4 + j) !== read3(val, j)) {
              found = false;
              break;
            }
          }
          if (found)
            return i4;
        }
      }
      return -1;
    }
    Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1;
    };
    Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
    };
    Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
    };
    function hexWrite(buf, string2, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }
      var strLen = string2.length;
      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i4 = 0; i4 < length; ++i4) {
        var parsed = parseInt(string2.substr(i4 * 2, 2), 16);
        if (numberIsNaN(parsed))
          return i4;
        buf[offset + i4] = parsed;
      }
      return i4;
    }
    function utf8Write(buf, string2, offset, length) {
      return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
    }
    function asciiWrite(buf, string2, offset, length) {
      return blitBuffer(asciiToBytes(string2), buf, offset, length);
    }
    function base64Write(buf, string2, offset, length) {
      return blitBuffer(base64ToBytes(string2), buf, offset, length);
    }
    function ucs2Write(buf, string2, offset, length) {
      return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
    }
    Buffer2.prototype.write = function write3(string2, offset, length, encoding) {
      if (offset === void 0) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
      } else if (length === void 0 && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
      } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
          length = length >>> 0;
          if (encoding === void 0)
            encoding = "utf8";
        } else {
          encoding = length;
          length = void 0;
        }
      } else {
        throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
      }
      var remaining = this.length - offset;
      if (length === void 0 || length > remaining)
        length = remaining;
      if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      if (!encoding)
        encoding = "utf8";
      var loweredCase = false;
      for (; ; ) {
        switch (encoding) {
          case "hex":
            return hexWrite(this, string2, offset, length);
          case "utf8":
          case "utf-8":
            return utf8Write(this, string2, offset, length);
          case "ascii":
          case "latin1":
          case "binary":
            return asciiWrite(this, string2, offset, length);
          case "base64":
            return base64Write(this, string2, offset, length);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return ucs2Write(this, string2, offset, length);
          default:
            if (loweredCase)
              throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };
    Buffer2.prototype.toJSON = function toJSON() {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    function base64Slice(buf, start, end) {
      if (start === 0 && end === buf.length) {
        return base64Js.fromByteArray(buf);
      } else {
        return base64Js.fromByteArray(buf.slice(start, end));
      }
    }
    function utf8Slice(buf, start, end) {
      end = Math.min(buf.length, end);
      var res2 = [];
      var i4 = start;
      while (i4 < end) {
        var firstByte = buf[i4];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i4 + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;
          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 128) {
                codePoint = firstByte;
              }
              break;
            case 2:
              secondByte = buf[i4 + 1];
              if ((secondByte & 192) === 128) {
                tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                if (tempCodePoint > 127) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 3:
              secondByte = buf[i4 + 1];
              thirdByte = buf[i4 + 2];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                  codePoint = tempCodePoint;
                }
              }
              break;
            case 4:
              secondByte = buf[i4 + 1];
              thirdByte = buf[i4 + 2];
              fourthByte = buf[i4 + 3];
              if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }
        if (codePoint === null) {
          codePoint = 65533;
          bytesPerSequence = 1;
        } else if (codePoint > 65535) {
          codePoint -= 65536;
          res2.push(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        res2.push(codePoint);
        i4 += bytesPerSequence;
      }
      return decodeCodePointsArray(res2);
    }
    var MAX_ARGUMENTS_LENGTH = 4096;
    function decodeCodePointsArray(codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints);
      }
      var res2 = "";
      var i4 = 0;
      while (i4 < len) {
        res2 += String.fromCharCode.apply(String, codePoints.slice(i4, i4 += MAX_ARGUMENTS_LENGTH));
      }
      return res2;
    }
    function asciiSlice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i4 = start; i4 < end; ++i4) {
        ret += String.fromCharCode(buf[i4] & 127);
      }
      return ret;
    }
    function latin1Slice(buf, start, end) {
      var ret = "";
      end = Math.min(buf.length, end);
      for (var i4 = start; i4 < end; ++i4) {
        ret += String.fromCharCode(buf[i4]);
      }
      return ret;
    }
    function hexSlice(buf, start, end) {
      var len = buf.length;
      if (!start || start < 0)
        start = 0;
      if (!end || end < 0 || end > len)
        end = len;
      var out = "";
      for (var i4 = start; i4 < end; ++i4) {
        out += hexSliceLookupTable[buf[i4]];
      }
      return out;
    }
    function utf16leSlice(buf, start, end) {
      var bytes = buf.slice(start, end);
      var res2 = "";
      for (var i4 = 0; i4 < bytes.length - 1; i4 += 2) {
        res2 += String.fromCharCode(bytes[i4] + bytes[i4 + 1] * 256);
      }
      return res2;
    }
    Buffer2.prototype.slice = function slice(start, end) {
      var len = this.length;
      start = ~~start;
      end = end === void 0 ? len : ~~end;
      if (start < 0) {
        start += len;
        if (start < 0)
          start = 0;
      } else if (start > len) {
        start = len;
      }
      if (end < 0) {
        end += len;
        if (end < 0)
          end = 0;
      } else if (end > len) {
        end = len;
      }
      if (end < start)
        end = start;
      var newBuf = this.subarray(start, end);
      Object.setPrototypeOf(newBuf, Buffer2.prototype);
      return newBuf;
    };
    function checkOffset(offset, ext, length) {
      if (offset % 1 !== 0 || offset < 0)
        throw new RangeError("offset is not uint");
      if (offset + ext > length)
        throw new RangeError("Trying to access beyond buffer length");
    }
    Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i4 = 0;
      while (++i4 < byteLength3 && (mul *= 256)) {
        val += this[offset + i4] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        checkOffset(offset, byteLength3, this.length);
      }
      var val = this[offset + --byteLength3];
      var mul = 1;
      while (byteLength3 > 0 && (mul *= 256)) {
        val += this[offset + --byteLength3] * mul;
      }
      return val;
    };
    Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      return this[offset];
    };
    Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] | this[offset + 1] << 8;
    };
    Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      return this[offset] << 8 | this[offset + 1];
    };
    Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
    };
    Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
    };
    Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      var val = this[offset];
      var mul = 1;
      var i4 = 0;
      while (++i4 < byteLength3 && (mul *= 256)) {
        val += this[offset + i4] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength3, noAssert) {
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert)
        checkOffset(offset, byteLength3, this.length);
      var i4 = byteLength3;
      var mul = 1;
      var val = this[offset + --i4];
      while (i4 > 0 && (mul *= 256)) {
        val += this[offset + --i4] * mul;
      }
      mul *= 128;
      if (val >= mul)
        val -= Math.pow(2, 8 * byteLength3);
      return val;
    };
    Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 1, this.length);
      if (!(this[offset] & 128))
        return this[offset];
      return (255 - this[offset] + 1) * -1;
    };
    Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset] | this[offset + 1] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | this[offset] << 8;
      return val & 32768 ? val | 4294901760 : val;
    };
    Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
    };
    Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
    };
    Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, true, 23, 4);
    };
    Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 4, this.length);
      return ieee754.read(this, offset, false, 23, 4);
    };
    Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, true, 52, 8);
    };
    Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
      offset = offset >>> 0;
      if (!noAssert)
        checkOffset(offset, 8, this.length);
      return ieee754.read(this, offset, false, 52, 8);
    };
    function checkInt(buf, value, offset, ext, max, min) {
      if (!Buffer2.isBuffer(buf))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (value > max || value < min)
        throw new RangeError('"value" argument is out of bounds');
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
    }
    Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      var mul = 1;
      var i4 = 0;
      this[offset] = value & 255;
      while (++i4 < byteLength3 && (mul *= 256)) {
        this[offset + i4] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      byteLength3 = byteLength3 >>> 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength3) - 1;
        checkInt(this, value, offset, byteLength3, maxBytes, 0);
      }
      var i4 = byteLength3 - 1;
      var mul = 1;
      this[offset + i4] = value & 255;
      while (--i4 >= 0 && (mul *= 256)) {
        this[offset + i4] = value / mul & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 255, 0);
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 65535, 0);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset + 3] = value >>> 24;
      this[offset + 2] = value >>> 16;
      this[offset + 1] = value >>> 8;
      this[offset] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 4294967295, 0);
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      var i4 = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 255;
      while (++i4 < byteLength3 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i4 - 1] !== 0) {
          sub = 1;
        }
        this[offset + i4] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength3, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength3 - 1);
        checkInt(this, value, offset, byteLength3, limit - 1, -limit);
      }
      var i4 = byteLength3 - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i4] = value & 255;
      while (--i4 >= 0 && (mul *= 256)) {
        if (value < 0 && sub === 0 && this[offset + i4 + 1] !== 0) {
          sub = 1;
        }
        this[offset + i4] = (value / mul >> 0) - sub & 255;
      }
      return offset + byteLength3;
    };
    Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 1, 127, -128);
      if (value < 0)
        value = 255 + value + 1;
      this[offset] = value & 255;
      return offset + 1;
    };
    Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      return offset + 2;
    };
    Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 2, 32767, -32768);
      this[offset] = value >>> 8;
      this[offset + 1] = value & 255;
      return offset + 2;
    };
    Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      this[offset] = value & 255;
      this[offset + 1] = value >>> 8;
      this[offset + 2] = value >>> 16;
      this[offset + 3] = value >>> 24;
      return offset + 4;
    };
    Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert)
        checkInt(this, value, offset, 4, 2147483647, -2147483648);
      if (value < 0)
        value = 4294967295 + value + 1;
      this[offset] = value >>> 24;
      this[offset + 1] = value >>> 16;
      this[offset + 2] = value >>> 8;
      this[offset + 3] = value & 255;
      return offset + 4;
    };
    function checkIEEE754(buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length)
        throw new RangeError("Index out of range");
      if (offset < 0)
        throw new RangeError("Index out of range");
    }
    function writeFloat(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      ieee754.write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4;
    }
    Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert);
    };
    function writeDouble(buf, value, offset, littleEndian, noAssert) {
      value = +value;
      offset = offset >>> 0;
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      ieee754.write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8;
    }
    Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert);
    };
    Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert);
    };
    Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
      if (!Buffer2.isBuffer(target))
        throw new TypeError("argument should be a Buffer");
      if (!start)
        start = 0;
      if (!end && end !== 0)
        end = this.length;
      if (targetStart >= target.length)
        targetStart = target.length;
      if (!targetStart)
        targetStart = 0;
      if (end > 0 && end < start)
        end = start;
      if (end === start)
        return 0;
      if (target.length === 0 || this.length === 0)
        return 0;
      if (targetStart < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (start < 0 || start >= this.length)
        throw new RangeError("Index out of range");
      if (end < 0)
        throw new RangeError("sourceEnd out of bounds");
      if (end > this.length)
        end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }
      var len = end - start;
      if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
        this.copyWithin(targetStart, start, end);
      } else {
        Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
      }
      return len;
    };
    Buffer2.prototype.fill = function fill(val, start, end, encoding) {
      if (typeof val === "string") {
        if (typeof start === "string") {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === "string") {
          encoding = end;
          end = this.length;
        }
        if (encoding !== void 0 && typeof encoding !== "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        if (val.length === 1) {
          var code2 = val.charCodeAt(0);
          if (encoding === "utf8" && code2 < 128 || encoding === "latin1") {
            val = code2;
          }
        }
      } else if (typeof val === "number") {
        val = val & 255;
      } else if (typeof val === "boolean") {
        val = Number(val);
      }
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError("Out of range index");
      }
      if (end <= start) {
        return this;
      }
      start = start >>> 0;
      end = end === void 0 ? this.length : end >>> 0;
      if (!val)
        val = 0;
      var i4;
      if (typeof val === "number") {
        for (i4 = start; i4 < end; ++i4) {
          this[i4] = val;
        }
      } else {
        var bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
        var len = bytes.length;
        if (len === 0) {
          throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        }
        for (i4 = 0; i4 < end - start; ++i4) {
          this[i4 + start] = bytes[i4 % len];
        }
      }
      return this;
    };
    var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
    function base64clean(str6) {
      str6 = str6.split("=")[0];
      str6 = str6.trim().replace(INVALID_BASE64_RE, "");
      if (str6.length < 2)
        return "";
      while (str6.length % 4 !== 0) {
        str6 = str6 + "=";
      }
      return str6;
    }
    function utf8ToBytes(string2, units) {
      units = units || Infinity;
      var codePoint;
      var length = string2.length;
      var leadSurrogate = null;
      var bytes = [];
      for (var i4 = 0; i4 < length; ++i4) {
        codePoint = string2.charCodeAt(i4);
        if (codePoint > 55295 && codePoint < 57344) {
          if (!leadSurrogate) {
            if (codePoint > 56319) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            } else if (i4 + 1 === length) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              continue;
            }
            leadSurrogate = codePoint;
            continue;
          }
          if (codePoint < 56320) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
            leadSurrogate = codePoint;
            continue;
          }
          codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) {
          if ((units -= 3) > -1)
            bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        if (codePoint < 128) {
          if ((units -= 1) < 0)
            break;
          bytes.push(codePoint);
        } else if (codePoint < 2048) {
          if ((units -= 2) < 0)
            break;
          bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
          if ((units -= 3) < 0)
            break;
          bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
          if ((units -= 4) < 0)
            break;
          bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else {
          throw new Error("Invalid code point");
        }
      }
      return bytes;
    }
    function asciiToBytes(str6) {
      var byteArray = [];
      for (var i4 = 0; i4 < str6.length; ++i4) {
        byteArray.push(str6.charCodeAt(i4) & 255);
      }
      return byteArray;
    }
    function utf16leToBytes(str6, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i4 = 0; i4 < str6.length; ++i4) {
        if ((units -= 2) < 0)
          break;
        c = str6.charCodeAt(i4);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }
      return byteArray;
    }
    function base64ToBytes(str6) {
      return base64Js.toByteArray(base64clean(str6));
    }
    function blitBuffer(src, dst, offset, length) {
      for (var i4 = 0; i4 < length; ++i4) {
        if (i4 + offset >= dst.length || i4 >= src.length)
          break;
        dst[i4 + offset] = src[i4];
      }
      return i4;
    }
    function isInstance(obj, type) {
      return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
    }
    function numberIsNaN(obj) {
      return obj !== obj;
    }
    var hexSliceLookupTable = function() {
      var alphabet = "0123456789abcdef";
      var table = new Array(256);
      for (var i4 = 0; i4 < 16; ++i4) {
        var i16 = i4 * 16;
        for (var j = 0; j < 16; ++j) {
          table[i16 + j] = alphabet[i4] + alphabet[j];
        }
      }
      return table;
    }();
  });
  var buffer_1 = buffer$1.Buffer;
  buffer$1.SlowBuffer;
  buffer$1.INSPECT_MAX_BYTES;
  buffer$1.kMaxLength;
  var _extendStatics = function extendStatics(d2, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function(d3, b2) {
      d3.__proto__ = b2;
    } || function(d3, b2) {
      for (var p2 in b2) {
        if (b2.hasOwnProperty(p2))
          d3[p2] = b2[p2];
      }
    };
    return _extendStatics(d2, b);
  };
  function __extends(d2, b) {
    _extendStatics(d2, b);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var BSONError = (
    /** @class */
    function(_super) {
      __extends(BSONError2, _super);
      function BSONError2(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONError2.prototype);
        return _this;
      }
      Object.defineProperty(BSONError2.prototype, "name", {
        get: function() {
          return "BSONError";
        },
        enumerable: false,
        configurable: true
      });
      return BSONError2;
    }(Error)
  );
  var BSONTypeError = (
    /** @class */
    function(_super) {
      __extends(BSONTypeError2, _super);
      function BSONTypeError2(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONTypeError2.prototype);
        return _this;
      }
      Object.defineProperty(BSONTypeError2.prototype, "name", {
        get: function() {
          return "BSONTypeError";
        },
        enumerable: false,
        configurable: true
      });
      return BSONTypeError2;
    }(TypeError)
  );
  function checkForMath(potentialGlobal) {
    return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
  }
  function getGlobal() {
    return checkForMath(typeof globalThis === "object" && globalThis) || checkForMath(typeof window === "object" && window) || checkForMath(typeof self === "object" && self) || checkForMath(typeof global === "object" && global) || // eslint-disable-next-line @typescript-eslint/no-implied-eval
    Function("return this")();
  }
  function isReactNative() {
    var g2 = getGlobal();
    return typeof g2.navigator === "object" && g2.navigator.product === "ReactNative";
  }
  var insecureRandomBytes = function insecureRandomBytes2(size) {
    var insecureWarning = isReactNative() ? "BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values." : "BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.";
    console.warn(insecureWarning);
    var result = buffer_1.alloc(size);
    for (var i4 = 0; i4 < size; ++i4)
      result[i4] = Math.floor(Math.random() * 256);
    return result;
  };
  var detectRandomBytes = function() {
    {
      if (typeof window !== "undefined") {
        var target_1 = window.crypto || window.msCrypto;
        if (target_1 && target_1.getRandomValues) {
          return function(size) {
            return target_1.getRandomValues(buffer_1.alloc(size));
          };
        }
      }
      if (typeof global !== "undefined" && global.crypto && global.crypto.getRandomValues) {
        return function(size) {
          return global.crypto.getRandomValues(buffer_1.alloc(size));
        };
      }
      return insecureRandomBytes;
    }
  };
  var randomBytes = detectRandomBytes();
  function isAnyArrayBuffer(value) {
    return ["[object ArrayBuffer]", "[object SharedArrayBuffer]"].includes(Object.prototype.toString.call(value));
  }
  function isUint8Array(value) {
    return Object.prototype.toString.call(value) === "[object Uint8Array]";
  }
  function isRegExp(d2) {
    return Object.prototype.toString.call(d2) === "[object RegExp]";
  }
  function isDate(d2) {
    return isObjectLike(d2) && Object.prototype.toString.call(d2) === "[object Date]";
  }
  function isObjectLike(candidate) {
    return typeof candidate === "object" && candidate !== null;
  }
  function deprecate(fn, message) {
    var warned = false;
    function deprecated() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (!warned) {
        console.warn(message);
        warned = true;
      }
      return fn.apply(this, args);
    }
    return deprecated;
  }
  function ensureBuffer(potentialBuffer) {
    if (ArrayBuffer.isView(potentialBuffer)) {
      return buffer_1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
    }
    if (isAnyArrayBuffer(potentialBuffer)) {
      return buffer_1.from(potentialBuffer);
    }
    throw new BSONTypeError("Must use either Buffer or TypedArray");
  }
  var VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
  var uuidValidateString = function(str6) {
    return typeof str6 === "string" && VALIDATION_REGEX.test(str6);
  };
  var uuidHexStringToBuffer = function(hexString) {
    if (!uuidValidateString(hexString)) {
      throw new BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
    }
    var sanitizedHexString = hexString.replace(/-/g, "");
    return buffer_1.from(sanitizedHexString, "hex");
  };
  var bufferToUuidHexString = function(buffer2, includeDashes) {
    if (includeDashes === void 0) {
      includeDashes = true;
    }
    return includeDashes ? buffer2.toString("hex", 0, 4) + "-" + buffer2.toString("hex", 4, 6) + "-" + buffer2.toString("hex", 6, 8) + "-" + buffer2.toString("hex", 8, 10) + "-" + buffer2.toString("hex", 10, 16) : buffer2.toString("hex");
  };
  var BSON_INT64_MAX$1 = Math.pow(2, 63) - 1;
  var BSON_INT64_MIN$1 = -Math.pow(2, 63);
  var JS_INT_MAX = Math.pow(2, 53);
  var JS_INT_MIN = -Math.pow(2, 53);
  var BSON_BINARY_SUBTYPE_UUID_NEW = 4;
  var Binary = (
    /** @class */
    function() {
      function Binary2(buffer2, subType) {
        if (!(this instanceof Binary2))
          return new Binary2(buffer2, subType);
        if (!(buffer2 == null) && !(typeof buffer2 === "string") && !ArrayBuffer.isView(buffer2) && !(buffer2 instanceof ArrayBuffer) && !Array.isArray(buffer2)) {
          throw new BSONTypeError("Binary can only be constructed from string, Buffer, TypedArray, or Array<number>");
        }
        this.sub_type = subType !== null && subType !== void 0 ? subType : Binary2.BSON_BINARY_SUBTYPE_DEFAULT;
        if (buffer2 == null) {
          this.buffer = buffer_1.alloc(Binary2.BUFFER_SIZE);
          this.position = 0;
        } else {
          if (typeof buffer2 === "string") {
            this.buffer = buffer_1.from(buffer2, "binary");
          } else if (Array.isArray(buffer2)) {
            this.buffer = buffer_1.from(buffer2);
          } else {
            this.buffer = ensureBuffer(buffer2);
          }
          this.position = this.buffer.byteLength;
        }
      }
      Binary2.prototype.put = function(byteValue) {
        if (typeof byteValue === "string" && byteValue.length !== 1) {
          throw new BSONTypeError("only accepts single character String");
        } else if (typeof byteValue !== "number" && byteValue.length !== 1)
          throw new BSONTypeError("only accepts single character Uint8Array or Array");
        var decodedByte;
        if (typeof byteValue === "string") {
          decodedByte = byteValue.charCodeAt(0);
        } else if (typeof byteValue === "number") {
          decodedByte = byteValue;
        } else {
          decodedByte = byteValue[0];
        }
        if (decodedByte < 0 || decodedByte > 255) {
          throw new BSONTypeError("only accepts number in a valid unsigned byte range 0-255");
        }
        if (this.buffer.length > this.position) {
          this.buffer[this.position++] = decodedByte;
        } else {
          var buffer2 = buffer_1.alloc(Binary2.BUFFER_SIZE + this.buffer.length);
          this.buffer.copy(buffer2, 0, 0, this.buffer.length);
          this.buffer = buffer2;
          this.buffer[this.position++] = decodedByte;
        }
      };
      Binary2.prototype.write = function(sequence, offset) {
        offset = typeof offset === "number" ? offset : this.position;
        if (this.buffer.length < offset + sequence.length) {
          var buffer2 = buffer_1.alloc(this.buffer.length + sequence.length);
          this.buffer.copy(buffer2, 0, 0, this.buffer.length);
          this.buffer = buffer2;
        }
        if (ArrayBuffer.isView(sequence)) {
          this.buffer.set(ensureBuffer(sequence), offset);
          this.position = offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;
        } else if (typeof sequence === "string") {
          this.buffer.write(sequence, offset, sequence.length, "binary");
          this.position = offset + sequence.length > this.position ? offset + sequence.length : this.position;
        }
      };
      Binary2.prototype.read = function(position, length) {
        length = length && length > 0 ? length : this.position;
        return this.buffer.slice(position, position + length);
      };
      Binary2.prototype.value = function(asRaw) {
        asRaw = !!asRaw;
        if (asRaw && this.buffer.length === this.position) {
          return this.buffer;
        }
        if (asRaw) {
          return this.buffer.slice(0, this.position);
        }
        return this.buffer.toString("binary", 0, this.position);
      };
      Binary2.prototype.length = function() {
        return this.position;
      };
      Binary2.prototype.toJSON = function() {
        return this.buffer.toString("base64");
      };
      Binary2.prototype.toString = function(format) {
        return this.buffer.toString(format);
      };
      Binary2.prototype.toExtendedJSON = function(options) {
        options = options || {};
        var base64String = this.buffer.toString("base64");
        var subType = Number(this.sub_type).toString(16);
        if (options.legacy) {
          return {
            $binary: base64String,
            $type: subType.length === 1 ? "0" + subType : subType
          };
        }
        return {
          $binary: {
            base64: base64String,
            subType: subType.length === 1 ? "0" + subType : subType
          }
        };
      };
      Binary2.prototype.toUUID = function() {
        if (this.sub_type === Binary2.SUBTYPE_UUID) {
          return new UUID(this.buffer.slice(0, this.position));
        }
        throw new BSONError('Binary sub_type "'.concat(this.sub_type, '" is not supported for converting to UUID. Only "').concat(Binary2.SUBTYPE_UUID, '" is currently supported.'));
      };
      Binary2.fromExtendedJSON = function(doc, options) {
        options = options || {};
        var data;
        var type;
        if ("$binary" in doc) {
          if (options.legacy && typeof doc.$binary === "string" && "$type" in doc) {
            type = doc.$type ? parseInt(doc.$type, 16) : 0;
            data = buffer_1.from(doc.$binary, "base64");
          } else {
            if (typeof doc.$binary !== "string") {
              type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
              data = buffer_1.from(doc.$binary.base64, "base64");
            }
          }
        } else if ("$uuid" in doc) {
          type = 4;
          data = uuidHexStringToBuffer(doc.$uuid);
        }
        if (!data) {
          throw new BSONTypeError("Unexpected Binary Extended JSON format ".concat(JSON.stringify(doc)));
        }
        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary2(data, type);
      };
      Binary2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Binary2.prototype.inspect = function() {
        var asBuffer = this.value(true);
        return 'new Binary(Buffer.from("'.concat(asBuffer.toString("hex"), '", "hex"), ').concat(this.sub_type, ")");
      };
      Binary2.BSON_BINARY_SUBTYPE_DEFAULT = 0;
      Binary2.BUFFER_SIZE = 256;
      Binary2.SUBTYPE_DEFAULT = 0;
      Binary2.SUBTYPE_FUNCTION = 1;
      Binary2.SUBTYPE_BYTE_ARRAY = 2;
      Binary2.SUBTYPE_UUID_OLD = 3;
      Binary2.SUBTYPE_UUID = 4;
      Binary2.SUBTYPE_MD5 = 5;
      Binary2.SUBTYPE_ENCRYPTED = 6;
      Binary2.SUBTYPE_COLUMN = 7;
      Binary2.SUBTYPE_USER_DEFINED = 128;
      return Binary2;
    }()
  );
  Object.defineProperty(Binary.prototype, "_bsontype", { value: "Binary" });
  var UUID_BYTE_LENGTH = 16;
  var UUID = (
    /** @class */
    function(_super) {
      __extends(UUID2, _super);
      function UUID2(input) {
        var _this = this;
        var bytes;
        var hexStr;
        if (input == null) {
          bytes = UUID2.generate();
        } else if (input instanceof UUID2) {
          bytes = buffer_1.from(input.buffer);
          hexStr = input.__id;
        } else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {
          bytes = ensureBuffer(input);
        } else if (typeof input === "string") {
          bytes = uuidHexStringToBuffer(input);
        } else {
          throw new BSONTypeError("Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).");
        }
        _this = _super.call(this, bytes, BSON_BINARY_SUBTYPE_UUID_NEW) || this;
        _this.__id = hexStr;
        return _this;
      }
      Object.defineProperty(UUID2.prototype, "id", {
        /**
         * The UUID bytes
         * @readonly
         */
        get: function() {
          return this.buffer;
        },
        set: function(value) {
          this.buffer = value;
          if (UUID2.cacheHexString) {
            this.__id = bufferToUuidHexString(value);
          }
        },
        enumerable: false,
        configurable: true
      });
      UUID2.prototype.toHexString = function(includeDashes) {
        if (includeDashes === void 0) {
          includeDashes = true;
        }
        if (UUID2.cacheHexString && this.__id) {
          return this.__id;
        }
        var uuidHexString = bufferToUuidHexString(this.id, includeDashes);
        if (UUID2.cacheHexString) {
          this.__id = uuidHexString;
        }
        return uuidHexString;
      };
      UUID2.prototype.toString = function(encoding) {
        return encoding ? this.id.toString(encoding) : this.toHexString();
      };
      UUID2.prototype.toJSON = function() {
        return this.toHexString();
      };
      UUID2.prototype.equals = function(otherId) {
        if (!otherId) {
          return false;
        }
        if (otherId instanceof UUID2) {
          return otherId.id.equals(this.id);
        }
        try {
          return new UUID2(otherId).id.equals(this.id);
        } catch (_a) {
          return false;
        }
      };
      UUID2.prototype.toBinary = function() {
        return new Binary(this.id, Binary.SUBTYPE_UUID);
      };
      UUID2.generate = function() {
        var bytes = randomBytes(UUID_BYTE_LENGTH);
        bytes[6] = bytes[6] & 15 | 64;
        bytes[8] = bytes[8] & 63 | 128;
        return buffer_1.from(bytes);
      };
      UUID2.isValid = function(input) {
        if (!input) {
          return false;
        }
        if (input instanceof UUID2) {
          return true;
        }
        if (typeof input === "string") {
          return uuidValidateString(input);
        }
        if (isUint8Array(input)) {
          if (input.length !== UUID_BYTE_LENGTH) {
            return false;
          }
          return (input[6] & 240) === 64 && (input[8] & 128) === 128;
        }
        return false;
      };
      UUID2.createFromHexString = function(hexString) {
        var buffer2 = uuidHexStringToBuffer(hexString);
        return new UUID2(buffer2);
      };
      UUID2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      UUID2.prototype.inspect = function() {
        return 'new UUID("'.concat(this.toHexString(), '")');
      };
      return UUID2;
    }(Binary)
  );
  var Code = (
    /** @class */
    function() {
      function Code2(code2, scope) {
        if (!(this instanceof Code2))
          return new Code2(code2, scope);
        this.code = code2;
        this.scope = scope;
      }
      Code2.prototype.toJSON = function() {
        return { code: this.code, scope: this.scope };
      };
      Code2.prototype.toExtendedJSON = function() {
        if (this.scope) {
          return { $code: this.code, $scope: this.scope };
        }
        return { $code: this.code };
      };
      Code2.fromExtendedJSON = function(doc) {
        return new Code2(doc.$code, doc.$scope);
      };
      Code2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Code2.prototype.inspect = function() {
        var codeJson = this.toJSON();
        return 'new Code("'.concat(String(codeJson.code), '"').concat(codeJson.scope ? ", ".concat(JSON.stringify(codeJson.scope)) : "", ")");
      };
      return Code2;
    }()
  );
  Object.defineProperty(Code.prototype, "_bsontype", { value: "Code" });
  function isDBRefLike(value) {
    return isObjectLike(value) && value.$id != null && typeof value.$ref === "string" && (value.$db == null || typeof value.$db === "string");
  }
  var DBRef = (
    /** @class */
    function() {
      function DBRef2(collection, oid, db, fields) {
        if (!(this instanceof DBRef2))
          return new DBRef2(collection, oid, db, fields);
        var parts = collection.split(".");
        if (parts.length === 2) {
          db = parts.shift();
          collection = parts.shift();
        }
        this.collection = collection;
        this.oid = oid;
        this.db = db;
        this.fields = fields || {};
      }
      Object.defineProperty(DBRef2.prototype, "namespace", {
        // Property provided for compatibility with the 1.x parser
        // the 1.x parser used a "namespace" property, while 4.x uses "collection"
        /** @internal */
        get: function() {
          return this.collection;
        },
        set: function(value) {
          this.collection = value;
        },
        enumerable: false,
        configurable: true
      });
      DBRef2.prototype.toJSON = function() {
        var o = Object.assign({
          $ref: this.collection,
          $id: this.oid
        }, this.fields);
        if (this.db != null)
          o.$db = this.db;
        return o;
      };
      DBRef2.prototype.toExtendedJSON = function(options) {
        options = options || {};
        var o = {
          $ref: this.collection,
          $id: this.oid
        };
        if (options.legacy) {
          return o;
        }
        if (this.db)
          o.$db = this.db;
        o = Object.assign(o, this.fields);
        return o;
      };
      DBRef2.fromExtendedJSON = function(doc) {
        var copy = Object.assign({}, doc);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new DBRef2(doc.$ref, doc.$id, doc.$db, copy);
      };
      DBRef2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      DBRef2.prototype.inspect = function() {
        var oid = this.oid === void 0 || this.oid.toString === void 0 ? this.oid : this.oid.toString();
        return 'new DBRef("'.concat(this.namespace, '", new ObjectId("').concat(String(oid), '")').concat(this.db ? ', "'.concat(this.db, '"') : "", ")");
      };
      return DBRef2;
    }()
  );
  Object.defineProperty(DBRef.prototype, "_bsontype", { value: "DBRef" });
  var wasm = void 0;
  try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(
      // prettier-ignore
      new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])
    ), {}).exports;
  } catch (_a) {
  }
  var TWO_PWR_16_DBL = 1 << 16;
  var TWO_PWR_24_DBL = 1 << 24;
  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  var INT_CACHE = {};
  var UINT_CACHE = {};
  var Long = (
    /** @class */
    function() {
      function Long2(low, high, unsigned) {
        if (low === void 0) {
          low = 0;
        }
        if (!(this instanceof Long2))
          return new Long2(low, high, unsigned);
        if (typeof low === "bigint") {
          Object.assign(this, Long2.fromBigInt(low, !!high));
        } else if (typeof low === "string") {
          Object.assign(this, Long2.fromString(low, !!high));
        } else {
          this.low = low | 0;
          this.high = high | 0;
          this.unsigned = !!unsigned;
        }
        Object.defineProperty(this, "__isLong__", {
          value: true,
          configurable: false,
          writable: false,
          enumerable: false
        });
      }
      Long2.fromBits = function(lowBits, highBits, unsigned) {
        return new Long2(lowBits, highBits, unsigned);
      };
      Long2.fromInt = function(value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
          value >>>= 0;
          if (cache = 0 <= value && value < 256) {
            cachedObj = UINT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = Long2.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
          if (cache)
            UINT_CACHE[value] = obj;
          return obj;
        } else {
          value |= 0;
          if (cache = -128 <= value && value < 128) {
            cachedObj = INT_CACHE[value];
            if (cachedObj)
              return cachedObj;
          }
          obj = Long2.fromBits(value, value < 0 ? -1 : 0, false);
          if (cache)
            INT_CACHE[value] = obj;
          return obj;
        }
      };
      Long2.fromNumber = function(value, unsigned) {
        if (isNaN(value))
          return unsigned ? Long2.UZERO : Long2.ZERO;
        if (unsigned) {
          if (value < 0)
            return Long2.UZERO;
          if (value >= TWO_PWR_64_DBL)
            return Long2.MAX_UNSIGNED_VALUE;
        } else {
          if (value <= -TWO_PWR_63_DBL)
            return Long2.MIN_VALUE;
          if (value + 1 >= TWO_PWR_63_DBL)
            return Long2.MAX_VALUE;
        }
        if (value < 0)
          return Long2.fromNumber(-value, unsigned).neg();
        return Long2.fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
      };
      Long2.fromBigInt = function(value, unsigned) {
        return Long2.fromString(value.toString(), unsigned);
      };
      Long2.fromString = function(str6, unsigned, radix) {
        if (str6.length === 0)
          throw Error("empty string");
        if (str6 === "NaN" || str6 === "Infinity" || str6 === "+Infinity" || str6 === "-Infinity")
          return Long2.ZERO;
        if (typeof unsigned === "number") {
          radix = unsigned, unsigned = false;
        } else {
          unsigned = !!unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        var p2;
        if ((p2 = str6.indexOf("-")) > 0)
          throw Error("interior hyphen");
        else if (p2 === 0) {
          return Long2.fromString(str6.substring(1), unsigned, radix).neg();
        }
        var radixToPower = Long2.fromNumber(Math.pow(radix, 8));
        var result = Long2.ZERO;
        for (var i4 = 0; i4 < str6.length; i4 += 8) {
          var size = Math.min(8, str6.length - i4), value = parseInt(str6.substring(i4, i4 + size), radix);
          if (size < 8) {
            var power = Long2.fromNumber(Math.pow(radix, size));
            result = result.mul(power).add(Long2.fromNumber(value));
          } else {
            result = result.mul(radixToPower);
            result = result.add(Long2.fromNumber(value));
          }
        }
        result.unsigned = unsigned;
        return result;
      };
      Long2.fromBytes = function(bytes, unsigned, le) {
        return le ? Long2.fromBytesLE(bytes, unsigned) : Long2.fromBytesBE(bytes, unsigned);
      };
      Long2.fromBytesLE = function(bytes, unsigned) {
        return new Long2(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);
      };
      Long2.fromBytesBE = function(bytes, unsigned) {
        return new Long2(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);
      };
      Long2.isLong = function(value) {
        return isObjectLike(value) && value["__isLong__"] === true;
      };
      Long2.fromValue = function(val, unsigned) {
        if (typeof val === "number")
          return Long2.fromNumber(val, unsigned);
        if (typeof val === "string")
          return Long2.fromString(val, unsigned);
        return Long2.fromBits(val.low, val.high, typeof unsigned === "boolean" ? unsigned : val.unsigned);
      };
      Long2.prototype.add = function(addend) {
        if (!Long2.isLong(addend))
          addend = Long2.fromValue(addend);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 65535;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 + b48;
        c48 &= 65535;
        return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      Long2.prototype.and = function(other) {
        if (!Long2.isLong(other))
          other = Long2.fromValue(other);
        return Long2.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
      };
      Long2.prototype.compare = function(other) {
        if (!Long2.isLong(other))
          other = Long2.fromValue(other);
        if (this.eq(other))
          return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
          return -1;
        if (!thisNeg && otherNeg)
          return 1;
        if (!this.unsigned)
          return this.sub(other).isNegative() ? -1 : 1;
        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
      };
      Long2.prototype.comp = function(other) {
        return this.compare(other);
      };
      Long2.prototype.divide = function(divisor) {
        if (!Long2.isLong(divisor))
          divisor = Long2.fromValue(divisor);
        if (divisor.isZero())
          throw Error("division by zero");
        if (wasm) {
          if (!this.unsigned && this.high === -2147483648 && divisor.low === -1 && divisor.high === -1) {
            return this;
          }
          var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
          return Long2.fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (this.isZero())
          return this.unsigned ? Long2.UZERO : Long2.ZERO;
        var approx, rem, res2;
        if (!this.unsigned) {
          if (this.eq(Long2.MIN_VALUE)) {
            if (divisor.eq(Long2.ONE) || divisor.eq(Long2.NEG_ONE))
              return Long2.MIN_VALUE;
            else if (divisor.eq(Long2.MIN_VALUE))
              return Long2.ONE;
            else {
              var halfThis = this.shr(1);
              approx = halfThis.div(divisor).shl(1);
              if (approx.eq(Long2.ZERO)) {
                return divisor.isNegative() ? Long2.ONE : Long2.NEG_ONE;
              } else {
                rem = this.sub(divisor.mul(approx));
                res2 = approx.add(rem.div(divisor));
                return res2;
              }
            }
          } else if (divisor.eq(Long2.MIN_VALUE))
            return this.unsigned ? Long2.UZERO : Long2.ZERO;
          if (this.isNegative()) {
            if (divisor.isNegative())
              return this.neg().div(divisor.neg());
            return this.neg().div(divisor).neg();
          } else if (divisor.isNegative())
            return this.div(divisor.neg()).neg();
          res2 = Long2.ZERO;
        } else {
          if (!divisor.unsigned)
            divisor = divisor.toUnsigned();
          if (divisor.gt(this))
            return Long2.UZERO;
          if (divisor.gt(this.shru(1)))
            return Long2.UONE;
          res2 = Long2.UZERO;
        }
        rem = this;
        while (rem.gte(divisor)) {
          approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
          var log2 = Math.ceil(Math.log(approx) / Math.LN2);
          var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
          var approxRes = Long2.fromNumber(approx);
          var approxRem = approxRes.mul(divisor);
          while (approxRem.isNegative() || approxRem.gt(rem)) {
            approx -= delta;
            approxRes = Long2.fromNumber(approx, this.unsigned);
            approxRem = approxRes.mul(divisor);
          }
          if (approxRes.isZero())
            approxRes = Long2.ONE;
          res2 = res2.add(approxRes);
          rem = rem.sub(approxRem);
        }
        return res2;
      };
      Long2.prototype.div = function(divisor) {
        return this.divide(divisor);
      };
      Long2.prototype.equals = function(other) {
        if (!Long2.isLong(other))
          other = Long2.fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
          return false;
        return this.high === other.high && this.low === other.low;
      };
      Long2.prototype.eq = function(other) {
        return this.equals(other);
      };
      Long2.prototype.getHighBits = function() {
        return this.high;
      };
      Long2.prototype.getHighBitsUnsigned = function() {
        return this.high >>> 0;
      };
      Long2.prototype.getLowBits = function() {
        return this.low;
      };
      Long2.prototype.getLowBitsUnsigned = function() {
        return this.low >>> 0;
      };
      Long2.prototype.getNumBitsAbs = function() {
        if (this.isNegative()) {
          return this.eq(Long2.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        }
        var val = this.high !== 0 ? this.high : this.low;
        var bit;
        for (bit = 31; bit > 0; bit--)
          if ((val & 1 << bit) !== 0)
            break;
        return this.high !== 0 ? bit + 33 : bit + 1;
      };
      Long2.prototype.greaterThan = function(other) {
        return this.comp(other) > 0;
      };
      Long2.prototype.gt = function(other) {
        return this.greaterThan(other);
      };
      Long2.prototype.greaterThanOrEqual = function(other) {
        return this.comp(other) >= 0;
      };
      Long2.prototype.gte = function(other) {
        return this.greaterThanOrEqual(other);
      };
      Long2.prototype.ge = function(other) {
        return this.greaterThanOrEqual(other);
      };
      Long2.prototype.isEven = function() {
        return (this.low & 1) === 0;
      };
      Long2.prototype.isNegative = function() {
        return !this.unsigned && this.high < 0;
      };
      Long2.prototype.isOdd = function() {
        return (this.low & 1) === 1;
      };
      Long2.prototype.isPositive = function() {
        return this.unsigned || this.high >= 0;
      };
      Long2.prototype.isZero = function() {
        return this.high === 0 && this.low === 0;
      };
      Long2.prototype.lessThan = function(other) {
        return this.comp(other) < 0;
      };
      Long2.prototype.lt = function(other) {
        return this.lessThan(other);
      };
      Long2.prototype.lessThanOrEqual = function(other) {
        return this.comp(other) <= 0;
      };
      Long2.prototype.lte = function(other) {
        return this.lessThanOrEqual(other);
      };
      Long2.prototype.modulo = function(divisor) {
        if (!Long2.isLong(divisor))
          divisor = Long2.fromValue(divisor);
        if (wasm) {
          var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
          return Long2.fromBits(low, wasm.get_high(), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
      };
      Long2.prototype.mod = function(divisor) {
        return this.modulo(divisor);
      };
      Long2.prototype.rem = function(divisor) {
        return this.modulo(divisor);
      };
      Long2.prototype.multiply = function(multiplier) {
        if (this.isZero())
          return Long2.ZERO;
        if (!Long2.isLong(multiplier))
          multiplier = Long2.fromValue(multiplier);
        if (wasm) {
          var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
          return Long2.fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (multiplier.isZero())
          return Long2.ZERO;
        if (this.eq(Long2.MIN_VALUE))
          return multiplier.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
        if (multiplier.eq(Long2.MIN_VALUE))
          return this.isOdd() ? Long2.MIN_VALUE : Long2.ZERO;
        if (this.isNegative()) {
          if (multiplier.isNegative())
            return this.neg().mul(multiplier.neg());
          else
            return this.neg().mul(multiplier).neg();
        } else if (multiplier.isNegative())
          return this.mul(multiplier.neg()).neg();
        if (this.lt(Long2.TWO_PWR_24) && multiplier.lt(Long2.TWO_PWR_24))
          return Long2.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        var a48 = this.high >>> 16;
        var a32 = this.high & 65535;
        var a16 = this.low >>> 16;
        var a00 = this.low & 65535;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 65535;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 65535;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 65535;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 65535;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 65535;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 65535;
        return Long2.fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
      };
      Long2.prototype.mul = function(multiplier) {
        return this.multiply(multiplier);
      };
      Long2.prototype.negate = function() {
        if (!this.unsigned && this.eq(Long2.MIN_VALUE))
          return Long2.MIN_VALUE;
        return this.not().add(Long2.ONE);
      };
      Long2.prototype.neg = function() {
        return this.negate();
      };
      Long2.prototype.not = function() {
        return Long2.fromBits(~this.low, ~this.high, this.unsigned);
      };
      Long2.prototype.notEquals = function(other) {
        return !this.equals(other);
      };
      Long2.prototype.neq = function(other) {
        return this.notEquals(other);
      };
      Long2.prototype.ne = function(other) {
        return this.notEquals(other);
      };
      Long2.prototype.or = function(other) {
        if (!Long2.isLong(other))
          other = Long2.fromValue(other);
        return Long2.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
      };
      Long2.prototype.shiftLeft = function(numBits) {
        if (Long2.isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return Long2.fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
        else
          return Long2.fromBits(0, this.low << numBits - 32, this.unsigned);
      };
      Long2.prototype.shl = function(numBits) {
        return this.shiftLeft(numBits);
      };
      Long2.prototype.shiftRight = function(numBits) {
        if (Long2.isLong(numBits))
          numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
          return this;
        else if (numBits < 32)
          return Long2.fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
        else
          return Long2.fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
      };
      Long2.prototype.shr = function(numBits) {
        return this.shiftRight(numBits);
      };
      Long2.prototype.shiftRightUnsigned = function(numBits) {
        if (Long2.isLong(numBits))
          numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
          return this;
        else {
          var high = this.high;
          if (numBits < 32) {
            var low = this.low;
            return Long2.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
          } else if (numBits === 32)
            return Long2.fromBits(high, 0, this.unsigned);
          else
            return Long2.fromBits(high >>> numBits - 32, 0, this.unsigned);
        }
      };
      Long2.prototype.shr_u = function(numBits) {
        return this.shiftRightUnsigned(numBits);
      };
      Long2.prototype.shru = function(numBits) {
        return this.shiftRightUnsigned(numBits);
      };
      Long2.prototype.subtract = function(subtrahend) {
        if (!Long2.isLong(subtrahend))
          subtrahend = Long2.fromValue(subtrahend);
        return this.add(subtrahend.neg());
      };
      Long2.prototype.sub = function(subtrahend) {
        return this.subtract(subtrahend);
      };
      Long2.prototype.toInt = function() {
        return this.unsigned ? this.low >>> 0 : this.low;
      };
      Long2.prototype.toNumber = function() {
        if (this.unsigned)
          return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
      };
      Long2.prototype.toBigInt = function() {
        return BigInt(this.toString());
      };
      Long2.prototype.toBytes = function(le) {
        return le ? this.toBytesLE() : this.toBytesBE();
      };
      Long2.prototype.toBytesLE = function() {
        var hi = this.high, lo = this.low;
        return [
          lo & 255,
          lo >>> 8 & 255,
          lo >>> 16 & 255,
          lo >>> 24,
          hi & 255,
          hi >>> 8 & 255,
          hi >>> 16 & 255,
          hi >>> 24
        ];
      };
      Long2.prototype.toBytesBE = function() {
        var hi = this.high, lo = this.low;
        return [
          hi >>> 24,
          hi >>> 16 & 255,
          hi >>> 8 & 255,
          hi & 255,
          lo >>> 24,
          lo >>> 16 & 255,
          lo >>> 8 & 255,
          lo & 255
        ];
      };
      Long2.prototype.toSigned = function() {
        if (!this.unsigned)
          return this;
        return Long2.fromBits(this.low, this.high, false);
      };
      Long2.prototype.toString = function(radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
          throw RangeError("radix");
        if (this.isZero())
          return "0";
        if (this.isNegative()) {
          if (this.eq(Long2.MIN_VALUE)) {
            var radixLong = Long2.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
            return div.toString(radix) + rem1.toInt().toString(radix);
          } else
            return "-" + this.neg().toString(radix);
        }
        var radixToPower = Long2.fromNumber(Math.pow(radix, 6), this.unsigned);
        var rem = this;
        var result = "";
        while (true) {
          var remDiv = rem.div(radixToPower);
          var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
          var digits = intval.toString(radix);
          rem = remDiv;
          if (rem.isZero()) {
            return digits + result;
          } else {
            while (digits.length < 6)
              digits = "0" + digits;
            result = "" + digits + result;
          }
        }
      };
      Long2.prototype.toUnsigned = function() {
        if (this.unsigned)
          return this;
        return Long2.fromBits(this.low, this.high, true);
      };
      Long2.prototype.xor = function(other) {
        if (!Long2.isLong(other))
          other = Long2.fromValue(other);
        return Long2.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
      };
      Long2.prototype.eqz = function() {
        return this.isZero();
      };
      Long2.prototype.le = function(other) {
        return this.lessThanOrEqual(other);
      };
      Long2.prototype.toExtendedJSON = function(options) {
        if (options && options.relaxed)
          return this.toNumber();
        return { $numberLong: this.toString() };
      };
      Long2.fromExtendedJSON = function(doc, options) {
        var result = Long2.fromString(doc.$numberLong);
        return options && options.relaxed ? result.toNumber() : result;
      };
      Long2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Long2.prototype.inspect = function() {
        return 'new Long("'.concat(this.toString(), '"').concat(this.unsigned ? ", true" : "", ")");
      };
      Long2.TWO_PWR_24 = Long2.fromInt(TWO_PWR_24_DBL);
      Long2.MAX_UNSIGNED_VALUE = Long2.fromBits(4294967295 | 0, 4294967295 | 0, true);
      Long2.ZERO = Long2.fromInt(0);
      Long2.UZERO = Long2.fromInt(0, true);
      Long2.ONE = Long2.fromInt(1);
      Long2.UONE = Long2.fromInt(1, true);
      Long2.NEG_ONE = Long2.fromInt(-1);
      Long2.MAX_VALUE = Long2.fromBits(4294967295 | 0, 2147483647 | 0, false);
      Long2.MIN_VALUE = Long2.fromBits(0, 2147483648 | 0, false);
      return Long2;
    }()
  );
  Object.defineProperty(Long.prototype, "__isLong__", { value: true });
  Object.defineProperty(Long.prototype, "_bsontype", { value: "Long" });
  var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
  var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
  var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
  var EXPONENT_MAX = 6111;
  var EXPONENT_MIN = -6176;
  var EXPONENT_BIAS = 6176;
  var MAX_DIGITS = 34;
  var NAN_BUFFER = [
    124,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var INF_NEGATIVE_BUFFER = [
    248,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var INF_POSITIVE_BUFFER = [
    120,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
  ].reverse();
  var EXPONENT_REGEX = /^([-+])?(\d+)?$/;
  var COMBINATION_MASK = 31;
  var EXPONENT_MASK = 16383;
  var COMBINATION_INFINITY = 30;
  var COMBINATION_NAN = 31;
  function isDigit(value) {
    return !isNaN(parseInt(value, 10));
  }
  function divideu128(value) {
    var DIVISOR = Long.fromNumber(1e3 * 1e3 * 1e3);
    var _rem = Long.fromNumber(0);
    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
      return { quotient: value, rem: _rem };
    }
    for (var i4 = 0; i4 <= 3; i4++) {
      _rem = _rem.shiftLeft(32);
      _rem = _rem.add(new Long(value.parts[i4], 0));
      value.parts[i4] = _rem.div(DIVISOR).low;
      _rem = _rem.modulo(DIVISOR);
    }
    return { quotient: value, rem: _rem };
  }
  function multiply64x2(left, right) {
    if (!left && !right) {
      return { high: Long.fromNumber(0), low: Long.fromNumber(0) };
    }
    var leftHigh = left.shiftRightUnsigned(32);
    var leftLow = new Long(left.getLowBits(), 0);
    var rightHigh = right.shiftRightUnsigned(32);
    var rightLow = new Long(right.getLowBits(), 0);
    var productHigh = leftHigh.multiply(rightHigh);
    var productMid = leftHigh.multiply(rightLow);
    var productMid2 = leftLow.multiply(rightHigh);
    var productLow = leftLow.multiply(rightLow);
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productMid = new Long(productMid.getLowBits(), 0).add(productMid2).add(productLow.shiftRightUnsigned(32));
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));
    return { high: productHigh, low: productLow };
  }
  function lessThan(left, right) {
    var uhleft = left.high >>> 0;
    var uhright = right.high >>> 0;
    if (uhleft < uhright) {
      return true;
    } else if (uhleft === uhright) {
      var ulleft = left.low >>> 0;
      var ulright = right.low >>> 0;
      if (ulleft < ulright)
        return true;
    }
    return false;
  }
  function invalidErr(string2, message) {
    throw new BSONTypeError('"'.concat(string2, '" is not a valid Decimal128 string - ').concat(message));
  }
  var Decimal128 = (
    /** @class */
    function() {
      function Decimal1282(bytes) {
        if (!(this instanceof Decimal1282))
          return new Decimal1282(bytes);
        if (typeof bytes === "string") {
          this.bytes = Decimal1282.fromString(bytes).bytes;
        } else if (isUint8Array(bytes)) {
          if (bytes.byteLength !== 16) {
            throw new BSONTypeError("Decimal128 must take a Buffer of 16 bytes");
          }
          this.bytes = bytes;
        } else {
          throw new BSONTypeError("Decimal128 must take a Buffer or string");
        }
      }
      Decimal1282.fromString = function(representation) {
        var isNegative = false;
        var sawRadix = false;
        var foundNonZero = false;
        var significantDigits = 0;
        var nDigitsRead = 0;
        var nDigits = 0;
        var radixPosition = 0;
        var firstNonZero = 0;
        var digits = [0];
        var nDigitsStored = 0;
        var digitsInsert = 0;
        var firstDigit = 0;
        var lastDigit = 0;
        var exponent = 0;
        var i4 = 0;
        var significandHigh = new Long(0, 0);
        var significandLow = new Long(0, 0);
        var biasedExponent = 0;
        var index = 0;
        if (representation.length >= 7e3) {
          throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
        }
        var stringMatch = representation.match(PARSE_STRING_REGEXP);
        var infMatch = representation.match(PARSE_INF_REGEXP);
        var nanMatch = representation.match(PARSE_NAN_REGEXP);
        if (!stringMatch && !infMatch && !nanMatch || representation.length === 0) {
          throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
        }
        if (stringMatch) {
          var unsignedNumber = stringMatch[2];
          var e = stringMatch[4];
          var expSign = stringMatch[5];
          var expNumber = stringMatch[6];
          if (e && expNumber === void 0)
            invalidErr(representation, "missing exponent power");
          if (e && unsignedNumber === void 0)
            invalidErr(representation, "missing exponent base");
          if (e === void 0 && (expSign || expNumber)) {
            invalidErr(representation, "missing e before exponent");
          }
        }
        if (representation[index] === "+" || representation[index] === "-") {
          isNegative = representation[index++] === "-";
        }
        if (!isDigit(representation[index]) && representation[index] !== ".") {
          if (representation[index] === "i" || representation[index] === "I") {
            return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
          } else if (representation[index] === "N") {
            return new Decimal1282(buffer_1.from(NAN_BUFFER));
          }
        }
        while (isDigit(representation[index]) || representation[index] === ".") {
          if (representation[index] === ".") {
            if (sawRadix)
              invalidErr(representation, "contains multiple periods");
            sawRadix = true;
            index = index + 1;
            continue;
          }
          if (nDigitsStored < 34) {
            if (representation[index] !== "0" || foundNonZero) {
              if (!foundNonZero) {
                firstNonZero = nDigitsRead;
              }
              foundNonZero = true;
              digits[digitsInsert++] = parseInt(representation[index], 10);
              nDigitsStored = nDigitsStored + 1;
            }
          }
          if (foundNonZero)
            nDigits = nDigits + 1;
          if (sawRadix)
            radixPosition = radixPosition + 1;
          nDigitsRead = nDigitsRead + 1;
          index = index + 1;
        }
        if (sawRadix && !nDigitsRead)
          throw new BSONTypeError("" + representation + " not a valid Decimal128 string");
        if (representation[index] === "e" || representation[index] === "E") {
          var match = representation.substr(++index).match(EXPONENT_REGEX);
          if (!match || !match[2])
            return new Decimal1282(buffer_1.from(NAN_BUFFER));
          exponent = parseInt(match[0], 10);
          index = index + match[0].length;
        }
        if (representation[index])
          return new Decimal1282(buffer_1.from(NAN_BUFFER));
        firstDigit = 0;
        if (!nDigitsStored) {
          firstDigit = 0;
          lastDigit = 0;
          digits[0] = 0;
          nDigits = 1;
          nDigitsStored = 1;
          significantDigits = 0;
        } else {
          lastDigit = nDigitsStored - 1;
          significantDigits = nDigits;
          if (significantDigits !== 1) {
            while (digits[firstNonZero + significantDigits - 1] === 0) {
              significantDigits = significantDigits - 1;
            }
          }
        }
        if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
          exponent = EXPONENT_MIN;
        } else {
          exponent = exponent - radixPosition;
        }
        while (exponent > EXPONENT_MAX) {
          lastDigit = lastDigit + 1;
          if (lastDigit - firstDigit > MAX_DIGITS) {
            var digitsString = digits.join("");
            if (digitsString.match(/^0+$/)) {
              exponent = EXPONENT_MAX;
              break;
            }
            invalidErr(representation, "overflow");
          }
          exponent = exponent - 1;
        }
        while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
          if (lastDigit === 0 && significantDigits < nDigitsStored) {
            exponent = EXPONENT_MIN;
            significantDigits = 0;
            break;
          }
          if (nDigitsStored < nDigits) {
            nDigits = nDigits - 1;
          } else {
            lastDigit = lastDigit - 1;
          }
          if (exponent < EXPONENT_MAX) {
            exponent = exponent + 1;
          } else {
            var digitsString = digits.join("");
            if (digitsString.match(/^0+$/)) {
              exponent = EXPONENT_MAX;
              break;
            }
            invalidErr(representation, "overflow");
          }
        }
        if (lastDigit - firstDigit + 1 < significantDigits) {
          var endOfString = nDigitsRead;
          if (sawRadix) {
            firstNonZero = firstNonZero + 1;
            endOfString = endOfString + 1;
          }
          if (isNegative) {
            firstNonZero = firstNonZero + 1;
            endOfString = endOfString + 1;
          }
          var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
          var roundBit = 0;
          if (roundDigit >= 5) {
            roundBit = 1;
            if (roundDigit === 5) {
              roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
              for (i4 = firstNonZero + lastDigit + 2; i4 < endOfString; i4++) {
                if (parseInt(representation[i4], 10)) {
                  roundBit = 1;
                  break;
                }
              }
            }
          }
          if (roundBit) {
            var dIdx = lastDigit;
            for (; dIdx >= 0; dIdx--) {
              if (++digits[dIdx] > 9) {
                digits[dIdx] = 0;
                if (dIdx === 0) {
                  if (exponent < EXPONENT_MAX) {
                    exponent = exponent + 1;
                    digits[dIdx] = 1;
                  } else {
                    return new Decimal1282(buffer_1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                  }
                }
              }
            }
          }
        }
        significandHigh = Long.fromNumber(0);
        significandLow = Long.fromNumber(0);
        if (significantDigits === 0) {
          significandHigh = Long.fromNumber(0);
          significandLow = Long.fromNumber(0);
        } else if (lastDigit - firstDigit < 17) {
          var dIdx = firstDigit;
          significandLow = Long.fromNumber(digits[dIdx++]);
          significandHigh = new Long(0, 0);
          for (; dIdx <= lastDigit; dIdx++) {
            significandLow = significandLow.multiply(Long.fromNumber(10));
            significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
          }
        } else {
          var dIdx = firstDigit;
          significandHigh = Long.fromNumber(digits[dIdx++]);
          for (; dIdx <= lastDigit - 17; dIdx++) {
            significandHigh = significandHigh.multiply(Long.fromNumber(10));
            significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));
          }
          significandLow = Long.fromNumber(digits[dIdx++]);
          for (; dIdx <= lastDigit; dIdx++) {
            significandLow = significandLow.multiply(Long.fromNumber(10));
            significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
          }
        }
        var significand = multiply64x2(significandHigh, Long.fromString("100000000000000000"));
        significand.low = significand.low.add(significandLow);
        if (lessThan(significand.low, significandLow)) {
          significand.high = significand.high.add(Long.fromNumber(1));
        }
        biasedExponent = exponent + EXPONENT_BIAS;
        var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };
        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {
          dec.high = dec.high.or(Long.fromNumber(3).shiftLeft(61));
          dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(16383).shiftLeft(47)));
          dec.high = dec.high.or(significand.high.and(Long.fromNumber(140737488355327)));
        } else {
          dec.high = dec.high.or(Long.fromNumber(biasedExponent & 16383).shiftLeft(49));
          dec.high = dec.high.or(significand.high.and(Long.fromNumber(562949953421311)));
        }
        dec.low = significand.low;
        if (isNegative) {
          dec.high = dec.high.or(Long.fromString("9223372036854775808"));
        }
        var buffer2 = buffer_1.alloc(16);
        index = 0;
        buffer2[index++] = dec.low.low & 255;
        buffer2[index++] = dec.low.low >> 8 & 255;
        buffer2[index++] = dec.low.low >> 16 & 255;
        buffer2[index++] = dec.low.low >> 24 & 255;
        buffer2[index++] = dec.low.high & 255;
        buffer2[index++] = dec.low.high >> 8 & 255;
        buffer2[index++] = dec.low.high >> 16 & 255;
        buffer2[index++] = dec.low.high >> 24 & 255;
        buffer2[index++] = dec.high.low & 255;
        buffer2[index++] = dec.high.low >> 8 & 255;
        buffer2[index++] = dec.high.low >> 16 & 255;
        buffer2[index++] = dec.high.low >> 24 & 255;
        buffer2[index++] = dec.high.high & 255;
        buffer2[index++] = dec.high.high >> 8 & 255;
        buffer2[index++] = dec.high.high >> 16 & 255;
        buffer2[index++] = dec.high.high >> 24 & 255;
        return new Decimal1282(buffer2);
      };
      Decimal1282.prototype.toString = function() {
        var biased_exponent;
        var significand_digits = 0;
        var significand = new Array(36);
        for (var i4 = 0; i4 < significand.length; i4++)
          significand[i4] = 0;
        var index = 0;
        var is_zero = false;
        var significand_msb;
        var significand128 = { parts: [0, 0, 0, 0] };
        var j, k;
        var string2 = [];
        index = 0;
        var buffer2 = this.bytes;
        var low = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var midl = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var midh = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        var high = buffer2[index++] | buffer2[index++] << 8 | buffer2[index++] << 16 | buffer2[index++] << 24;
        index = 0;
        var dec = {
          low: new Long(low, midl),
          high: new Long(midh, high)
        };
        if (dec.high.lessThan(Long.ZERO)) {
          string2.push("-");
        }
        var combination = high >> 26 & COMBINATION_MASK;
        if (combination >> 3 === 3) {
          if (combination === COMBINATION_INFINITY) {
            return string2.join("") + "Infinity";
          } else if (combination === COMBINATION_NAN) {
            return "NaN";
          } else {
            biased_exponent = high >> 15 & EXPONENT_MASK;
            significand_msb = 8 + (high >> 14 & 1);
          }
        } else {
          significand_msb = high >> 14 & 7;
          biased_exponent = high >> 17 & EXPONENT_MASK;
        }
        var exponent = biased_exponent - EXPONENT_BIAS;
        significand128.parts[0] = (high & 16383) + ((significand_msb & 15) << 14);
        significand128.parts[1] = midh;
        significand128.parts[2] = midl;
        significand128.parts[3] = low;
        if (significand128.parts[0] === 0 && significand128.parts[1] === 0 && significand128.parts[2] === 0 && significand128.parts[3] === 0) {
          is_zero = true;
        } else {
          for (k = 3; k >= 0; k--) {
            var least_digits = 0;
            var result = divideu128(significand128);
            significand128 = result.quotient;
            least_digits = result.rem.low;
            if (!least_digits)
              continue;
            for (j = 8; j >= 0; j--) {
              significand[k * 9 + j] = least_digits % 10;
              least_digits = Math.floor(least_digits / 10);
            }
          }
        }
        if (is_zero) {
          significand_digits = 1;
          significand[index] = 0;
        } else {
          significand_digits = 36;
          while (!significand[index]) {
            significand_digits = significand_digits - 1;
            index = index + 1;
          }
        }
        var scientific_exponent = significand_digits - 1 + exponent;
        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
          if (significand_digits > 34) {
            string2.push("".concat(0));
            if (exponent > 0)
              string2.push("E+".concat(exponent));
            else if (exponent < 0)
              string2.push("E".concat(exponent));
            return string2.join("");
          }
          string2.push("".concat(significand[index++]));
          significand_digits = significand_digits - 1;
          if (significand_digits) {
            string2.push(".");
          }
          for (var i4 = 0; i4 < significand_digits; i4++) {
            string2.push("".concat(significand[index++]));
          }
          string2.push("E");
          if (scientific_exponent > 0) {
            string2.push("+".concat(scientific_exponent));
          } else {
            string2.push("".concat(scientific_exponent));
          }
        } else {
          if (exponent >= 0) {
            for (var i4 = 0; i4 < significand_digits; i4++) {
              string2.push("".concat(significand[index++]));
            }
          } else {
            var radix_position = significand_digits + exponent;
            if (radix_position > 0) {
              for (var i4 = 0; i4 < radix_position; i4++) {
                string2.push("".concat(significand[index++]));
              }
            } else {
              string2.push("0");
            }
            string2.push(".");
            while (radix_position++ < 0) {
              string2.push("0");
            }
            for (var i4 = 0; i4 < significand_digits - Math.max(radix_position - 1, 0); i4++) {
              string2.push("".concat(significand[index++]));
            }
          }
        }
        return string2.join("");
      };
      Decimal1282.prototype.toJSON = function() {
        return { $numberDecimal: this.toString() };
      };
      Decimal1282.prototype.toExtendedJSON = function() {
        return { $numberDecimal: this.toString() };
      };
      Decimal1282.fromExtendedJSON = function(doc) {
        return Decimal1282.fromString(doc.$numberDecimal);
      };
      Decimal1282.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Decimal1282.prototype.inspect = function() {
        return 'new Decimal128("'.concat(this.toString(), '")');
      };
      return Decimal1282;
    }()
  );
  Object.defineProperty(Decimal128.prototype, "_bsontype", { value: "Decimal128" });
  var Double = (
    /** @class */
    function() {
      function Double2(value) {
        if (!(this instanceof Double2))
          return new Double2(value);
        if (value instanceof Number) {
          value = value.valueOf();
        }
        this.value = +value;
      }
      Double2.prototype.valueOf = function() {
        return this.value;
      };
      Double2.prototype.toJSON = function() {
        return this.value;
      };
      Double2.prototype.toString = function(radix) {
        return this.value.toString(radix);
      };
      Double2.prototype.toExtendedJSON = function(options) {
        if (options && (options.legacy || options.relaxed && isFinite(this.value))) {
          return this.value;
        }
        if (Object.is(Math.sign(this.value), -0)) {
          return { $numberDouble: "-".concat(this.value.toFixed(1)) };
        }
        return {
          $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()
        };
      };
      Double2.fromExtendedJSON = function(doc, options) {
        var doubleValue = parseFloat(doc.$numberDouble);
        return options && options.relaxed ? doubleValue : new Double2(doubleValue);
      };
      Double2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Double2.prototype.inspect = function() {
        var eJSON = this.toExtendedJSON();
        return "new Double(".concat(eJSON.$numberDouble, ")");
      };
      return Double2;
    }()
  );
  Object.defineProperty(Double.prototype, "_bsontype", { value: "Double" });
  var Int32 = (
    /** @class */
    function() {
      function Int322(value) {
        if (!(this instanceof Int322))
          return new Int322(value);
        if (value instanceof Number) {
          value = value.valueOf();
        }
        this.value = +value | 0;
      }
      Int322.prototype.valueOf = function() {
        return this.value;
      };
      Int322.prototype.toString = function(radix) {
        return this.value.toString(radix);
      };
      Int322.prototype.toJSON = function() {
        return this.value;
      };
      Int322.prototype.toExtendedJSON = function(options) {
        if (options && (options.relaxed || options.legacy))
          return this.value;
        return { $numberInt: this.value.toString() };
      };
      Int322.fromExtendedJSON = function(doc, options) {
        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int322(doc.$numberInt);
      };
      Int322.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Int322.prototype.inspect = function() {
        return "new Int32(".concat(this.valueOf(), ")");
      };
      return Int322;
    }()
  );
  Object.defineProperty(Int32.prototype, "_bsontype", { value: "Int32" });
  var MaxKey = (
    /** @class */
    function() {
      function MaxKey2() {
        if (!(this instanceof MaxKey2))
          return new MaxKey2();
      }
      MaxKey2.prototype.toExtendedJSON = function() {
        return { $maxKey: 1 };
      };
      MaxKey2.fromExtendedJSON = function() {
        return new MaxKey2();
      };
      MaxKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      MaxKey2.prototype.inspect = function() {
        return "new MaxKey()";
      };
      return MaxKey2;
    }()
  );
  Object.defineProperty(MaxKey.prototype, "_bsontype", { value: "MaxKey" });
  var MinKey = (
    /** @class */
    function() {
      function MinKey2() {
        if (!(this instanceof MinKey2))
          return new MinKey2();
      }
      MinKey2.prototype.toExtendedJSON = function() {
        return { $minKey: 1 };
      };
      MinKey2.fromExtendedJSON = function() {
        return new MinKey2();
      };
      MinKey2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      MinKey2.prototype.inspect = function() {
        return "new MinKey()";
      };
      return MinKey2;
    }()
  );
  Object.defineProperty(MinKey.prototype, "_bsontype", { value: "MinKey" });
  var checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");
  var PROCESS_UNIQUE = null;
  var kId = Symbol("id");
  var ObjectId = (
    /** @class */
    function() {
      function ObjectId2(inputId) {
        if (!(this instanceof ObjectId2))
          return new ObjectId2(inputId);
        var workingId;
        if (typeof inputId === "object" && inputId && "id" in inputId) {
          if (typeof inputId.id !== "string" && !ArrayBuffer.isView(inputId.id)) {
            throw new BSONTypeError("Argument passed in must have an id that is of type string or Buffer");
          }
          if ("toHexString" in inputId && typeof inputId.toHexString === "function") {
            workingId = buffer_1.from(inputId.toHexString(), "hex");
          } else {
            workingId = inputId.id;
          }
        } else {
          workingId = inputId;
        }
        if (workingId == null || typeof workingId === "number") {
          this[kId] = ObjectId2.generate(typeof workingId === "number" ? workingId : void 0);
        } else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {
          this[kId] = workingId instanceof buffer_1 ? workingId : ensureBuffer(workingId);
        } else if (typeof workingId === "string") {
          if (workingId.length === 12) {
            var bytes = buffer_1.from(workingId);
            if (bytes.byteLength === 12) {
              this[kId] = bytes;
            } else {
              throw new BSONTypeError("Argument passed in must be a string of 12 bytes");
            }
          } else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {
            this[kId] = buffer_1.from(workingId, "hex");
          } else {
            throw new BSONTypeError("Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer");
          }
        } else {
          throw new BSONTypeError("Argument passed in does not match the accepted types");
        }
        if (ObjectId2.cacheHexString) {
          this.__id = this.id.toString("hex");
        }
      }
      Object.defineProperty(ObjectId2.prototype, "id", {
        /**
         * The ObjectId bytes
         * @readonly
         */
        get: function() {
          return this[kId];
        },
        set: function(value) {
          this[kId] = value;
          if (ObjectId2.cacheHexString) {
            this.__id = value.toString("hex");
          }
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(ObjectId2.prototype, "generationTime", {
        /**
         * The generation time of this ObjectId instance
         * @deprecated Please use getTimestamp / createFromTime which returns an int32 epoch
         */
        get: function() {
          return this.id.readInt32BE(0);
        },
        set: function(value) {
          this.id.writeUInt32BE(value, 0);
        },
        enumerable: false,
        configurable: true
      });
      ObjectId2.prototype.toHexString = function() {
        if (ObjectId2.cacheHexString && this.__id) {
          return this.__id;
        }
        var hexString = this.id.toString("hex");
        if (ObjectId2.cacheHexString && !this.__id) {
          this.__id = hexString;
        }
        return hexString;
      };
      ObjectId2.getInc = function() {
        return ObjectId2.index = (ObjectId2.index + 1) % 16777215;
      };
      ObjectId2.generate = function(time) {
        if ("number" !== typeof time) {
          time = Math.floor(Date.now() / 1e3);
        }
        var inc = ObjectId2.getInc();
        var buffer2 = buffer_1.alloc(12);
        buffer2.writeUInt32BE(time, 0);
        if (PROCESS_UNIQUE === null) {
          PROCESS_UNIQUE = randomBytes(5);
        }
        buffer2[4] = PROCESS_UNIQUE[0];
        buffer2[5] = PROCESS_UNIQUE[1];
        buffer2[6] = PROCESS_UNIQUE[2];
        buffer2[7] = PROCESS_UNIQUE[3];
        buffer2[8] = PROCESS_UNIQUE[4];
        buffer2[11] = inc & 255;
        buffer2[10] = inc >> 8 & 255;
        buffer2[9] = inc >> 16 & 255;
        return buffer2;
      };
      ObjectId2.prototype.toString = function(format) {
        if (format)
          return this.id.toString(format);
        return this.toHexString();
      };
      ObjectId2.prototype.toJSON = function() {
        return this.toHexString();
      };
      ObjectId2.prototype.equals = function(otherId) {
        if (otherId === void 0 || otherId === null) {
          return false;
        }
        if (otherId instanceof ObjectId2) {
          return this[kId][11] === otherId[kId][11] && this[kId].equals(otherId[kId]);
        }
        if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12 && isUint8Array(this.id)) {
          return otherId === buffer_1.prototype.toString.call(this.id, "latin1");
        }
        if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 24) {
          return otherId.toLowerCase() === this.toHexString();
        }
        if (typeof otherId === "string" && ObjectId2.isValid(otherId) && otherId.length === 12) {
          return buffer_1.from(otherId).equals(this.id);
        }
        if (typeof otherId === "object" && "toHexString" in otherId && typeof otherId.toHexString === "function") {
          var otherIdString = otherId.toHexString();
          var thisIdString = this.toHexString().toLowerCase();
          return typeof otherIdString === "string" && otherIdString.toLowerCase() === thisIdString;
        }
        return false;
      };
      ObjectId2.prototype.getTimestamp = function() {
        var timestamp = /* @__PURE__ */ new Date();
        var time = this.id.readUInt32BE(0);
        timestamp.setTime(Math.floor(time) * 1e3);
        return timestamp;
      };
      ObjectId2.createPk = function() {
        return new ObjectId2();
      };
      ObjectId2.createFromTime = function(time) {
        var buffer2 = buffer_1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        buffer2.writeUInt32BE(time, 0);
        return new ObjectId2(buffer2);
      };
      ObjectId2.createFromHexString = function(hexString) {
        if (typeof hexString === "undefined" || hexString != null && hexString.length !== 24) {
          throw new BSONTypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
        }
        return new ObjectId2(buffer_1.from(hexString, "hex"));
      };
      ObjectId2.isValid = function(id) {
        if (id == null)
          return false;
        try {
          new ObjectId2(id);
          return true;
        } catch (_a) {
          return false;
        }
      };
      ObjectId2.prototype.toExtendedJSON = function() {
        if (this.toHexString)
          return { $oid: this.toHexString() };
        return { $oid: this.toString("hex") };
      };
      ObjectId2.fromExtendedJSON = function(doc) {
        return new ObjectId2(doc.$oid);
      };
      ObjectId2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      ObjectId2.prototype.inspect = function() {
        return 'new ObjectId("'.concat(this.toHexString(), '")');
      };
      ObjectId2.index = Math.floor(Math.random() * 16777215);
      return ObjectId2;
    }()
  );
  Object.defineProperty(ObjectId.prototype, "generate", {
    value: deprecate(function(time) {
      return ObjectId.generate(time);
    }, "Please use the static `ObjectId.generate(time)` instead")
  });
  Object.defineProperty(ObjectId.prototype, "getInc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId.prototype, "get_inc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId, "get_inc", {
    value: deprecate(function() {
      return ObjectId.getInc();
    }, "Please use the static `ObjectId.getInc()` instead")
  });
  Object.defineProperty(ObjectId.prototype, "_bsontype", { value: "ObjectID" });
  function alphabetize(str6) {
    return str6.split("").sort().join("");
  }
  var BSONRegExp = (
    /** @class */
    function() {
      function BSONRegExp2(pattern, options) {
        if (!(this instanceof BSONRegExp2))
          return new BSONRegExp2(pattern, options);
        this.pattern = pattern;
        this.options = alphabetize(options !== null && options !== void 0 ? options : "");
        if (this.pattern.indexOf("\0") !== -1) {
          throw new BSONError("BSON Regex patterns cannot contain null bytes, found: ".concat(JSON.stringify(this.pattern)));
        }
        if (this.options.indexOf("\0") !== -1) {
          throw new BSONError("BSON Regex options cannot contain null bytes, found: ".concat(JSON.stringify(this.options)));
        }
        for (var i4 = 0; i4 < this.options.length; i4++) {
          if (!(this.options[i4] === "i" || this.options[i4] === "m" || this.options[i4] === "x" || this.options[i4] === "l" || this.options[i4] === "s" || this.options[i4] === "u")) {
            throw new BSONError("The regular expression option [".concat(this.options[i4], "] is not supported"));
          }
        }
      }
      BSONRegExp2.parseOptions = function(options) {
        return options ? options.split("").sort().join("") : "";
      };
      BSONRegExp2.prototype.toExtendedJSON = function(options) {
        options = options || {};
        if (options.legacy) {
          return { $regex: this.pattern, $options: this.options };
        }
        return { $regularExpression: { pattern: this.pattern, options: this.options } };
      };
      BSONRegExp2.fromExtendedJSON = function(doc) {
        if ("$regex" in doc) {
          if (typeof doc.$regex !== "string") {
            if (doc.$regex._bsontype === "BSONRegExp") {
              return doc;
            }
          } else {
            return new BSONRegExp2(doc.$regex, BSONRegExp2.parseOptions(doc.$options));
          }
        }
        if ("$regularExpression" in doc) {
          return new BSONRegExp2(doc.$regularExpression.pattern, BSONRegExp2.parseOptions(doc.$regularExpression.options));
        }
        throw new BSONTypeError("Unexpected BSONRegExp EJSON object form: ".concat(JSON.stringify(doc)));
      };
      return BSONRegExp2;
    }()
  );
  Object.defineProperty(BSONRegExp.prototype, "_bsontype", { value: "BSONRegExp" });
  var BSONSymbol = (
    /** @class */
    function() {
      function BSONSymbol2(value) {
        if (!(this instanceof BSONSymbol2))
          return new BSONSymbol2(value);
        this.value = value;
      }
      BSONSymbol2.prototype.valueOf = function() {
        return this.value;
      };
      BSONSymbol2.prototype.toString = function() {
        return this.value;
      };
      BSONSymbol2.prototype.inspect = function() {
        return 'new BSONSymbol("'.concat(this.value, '")');
      };
      BSONSymbol2.prototype.toJSON = function() {
        return this.value;
      };
      BSONSymbol2.prototype.toExtendedJSON = function() {
        return { $symbol: this.value };
      };
      BSONSymbol2.fromExtendedJSON = function(doc) {
        return new BSONSymbol2(doc.$symbol);
      };
      BSONSymbol2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      return BSONSymbol2;
    }()
  );
  Object.defineProperty(BSONSymbol.prototype, "_bsontype", { value: "Symbol" });
  var LongWithoutOverridesClass = Long;
  var Timestamp = (
    /** @class */
    function(_super) {
      __extends(Timestamp2, _super);
      function Timestamp2(low, high) {
        var _this = this;
        if (!(_this instanceof Timestamp2))
          return new Timestamp2(low, high);
        if (Long.isLong(low)) {
          _this = _super.call(this, low.low, low.high, true) || this;
        } else if (isObjectLike(low) && typeof low.t !== "undefined" && typeof low.i !== "undefined") {
          _this = _super.call(this, low.i, low.t, true) || this;
        } else {
          _this = _super.call(this, low, high, true) || this;
        }
        Object.defineProperty(_this, "_bsontype", {
          value: "Timestamp",
          writable: false,
          configurable: false,
          enumerable: false
        });
        return _this;
      }
      Timestamp2.prototype.toJSON = function() {
        return {
          $timestamp: this.toString()
        };
      };
      Timestamp2.fromInt = function(value) {
        return new Timestamp2(Long.fromInt(value, true));
      };
      Timestamp2.fromNumber = function(value) {
        return new Timestamp2(Long.fromNumber(value, true));
      };
      Timestamp2.fromBits = function(lowBits, highBits) {
        return new Timestamp2(lowBits, highBits);
      };
      Timestamp2.fromString = function(str6, optRadix) {
        return new Timestamp2(Long.fromString(str6, true, optRadix));
      };
      Timestamp2.prototype.toExtendedJSON = function() {
        return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };
      };
      Timestamp2.fromExtendedJSON = function(doc) {
        return new Timestamp2(doc.$timestamp);
      };
      Timestamp2.prototype[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return this.inspect();
      };
      Timestamp2.prototype.inspect = function() {
        return "new Timestamp({ t: ".concat(this.getHighBits(), ", i: ").concat(this.getLowBits(), " })");
      };
      Timestamp2.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
      return Timestamp2;
    }(LongWithoutOverridesClass)
  );
  function isBSONType(value) {
    return isObjectLike(value) && Reflect.has(value, "_bsontype") && typeof value._bsontype === "string";
  }
  var BSON_INT32_MAX = 2147483647;
  var BSON_INT32_MIN = -2147483648;
  var BSON_INT64_MAX = 9223372036854776e3;
  var BSON_INT64_MIN = -9223372036854776e3;
  var keysToCodecs = {
    $oid: ObjectId,
    $binary: Binary,
    $uuid: Binary,
    $symbol: BSONSymbol,
    $numberInt: Int32,
    $numberDecimal: Decimal128,
    $numberDouble: Double,
    $numberLong: Long,
    $minKey: MinKey,
    $maxKey: MaxKey,
    $regex: BSONRegExp,
    $regularExpression: BSONRegExp,
    $timestamp: Timestamp
  };
  function deserializeValue(value, options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof value === "number") {
      if (options.relaxed || options.legacy) {
        return value;
      }
      if (Math.floor(value) === value) {
        if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX)
          return new Int32(value);
        if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX)
          return Long.fromNumber(value);
      }
      return new Double(value);
    }
    if (value == null || typeof value !== "object")
      return value;
    if (value.$undefined)
      return null;
    var keys4 = Object.keys(value).filter(function(k) {
      return k.startsWith("$") && value[k] != null;
    });
    for (var i4 = 0; i4 < keys4.length; i4++) {
      var c = keysToCodecs[keys4[i4]];
      if (c)
        return c.fromExtendedJSON(value, options);
    }
    if (value.$date != null) {
      var d2 = value.$date;
      var date = /* @__PURE__ */ new Date();
      if (options.legacy) {
        if (typeof d2 === "number")
          date.setTime(d2);
        else if (typeof d2 === "string")
          date.setTime(Date.parse(d2));
      } else {
        if (typeof d2 === "string")
          date.setTime(Date.parse(d2));
        else if (Long.isLong(d2))
          date.setTime(d2.toNumber());
        else if (typeof d2 === "number" && options.relaxed)
          date.setTime(d2);
      }
      return date;
    }
    if (value.$code != null) {
      var copy = Object.assign({}, value);
      if (value.$scope) {
        copy.$scope = deserializeValue(value.$scope);
      }
      return Code.fromExtendedJSON(value);
    }
    if (isDBRefLike(value) || value.$dbPointer) {
      var v2 = value.$ref ? value : value.$dbPointer;
      if (v2 instanceof DBRef)
        return v2;
      var dollarKeys = Object.keys(v2).filter(function(k) {
        return k.startsWith("$");
      });
      var valid_1 = true;
      dollarKeys.forEach(function(k) {
        if (["$ref", "$id", "$db"].indexOf(k) === -1)
          valid_1 = false;
      });
      if (valid_1)
        return DBRef.fromExtendedJSON(v2);
    }
    return value;
  }
  function serializeArray(array, options) {
    return array.map(function(v2, index) {
      options.seenObjects.push({ propertyName: "index ".concat(index), obj: null });
      try {
        return serializeValue(v2, options);
      } finally {
        options.seenObjects.pop();
      }
    });
  }
  function getISOString(date) {
    var isoStr = date.toISOString();
    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + "Z";
  }
  function serializeValue(value, options) {
    if ((typeof value === "object" || typeof value === "function") && value !== null) {
      var index = options.seenObjects.findIndex(function(entry) {
        return entry.obj === value;
      });
      if (index !== -1) {
        var props = options.seenObjects.map(function(entry) {
          return entry.propertyName;
        });
        var leadingPart = props.slice(0, index).map(function(prop) {
          return "".concat(prop, " -> ");
        }).join("");
        var alreadySeen = props[index];
        var circularPart = " -> " + props.slice(index + 1, props.length - 1).map(function(prop) {
          return "".concat(prop, " -> ");
        }).join("");
        var current = props[props.length - 1];
        var leadingSpace = " ".repeat(leadingPart.length + alreadySeen.length / 2);
        var dashes = "-".repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
        throw new BSONTypeError("Converting circular structure to EJSON:\n" + "    ".concat(leadingPart).concat(alreadySeen).concat(circularPart).concat(current, "\n") + "    ".concat(leadingSpace, "\\").concat(dashes, "/"));
      }
      options.seenObjects[options.seenObjects.length - 1].obj = value;
    }
    if (Array.isArray(value))
      return serializeArray(value, options);
    if (value === void 0)
      return null;
    if (value instanceof Date || isDate(value)) {
      var dateNum = value.getTime(), inRange = dateNum > -1 && dateNum < 2534023188e5;
      if (options.legacy) {
        return options.relaxed && inRange ? { $date: value.getTime() } : { $date: getISOString(value) };
      }
      return options.relaxed && inRange ? { $date: getISOString(value) } : { $date: { $numberLong: value.getTime().toString() } };
    }
    if (typeof value === "number" && (!options.relaxed || !isFinite(value))) {
      if (Math.floor(value) === value) {
        var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX, int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;
        if (int32Range)
          return { $numberInt: value.toString() };
        if (int64Range)
          return { $numberLong: value.toString() };
      }
      return { $numberDouble: value.toString() };
    }
    if (value instanceof RegExp || isRegExp(value)) {
      var flags = value.flags;
      if (flags === void 0) {
        var match = value.toString().match(/[gimuy]*$/);
        if (match) {
          flags = match[0];
        }
      }
      var rx = new BSONRegExp(value.source, flags);
      return rx.toExtendedJSON(options);
    }
    if (value != null && typeof value === "object")
      return serializeDocument(value, options);
    return value;
  }
  var BSON_TYPE_MAPPINGS = {
    Binary: function(o) {
      return new Binary(o.value(), o.sub_type);
    },
    Code: function(o) {
      return new Code(o.code, o.scope);
    },
    DBRef: function(o) {
      return new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields);
    },
    Decimal128: function(o) {
      return new Decimal128(o.bytes);
    },
    Double: function(o) {
      return new Double(o.value);
    },
    Int32: function(o) {
      return new Int32(o.value);
    },
    Long: function(o) {
      return Long.fromBits(
        // underscore variants for 1.x backwards compatibility
        o.low != null ? o.low : o.low_,
        o.low != null ? o.high : o.high_,
        o.low != null ? o.unsigned : o.unsigned_
      );
    },
    MaxKey: function() {
      return new MaxKey();
    },
    MinKey: function() {
      return new MinKey();
    },
    ObjectID: function(o) {
      return new ObjectId(o);
    },
    ObjectId: function(o) {
      return new ObjectId(o);
    },
    BSONRegExp: function(o) {
      return new BSONRegExp(o.pattern, o.options);
    },
    Symbol: function(o) {
      return new BSONSymbol(o.value);
    },
    Timestamp: function(o) {
      return Timestamp.fromBits(o.low, o.high);
    }
  };
  function serializeDocument(doc, options) {
    if (doc == null || typeof doc !== "object")
      throw new BSONError("not an object instance");
    var bsontype = doc._bsontype;
    if (typeof bsontype === "undefined") {
      var _doc = {};
      for (var name2 in doc) {
        options.seenObjects.push({ propertyName: name2, obj: null });
        try {
          var value = serializeValue(doc[name2], options);
          if (name2 === "__proto__") {
            Object.defineProperty(_doc, name2, {
              value,
              writable: true,
              enumerable: true,
              configurable: true
            });
          } else {
            _doc[name2] = value;
          }
        } finally {
          options.seenObjects.pop();
        }
      }
      return _doc;
    } else if (isBSONType(doc)) {
      var outDoc = doc;
      if (typeof outDoc.toExtendedJSON !== "function") {
        var mapper = BSON_TYPE_MAPPINGS[doc._bsontype];
        if (!mapper) {
          throw new BSONTypeError("Unrecognized or invalid _bsontype: " + doc._bsontype);
        }
        outDoc = mapper(outDoc);
      }
      if (bsontype === "Code" && outDoc.scope) {
        outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));
      } else if (bsontype === "DBRef" && outDoc.oid) {
        outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));
      }
      return outDoc.toExtendedJSON(options);
    } else {
      throw new BSONError("_bsontype must be a string, but was: " + typeof bsontype);
    }
  }
  var EJSON;
  (function(EJSON2) {
    function parse(text, options) {
      var finalOptions = Object.assign({}, { relaxed: true, legacy: false }, options);
      if (typeof finalOptions.relaxed === "boolean")
        finalOptions.strict = !finalOptions.relaxed;
      if (typeof finalOptions.strict === "boolean")
        finalOptions.relaxed = !finalOptions.strict;
      return JSON.parse(text, function(key, value) {
        if (key.indexOf("\0") !== -1) {
          throw new BSONError("BSON Document field names cannot contain null bytes, found: ".concat(JSON.stringify(key)));
        }
        return deserializeValue(value, finalOptions);
      });
    }
    EJSON2.parse = parse;
    function stringify(value, replacer, space, options) {
      if (space != null && typeof space === "object") {
        options = space;
        space = 0;
      }
      if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
        options = replacer;
        replacer = void 0;
        space = 0;
      }
      var serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {
        seenObjects: [{ propertyName: "(root)", obj: null }]
      });
      var doc = serializeValue(value, serializeOptions);
      return JSON.stringify(doc, replacer, space);
    }
    EJSON2.stringify = stringify;
    function serialize2(value, options) {
      options = options || {};
      return JSON.parse(stringify(value, options));
    }
    EJSON2.serialize = serialize2;
    function deserialize2(ejson, options) {
      options = options || {};
      return parse(JSON.stringify(ejson), options);
    }
    EJSON2.deserialize = deserialize2;
  })(EJSON || (EJSON = {}));
  var bsonMap;
  var bsonGlobal = getGlobal();
  if (bsonGlobal.Map) {
    bsonMap = bsonGlobal.Map;
  } else {
    bsonMap = /** @class */
    function() {
      function Map2(array) {
        if (array === void 0) {
          array = [];
        }
        this._keys = [];
        this._values = {};
        for (var i4 = 0; i4 < array.length; i4++) {
          if (array[i4] == null)
            continue;
          var entry = array[i4];
          var key = entry[0];
          var value = entry[1];
          this._keys.push(key);
          this._values[key] = { v: value, i: this._keys.length - 1 };
        }
      }
      Map2.prototype.clear = function() {
        this._keys = [];
        this._values = {};
      };
      Map2.prototype.delete = function(key) {
        var value = this._values[key];
        if (value == null)
          return false;
        delete this._values[key];
        this._keys.splice(value.i, 1);
        return true;
      };
      Map2.prototype.entries = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? [key, _this._values[key].v] : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Map2.prototype.forEach = function(callback, self2) {
        self2 = self2 || this;
        for (var i4 = 0; i4 < this._keys.length; i4++) {
          var key = this._keys[i4];
          callback.call(self2, this._values[key].v, key, self2);
        }
      };
      Map2.prototype.get = function(key) {
        return this._values[key] ? this._values[key].v : void 0;
      };
      Map2.prototype.has = function(key) {
        return this._values[key] != null;
      };
      Map2.prototype.keys = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? key : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Map2.prototype.set = function(key, value) {
        if (this._values[key]) {
          this._values[key].v = value;
          return this;
        }
        this._keys.push(key);
        this._values[key] = { v: value, i: this._keys.length - 1 };
        return this;
      };
      Map2.prototype.values = function() {
        var _this = this;
        var index = 0;
        return {
          next: function() {
            var key = _this._keys[index++];
            return {
              value: key !== void 0 ? _this._values[key].v : void 0,
              done: key !== void 0 ? false : true
            };
          }
        };
      };
      Object.defineProperty(Map2.prototype, "size", {
        get: function() {
          return this._keys.length;
        },
        enumerable: false,
        configurable: true
      });
      return Map2;
    }();
  }
  var JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);
  var JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);
  var SPACE_FOR_FLOAT64 = new Uint8Array(8);
  var DV_FOR_FLOAT64 = new DataView(SPACE_FOR_FLOAT64.buffer, SPACE_FOR_FLOAT64.byteOffset, SPACE_FOR_FLOAT64.byteLength);
  var MAXSIZE = 1024 * 1024 * 17;
  var buffer = buffer_1.alloc(MAXSIZE);

  // node_modules/realm-web/dist/bundle.dom.es.js
  var __spreadArray = function(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i4 = 0, l = from.length, ar; i4 < l; i4++) {
        if (ar || !(i4 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i4);
          ar[i4] = from[i4];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  };
  var BrowserInfo = (
    /** @class */
    function() {
      function BrowserInfo2(name2, version2, os) {
        this.name = name2;
        this.version = version2;
        this.os = os;
        this.type = "browser";
      }
      return BrowserInfo2;
    }()
  );
  var NodeInfo = (
    /** @class */
    function() {
      function NodeInfo2(version2) {
        this.version = version2;
        this.type = "node";
        this.name = "node";
        this.os = process.platform;
      }
      return NodeInfo2;
    }()
  );
  var SearchBotDeviceInfo = (
    /** @class */
    function() {
      function SearchBotDeviceInfo2(name2, version2, os, bot) {
        this.name = name2;
        this.version = version2;
        this.os = os;
        this.bot = bot;
        this.type = "bot-device";
      }
      return SearchBotDeviceInfo2;
    }()
  );
  var BotInfo = (
    /** @class */
    function() {
      function BotInfo2() {
        this.type = "bot";
        this.bot = true;
        this.name = "bot";
        this.version = null;
        this.os = null;
      }
      return BotInfo2;
    }()
  );
  var ReactNativeInfo = (
    /** @class */
    function() {
      function ReactNativeInfo2() {
        this.type = "react-native";
        this.name = "react-native";
        this.version = null;
        this.os = null;
      }
      return ReactNativeInfo2;
    }()
  );
  var SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
  var SEARCHBOT_OS_REGEX = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/;
  var REQUIRED_VERSION_PARTS = 3;
  var userAgentRules = [
    ["aol", /AOLShield\/([0-9\._]+)/],
    ["edge", /Edge\/([0-9\._]+)/],
    ["edge-ios", /EdgiOS\/([0-9\._]+)/],
    ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
    ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
    ["samsung", /SamsungBrowser\/([0-9\.]+)/],
    ["silk", /\bSilk\/([0-9._-]+)\b/],
    ["miui", /MiuiBrowser\/([0-9\.]+)$/],
    ["beaker", /BeakerBrowser\/([0-9\.]+)/],
    ["edge-chromium", /EdgA?\/([0-9\.]+)/],
    [
      "chromium-webview",
      /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
    ],
    ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
    ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
    ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
    ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
    ["fxios", /FxiOS\/([0-9\.]+)/],
    ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
    ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
    ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
    ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
    ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
    ["ie", /MSIE\s(7\.0)/],
    ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
    ["android", /Android\s([0-9\.]+)/],
    ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
    ["safari", /Version\/([0-9\._]+).*Safari/],
    ["facebook", /FB[AS]V\/([0-9\.]+)/],
    ["instagram", /Instagram\s([0-9\.]+)/],
    ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
    ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
    ["curl", /^curl\/([0-9\.]+)$/],
    ["searchbot", SEARCHBOX_UA_REGEX]
  ];
  var operatingSystemRules = [
    ["iOS", /iP(hone|od|ad)/],
    ["Android OS", /Android/],
    ["BlackBerry OS", /BlackBerry|BB10/],
    ["Windows Mobile", /IEMobile/],
    ["Amazon OS", /Kindle/],
    ["Windows 3.11", /Win16/],
    ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
    ["Windows 98", /(Windows 98)|(Win98)/],
    ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
    ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
    ["Windows Server 2003", /(Windows NT 5.2)/],
    ["Windows Vista", /(Windows NT 6.0)/],
    ["Windows 7", /(Windows NT 6.1)/],
    ["Windows 8", /(Windows NT 6.2)/],
    ["Windows 8.1", /(Windows NT 6.3)/],
    ["Windows 10", /(Windows NT 10.0)/],
    ["Windows ME", /Windows ME/],
    ["Open BSD", /OpenBSD/],
    ["Sun OS", /SunOS/],
    ["Chrome OS", /CrOS/],
    ["Linux", /(Linux)|(X11)/],
    ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
    ["QNX", /QNX/],
    ["BeOS", /BeOS/],
    ["OS/2", /OS\/2/]
  ];
  function detect(userAgent) {
    if (!!userAgent) {
      return parseUserAgent(userAgent);
    }
    if (typeof document === "undefined" && typeof navigator !== "undefined" && navigator.product === "ReactNative") {
      return new ReactNativeInfo();
    }
    if (typeof navigator !== "undefined") {
      return parseUserAgent(navigator.userAgent);
    }
    return getNodeVersion();
  }
  function matchUserAgent(ua) {
    return ua !== "" && userAgentRules.reduce(function(matched, _a) {
      var browser2 = _a[0], regex = _a[1];
      if (matched) {
        return matched;
      }
      var uaMatch = regex.exec(ua);
      return !!uaMatch && [browser2, uaMatch];
    }, false);
  }
  function parseUserAgent(ua) {
    var matchedRule = matchUserAgent(ua);
    if (!matchedRule) {
      return null;
    }
    var name2 = matchedRule[0], match = matchedRule[1];
    if (name2 === "searchbot") {
      return new BotInfo();
    }
    var versionParts = match[1] && match[1].split(".").join("_").split("_").slice(0, 3);
    if (versionParts) {
      if (versionParts.length < REQUIRED_VERSION_PARTS) {
        versionParts = __spreadArray(__spreadArray([], versionParts, true), createVersionParts(REQUIRED_VERSION_PARTS - versionParts.length), true);
      }
    } else {
      versionParts = [];
    }
    var version2 = versionParts.join(".");
    var os = detectOS(ua);
    var searchBotMatch = SEARCHBOT_OS_REGEX.exec(ua);
    if (searchBotMatch && searchBotMatch[1]) {
      return new SearchBotDeviceInfo(name2, version2, os, searchBotMatch[1]);
    }
    return new BrowserInfo(name2, version2, os);
  }
  function detectOS(ua) {
    for (var ii = 0, count = operatingSystemRules.length; ii < count; ii++) {
      var _a = operatingSystemRules[ii], os = _a[0], regex = _a[1];
      var match = regex.exec(ua);
      if (match) {
        return os;
      }
    }
    return null;
  }
  function getNodeVersion() {
    var isNode = typeof process !== "undefined" && process.version;
    return isNode ? new NodeInfo(process.version.slice(1)) : null;
  }
  function createVersionParts(count) {
    var output = [];
    for (var ii = 0; ii < count; ii++) {
      output.push("0");
    }
    return output;
  }
  var DefaultNetworkTransport = class {
    constructor() {
      if (!DefaultNetworkTransport.fetch) {
        throw new Error("DefaultNetworkTransport.fetch must be set before it's used");
      }
      if (!DefaultNetworkTransport.AbortController) {
        throw new Error("DefaultNetworkTransport.AbortController must be set before it's used");
      }
    }
    fetchWithCallbacks(request, handler) {
      this.fetch(request).then(async (response) => {
        const decodedBody = await response.text();
        const responseHeaders = {};
        response.headers.forEach((value, key) => {
          responseHeaders[key] = value;
        });
        return {
          statusCode: response.status,
          headers: responseHeaders,
          body: decodedBody
        };
      }).then((r) => handler.onSuccess(r)).catch((e) => handler.onError(e));
    }
    async fetch(request) {
      const { timeoutMs, url: url4, ...rest } = request;
      const { signal, cancelTimeout } = this.createTimeoutSignal(timeoutMs);
      try {
        return await DefaultNetworkTransport.fetch(url4, {
          ...DefaultNetworkTransport.extraFetchOptions,
          signal,
          ...rest
        });
      } finally {
        cancelTimeout();
      }
    }
    createTimeoutSignal(timeoutMs) {
      if (typeof timeoutMs === "number") {
        const controller = new DefaultNetworkTransport.AbortController();
        const timeout = setTimeout(() => {
          controller.abort();
        }, timeoutMs);
        return {
          signal: controller.signal,
          cancelTimeout: () => {
            clearTimeout(timeout);
          }
        };
      } else {
        return {
          signal: void 0,
          cancelTimeout: () => {
          }
        };
      }
    }
  };
  DefaultNetworkTransport.DEFAULT_HEADERS = {
    "Content-Type": "application/json"
  };
  var setIsDevelopmentMode = (state4) => {
  };
  var check = function(it) {
    return it && it.Math == Math && it;
  };
  var safeGlobalThis = (
    // eslint-disable-next-line no-restricted-globals
    check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore allow `self`
    check(typeof self == "object" && self) || // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore allow `global`
    check(typeof global == "object" && global) || // eslint-disable-next-line no-new-func -- fallback
    function() {
      return this;
    }() || Function("return this")()
  );
  setIsDevelopmentMode(typeof __DEV__ !== "undefined" && __DEV__);
  DefaultNetworkTransport.fetch = safeGlobalThis.fetch.bind(safeGlobalThis);
  DefaultNetworkTransport.AbortController = safeGlobalThis.AbortController.bind(safeGlobalThis);
  var version = "3.7.2";
  var VERSION = version;
  var _hasatob = typeof atob === "function";
  var _hasbtoa = typeof btoa === "function";
  var _hasBuffer = typeof Buffer === "function";
  var _TD = typeof TextDecoder === "function" ? new TextDecoder() : void 0;
  var _TE = typeof TextEncoder === "function" ? new TextEncoder() : void 0;
  var b64ch = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var b64chs = Array.prototype.slice.call(b64ch);
  var b64tab = ((a) => {
    let tab = {};
    a.forEach((c, i4) => tab[c] = i4);
    return tab;
  })(b64chs);
  var b64re = /^(?:[A-Za-z\d+\/]{4})*?(?:[A-Za-z\d+\/]{2}(?:==)?|[A-Za-z\d+\/]{3}=?)?$/;
  var _fromCC = String.fromCharCode.bind(String);
  var _U8Afrom = typeof Uint8Array.from === "function" ? Uint8Array.from.bind(Uint8Array) : (it, fn = (x3) => x3) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));
  var _mkUriSafe = (src) => src.replace(/=/g, "").replace(/[+\/]/g, (m0) => m0 == "+" ? "-" : "_");
  var _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\+\/]/g, "");
  var btoaPolyfill = (bin) => {
    let u32, c0, c1, c2, asc = "";
    const pad = bin.length % 3;
    for (let i4 = 0; i4 < bin.length; ) {
      if ((c0 = bin.charCodeAt(i4++)) > 255 || (c1 = bin.charCodeAt(i4++)) > 255 || (c2 = bin.charCodeAt(i4++)) > 255)
        throw new TypeError("invalid character found");
      u32 = c0 << 16 | c1 << 8 | c2;
      asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];
    }
    return pad ? asc.slice(0, pad - 3) + "===".substring(pad) : asc;
  };
  var _btoa = _hasbtoa ? (bin) => btoa(bin) : _hasBuffer ? (bin) => Buffer.from(bin, "binary").toString("base64") : btoaPolyfill;
  var _fromUint8Array = _hasBuffer ? (u8a) => Buffer.from(u8a).toString("base64") : (u8a) => {
    const maxargs = 4096;
    let strs = [];
    for (let i4 = 0, l = u8a.length; i4 < l; i4 += maxargs) {
      strs.push(_fromCC.apply(null, u8a.subarray(i4, i4 + maxargs)));
    }
    return _btoa(strs.join(""));
  };
  var fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);
  var cb_utob = (c) => {
    if (c.length < 2) {
      var cc = c.charCodeAt(0);
      return cc < 128 ? c : cc < 2048 ? _fromCC(192 | cc >>> 6) + _fromCC(128 | cc & 63) : _fromCC(224 | cc >>> 12 & 15) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
    } else {
      var cc = 65536 + (c.charCodeAt(0) - 55296) * 1024 + (c.charCodeAt(1) - 56320);
      return _fromCC(240 | cc >>> 18 & 7) + _fromCC(128 | cc >>> 12 & 63) + _fromCC(128 | cc >>> 6 & 63) + _fromCC(128 | cc & 63);
    }
  };
  var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;
  var utob = (u3) => u3.replace(re_utob, cb_utob);
  var _encode = _hasBuffer ? (s) => Buffer.from(s, "utf8").toString("base64") : _TE ? (s) => _fromUint8Array(_TE.encode(s)) : (s) => _btoa(utob(s));
  var encode = (src, urlsafe = false) => urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);
  var encodeURI = (src) => encode(src, true);
  var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;
  var cb_btou = (cccc) => {
    switch (cccc.length) {
      case 4:
        var cp = (7 & cccc.charCodeAt(0)) << 18 | (63 & cccc.charCodeAt(1)) << 12 | (63 & cccc.charCodeAt(2)) << 6 | 63 & cccc.charCodeAt(3), offset = cp - 65536;
        return _fromCC((offset >>> 10) + 55296) + _fromCC((offset & 1023) + 56320);
      case 3:
        return _fromCC((15 & cccc.charCodeAt(0)) << 12 | (63 & cccc.charCodeAt(1)) << 6 | 63 & cccc.charCodeAt(2));
      default:
        return _fromCC((31 & cccc.charCodeAt(0)) << 6 | 63 & cccc.charCodeAt(1));
    }
  };
  var btou = (b) => b.replace(re_btou, cb_btou);
  var atobPolyfill = (asc) => {
    asc = asc.replace(/\s+/g, "");
    if (!b64re.test(asc))
      throw new TypeError("malformed base64.");
    asc += "==".slice(2 - (asc.length & 3));
    let u24, bin = "", r1, r2;
    for (let i4 = 0; i4 < asc.length; ) {
      u24 = b64tab[asc.charAt(i4++)] << 18 | b64tab[asc.charAt(i4++)] << 12 | (r1 = b64tab[asc.charAt(i4++)]) << 6 | (r2 = b64tab[asc.charAt(i4++)]);
      bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);
    }
    return bin;
  };
  var _atob = _hasatob ? (asc) => atob(_tidyB64(asc)) : _hasBuffer ? (asc) => Buffer.from(asc, "base64").toString("binary") : atobPolyfill;
  var _toUint8Array = _hasBuffer ? (a) => _U8Afrom(Buffer.from(a, "base64")) : (a) => _U8Afrom(_atob(a), (c) => c.charCodeAt(0));
  var toUint8Array = (a) => _toUint8Array(_unURI(a));
  var _decode = _hasBuffer ? (a) => Buffer.from(a, "base64").toString("utf8") : _TD ? (a) => _TD.decode(_toUint8Array(a)) : (a) => btou(_atob(a));
  var _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == "-" ? "+" : "/"));
  var decode = (src) => _decode(_unURI(src));
  var isValid = (src) => {
    if (typeof src !== "string")
      return false;
    const s = src.replace(/\s+/g, "").replace(/={0,2}$/, "");
    return !/[^\s0-9a-zA-Z\+/]/.test(s) || !/[^\s0-9a-zA-Z\-_]/.test(s);
  };
  var _noEnum = (v2) => {
    return {
      value: v2,
      enumerable: false,
      writable: true,
      configurable: true
    };
  };
  var extendString = function() {
    const _add = (name2, body) => Object.defineProperty(String.prototype, name2, _noEnum(body));
    _add("fromBase64", function() {
      return decode(this);
    });
    _add("toBase64", function(urlsafe) {
      return encode(this, urlsafe);
    });
    _add("toBase64URI", function() {
      return encode(this, true);
    });
    _add("toBase64URL", function() {
      return encode(this, true);
    });
    _add("toUint8Array", function() {
      return toUint8Array(this);
    });
  };
  var extendUint8Array = function() {
    const _add = (name2, body) => Object.defineProperty(Uint8Array.prototype, name2, _noEnum(body));
    _add("toBase64", function(urlsafe) {
      return fromUint8Array(this, urlsafe);
    });
    _add("toBase64URI", function() {
      return fromUint8Array(this, true);
    });
    _add("toBase64URL", function() {
      return fromUint8Array(this, true);
    });
  };
  var extendBuiltins = () => {
    extendString();
    extendUint8Array();
  };
  var gBase64 = {
    version,
    VERSION,
    atob: _atob,
    atobPolyfill,
    btoa: _btoa,
    btoaPolyfill,
    fromBase64: decode,
    toBase64: encode,
    encode,
    encodeURI,
    encodeURL: encodeURI,
    utob,
    btou,
    decode,
    isValid,
    fromUint8Array,
    toUint8Array,
    extendString,
    extendUint8Array,
    extendBuiltins
  };
  var SERIALIZATION_OPTIONS = {
    relaxed: false
    // Ensure Canonical mode
  };
  function serialize(obj) {
    return EJSON.serialize(obj, SERIALIZATION_OPTIONS);
  }
  function deserialize(obj) {
    if (Array.isArray(obj)) {
      return obj.map((doc) => EJSON.deserialize(doc));
    } else {
      return EJSON.deserialize(obj);
    }
  }
  var UserType;
  (function(UserType2) {
    UserType2["Normal"] = "normal";
    UserType2["Server"] = "server";
  })(UserType || (UserType = {}));
  var DataKey;
  (function(DataKey2) {
    DataKey2["NAME"] = "name";
    DataKey2["EMAIL"] = "email";
    DataKey2["PICTURE"] = "picture";
    DataKey2["FIRST_NAME"] = "first_name";
    DataKey2["LAST_NAME"] = "last_name";
    DataKey2["GENDER"] = "gender";
    DataKey2["BIRTHDAY"] = "birthday";
    DataKey2["MIN_AGE"] = "min_age";
    DataKey2["MAX_AGE"] = "max_age";
  })(DataKey || (DataKey = {}));
  var DATA_MAPPING = {
    [DataKey.NAME]: "name",
    [DataKey.EMAIL]: "email",
    [DataKey.PICTURE]: "pictureUrl",
    [DataKey.FIRST_NAME]: "firstName",
    [DataKey.LAST_NAME]: "lastName",
    [DataKey.GENDER]: "gender",
    [DataKey.BIRTHDAY]: "birthday",
    [DataKey.MIN_AGE]: "minAge",
    [DataKey.MAX_AGE]: "maxAge"
  };
  var UserProfile = class {
    /**
     * @param response The response of a call fetching the users profile.
     */
    constructor(response) {
      this.type = UserType.Normal;
      this.identities = [];
      if (typeof response === "object" && response !== null) {
        const { type, identities, data } = response;
        if (typeof type === "string") {
          this.type = type;
        } else {
          throw new Error("Expected 'type' in the response body");
        }
        if (Array.isArray(identities)) {
          this.identities = identities.map((identity) => {
            const { id, provider_type: providerType } = identity;
            return { id, providerType };
          });
        } else {
          throw new Error("Expected 'identities' in the response body");
        }
        if (typeof data === "object" && data !== null) {
          const mappedData = Object.fromEntries(Object.entries(data).map(([key, value]) => {
            if (key in DATA_MAPPING) {
              return [DATA_MAPPING[key], value];
            } else {
              return [key, value];
            }
          }));
          this.data = deserialize(mappedData);
        } else {
          throw new Error("Expected 'data' in the response body");
        }
      } else {
        this.data = {};
      }
    }
  };
  var PrefixedStorage = class {
    /**
     * Construct a `Storage` which will prefix a key part to every operation.
     *
     * @param storage The underlying storage to use for operations.
     * @param keyPart The part of the key to prefix when performing operations.
     */
    constructor(storage, keyPart) {
      this.storage = storage;
      this.keyPart = keyPart;
    }
    /** @inheritdoc */
    get(key) {
      return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
    }
    /** @inheritdoc */
    set(key, value) {
      return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);
    }
    /** @inheritdoc */
    remove(key) {
      return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);
    }
    /** @inheritdoc */
    prefix(keyPart) {
      return new PrefixedStorage(this, keyPart);
    }
    /** @inheritdoc */
    clear(prefix = "") {
      return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);
    }
    /** @inheritdoc */
    addListener(listener) {
      return this.storage.addListener(listener);
    }
    /** @inheritdoc */
    removeListener(listener) {
      return this.storage.addListener(listener);
    }
  };
  PrefixedStorage.PART_SEPARATOR = ":";
  var MemoryStorage = class {
    constructor() {
      this.storage = {};
      this.listeners = /* @__PURE__ */ new Set();
    }
    /** @inheritdoc */
    get(key) {
      if (key in this.storage) {
        return this.storage[key];
      } else {
        return null;
      }
    }
    /** @inheritdoc */
    set(key, value) {
      this.storage[key] = value;
      this.fireListeners();
    }
    /** @inheritdoc */
    remove(key) {
      delete this.storage[key];
      this.fireListeners();
    }
    /** @inheritdoc */
    prefix(keyPart) {
      return new PrefixedStorage(this, keyPart);
    }
    /** @inheritdoc */
    clear(prefix) {
      for (const key of Object.keys(this.storage)) {
        if (!prefix || key.startsWith(prefix)) {
          delete this.storage[key];
        }
      }
      this.fireListeners();
    }
    /** @inheritdoc */
    addListener(listener) {
      this.listeners.add(listener);
    }
    /** @inheritdoc */
    removeListener(listener) {
      this.listeners.delete(listener);
    }
    /**
     * Tell the listeners that a change occurred.
     */
    fireListeners() {
      this.listeners.forEach((listener) => listener());
    }
  };
  var ACCESS_TOKEN_STORAGE_KEY = "accessToken";
  var REFRESH_TOKEN_STORAGE_KEY = "refreshToken";
  var PROFILE_STORAGE_KEY = "profile";
  var PROVIDER_TYPE_STORAGE_KEY = "providerType";
  var UserStorage = class extends PrefixedStorage {
    /**
     * Construct a storage for a `User`.
     *
     * @param storage The underlying storage to wrap.
     * @param userId The id of the user.
     */
    constructor(storage, userId) {
      super(storage, `user(${userId})`);
    }
    /**
     * Get the access token from storage.
     *
     * @returns Access token (null if unknown).
     */
    get accessToken() {
      return this.get(ACCESS_TOKEN_STORAGE_KEY);
    }
    /**
     * Set the access token in storage.
     *
     * @param value Access token (null if unknown).
     */
    set accessToken(value) {
      if (value === null) {
        this.remove(ACCESS_TOKEN_STORAGE_KEY);
      } else {
        this.set(ACCESS_TOKEN_STORAGE_KEY, value);
      }
    }
    /**
     * Get the refresh token from storage.
     *
     * @returns Refresh token (null if unknown and user is logged out).
     */
    get refreshToken() {
      return this.get(REFRESH_TOKEN_STORAGE_KEY);
    }
    /**
     * Set the refresh token in storage.
     *
     * @param value Refresh token (null if unknown and user is logged out).
     */
    set refreshToken(value) {
      if (value === null) {
        this.remove(REFRESH_TOKEN_STORAGE_KEY);
      } else {
        this.set(REFRESH_TOKEN_STORAGE_KEY, value);
      }
    }
    /**
     * Get the user profile from storage.
     *
     * @returns User profile (undefined if its unknown).
     */
    get profile() {
      const value = this.get(PROFILE_STORAGE_KEY);
      if (value) {
        const profile = new UserProfile();
        Object.assign(profile, JSON.parse(value));
        return profile;
      }
    }
    /**
     * Set the user profile in storage.
     *
     * @param value User profile (undefined if its unknown).
     */
    set profile(value) {
      if (value) {
        this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));
      } else {
        this.remove(PROFILE_STORAGE_KEY);
      }
    }
    /**
     * Get the type of authentication provider used to authenticate
     *
     * @returns User profile (undefined if its unknown).
     */
    get providerType() {
      const value = this.get(PROVIDER_TYPE_STORAGE_KEY);
      if (value) {
        return value;
      }
    }
    /**
     * Set the type of authentication provider used to authenticate
     *
     * @param value Type of authentication provider.
     */
    set providerType(value) {
      if (value) {
        this.set(PROVIDER_TYPE_STORAGE_KEY, value);
      } else {
        this.remove(PROVIDER_TYPE_STORAGE_KEY);
      }
    }
  };
  function removeKeysWithUndefinedValues(obj) {
    return Object.fromEntries(Object.entries(obj).filter((entry) => typeof entry[1] !== "undefined"));
  }
  function generateRandomString(length, alphabet) {
    let result = "";
    for (let i4 = 0; i4 < length; i4++) {
      result += alphabet[Math.floor(Math.random() * alphabet.length)];
    }
    return result;
  }
  function encodeQueryString(params2, prefixed = true) {
    const cleanedParams = removeKeysWithUndefinedValues(params2);
    const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? "?" : "";
    return prefix + Object.entries(cleanedParams).map(([k, v2]) => `${k}=${encodeURIComponent(v2)}`).join("&");
  }
  function decodeQueryString(str6) {
    const cleanStr = str6[0] === "?" ? str6.substr(1) : str6;
    return Object.fromEntries(cleanStr.split("&").filter((s) => s.length > 0).map((kvp) => kvp.split("=")).map(([k, v2]) => [k, decodeURIComponent(v2)]));
  }
  var RESERVED_NAMES = [
    "inspect",
    "callFunction",
    "callFunctionStreaming",
    // Methods defined on the Object.prototype might be "typeof probed" and called by libraries and runtime environments.
    ...Object.getOwnPropertyNames(Object.prototype)
  ];
  function cleanArgs(args) {
    for (const arg of args) {
      if (typeof arg === "object" && arg) {
        for (const [key, value] of Object.entries(arg)) {
          if (value === void 0) {
            delete arg[key];
          }
        }
      }
    }
    return args;
  }
  function cleanArgsAndSerialize(args) {
    const cleaned = cleanArgs(args);
    return cleaned.map((arg) => typeof arg === "object" ? serialize(arg) : arg);
  }
  var FunctionsFactory = class {
    /**
     * @param fetcher The underlying fetcher to use when sending requests.
     * @param config Additional configuration parameters.
     */
    constructor(fetcher, config = {}) {
      this.fetcher = fetcher;
      this.serviceName = config.serviceName;
      this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;
    }
    /**
     * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.
     *
     * @param fetcher The underlying fetcher to use when requesting.
     * @param config Additional configuration parameters.
     * @returns The newly created factory of functions.
     */
    static create(fetcher, config = {}) {
      const factory = new FunctionsFactory(fetcher, config);
      return new Proxy(factory, {
        get(target, p2, receiver) {
          if (typeof p2 === "string" && RESERVED_NAMES.indexOf(p2) === -1) {
            return target.callFunction.bind(target, p2);
          } else {
            const prop = Reflect.get(target, p2, receiver);
            return typeof prop === "function" ? prop.bind(target) : prop;
          }
        }
      });
    }
    /**
     * Call a remote function by it's name.
     *
     * @param name Name of the remote function.
     * @param args Arguments to pass to the remote function.
     * @returns A promise of the value returned when executing the remote function.
     */
    async callFunction(name2, ...args) {
      const body = {
        name: name2,
        arguments: this.argsTransformation ? this.argsTransformation(args) : args
      };
      if (this.serviceName) {
        body.service = this.serviceName;
      }
      const appRoute = this.fetcher.appRoute;
      return this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.functionsCall().path,
        body
      });
    }
    /**
     * Call a remote function by it's name.
     *
     * @param name Name of the remote function.
     * @param args Arguments to pass to the remote function.
     * @returns A promise of the value returned when executing the remote function.
     */
    callFunctionStreaming(name2, ...args) {
      const body = {
        name: name2,
        arguments: this.argsTransformation ? this.argsTransformation(args) : args
      };
      if (this.serviceName) {
        body.service = this.serviceName;
      }
      const appRoute = this.fetcher.appRoute;
      const qs = encodeQueryString({
        ["baas_request"]: gBase64.encode(JSON.stringify(body))
      });
      return this.fetcher.fetchStream({
        method: "GET",
        path: appRoute.functionsCall().path + qs
      });
    }
  };
  var EmailPasswordAuth = class {
    /**
     * Construct an interface to the email / password authentication provider.
     *
     * @param fetcher The underlying fetcher used to request the services.
     * @param providerName Optional custom name of the authentication provider.
     */
    constructor(fetcher, providerName = "local-userpass") {
      this.fetcher = fetcher;
      this.providerName = providerName;
    }
    /** @inheritdoc */
    async registerUser(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).register().path,
        body: details
      });
    }
    /** @inheritdoc */
    async confirmUser(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).confirm().path,
        body: details
      });
    }
    /** @inheritdoc */
    async resendConfirmationEmail(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,
        body: details
      });
    }
    /** @inheritdoc */
    async retryCustomConfirmation(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,
        body: details
      });
    }
    /** @inheritdoc */
    async resetPassword(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).reset().path,
        body: details
      });
    }
    /** @inheritdoc */
    async sendResetPasswordEmail(details) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,
        body: details
      });
    }
    /** @inheritdoc */
    async callResetPasswordFunction(details, ...args) {
      const appRoute = this.fetcher.appRoute;
      await this.fetcher.fetchJSON({
        method: "POST",
        path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,
        body: { ...details, arguments: args }
      });
    }
  };
  function api() {
    return {
      path: "/api/client/v2.0",
      /**
       * @param appId The id of the app.
       * @returns The URL of the app endpoint.
       */
      app(appId) {
        return {
          path: this.path + `/app/${appId}`,
          /**
           * @returns The URL of the app location endpoint.
           */
          location() {
            return {
              path: this.path + "/location"
            };
          },
          /**
           * @param providerName The name of the provider.
           * @returns The app url concatinated with the /auth/providers/{providerName}
           */
          authProvider(providerName) {
            return {
              path: this.path + `/auth/providers/${providerName}`,
              /**
               * @returns Get the URL of an authentication provider.
               */
              login() {
                return { path: this.path + "/login" };
              }
            };
          },
          /**
           * @param providerName The name of the provider.
           * @returns The app url concatinated with the /auth/providers/{providerName}
           */
          emailPasswordAuth(providerName) {
            const authProviderRoutes = this.authProvider(providerName);
            return {
              ...authProviderRoutes,
              register() {
                return { path: this.path + "/register" };
              },
              confirm() {
                return { path: this.path + "/confirm" };
              },
              confirmSend() {
                return { path: this.path + "/confirm/send" };
              },
              confirmCall() {
                return { path: this.path + "/confirm/call" };
              },
              reset() {
                return { path: this.path + "/reset" };
              },
              resetSend() {
                return { path: this.path + "/reset/send" };
              },
              resetCall() {
                return { path: this.path + "/reset/call" };
              }
            };
          },
          functionsCall() {
            return {
              path: this.path + "/functions/call"
            };
          }
        };
      },
      auth() {
        return {
          path: this.path + "/auth",
          apiKeys() {
            return {
              path: this.path + "/api_keys",
              key(id) {
                return {
                  path: this.path + `/${id}`,
                  enable() {
                    return { path: this.path + "/enable" };
                  },
                  disable() {
                    return { path: this.path + "/disable" };
                  }
                };
              }
            };
          },
          profile() {
            return { path: this.path + "/profile" };
          },
          session() {
            return { path: this.path + "/session" };
          },
          delete() {
            return { path: this.path + "/delete" };
          }
        };
      }
    };
  }
  var routes = { api };
  var ApiKeyAuth = class {
    /**
     * Construct an interface to the API-key authentication provider.
     *
     * @param fetcher The fetcher used to send requests to services.
     */
    constructor(fetcher) {
      this.fetcher = fetcher;
    }
    /** @inheritdoc */
    create(name2) {
      return this.fetcher.fetchJSON({
        method: "POST",
        body: { name: name2 },
        path: routes.api().auth().apiKeys().path,
        tokenType: "refresh"
      });
    }
    /** @inheritdoc */
    fetch(keyId) {
      return this.fetcher.fetchJSON({
        method: "GET",
        path: routes.api().auth().apiKeys().key(keyId).path,
        tokenType: "refresh"
      });
    }
    /** @inheritdoc */
    fetchAll() {
      return this.fetcher.fetchJSON({
        method: "GET",
        tokenType: "refresh",
        path: routes.api().auth().apiKeys().path
      });
    }
    /** @inheritdoc */
    async delete(keyId) {
      await this.fetcher.fetchJSON({
        method: "DELETE",
        path: routes.api().auth().apiKeys().key(keyId).path,
        tokenType: "refresh"
      });
    }
    /** @inheritdoc */
    async enable(keyId) {
      await this.fetcher.fetchJSON({
        method: "PUT",
        path: routes.api().auth().apiKeys().key(keyId).enable().path,
        tokenType: "refresh"
      });
    }
    /** @inheritdoc */
    async disable(keyId) {
      await this.fetcher.fetchJSON({
        method: "PUT",
        path: routes.api().auth().apiKeys().key(keyId).disable().path,
        tokenType: "refresh"
      });
    }
  };
  var environment = null;
  function setEnvironment(e) {
    environment = e;
  }
  function getEnvironment() {
    if (environment) {
      return environment;
    } else {
      throw new Error("Cannot get environment before it's set");
    }
  }
  var WatchError = class extends Error {
    constructor({ message, code: code2 }) {
      super(message);
      this.name = "WatchError";
      this.code = code2;
    }
  };
  var WatchStreamState;
  (function(WatchStreamState2) {
    WatchStreamState2["NEED_DATA"] = "NEED_DATA";
    WatchStreamState2["HAVE_EVENT"] = "HAVE_EVENT";
    WatchStreamState2["HAVE_ERROR"] = "HAVE_ERROR";
  })(WatchStreamState || (WatchStreamState = {}));
  var WatchStream = class {
    constructor() {
      this._state = WatchStreamState.NEED_DATA;
      this._error = null;
      this._textDecoder = new (getEnvironment()).TextDecoder();
      this._buffer = "";
      this._bufferOffset = 0;
      this._eventType = "";
      this._dataBuffer = "";
    }
    // Call these when you have data, in whatever shape is easiest for your SDK to get.
    // Pick one, mixing and matching on a single instance isn't supported.
    // These can only be called in NEED_DATA state, which is the initial state.
    feedBuffer(buffer2) {
      this.assertState(WatchStreamState.NEED_DATA);
      this._buffer += this._textDecoder.decode(buffer2, { stream: true });
      this.advanceBufferState();
    }
    feedLine(line) {
      this.assertState(WatchStreamState.NEED_DATA);
      if (line.endsWith("\n"))
        line = line.substr(0, line.length - 1);
      if (line.endsWith("\r"))
        line = line.substr(0, line.length - 1);
      if (line.length === 0) {
        if (this._dataBuffer.length === 0) {
          this._eventType = "";
          return;
        }
        if (this._dataBuffer.endsWith("\n"))
          this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);
        this.feedSse({
          data: this._dataBuffer,
          eventType: this._eventType
        });
        this._dataBuffer = "";
        this._eventType = "";
      }
      if (line[0] === ":")
        return;
      const colon = line.indexOf(":");
      const field = line.substr(0, colon);
      let value = colon === -1 ? "" : line.substr(colon + 1);
      if (value.startsWith(" "))
        value = value.substr(1);
      if (field === "event") {
        this._eventType = value;
      } else if (field === "data") {
        this._dataBuffer += value;
        this._dataBuffer += "\n";
      } else
        ;
    }
    feedSse(sse) {
      this.assertState(WatchStreamState.NEED_DATA);
      const firstPercentIndex = sse.data.indexOf("%");
      if (firstPercentIndex !== -1) {
        let buffer2 = "";
        let start = 0;
        for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf("%", start)) {
          buffer2 += sse.data.substr(start, percentIndex - start);
          const encoded = sse.data.substr(percentIndex, 3);
          if (encoded === "%25") {
            buffer2 += "%";
          } else if (encoded === "%0A") {
            buffer2 += "\n";
          } else if (encoded === "%0D") {
            buffer2 += "\r";
          } else {
            buffer2 += encoded;
          }
          start = percentIndex + encoded.length;
        }
        buffer2 += sse.data.substr(start);
        sse.data = buffer2;
      }
      if (!sse.eventType || sse.eventType === "message") {
        try {
          const parsed = EJSON.parse(sse.data);
          if (typeof parsed === "object") {
            this._nextEvent = parsed;
            this._state = WatchStreamState.HAVE_EVENT;
            return;
          }
        } catch {
        }
        this._state = WatchStreamState.HAVE_ERROR;
        this._error = new WatchError({
          message: "server returned malformed event: " + sse.data,
          code: "bad bson parse"
        });
      } else if (sse.eventType === "error") {
        this._state = WatchStreamState.HAVE_ERROR;
        this._error = new WatchError({
          message: sse.data,
          code: "unknown"
        });
        try {
          const { error_code: errorCode, error } = EJSON.parse(sse.data);
          if (typeof errorCode !== "string")
            return;
          if (typeof error !== "string")
            return;
          this._error = new WatchError({
            message: error,
            code: errorCode
          });
        } catch {
          return;
        }
      } else
        ;
    }
    get state() {
      return this._state;
    }
    // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,
    // so you need to call state() again to see what to do next.
    nextEvent() {
      this.assertState(WatchStreamState.HAVE_EVENT);
      const out = this._nextEvent;
      this._state = WatchStreamState.NEED_DATA;
      this.advanceBufferState();
      return out;
    }
    // Once this enters the error state, it stays that way. You should not feed any more data.
    get error() {
      return this._error;
    }
    ////////////////////////////////////////////
    advanceBufferState() {
      this.assertState(WatchStreamState.NEED_DATA);
      while (this.state === WatchStreamState.NEED_DATA) {
        if (this._bufferOffset === this._buffer.length) {
          this._buffer = "";
          this._bufferOffset = 0;
          return;
        }
        const nextNewlineIndex = this._buffer.indexOf("\n", this._bufferOffset);
        if (nextNewlineIndex === -1) {
          if (this._bufferOffset !== 0) {
            this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);
            this._bufferOffset = 0;
          }
          return;
        }
        this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));
        this._bufferOffset = nextNewlineIndex + 1;
      }
    }
    assertState(state4) {
      if (this._state !== state4) {
        throw Error(`Expected WatchStream to be in state ${state4}, but in state ${this._state}`);
      }
    }
  };
  var MongoDBCollection = class {
    /**
     * Construct a remote collection of documents.
     *
     * @param fetcher The fetcher to use when requesting the service.
     * @param serviceName The name of the remote service.
     * @param databaseName The name of the database.
     * @param collectionName The name of the remote collection.
     */
    constructor(fetcher, serviceName, databaseName, collectionName) {
      this.functions = FunctionsFactory.create(fetcher, {
        serviceName
      });
      this.databaseName = databaseName;
      this.collectionName = collectionName;
      this.serviceName = serviceName;
      this.fetcher = fetcher;
    }
    /** @inheritdoc */
    find(filter = {}, options = {}) {
      return this.functions.find({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter,
        project: options.projection,
        sort: options.sort,
        limit: options.limit
      });
    }
    /** @inheritdoc */
    findOne(filter = {}, options = {}) {
      return this.functions.findOne({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter,
        project: options.projection,
        sort: options.sort
      });
    }
    /** @inheritdoc */
    findOneAndUpdate(filter = {}, update, options = {}) {
      return this.functions.findOneAndUpdate({
        database: this.databaseName,
        collection: this.collectionName,
        filter,
        update,
        sort: options.sort,
        projection: options.projection,
        upsert: options.upsert,
        returnNewDocument: options.returnNewDocument
      });
    }
    /** @inheritdoc */
    findOneAndReplace(filter = {}, replacement, options = {}) {
      return this.functions.findOneAndReplace({
        database: this.databaseName,
        collection: this.collectionName,
        filter,
        update: replacement,
        sort: options.sort,
        projection: options.projection,
        upsert: options.upsert,
        returnNewDocument: options.returnNewDocument
      });
    }
    /** @inheritdoc */
    findOneAndDelete(filter = {}, options = {}) {
      return this.functions.findOneAndReplace({
        database: this.databaseName,
        collection: this.collectionName,
        filter,
        sort: options.sort,
        projection: options.projection
      });
    }
    /** @inheritdoc */
    aggregate(pipeline) {
      return this.functions.aggregate({
        database: this.databaseName,
        collection: this.collectionName,
        pipeline
      });
    }
    /** @inheritdoc */
    count(filter = {}, options = {}) {
      return this.functions.count({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter,
        limit: options.limit
      });
    }
    /** @inheritdoc */
    insertOne(document2) {
      return this.functions.insertOne({
        database: this.databaseName,
        collection: this.collectionName,
        document: document2
      });
    }
    /** @inheritdoc */
    insertMany(documents) {
      return this.functions.insertMany({
        database: this.databaseName,
        collection: this.collectionName,
        documents
      });
    }
    /** @inheritdoc */
    deleteOne(filter = {}) {
      return this.functions.deleteOne({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter
      });
    }
    /** @inheritdoc */
    deleteMany(filter = {}) {
      return this.functions.deleteMany({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter
      });
    }
    /** @inheritdoc */
    updateOne(filter, update, options = {}) {
      return this.functions.updateOne({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter,
        update,
        upsert: options.upsert,
        arrayFilters: options.arrayFilters
      });
    }
    /** @inheritdoc */
    updateMany(filter, update, options = {}) {
      return this.functions.updateMany({
        database: this.databaseName,
        collection: this.collectionName,
        query: filter,
        update,
        upsert: options.upsert,
        arrayFilters: options.arrayFilters
      });
    }
    watch({ ids, filter } = {}) {
      const iterable = this.functions.callFunctionStreaming("watch", {
        database: this.databaseName,
        collection: this.collectionName,
        ids,
        filter
      });
      const iterator = iterable.then((i4) => i4[Symbol.asyncIterator]());
      const stream = this.watchImpl(iterator);
      const originalReturn = stream.return;
      return Object.assign(stream, {
        return(value) {
          iterator.then((i4) => i4.return ? i4.return(value) : void 0);
          return originalReturn.call(stream, value);
        }
      });
    }
    /**
     * @param iterator An async iterator of the response body of a watch request.
     * @yields Change events.
     * Note: We had to split this from the `watch` method above to enable manually calling `return` on the response body iterator.
     */
    async *watchImpl(iterator) {
      const watchStream = new WatchStream();
      const iterable = iterator.then((i4) => ({ [Symbol.asyncIterator]: () => i4 }));
      for await (const chunk of await iterable) {
        if (!chunk)
          continue;
        watchStream.feedBuffer(chunk);
        while (watchStream.state == WatchStreamState.HAVE_EVENT) {
          yield watchStream.nextEvent();
        }
        if (watchStream.state == WatchStreamState.HAVE_ERROR)
          throw watchStream.error;
      }
    }
  };
  function createCollection(fetcher, serviceName, databaseName, collectionName) {
    return new MongoDBCollection(fetcher, serviceName, databaseName, collectionName);
  }
  function createDatabase(fetcher, serviceName, databaseName) {
    return {
      collection: createCollection.bind(null, fetcher, serviceName, databaseName)
    };
  }
  function createService(fetcher, serviceName = "mongo-db") {
    return { db: createDatabase.bind(null, fetcher, serviceName) };
  }
  var DEFAULT_DEVICE_ID = "000000000000000000000000";
  var UserState;
  (function(UserState2) {
    UserState2["Active"] = "active";
    UserState2["LoggedOut"] = "logged-out";
    UserState2["Removed"] = "removed";
  })(UserState || (UserState = {}));
  var UserType$1;
  (function(UserType2) {
    UserType2["Normal"] = "normal";
    UserType2["Server"] = "server";
  })(UserType$1 || (UserType$1 = {}));
  var User = class {
    /**
     * @param parameters Parameters of the user.
     */
    constructor(parameters) {
      this.app = parameters.app;
      this.id = parameters.id;
      this.storage = new UserStorage(this.app.storage, this.id);
      if ("accessToken" in parameters && "refreshToken" in parameters && "providerType" in parameters) {
        this._accessToken = parameters.accessToken;
        this._refreshToken = parameters.refreshToken;
        this.providerType = parameters.providerType;
        this.storage.accessToken = parameters.accessToken;
        this.storage.refreshToken = parameters.refreshToken;
        this.storage.providerType = parameters.providerType;
      } else {
        this._accessToken = this.storage.accessToken;
        this._refreshToken = this.storage.refreshToken;
        const providerType = this.storage.providerType;
        this._profile = this.storage.profile;
        if (providerType) {
          this.providerType = providerType;
        } else {
          throw new Error("Storage is missing a provider type");
        }
      }
      this.fetcher = this.app.fetcher.clone({
        userContext: { currentUser: this }
      });
      this.apiKeys = new ApiKeyAuth(this.fetcher);
      this.functions = FunctionsFactory.create(this.fetcher);
    }
    /**
     * @returns The access token used to authenticate the user towards Atlas App Services.
     */
    get accessToken() {
      return this._accessToken;
    }
    /**
     * @param token The new access token.
     */
    set accessToken(token) {
      this._accessToken = token;
      this.storage.accessToken = token;
    }
    /**
     * @returns The refresh token used to issue new access tokens.
     */
    get refreshToken() {
      return this._refreshToken;
    }
    /**
     * @param token The new refresh token.
     */
    set refreshToken(token) {
      this._refreshToken = token;
      this.storage.refreshToken = token;
    }
    /**
     * @returns The current state of the user.
     */
    get state() {
      if (this.id in this.app.allUsers) {
        return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;
      } else {
        return UserState.Removed;
      }
    }
    /**
     * @returns The logged in state of the user.
     */
    get isLoggedIn() {
      return this.state === UserState.Active;
    }
    get customData() {
      if (this.accessToken) {
        const decodedToken = this.decodeAccessToken();
        return decodedToken.userData;
      } else {
        throw new Error("Cannot read custom data without an access token");
      }
    }
    /**
     * @returns Profile containing detailed information about the user.
     */
    get profile() {
      if (this._profile) {
        return this._profile.data;
      } else {
        throw new Error("A profile was never fetched for this user");
      }
    }
    get identities() {
      if (this._profile) {
        return this._profile.identities;
      } else {
        throw new Error("A profile was never fetched for this user");
      }
    }
    get deviceId() {
      if (this.accessToken) {
        const payload = this.accessToken.split(".")[1];
        if (payload) {
          const parsedPayload = JSON.parse(gBase64.decode(payload));
          const deviceId = parsedPayload["baas_device_id"];
          if (typeof deviceId === "string" && deviceId !== DEFAULT_DEVICE_ID) {
            return deviceId;
          }
        }
      }
      return null;
    }
    /**
     * Refresh the users profile data.
     */
    async refreshProfile() {
      const response = await this.fetcher.fetchJSON({
        method: "GET",
        path: routes.api().auth().profile().path
      });
      this._profile = new UserProfile(response);
      this.storage.profile = this._profile;
    }
    /**
     * Log out the user, invalidating the session (and its refresh token).
     */
    async logOut() {
      try {
        if (this._refreshToken !== null) {
          await this.fetcher.fetchJSON({
            method: "DELETE",
            path: routes.api().auth().session().path,
            tokenType: "refresh"
          });
        }
      } catch (err) {
        if (!(err instanceof Error) || !err.message.includes("failed to find refresh token")) {
          throw err;
        }
      } finally {
        this.accessToken = null;
        this.refreshToken = null;
      }
    }
    /** @inheritdoc */
    async linkCredentials(credentials) {
      const response = await this.app.authenticator.authenticate(credentials, this);
      if (this.id !== response.userId) {
        const details = `got user id ${response.userId} expected ${this.id}`;
        throw new Error(`Link response ment for another user (${details})`);
      }
      this.accessToken = response.accessToken;
      await this.refreshProfile();
    }
    /**
     * Request a new access token, using the refresh token.
     */
    async refreshAccessToken() {
      const response = await this.fetcher.fetchJSON({
        method: "POST",
        path: routes.api().auth().session().path,
        tokenType: "refresh"
      });
      const { access_token: accessToken } = response;
      if (typeof accessToken === "string") {
        this.accessToken = accessToken;
      } else {
        throw new Error("Expected an 'access_token' in the response");
      }
    }
    /** @inheritdoc */
    async refreshCustomData() {
      await this.refreshAccessToken();
      return this.customData;
    }
    /**
     * @inheritdoc
     */
    addListener() {
      throw new Error("Not yet implemented");
    }
    /**
     * @inheritdoc
     */
    removeListener() {
      throw new Error("Not yet implemented");
    }
    /**
     * @inheritdoc
     */
    removeAllListeners() {
      throw new Error("Not yet implemented");
    }
    /** @inheritdoc */
    callFunction(name2, ...args) {
      return this.functions.callFunction(name2, ...args);
    }
    /**
     * @returns A plain ol' JavaScript object representation of the user.
     */
    toJSON() {
      return {
        id: this.id,
        accessToken: this.accessToken,
        refreshToken: this.refreshToken,
        profile: this._profile,
        state: this.state,
        customData: this.customData
      };
    }
    /** @inheritdoc */
    push() {
      throw new Error("Not yet implemented");
    }
    /** @inheritdoc */
    mongoClient(serviceName) {
      return createService(this.fetcher, serviceName);
    }
    decodeAccessToken() {
      if (this.accessToken) {
        const parts = this.accessToken.split(".");
        if (parts.length !== 3) {
          throw new Error("Expected an access token with three parts");
        }
        const encodedPayload = parts[1];
        const decodedPayload = gBase64.decode(encodedPayload);
        const parsedPayload = JSON.parse(decodedPayload);
        const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {} } = parsedPayload;
        if (typeof expires !== "number") {
          throw new Error("Failed to decode access token 'exp'");
        } else if (typeof issuedAt !== "number") {
          throw new Error("Failed to decode access token 'iat'");
        }
        return { expires, issuedAt, subject, userData };
      } else {
        throw new Error("Missing an access token");
      }
    }
  };
  var Credentials = class {
    /**
     * Constructs an instance of credentials.
     *
     * @param providerName The name of the authentication provider used when authenticating.
     * @param providerType The type of the authentication provider used when authenticating.
     * @param payload The data being sent to the service when authenticating.
     */
    constructor(providerName, providerType, payload) {
      this.providerName = providerName;
      this.providerType = providerType;
      this.payload = payload;
    }
    /**
     * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).
     *
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static anonymous() {
      return new Credentials("anon-user", "anon-user", {});
    }
    /**
     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).
     *
     * @param key The secret content of the API key.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static apiKey(key) {
      return new Credentials("api-key", "api-key", { key });
    }
    /**
     * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).
     * Note: This was formerly known as the "Username/Password" provider.
     *
     * @param email The end-users email address.
     * @param password The end-users password.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static emailPassword(email, password) {
      return new Credentials("local-userpass", "local-userpass", {
        username: email,
        password
      });
    }
    /**
     * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).
     *
     * @param payload The custom payload as expected by the server.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static function(payload) {
      return new Credentials("custom-function", "custom-function", payload);
    }
    /**
     * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).
     *
     * @param token The JSON Web Token (JWT).
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static jwt(token) {
      return new Credentials("custom-token", "custom-token", {
        token
      });
    }
    /**
     * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).
     *
     * @param payload The URL that users should be redirected to, the auth code or id token from Google.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static google(payload) {
      return new Credentials("oauth2-google", "oauth2-google", Credentials.derivePayload(payload));
    }
    /**
     * @param payload The payload string.
     * @returns A payload object based on the string.
     */
    static derivePayload(payload) {
      if (typeof payload === "string") {
        throw new Error("`google(<tokenString>)` has been deprecated.  Please use `google(<authCodeObject>).");
      } else if (Object.keys(payload).length === 1) {
        if ("authCode" in payload || "redirectUrl" in payload) {
          return payload;
        } else if ("idToken" in payload) {
          return { id_token: payload.idToken };
        } else {
          throw new Error("Unexpected payload: " + JSON.stringify(payload));
        }
      } else {
        throw new Error("Expected only one property in payload, got " + JSON.stringify(payload));
      }
    }
    /**
     * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).
     *
     * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static facebook(redirectUrlOrAccessToken) {
      return new Credentials("oauth2-facebook", "oauth2-facebook", redirectUrlOrAccessToken.includes("://") ? { redirectUrl: redirectUrlOrAccessToken } : { accessToken: redirectUrlOrAccessToken });
    }
    /**
     * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).
     *
     * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.
     * @returns The credentials instance, which can be passed to `app.logIn`.
     */
    static apple(redirectUrlOrIdToken) {
      return new Credentials("oauth2-apple", "oauth2-apple", redirectUrlOrIdToken.includes("://") ? { redirectUrl: redirectUrlOrIdToken } : { id_token: redirectUrlOrIdToken });
    }
  };
  var USER_IDS_STORAGE_KEY = "userIds";
  var DEVICE_ID_STORAGE_KEY = "deviceId";
  var AppStorage = class extends PrefixedStorage {
    /**
     * @param storage The underlying storage to wrap.
     * @param appId The id of the app.
     */
    constructor(storage, appId) {
      super(storage, `app(${appId})`);
    }
    /**
     * Reads out the list of user ids from storage.
     *
     * @returns A list of user ids.
     */
    getUserIds() {
      const userIdsString = this.get(USER_IDS_STORAGE_KEY);
      const userIds = userIdsString ? JSON.parse(userIdsString) : [];
      if (Array.isArray(userIds)) {
        return [...new Set(userIds)];
      } else {
        throw new Error("Expected the user ids to be an array");
      }
    }
    /**
     * Sets the list of ids in storage.
     * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.
     *
     * @param userIds The list of ids to store.
     * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.
     */
    setUserIds(userIds, mergeWithExisting) {
      if (mergeWithExisting) {
        const existingIds = this.getUserIds();
        for (const id of existingIds) {
          if (userIds.indexOf(id) === -1) {
            userIds.push(id);
          }
        }
      }
      this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));
    }
    /**
     * Remove an id from the list of ids.
     *
     * @param userId The id of a User to be removed.
     */
    removeUserId(userId) {
      const existingIds = this.getUserIds();
      const userIds = existingIds.filter((id) => id !== userId);
      this.setUserIds(userIds, false);
    }
    /**
     * @returns id of this device (if any exists)
     */
    getDeviceId() {
      return this.get(DEVICE_ID_STORAGE_KEY);
    }
    /**
     * @param deviceId The id of this device, to send on subsequent authentication requests.
     */
    setDeviceId(deviceId) {
      this.set(DEVICE_ID_STORAGE_KEY, deviceId);
    }
  };
  var LOWERCASE_LETTERS = "abcdefghijklmnopqrstuvwxyz";
  var CLOSE_CHECK_INTERVAL = 100;
  var REDIRECT_HASH_TO_RESULT = {
    _stitch_client_app_id: "appId",
    _baas_client_app_id: "appId",
    _stitch_ua: "userAuth",
    _baas_ua: "userAuth",
    _stitch_link: "link",
    _baas_link: "link",
    _stitch_error: "error",
    _baas_error: "error",
    _stitch_state: "state",
    _baas_state: "state"
  };
  var OAuth2Helper = class {
    /**
     * @param storage The underlying storage to use when storing and retriving secrets.
     * @param openWindow An optional function called when a browser window needs to open.
     */
    constructor(storage, openWindow2 = getEnvironment().openWindow) {
      this.storage = storage.prefix("oauth2");
      this.openWindow = openWindow2;
    }
    /**
     * Parses the query string from the final step of the OAuth flow.
     *
     * @param queryString The query string passed through in location.hash.
     * @returns The result of the OAuth flow.
     */
    static parseRedirectLocation(queryString) {
      const params2 = decodeQueryString(queryString);
      const result = {};
      for (const [p2, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {
        const value = params2[p2];
        if (value) {
          result[r] = value;
        }
      }
      return result;
    }
    /**
     * Handle the redirect querystring by parsing it and storing it for others to consume.
     *
     * @param queryString The query string containing the encoded result from the OAuth provider.
     * @param storage The underlying storage used to persist the result.
     */
    static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {
      const result = OAuth2Helper.parseRedirectLocation(queryString);
      const { state: state4, error } = result;
      if (typeof state4 === "string") {
        const oauth2Storage = storage.prefix("oauth2");
        const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state4);
        stateStorage.set("result", JSON.stringify(result));
      } else if (error) {
        throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);
      } else {
        throw new Error("Failed to handle OAuth 2.0 redirect.");
      }
    }
    /**
     * Decodes the authInfo string into its seperate parts.
     *
     * @param authInfo An authInfo string returned from the server.
     * @returns An object containing the separate parts of the authInfo string.
     */
    static decodeAuthInfo(authInfo) {
      const parts = (authInfo || "").split("$");
      if (parts.length === 4) {
        const [accessToken, refreshToken2, userId, deviceId] = parts;
        return { accessToken, refreshToken: refreshToken2, userId, deviceId };
      } else {
        throw new Error("Failed to decode 'authInfo' into ids and tokens");
      }
    }
    /**
     * Get the storage key associated of an secret associated with a state.
     *
     * @param storage The root storage used to derive a "state namespaced" storage.
     * @param state The random state.
     * @returns The storage associated with a particular state.
     */
    static getStateStorage(storage, state4) {
      return storage.prefix(`state(${state4})`);
    }
    /**
     * Open a window and wait for the redirect to be handled.
     *
     * @param url The URL to open.
     * @param state The state which will be used to listen for storage updates.
     * @returns The result passed through the redirect.
     */
    openWindowAndWaitForRedirect(url4, state4) {
      const stateStorage = OAuth2Helper.getStateStorage(this.storage, state4);
      return new Promise((resolve, reject) => {
        let redirectWindow = null;
        let windowClosedInterval;
        const handleStorageUpdate = () => {
          const result = stateStorage.get("result");
          if (result) {
            const parsedResult = JSON.parse(result);
            stateStorage.removeListener(handleStorageUpdate);
            stateStorage.clear();
            try {
              if (redirectWindow) {
                clearInterval(windowClosedInterval);
                redirectWindow.close();
              }
            } catch (err) {
              console.warn(`Failed closing redirect window: ${err}`);
            } finally {
              resolve(parsedResult);
            }
          }
        };
        stateStorage.addListener(handleStorageUpdate);
        redirectWindow = this.openWindow(url4);
        windowClosedInterval = setInterval(() => {
          if (!redirectWindow) {
            clearInterval(windowClosedInterval);
          } else if (redirectWindow.closed) {
            clearInterval(windowClosedInterval);
            stateStorage.removeListener(handleStorageUpdate);
            const err = new Error("Window closed");
            reject(err);
          }
        }, CLOSE_CHECK_INTERVAL);
      });
    }
    /**
     * Generate a random state string.
     *
     * @returns The random state string.
     */
    generateState() {
      return generateRandomString(12, LOWERCASE_LETTERS);
    }
  };
  var REDIRECT_LOCATION_HEADER = "x-baas-location";
  var Authenticator = class {
    /**
     * @param fetcher The fetcher used to fetch responses from the server.
     * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).
     * @param getDeviceInformation Called to get device information to be sent to the server.
     */
    constructor(fetcher, storage, getDeviceInformation) {
      this.fetcher = fetcher;
      this.oauth2 = new OAuth2Helper(storage);
      this.getDeviceInformation = getDeviceInformation;
    }
    /**
     * @param credentials Credentials to use when logging in.
     * @param linkingUser A user requesting to link.
     * @returns A promise resolving to the response from the server.
     */
    async authenticate(credentials, linkingUser) {
      const deviceInformation = this.getDeviceInformation();
      const isLinking = typeof linkingUser === "object";
      if (credentials.providerType.startsWith("oauth2") && typeof credentials.payload.redirectUrl === "string") {
        const state4 = this.oauth2.generateState();
        const url4 = await this.getLogInUrl(credentials, isLinking, {
          state: state4,
          redirect: credentials.payload.redirectUrl,
          // Ensure redirects are communicated in a header different from "Location" and status remains 200 OK
          providerRedirectHeader: isLinking ? true : void 0,
          // Add the device information, only if we're not linking - since that request won't have a body of its own.
          device: !isLinking ? deviceInformation.encode() : void 0
        });
        if (isLinking) {
          const response = await this.fetcher.fetch({
            method: "GET",
            url: url4,
            tokenType: isLinking ? "access" : "none",
            user: linkingUser,
            // The response will set a cookie that we need to tell the browser to store
            mode: "cors",
            credentials: "include"
          });
          const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);
          if (redirectUrl) {
            return this.openWindowAndWaitForAuthResponse(redirectUrl, state4);
          } else {
            throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);
          }
        } else {
          return this.openWindowAndWaitForAuthResponse(url4, state4);
        }
      } else {
        const logInUrl = await this.getLogInUrl(credentials, isLinking);
        const response = await this.fetcher.fetchJSON({
          method: "POST",
          url: logInUrl,
          body: {
            ...credentials.payload,
            options: {
              device: deviceInformation.toJSON()
            }
          },
          tokenType: isLinking ? "access" : "none",
          user: linkingUser
        });
        const { user_id: userId, access_token: accessToken, refresh_token: refreshToken2 = null, device_id: deviceId } = response;
        if (typeof userId !== "string") {
          throw new Error("Expected a user id in the response");
        }
        if (typeof accessToken !== "string") {
          throw new Error("Expected an access token in the response");
        }
        if (typeof refreshToken2 !== "string" && refreshToken2 !== null) {
          throw new Error("Expected refresh token to be a string or null");
        }
        if (typeof deviceId !== "string") {
          throw new Error("Expected device id to be a string");
        }
        return { userId, accessToken, refreshToken: refreshToken2, deviceId };
      }
    }
    /**
     * @param credentials Credentials to use when logging in.
     * @param link Should the request link with the current user?
     * @param extraQueryParams Any extra parameters to include in the query string
     * @returns A promise resolving to the url to be used when logging in.
     */
    async getLogInUrl(credentials, link = false, extraQueryParams = {}) {
      const appRoute = this.fetcher.appRoute;
      const loginRoute = appRoute.authProvider(credentials.providerName).login();
      const qs = encodeQueryString({
        link: link ? "true" : void 0,
        ...extraQueryParams
      });
      const locationUrl = await this.fetcher.locationUrl;
      return locationUrl + loginRoute.path + qs;
    }
    async openWindowAndWaitForAuthResponse(redirectUrl, state4) {
      const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state4);
      return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth);
    }
  };
  var MongoDBRealmError = class extends Error {
    constructor(method, url4, statusCode, statusText, error, errorCode, link) {
      const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;
      if (typeof error === "string") {
        super(`Request failed (${method} ${url4}): ${error} (${summary})`);
      } else {
        super(`Request failed (${method} ${url4}): (${summary})`);
      }
      this.method = method;
      this.url = url4;
      this.statusText = statusText;
      this.statusCode = statusCode;
      this.error = error;
      this.errorCode = errorCode;
      this.link = link;
    }
    /**
     * Constructs and returns an error from a request and a response.
     * Note: The caller must throw this error themselves.
     *
     * @param request The request sent to the server.
     * @param response A raw response, as returned from the server.
     * @returns An error from a request and a response.
     */
    static async fromRequestAndResponse(request, response) {
      var _a;
      const { url: url4, method } = request;
      const { status, statusText } = response;
      if ((_a = response.headers.get("content-type")) === null || _a === void 0 ? void 0 : _a.startsWith("application/json")) {
        const body = await response.json();
        if (typeof body === "object" && body) {
          const { error, error_code: errorCode, link } = body;
          return new MongoDBRealmError(method, url4, status, statusText, typeof error === "string" ? error : void 0, typeof errorCode === "string" ? errorCode : void 0, typeof link === "string" ? link : void 0);
        }
      }
      return new MongoDBRealmError(method, url4, status, statusText);
    }
  };
  function asyncIteratorFromResponseBody(body) {
    if (typeof body !== "object" || body === null) {
      throw new Error("Expected a non-null object");
    } else if (Symbol.asyncIterator in body) {
      return body;
    } else if ("getReader" in body) {
      const stream = body;
      return {
        [Symbol.asyncIterator]() {
          const reader = stream.getReader();
          return {
            next() {
              return reader.read();
            },
            async return() {
              await reader.cancel();
              return { done: true, value: null };
            }
          };
        }
      };
    } else {
      throw new Error("Expected an AsyncIterable or a ReadableStream");
    }
  }
  var Fetcher = class {
    /**
     * @param config A configuration of the fetcher.
     * @param config.appId The application id.
     * @param config.transport The transport used when fetching.
     * @param config.userContext An object used to determine the requesting user.
     * @param config.locationUrlContext An object used to determine the location / base URL.
     */
    constructor({ appId, transport, userContext, locationUrlContext }) {
      this.appId = appId;
      this.transport = transport;
      this.userContext = userContext;
      this.locationUrlContext = locationUrlContext;
    }
    /**
     * @param user An optional user to generate the header for.
     * @param tokenType The type of token (access or refresh).
     * @returns An object containing the user's token as "Authorization" header or undefined if no user is given.
     */
    static buildAuthorizationHeader(user, tokenType) {
      if (!user || tokenType === "none") {
        return {};
      } else if (tokenType === "access") {
        return { Authorization: `Bearer ${user.accessToken}` };
      } else if (tokenType === "refresh") {
        return { Authorization: `Bearer ${user.refreshToken}` };
      } else {
        throw new Error(`Unexpected token type (${tokenType})`);
      }
    }
    /**
     * @param body The body string or object passed from a request.
     * @returns An object optionally specifying the "Content-Type" header.
     */
    static buildBody(body) {
      if (!body) {
        return;
      } else if (typeof body === "object" && body !== null) {
        return JSON.stringify(serialize(body));
      } else if (typeof body === "string") {
        return body;
      } else {
        console.log("body is", body);
        throw new Error("Unexpected type of body");
      }
    }
    /**
     * @param body The body string or object passed from a request.
     * @returns An object optionally specifying the "Content-Type" header.
     */
    static buildJsonHeader(body) {
      if (body && body.length > 0) {
        return { "Content-Type": "application/json" };
      } else {
        return {};
      }
    }
    clone(config) {
      return new Fetcher({
        appId: this.appId,
        transport: this.transport,
        userContext: this.userContext,
        locationUrlContext: this.locationUrlContext,
        ...config
      });
    }
    /**
     * Fetch a network resource as an authenticated user.
     *
     * @param request The request which should be sent to the server.
     * @returns The response from the server.
     */
    async fetch(request) {
      const { path, url: url4, tokenType = "access", user = this.userContext.currentUser, ...restOfRequest } = request;
      if (typeof path === "string" && typeof url4 === "string") {
        throw new Error("Use of 'url' and 'path' mutually exclusive");
      } else if (typeof path === "string") {
        const url5 = await this.locationUrlContext.locationUrl + path;
        return this.fetch({ ...request, path: void 0, url: url5 });
      } else if (typeof url4 === "string") {
        const response = await this.transport.fetch({
          ...restOfRequest,
          url: url4,
          headers: {
            ...Fetcher.buildAuthorizationHeader(user, tokenType),
            ...request.headers
          }
        });
        if (response.ok) {
          return response;
        } else if (user && response.status === 401 && tokenType === "access") {
          await user.refreshAccessToken();
          return this.fetch({ ...request, user });
        } else {
          if (user && response.status === 401 && tokenType === "refresh") {
            user.accessToken = null;
            user.refreshToken = null;
          }
          throw await MongoDBRealmError.fromRequestAndResponse(request, response);
        }
      } else {
        throw new Error("Expected either 'url' or 'path'");
      }
    }
    /**
     * Fetch a network resource as an authenticated user and parse the result as extended JSON.
     *
     * @param request The request which should be sent to the server.
     * @returns The response from the server, parsed as extended JSON.
     */
    async fetchJSON(request) {
      const { body } = request;
      const serializedBody = Fetcher.buildBody(body);
      const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);
      const response = await this.fetch({
        ...request,
        body: serializedBody,
        headers: {
          Accept: "application/json",
          ...contentTypeHeaders,
          ...request.headers
        }
      });
      const contentType = response.headers.get("content-type");
      if (contentType === null || contentType === void 0 ? void 0 : contentType.startsWith("application/json")) {
        const responseBody = await response.json();
        return deserialize(responseBody);
      } else if (contentType === null) {
        return null;
      } else {
        throw new Error(`Expected JSON response, got "${contentType}"`);
      }
    }
    /**
     * Fetch an "event-stream" resource as an authenticated user.
     *
     * @param request The request which should be sent to the server.
     * @returns An async iterator over the response body.
     */
    async fetchStream(request) {
      const { body } = await this.fetch({
        ...request,
        headers: {
          Accept: "text/event-stream",
          ...request.headers
        }
      });
      return asyncIteratorFromResponseBody(body);
    }
    /**
     * @returns The path of the app route.
     */
    get appRoute() {
      return routes.api().app(this.appId);
    }
    /**
     * @returns A promise of the location URL of the app.
     */
    get locationUrl() {
      return this.locationUrlContext.locationUrl;
    }
  };
  var DEVICE_ID_STORAGE_KEY$1 = "deviceId";
  var DeviceFields;
  (function(DeviceFields2) {
    DeviceFields2["DEVICE_ID"] = "deviceId";
    DeviceFields2["APP_ID"] = "appId";
    DeviceFields2["APP_VERSION"] = "appVersion";
    DeviceFields2["PLATFORM"] = "platform";
    DeviceFields2["PLATFORM_VERSION"] = "platformVersion";
    DeviceFields2["SDK_VERSION"] = "sdkVersion";
  })(DeviceFields || (DeviceFields = {}));
  var DeviceInformation = class {
    /**
     * @param params Construct the device information from these parameters.
     * @param params.appId A user-defined application id.
     * @param params.appVersion A user-defined application version.
     * @param params.deviceId An unique id for the end-users device.
     */
    constructor({ appId, appVersion, deviceId }) {
      this.sdkVersion = "2.0.0";
      const environment2 = getEnvironment();
      this.platform = environment2.platform;
      this.platformVersion = environment2.platformVersion;
      this.appId = appId;
      this.appVersion = appVersion;
      this.deviceId = deviceId;
    }
    /**
     * @returns An base64 URI encoded representation of the device information.
     */
    encode() {
      const obj = removeKeysWithUndefinedValues(this);
      return gBase64.encode(JSON.stringify(obj));
    }
    /**
     * @returns The defaults
     */
    toJSON() {
      return removeKeysWithUndefinedValues(this);
    }
  };
  var DEFAULT_BASE_URL = "https://realm.mongodb.com";
  var App = class {
    /**
     * Construct a Realm App, either from the Realm App id visible from the Atlas App Services UI or a configuration.
     *
     * @param idOrConfiguration The Realm App id or a configuration to use for this app.
     */
    constructor(idOrConfiguration) {
      this.users = [];
      this._locationUrl = null;
      const configuration = typeof idOrConfiguration === "string" ? { id: idOrConfiguration } : idOrConfiguration;
      if (typeof configuration === "object" && typeof configuration.id === "string") {
        this.id = configuration.id;
      } else {
        throw new Error("Missing an Atlas App Services app-id");
      }
      this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;
      if (configuration.skipLocationRequest) {
        this._locationUrl = Promise.resolve(this.baseUrl);
      }
      this.localApp = configuration.app;
      const { storage, transport = new DefaultNetworkTransport() } = configuration;
      this.fetcher = new Fetcher({
        appId: this.id,
        userContext: this,
        locationUrlContext: this,
        transport
      });
      this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);
      const baseStorage = storage || getEnvironment().defaultStorage;
      this.storage = new AppStorage(baseStorage, this.id);
      this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);
      try {
        this.hydrate();
      } catch (err) {
        this.storage.clear();
        console.warn("Realm app hydration failed:", err instanceof Error ? err.message : err);
      }
    }
    /**
     * Get or create a singleton Realm App from an id.
     * Calling this function multiple times with the same id will return the same instance.
     *
     * @param id The Realm App id visible from the Atlas App Services UI or a configuration.
     * @returns The Realm App instance.
     */
    static getApp(id) {
      if (id in App.appCache) {
        return App.appCache[id];
      } else {
        const instance = new App(id);
        App.appCache[id] = instance;
        return instance;
      }
    }
    /**
     * Switch user.
     *
     * @param nextUser The user or id of the user to switch to.
     */
    switchUser(nextUser) {
      const index = this.users.findIndex((u3) => u3 === nextUser);
      if (index === -1) {
        throw new Error("The user was never logged into this app");
      }
      const [user] = this.users.splice(index, 1);
      this.users.unshift(user);
    }
    /**
     * Log in a user.
     *
     * @param credentials Credentials to use when logging in.
     * @param fetchProfile Should the users profile be fetched? (default: true)
     * @returns A promise resolving to the newly logged in user.
     */
    async logIn(credentials, fetchProfile = true) {
      const response = await this.authenticator.authenticate(credentials);
      const user = this.createOrUpdateUser(response, credentials.providerType);
      this.switchUser(user);
      if (fetchProfile) {
        await user.refreshProfile();
      }
      this.storage.setUserIds(this.users.map((u3) => u3.id), true);
      const deviceId = response.deviceId;
      if (deviceId && deviceId !== "000000000000000000000000") {
        this.storage.set(DEVICE_ID_STORAGE_KEY$1, deviceId);
      }
      return user;
    }
    /**
     * @inheritdoc
     */
    async removeUser(user) {
      const index = this.users.findIndex((u3) => u3 === user);
      if (index === -1) {
        throw new Error("The user was never logged into this app");
      }
      this.users.splice(index, 1);
      await user.logOut();
      this.storage.remove(`user(${user.id}):profile`);
      this.storage.removeUserId(user.id);
    }
    /**
     * @inheritdoc
     */
    async deleteUser(user) {
      await this.fetcher.fetchJSON({
        method: "DELETE",
        path: routes.api().auth().delete().path
      });
      await this.removeUser(user);
    }
    /**
     * @inheritdoc
     */
    addListener() {
      throw new Error("Not yet implemented");
    }
    /**
     * @inheritdoc
     */
    removeListener() {
      throw new Error("Not yet implemented");
    }
    /**
     * @inheritdoc
     */
    removeAllListeners() {
      throw new Error("Not yet implemented");
    }
    /**
     * The currently active user (or null if no active users exists).
     *
     * @returns the currently active user or null.
     */
    get currentUser() {
      const activeUsers = this.users.filter((user) => user.state === UserState.Active);
      if (activeUsers.length === 0) {
        return null;
      } else {
        return activeUsers[0];
      }
    }
    /**
     * All active and logged-out users:
     *  - First in the list are active users (ordered by most recent call to switchUser or login)
     *  - Followed by logged out users (also ordered by most recent call to switchUser or login).
     *
     * @returns An array of users active or logged out users (current user being the first).
     */
    get allUsers() {
      return Object.fromEntries(this.users.map((user) => [user.id, user]));
    }
    /**
     * @returns A promise of the app URL, with the app location resolved.
     */
    get locationUrl() {
      if (!this._locationUrl) {
        const path = routes.api().app(this.id).location().path;
        this._locationUrl = this.fetcher.fetchJSON({
          method: "GET",
          url: this.baseUrl + path,
          tokenType: "none"
        }).then((body) => {
          if (typeof body !== "object") {
            throw new Error("Expected response body be an object");
          } else {
            return body;
          }
        }).then(({ hostname }) => {
          if (typeof hostname !== "string") {
            throw new Error("Expected response to contain a 'hostname'");
          } else {
            return hostname;
          }
        }).catch((err) => {
          this._locationUrl = null;
          throw err;
        });
      }
      return this._locationUrl;
    }
    /**
     * @returns Information about the current device, sent to the server when authenticating.
     */
    get deviceInformation() {
      const deviceIdStr = this.storage.getDeviceId();
      const deviceId = typeof deviceIdStr === "string" && deviceIdStr !== "000000000000000000000000" ? new ObjectId(deviceIdStr) : void 0;
      return new DeviceInformation({
        appId: this.localApp ? this.localApp.name : void 0,
        appVersion: this.localApp ? this.localApp.version : void 0,
        deviceId
      });
    }
    /**
     * Create (and store) a new user or update an existing user's access and refresh tokens.
     * This helps de-duplicating users in the list of users known to the app.
     *
     * @param response A response from the Authenticator.
     * @param providerType The type of the authentication provider used.
     * @returns A new or an existing user.
     */
    createOrUpdateUser(response, providerType) {
      const existingUser = this.users.find((u3) => u3.id === response.userId);
      if (existingUser) {
        existingUser.accessToken = response.accessToken;
        existingUser.refreshToken = response.refreshToken;
        return existingUser;
      } else {
        if (!response.refreshToken) {
          throw new Error("No refresh token in response from server");
        }
        const user = new User({
          app: this,
          id: response.userId,
          accessToken: response.accessToken,
          refreshToken: response.refreshToken,
          providerType
        });
        this.users.unshift(user);
        return user;
      }
    }
    /**
     * Restores the state of the app (active and logged-out users) from the storage
     */
    hydrate() {
      const userIds = this.storage.getUserIds();
      this.users = userIds.map((id) => new User({ app: this, id }));
    }
  };
  App.appCache = {};
  App.Credentials = Credentials;
  var setIsDevelopmentMode$1 = (state4) => {
  };
  var check$1 = function(it) {
    return it && it.Math == Math && it;
  };
  var safeGlobalThis$1 = (
    // eslint-disable-next-line no-restricted-globals
    check$1(typeof globalThis == "object" && globalThis) || check$1(typeof window == "object" && window) || // eslint-disable-next-line no-restricted-globals -- safe
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore allow `self`
    check$1(typeof self == "object" && self) || // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore allow `global`
    check$1(typeof global == "object" && global) || // eslint-disable-next-line no-new-func -- fallback
    function() {
      return this;
    }() || Function("return this")()
  );
  setIsDevelopmentMode$1(typeof __DEV__ !== "undefined" && __DEV__);
  var LocalStorage = class {
    /**
     * Constructs a LocalStorage using the global window.
     */
    constructor() {
      if (typeof safeGlobalThis$1.localStorage === "object") {
        this.global = safeGlobalThis$1;
      } else {
        throw new Error("Cannot use LocalStorage without a global localStorage object");
      }
    }
    /** @inheritdoc */
    get(key) {
      return this.global.localStorage.getItem(key);
    }
    /** @inheritdoc */
    set(key, value) {
      return this.global.localStorage.setItem(key, value);
    }
    /** @inheritdoc */
    remove(key) {
      return this.global.localStorage.removeItem(key);
    }
    /** @inheritdoc */
    prefix(keyPart) {
      return new PrefixedStorage(this, keyPart);
    }
    /** @inheritdoc */
    clear(prefix) {
      const keys4 = [];
      for (let i4 = 0; i4 < this.global.localStorage.length; i4++) {
        const key = this.global.localStorage.key(i4);
        if (key && (!prefix || key.startsWith(prefix))) {
          keys4.push(key);
        }
      }
      for (const key of keys4) {
        this.global.localStorage.removeItem(key);
      }
    }
    /** @inheritdoc */
    addListener(listener) {
      return this.global.addEventListener("storage", listener);
    }
    /** @inheritdoc */
    removeListener(listener) {
      return this.global.removeEventListener("storage", listener);
    }
  };
  var browser = detect();
  var DefaultStorage = "localStorage" in safeGlobalThis$1 ? LocalStorage : MemoryStorage;
  function openWindow(url4) {
    if (typeof safeGlobalThis$1.open === "function") {
      return safeGlobalThis$1.open(url4);
    } else {
      console.log(`Please open ${url4}`);
      return null;
    }
  }
  var environment$1 = {
    defaultStorage: new DefaultStorage().prefix("realm-web"),
    openWindow,
    platform: (browser === null || browser === void 0 ? void 0 : browser.name) || "web",
    platformVersion: (browser === null || browser === void 0 ? void 0 : browser.version) || "0.0.0",
    TextDecoder
  };
  setEnvironment(environment$1);
  function handleAuthRedirect(location2 = safeGlobalThis$1.location, storage = environment$1.defaultStorage) {
    try {
      const queryString = location2.hash.substr(1);
      OAuth2Helper.handleRedirect(queryString, storage);
    } catch (err) {
      console.warn(err);
    }
  }

  // src/scripts/login.ts
  var realmId = "buckleup-ilscy";
  var realm = new App(realmId);
  var login = async (login2, password) => {
    let { currentUser } = realm;
    let type = "LOG_IN";
    if (currentUser) {
      try {
        await currentUser.refreshAccessToken();
        type = "REFRESH";
      } catch (err) {
        return {
          type: "FAIL",
          data: { err, type: "REFRESH" }
        };
      }
    } else {
      let creds = await new Promise((res2, rej) => {
        try {
          if (login2 === "google") {
            setTimeout(() => {
              res2(Credentials.google({ redirectUrl: window.location.origin }));
            }, 1);
          } else {
            if (login2)
              res2(Credentials.emailPassword(login2, password));
            else
              res2(void 0);
          }
        } catch (err) {
          rej(err);
        }
      });
      if (creds) {
        try {
          const user = await realm.logIn(creds);
          if (user) {
            await user.refreshAccessToken();
            currentUser = user;
          }
        } catch (err) {
          return {
            type: "FAIL",
            data: { err, type: "LOGIN" }
          };
        }
      }
    }
    return currentUser ? {
      //if currentUser exists, success
      type,
      data: currentUser.toJSON()
    } : {
      //else failure
      type: "FAIL",
      data: { err: void 0, type: "UNCAUGHT" }
    };
  };
  var logout = async () => {
    if (!realm.currentUser)
      return { type: "FAIL", data: { err: new Error("No User Logged In") } };
    try {
      await realm.currentUser.logOut();
      return { type: "LOGOUT" };
    } catch (err) {
      console.log(err);
      return { type: "FAIL", data: { err: new Error("Failed to logout") } };
    }
  };
  if (window.location.href.includes("_baas_client_app_id")) {
    handleAuthRedirect();
  }

  // node_modules/graphscript-services/dist/index.services.esm.js
  var __create3 = Object.create;
  var __defProp3 = Object.defineProperty;
  var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames3 = Object.getOwnPropertyNames;
  var __getProtoOf3 = Object.getPrototypeOf;
  var __hasOwnProp3 = Object.prototype.hasOwnProperty;
  var __commonJS3 = (cb, mod) => function __require4() {
    return mod || (0, cb[__getOwnPropNames3(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export2 = (target, all) => {
    for (var name2 in all)
      __defProp3(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps3 = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames3(from))
        if (!__hasOwnProp3.call(to, key) && key !== except)
          __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM3 = (mod, isNodeMode, target) => (target = mod != null ? __create3(__getProtoOf3(mod)) : {}, __copyProps3(isNodeMode || !mod || !mod.__esModule ? __defProp3(target, "default", { value: mod, enumerable: true }) : target, mod));
  var require_objectid = __commonJS3({ "node_modules/bson-objectid/objectid.js"(exports, module2) {
    var MACHINE_ID = Math.floor(Math.random() * 16777215);
    var index = ObjectID2.index = parseInt(Math.random() * 16777215, 10);
    var pid = (typeof process === "undefined" || typeof process.pid !== "number" ? Math.floor(Math.random() * 1e5) : process.pid) % 65535;
    var BufferCtr = (() => {
      try {
        return _Buffer;
      } catch (_) {
        try {
          return Buffer;
        } catch (_2) {
          return null;
        }
      }
    })();
    var isBuffer = function(obj) {
      return !!(obj != null && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj));
    };
    var hexTable = [];
    for (i4 = 0; i4 < 256; i4++) {
      hexTable[i4] = (i4 <= 15 ? "0" : "") + i4.toString(16);
    }
    var i4;
    var checkForHexRegExp2 = new RegExp("^[0-9a-fA-F]{24}$");
    var decodeLookup = [];
    i4 = 0;
    while (i4 < 10)
      decodeLookup[48 + i4] = i4++;
    while (i4 < 16)
      decodeLookup[65 - 10 + i4] = decodeLookup[97 - 10 + i4] = i4++;
    function ObjectID2(id) {
      if (!(this instanceof ObjectID2))
        return new ObjectID2(id);
      if (id && (id instanceof ObjectID2 || id._bsontype === "ObjectID"))
        return id;
      this._bsontype = "ObjectID";
      if (id == null || typeof id === "number") {
        this.id = this.generate(id);
        return;
      }
      var valid = ObjectID2.isValid(id);
      if (!valid && id != null) {
        throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
      } else if (valid && typeof id === "string" && id.length === 24) {
        return ObjectID2.createFromHexString(id);
      } else if (id != null && id.length === 12) {
        this.id = id;
      } else if (id != null && typeof id.toHexString === "function") {
        return id;
      } else {
        throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
      }
    }
    module2.exports = ObjectID2;
    ObjectID2.default = ObjectID2;
    ObjectID2.createFromTime = function(time) {
      time = parseInt(time, 10) % 4294967295;
      return new ObjectID2(hex(8, time) + "0000000000000000");
    };
    ObjectID2.createFromHexString = function(hexString) {
      if (typeof hexString === "undefined" || hexString != null && hexString.length !== 24) {
        throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");
      }
      var data = "";
      var i22 = 0;
      while (i22 < 24) {
        data += String.fromCharCode(decodeLookup[hexString.charCodeAt(i22++)] << 4 | decodeLookup[hexString.charCodeAt(i22++)]);
      }
      return new ObjectID2(data);
    };
    ObjectID2.isValid = function(id) {
      if (id == null)
        return false;
      if (typeof id === "number") {
        return true;
      }
      if (typeof id === "string") {
        return id.length === 12 || id.length === 24 && checkForHexRegExp2.test(id);
      }
      if (id instanceof ObjectID2) {
        return true;
      }
      if (isBuffer(id)) {
        return ObjectID2.isValid(id.toString("hex"));
      }
      if (typeof id.toHexString === "function") {
        if (BufferCtr && (id.id instanceof BufferCtr || typeof id.id === "string")) {
          return id.id.length === 12 || id.id.length === 24 && checkForHexRegExp2.test(id.id);
        }
      }
      return false;
    };
    ObjectID2.prototype = { constructor: ObjectID2, toHexString: function() {
      if (!this.id || !this.id.length) {
        throw new Error("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is [" + JSON.stringify(this.id) + "]");
      }
      if (this.id.length === 24) {
        return this.id;
      }
      if (isBuffer(this.id)) {
        return this.id.toString("hex");
      }
      var hexString = "";
      for (var i22 = 0; i22 < this.id.length; i22++) {
        hexString += hexTable[this.id.charCodeAt(i22)];
      }
      return hexString;
    }, equals: function(otherId) {
      if (otherId instanceof ObjectID2) {
        return this.toString() === otherId.toString();
      } else if (typeof otherId === "string" && ObjectID2.isValid(otherId) && otherId.length === 12 && isBuffer(this.id)) {
        return otherId === this.id.toString("binary");
      } else if (typeof otherId === "string" && ObjectID2.isValid(otherId) && otherId.length === 24) {
        return otherId.toLowerCase() === this.toHexString();
      } else if (typeof otherId === "string" && ObjectID2.isValid(otherId) && otherId.length === 12) {
        return otherId === this.id;
      } else if (otherId != null && (otherId instanceof ObjectID2 || otherId.toHexString)) {
        return otherId.toHexString() === this.toHexString();
      } else {
        return false;
      }
    }, getTimestamp: function() {
      var timestamp = /* @__PURE__ */ new Date();
      var time;
      if (isBuffer(this.id)) {
        time = this.id[3] | this.id[2] << 8 | this.id[1] << 16 | this.id[0] << 24;
      } else {
        time = this.id.charCodeAt(3) | this.id.charCodeAt(2) << 8 | this.id.charCodeAt(1) << 16 | this.id.charCodeAt(0) << 24;
      }
      timestamp.setTime(Math.floor(time) * 1e3);
      return timestamp;
    }, generate: function(time) {
      if ("number" !== typeof time) {
        time = ~~(Date.now() / 1e3);
      }
      time = parseInt(time, 10) % 4294967295;
      var inc = next();
      return String.fromCharCode(time >> 24 & 255, time >> 16 & 255, time >> 8 & 255, time & 255, MACHINE_ID >> 16 & 255, MACHINE_ID >> 8 & 255, MACHINE_ID & 255, pid >> 8 & 255, pid & 255, inc >> 16 & 255, inc >> 8 & 255, inc & 255);
    } };
    function next() {
      return index = (index + 1) % 16777215;
    }
    function hex(length, n) {
      n = n.toString(16);
      return n.length === length ? n : "00000000".substring(n.length, length) + n;
    }
    var inspect = Symbol && Symbol.for && Symbol.for("nodejs.util.inspect.custom") || "inspect";
    ObjectID2.prototype[inspect] = function() {
      return "ObjectID(" + this + ")";
    };
    ObjectID2.prototype.toJSON = ObjectID2.prototype.toHexString;
    ObjectID2.prototype.toString = ObjectID2.prototype.toHexString;
  } });
  var DataStructures_exports = {};
  __export2(DataStructures_exports, { AuthorizationStruct: () => AuthorizationStruct, ChatroomStruct: () => ChatroomStruct, CoherenceMap: () => CoherenceMap, CoherenceStruct: () => CoherenceStruct, CommentStruct: () => CommentStruct, Data: () => Data, DataStruct: () => DataStruct, DateStruct: () => DateStruct, ECGStruct: () => ECGStruct, EDAStruct: () => EDAStruct, EEGCoordinates: () => EEGCoordinates, EEGStruct: () => EEGStruct, EMGStruct: () => EMGStruct, EventStruct: () => EventStruct, EyeTrackerStruct: () => EyeTrackerStruct, FNIRSStruct: () => FNIRSStruct, FrequencyBandsStruct: () => FrequencyBandsStruct, GroupStruct: () => GroupStruct, HRVStruct: () => HRVStruct, IMUStruct: () => IMUStruct, NotificationStruct: () => NotificationStruct, PPGStruct: () => PPGStruct, ProfileStruct: () => ProfileStruct, ScheduleStruct: () => ScheduleStruct, Struct: () => Struct, eegCoordinates: () => eegCoordinates, setCoordinate: () => setCoordinate, structRegistry: () => structRegistry });
  function Struct(structType = "struct", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    function randomId3(tag = "") {
      return `${tag + Math.floor(Math.random() + Math.random() * Math.random() * 1e16)}`;
    }
    let struct = { _id: randomId3(structType + "defaultId"), structType, ownerId: parentUser?._id, timestamp: Date.now(), parent: { structType: parentStruct?.structType, _id: parentStruct?._id } };
    if (!struct.ownerId)
      delete struct.ownerId;
    if (!struct?.parent?._id)
      delete struct.parent;
    if (Object.keys(assignProps).length > 0)
      Object.assign(struct, assignProps);
    return struct;
  }
  var eegCoordinates = { FP1: [-21.2, 66.9, 12.1], FPZ: [1.4, 65.1, 11.3], FP2: [24.3, 66.3, 12.5], AF7: [-41.7, 52.8, 11.3], AF3: [-32.7, 48.4, 32.8], AFZ: [1.8, 54.8, 37.9], AF4: [35.1, 50.1, 31.1], AF8: [43.9, 52.7, 9.3], F5: [-51.4, 26.7, 24.7], F3: [-39.7, 25.3, 44.7], F1: [-22.1, 26.8, 54.9], FZ: [0, 26.8, 60.6], F2: [23.6, 28.2, 55.6], F4: [41.9, 27.5, 43.9], F6: [52.9, 28.7, 25.2], F7: [-52.1, 28.6, 3.8], F8: [53.2, 28.4, 3.1], FC5: [-59.1, 3, 26.1], FC3: [-45.5, 2.4, 51.3], FC1: [-24.7, 0.3, 66.4], FCZ: [1, 1, 72.8], FC2: [26.1, 3.2, 66], FC4: [47.5, 4.6, 49.7], FC6: [60.5, 4.9, 25.5], FT9: [-53.8, -2.1, -29.1], FT7: [-59.2, 3.4, -2.1], FT8: [60.2, 4.7, -2.8], FT10: [55, -3.6, -31], T7: [-65.8, -17.8, -2.9], T5: [-61.5, -65.3, 1.1], T3: [-70.2, -21.3, -10.7], T4: [71.9, -25.2, -8.2], T6: [59.3, -67.6, 3.8], T8: [67.4, -18.5, -3.4], C5: [-63.6, -18.9, 25.8], C3: [-49.1, -20.7, 53.2], C1: [-25.1, -22.5, 70.1], CZ: [0.8, -21.9, 77.4], C2: [26.7, -20.9, 69.5], C4: [50.3, -18.8, 53], C6: [65.2, -18, 26.4], CP5: [-61.8, -46.2, 22.5], CP3: [-46.9, -47.7, 49.7], CP1: [-24, -49.1, 66.1], CPZ: [0.7, -47.9, 72.6], CP2: [25.8, -47.1, 66], CP4: [49.5, -45.5, 50.7], CP6: [62.9, -44.6, 24.4], TP9: [-73.6, -46.7, -4], TP7: [-63.6, -44.7, -4], TP8: [64.6, -45.4, -3.7], TP10: [74.6, -47.4, -3.7], P9: [-50.8, -51.3, -37.7], P7: [-55.9, -64.8, 0], P5: [-52.7, -67.1, 19.9], P3: [-41.4, -67.8, 42.4], P1: [-21.6, -71.3, 52.6], PZ: [0.7, -69.3, 56.9], P2: [24.4, -69.9, 53.5], P4: [44.2, -65.8, 42.7], P6: [54.4, -65.3, 20.2], P8: [56.4, -64.4, 0.1], P10: [51, -53.9, -36.5], PO7: [-44, -81.7, 1.6], PO3: [-33.3, -84.3, 26.5], POZ: [0, -87.9, 33.5], PO4: [35.2, -82.6, 26.1], PO8: [43.3, -82, 0.7], O1: [-25.8, -93.3, 7.7], OZ: [0.3, -97.1, 8.7], O2: [25, -95.2, 6.2] };
  function setCoordinate(channelDict, assignTo = {}) {
    if (!eegCoordinates[channelDict.tag] && channelDict.position) {
      eegCoordinates[channelDict.tag] = [channelDict.position.x, channelDict.position.y, channelDict.position.z];
    }
    if (eegCoordinates[channelDict.tag]) {
      let props = { channel: "", position: { x: eegCoordinates[channelDict.tag][0], y: eegCoordinates[channelDict.tag][1], z: eegCoordinates[channelDict.tag][2] } };
      return Object.assign(assignTo, props);
    } else
      return Object.assign(assignTo, channelDict);
  }
  function EEGCoordinates(channelDicts = [], genCoherenceMap = true) {
    let structs = [];
    for (let channelDict of channelDicts) {
      let struct = EEGStruct(channelDict);
      structs.push(struct);
    }
    if (genCoherenceMap) {
      structs.push(...CoherenceMap({ channelDicts }));
    }
    return structs;
  }
  function FrequencyBandsStruct(additionalBands = [], assignTo = {}) {
    let bands = { scp: [], delta: [], theta: [], alpha1: [], alpha2: [], beta: [], lowgamma: [], highgamma: [] };
    additionalBands.forEach((band) => bands[band] = []);
    return Object.assign(assignTo, bands);
  }
  function EEGStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let bands = FrequencyBandsStruct();
    let props = { tag, position: { x: 0, y: 0, z: 0 }, count: 0, times: [], raw: [], filtered: [], fftCount: 0, fftTimes: [], ffts: [], slices: JSON.parse(JSON.stringify(bands)), means: JSON.parse(JSON.stringify(bands)), startTime: Date.now() };
    let struct = Struct("eeg", props, parentUser, parentStruct);
    if (tag)
      setCoordinate(props, struct);
    return Object.assign(struct, assignProps);
  }
  function CoherenceStruct(coords = { 0: EEGStruct("FP1"), 1: EEGStruct("FP2") }, assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let bands = FrequencyBandsStruct();
    let props = { tag: coords[0]?.tag + "::" + coords[1]?.tag, x0: coords[0]?.position?.x, y0: coords[0]?.position?.y, z0: coords[0]?.position?.z, x1: coords[1]?.position?.x, y1: coords[1]?.position?.y, z1: coords[1]?.position?.z, fftCount: 0, fftTimes: [], ffts: [], slices: JSON.parse(JSON.stringify(bands)), means: JSON.parse(JSON.stringify(bands)), startTime: Date.now() };
    let struct = Struct("coherence", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function CoherenceMap(opts = { channelDicts: [{ ch: 0, tag: "FP1", analyze: false }, { ch: 1, tag: "FP2", analyze: false }], taggedOnly: true }, _ = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    var cmap = [];
    var l = 1, k = 0;
    for (var i4 = 0; i4 < opts.channelDicts.length * (opts.channelDicts.length + 1) / 2 - opts.channelDicts.length; i4++) {
      if (opts.taggedOnly === false || opts.taggedOnly === true && (opts.channelDicts[k].tag !== null && opts.channelDicts[k + l].tag !== null && (opts.channelDicts[k].tag !== "other" && opts.channelDicts[k + l].tag !== "other") && (opts.channelDicts[k].analyze === true && opts.channelDicts[k + l].analyze === true))) {
        var coord0 = EEGStruct(opts.channelDicts[k].tag);
        var coord1 = EEGStruct(opts.channelDicts[k + l].tag);
        cmap.push(CoherenceStruct({ 0: coord0, 1: coord1 }, {}, parentUser, parentStruct));
      }
      l++;
      if (l + k === opts.channelDicts.length) {
        k++;
        l = 1;
      }
    }
    return cmap;
  }
  function FNIRSStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, position: { x: 0, y: 0, z: 0 }, count: 0, times: [], red: [], ir: [], ir2: [], ambient: [], ratio: [], temp: [], beat_detect: { beats: [], breaths: [], rir: [], rir2: [], drir_dt: [], localmins: [], localmaxs: [], val_dists: [], peak_dists: [], localmins2: [], localmaxs2: [], val_dists2: [], peak_dists2: [] }, startTime: Date.now() };
    let struct = Struct("fnirs", props, parentUser, parentStruct);
    if (tag)
      setCoordinate(props, struct);
    return Object.assign(struct, assignProps);
  }
  function IMUStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, Ax: [], Ay: [], Az: [], Gx: [], Gy: [], Gz: [], startTime: Date.now() };
    let struct = Struct("imu", props, parentUser, parentStruct);
    if (tag)
      setCoordinate(props, struct);
    return Object.assign(struct, assignProps);
  }
  function EyeTrackerStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, count: 0, times: [], x: [], y: [], smax: [], smay: [], startTime: Date.now() };
    let struct = Struct("eyetracker", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ECGStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, count: 0, times: [], raw: [], filtered: [], bpm: [], hrv: [], startTime: Date.now() };
    let struct = Struct("ecg", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function EDAStruct(_ = "", __ = {}, ___ = { _id: "" }, ____ = { structType: "struct", _id: "" }) {
  }
  function PPGStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = FNIRSStruct(tag, parentUser, parentStruct, assignProps);
    struct.structType = "ppg";
    return struct;
  }
  function HRVStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = ECGStruct(tag, parentUser, parentStruct, assignProps);
    struct.structType = "hrv";
    return struct;
  }
  function EMGStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = EEGStruct(tag, parentUser, parentStruct, assignProps);
    struct.structType = "emg";
    return struct;
  }
  function ProfileStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, name: "", username: "", firstName: "", lastName: "", email: "", phone: "", sex: "", birthday: "", type: "", userRoles: {}, socials: {}, data: {}, id: "" };
    let struct = Struct("profile", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function AuthorizationStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, authorizedId: "", authorizedName: "", authorizerId: "", authorizerName: "", authorizations: {}, structs: {}, excluded: {}, groups: {}, status: "PENDING", expires: false, associatedAuthId: "" };
    let struct = Struct("authorization", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function GroupStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, name: "", details: "", admins: {}, peers: {}, clients: {}, users: {} };
    let struct = Struct("group", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function Data(type, data) {
    return { type, data, timestamp: Date.now() };
  }
  function DataStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, title: "", author: "", expires: false, type: "", data: new Array() };
    let struct = Struct("data", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function EventStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, event: "", author: "", startTime: "", endTime: "", grade: 0, notes: "", attachments: new Array(), users: {} };
    let struct = Struct("event", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ChatroomStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, message: "", topic: "", author: "", attachments: new Array(), comments: new Array(), replies: new Array(), users: {}, audioChatActive: false, videoChatActive: false };
    let struct = Struct("chatroom", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function CommentStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, author: "", replyTo: "", message: "", rating: 0, replies: new Array(), users: {}, attachments: new Array() };
    let struct = Struct("comment", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function NotificationStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, note: "", parentUserId: "" };
    let struct = Struct("notification", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ScheduleStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, title: "", author: "", attachments: new Array(), dates: new Array() };
    let struct = Struct("schedule", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function DateStruct(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = { tag, timeSet: "", notes: "", recurs: "NEVER", attachments: new Array() };
    let struct = Struct("date", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  var structRegistry = { Struct, EEGStruct, FNIRSStruct, CoherenceStruct, CoherenceMap, FrequencyBandsStruct, IMUStruct, EyeTrackerStruct, ECGStruct, EDAStruct, PPGStruct, HRVStruct, EMGStruct, ProfileStruct, AuthorizationStruct, GroupStruct, DataStruct, EventStruct, ChatroomStruct, CommentStruct, NotificationStruct, ScheduleStruct, DateStruct };
  var DataTablet = class {
    constructor(props = {}) {
      this.DS = DataStructures_exports;
      this.collections = /* @__PURE__ */ new Map();
      this.data = { byTime: {}, notes: {}, events: {}, sleep: {}, food: {}, rx: {}, hr: {}, ppg: {}, hrv: {}, ecg: {}, emg: {}, eeg: {}, fnirs: {} };
      this.rolloverLimit = 5e4;
      this.dataSorts = /* @__PURE__ */ new Map();
      this.watches = {};
      this.onCollectionSet = (type, collection) => {
      };
      Object.assign(this.data, props);
      this.dataSorts = /* @__PURE__ */ new Map();
      this.watches = {};
      this.setSort("event", (dataObj) => {
        if (!this.data.events[dataObj.timestamp])
          this.data.events[dataObj.timestamp] = [dataObj];
        else
          this.data.events[dataObj.timestamp].push(dataObj);
        if (dataObj.event === "sleep") {
          if (!this.data.sleep[dataObj.timestamp])
            this.data.sleep[dataObj.timestamp] = [dataObj];
          else
            this.data.sleep[dataObj.timestamp].push(dataObj);
        }
        return dataObj;
      });
      this.setSort(["notes", "note", "link"], (dataObj) => {
        if (!this.data.notes[dataObj.timestamp])
          this.data.notes[dataObj.timestamp] = [dataObj];
        else
          this.data.notes[dataObj.timestamp].push(dataObj);
        if (!this.data.byTime[dataObj.timestamp])
          this.data.byTime[dataObj.timestamp] = [dataObj];
        else
          this.data.byTime[dataObj.timestamp].push(dataObj);
        return dataObj;
      });
      this.id = this.randomId("dataTablet");
    }
    randomId(tag = "") {
      return `${tag + Math.floor(Math.random() + Math.random() * Math.random() * 1e16)}`;
    }
    setLocalData(structs) {
      let setInCollection = (s) => {
        let type = s.structType;
        let collection = this.collections.get(type);
        if (!collection) {
          collection = /* @__PURE__ */ new Map();
          this.collections.set(type, collection);
        }
        collection.set(s._id, s);
        this.onCollectionSet(type, collection);
      };
      if (Array.isArray(structs)) {
        structs.forEach((s) => {
          setInCollection(s);
        });
      } else
        setInCollection(structs);
    }
    getLocalData(collection, query) {
      let ownerId = "";
      let key = "";
      let value = "";
      if (typeof query === "object") {
        ownerId = query.ownerId;
        const keys4 = Object.keys(query).filter((k) => k != "ownerId");
        key = keys4[0];
        value = query[key];
      } else
        value = query;
      if (!collection && !ownerId && !key && !value)
        return [];
      let result = [];
      if (!collection && (ownerId || key)) {
        this.collections.forEach((c) => {
          if ((key === "_id" || key === "id") && value) {
            let found = c.get(value);
            if (found)
              result.push(found);
          } else {
            c.forEach((struct) => {
              if (key && value) {
                if (struct[key] === value && struct.ownerId === ownerId) {
                  result.push(struct);
                }
              } else if (struct.ownerId === ownerId) {
                result.push(struct);
              }
            });
          }
        });
        return result;
      } else {
        let c = this.collections.get(collection);
        if (!c)
          return result;
        if (!key && !ownerId) {
          c.forEach((struct) => {
            result.push(struct);
          });
          return result;
        }
        if ((key === "_id" || key === "id") && value)
          return c.get(value);
        else {
          c.forEach((struct, _) => {
            if (key && value && !ownerId) {
              if (struct[key] === value)
                result.push(struct);
            } else if (ownerId && !key) {
              if (struct.ownerId === ownerId)
                result.push(struct);
            } else if (ownerId && key && value) {
              if (struct.ownerId === ownerId && struct[key]) {
                if (struct[key] === value)
                  result.push(struct);
              }
            }
          });
        }
      }
      return result;
    }
    runSort(key, dataObj = {}, newdata = [], tablet = this) {
      let result;
      let sort = this.getSort(key);
      if (sort)
        result = sort(dataObj, newdata, tablet);
      else
        return false;
      return result;
    }
    setSort(key, response = (data, newdata = [], tablet = this) => {
    }) {
      if (Array.isArray(key))
        key.forEach((k) => {
          this.dataSorts.set(k, response);
        });
      else
        this.dataSorts.set(key, response);
    }
    getSort(key) {
      return this.dataSorts.get(key);
    }
    checkWatches(sorted = {}) {
      for (const prop in this.watches) {
        let triggered = this.watches[prop].ondata(sorted, this.watches[prop].accum, this.watches[prop].ownerId);
        if (triggered) {
          this.watches[prop].ontrigger(this.watches[prop].accum);
          this.watches[prop].triggered = false;
        }
      }
    }
    setWatch(name2, ownerId, ondata = (sorted, accum, ownerId2) => {
      if (sorted.ownerId === ownerId2)
        accum.data[sorted._id] = sorted;
      if (Object.keys(accum.data).length > 10) {
        return true;
      } else
        return false;
    }, ontrigger = (accum) => {
      console.log(accum);
      let alert2 = Struct("alert", { alert: true, data: accum }, { _id: accum[Object.keys(accum)[0]].ownerId });
      accum = {};
    }) {
      this.watches[name2] = { accum: {}, ownerId, ondata, ontrigger };
    }
    getWatch(name2) {
      return this.watches[name2];
    }
    async sortStructsIntoTable(datastructs = []) {
      let ascending = function(a, b) {
        if (a.timestamp && b.timestamp)
          return a.timestamp - b.timestamp;
      };
      datastructs.sort(ascending);
      let newdata = [];
      for (let i4 = 0; i4 < datastructs.length; i4++) {
        let struct = datastructs[i4];
        if (!struct.timestamp)
          continue;
        let timestamp = struct.timestamp;
        if (!this.data.byTime[timestamp])
          this.data.byTime[timestamp] = [struct];
        else
          this.data.byTime[timestamp].push(struct);
        if (struct.structType === "data" && struct.data) {
          struct.data.forEach(async (dat) => {
            if (typeof dat === "object" && !Array.isArray(dat)) {
              let typ = dat.dataType;
              dat.ownerId = struct.ownerId;
              if (!dat.timestamp)
                dat.timestamp = timestamp;
              if (typ) {
                let sorted = this.runSort(typ, dat, newdata, this);
                if (!sorted) {
                  if (!this.data[typ])
                    this.data[typ] = {};
                  dat.timestamp = timestamp;
                  if (!this.data[typ][timestamp])
                    this.data[typ][timestamp] = [dat];
                  else
                    this.data[typ][timestamp].push(dat);
                  if (!this.data.byTime[timestamp])
                    this.data.byTime[timestamp] = [dat];
                  else
                    this.data.byTime[timestamp].push(dat);
                  this.checkWatches(dat);
                  this.onUpdate(timestamp, dat);
                  newdata.push(dat);
                } else {
                  if (sorted.constructor?.name !== "Promise") {
                    this.checkWatches(sorted);
                    this.onUpdate(timestamp, sorted);
                    newdata.push(sorted);
                  }
                }
              }
            }
          });
        } else {
          let sorted = this.runSort(struct.structType, struct, newdata, this);
          if (!sorted) {
            let typ = struct.structType;
            if (!this.data[typ])
              this.data[typ] = {};
            if (!this.data[typ][timestamp])
              this.data[typ][timestamp] = [struct];
            else
              this.data[typ][timestamp].push(struct);
            this.checkWatches(struct);
            this.onUpdate(timestamp, struct);
            newdata.push(struct);
          } else {
            this.checkWatches(sorted);
            this.onUpdate(timestamp, sorted);
            newdata.push(sorted);
          }
        }
      }
      for (const prop in this.data) {
        this.data[prop] = this.sortObjectByPropName(this.data[prop]);
      }
      this.onSorted(newdata);
    }
    onUpdate(_, __, ___ = this.data) {
    }
    onSorted(_ = []) {
    }
    getDataByTimestamp(timestamp, ownerId) {
      let result = this.data.byTime[timestamp];
      if (ownerId && result)
        result = result.filter((o) => {
          if (!ownerId)
            return true;
          else if (ownerId === o.ownerId)
            return true;
          else
            return false;
        });
      return result;
    }
    getDataByTimeRange(begin, end, type, ownerId) {
      let result = {};
      if (type) {
        for (const key in this.data[type]) {
          let t3 = parseInt(key);
          if (t3 > begin && t3 < end) {
            result[key] = [...this.data[type][key]];
          }
        }
        if (type === "sleep") {
          result = this.filterSleepResults(result);
        }
      } else {
        for (const key in this.data.byTime) {
          let t3 = parseInt(key);
          if (t3 > begin && t3 < end) {
            result[key] = [...this.data.byTime[key]];
          }
        }
      }
      if (ownerId && result) {
        for (const key in result) {
          let popidx = [];
          result[key] = result[key];
          result[key].forEach((o, i4) => {
            if (o.ownerId !== ownerId) {
              popidx.push(i4);
            }
          });
          popidx.reverse().forEach((idx) => {
            result[key].splice(idx, 1);
          });
          if (result[key].length === 0)
            delete result[key];
        }
      }
      return result;
    }
    getDataByType(type, timestamp, ownerId) {
      if (!this.data[type])
        return void 0;
      let result = { ...this.data[type] };
      if (timestamp)
        result = [...result[timestamp]];
      if (ownerId && result) {
        for (const key in result) {
          let popidx = [];
          result[key] = [...result[key]];
          result[key].forEach((o, i4) => {
            if (o.ownerId !== ownerId) {
              popidx.push(i4);
            }
          });
          popidx.reverse().forEach((idx) => {
            result[key].splice(idx, 1);
          });
          if (result[key].length === 0)
            delete result[key];
        }
      }
      if (type === "sleep") {
        result = this.filterSleepResults(result);
      }
      return result;
    }
    filterSleepResults(unfiltered = {}) {
      let events = [];
      for (const key in unfiltered) {
        unfiltered[key] = [...unfiltered[key]];
        events.push(...unfiltered[key].filter((o) => {
          if (o.structType === "event")
            return true;
          else
            return false;
        }));
      }
      events.forEach((ev2) => {
        let foundidx;
        for (const key in unfiltered) {
          unfiltered[key].forEach((o, i4) => {
            if (o.structType === "fitbitsleep" && ev2.startTime && ev2.endTime) {
              if (Math.abs(o.startTime - ev2.startTime) < 1e3 * 12 * 3600 && Math.abs(o.endTime - ev2.endTime) < 1e3 * 12 * 3600 && ev2.endTime - ev2.startTime > 1e3 * 2 * 3600) {
                foundidx = i4;
                return true;
              } else
                return false;
            } else
              return false;
          });
          if (foundidx)
            unfiltered[key].splice(foundidx, 1);
        }
      });
      let result = unfiltered;
      return result;
    }
    sortObjectByPropName(object) {
      const ordered = Object.keys(object).sort().reduce((obj, key) => {
        obj[key] = object[key];
        return obj;
      }, {});
      return ordered;
    }
    checkRollover(collection, limit = this.rolloverLimit) {
      if (!collection)
        return false;
      let c = this.collections.get(collection);
      if (!c)
        return false;
      c.forEach((struct) => {
        for (const prop in struct) {
          if (Array.isArray(struct[prop])) {
            if (struct[prop].length > limit) {
              struct[prop].slice(struct[prop].length - limit);
              if (prop === "ffts") {
                struct.fftCount = struct[prop].length;
              } else if (prop === "times") {
                struct.count = struct[prop].length;
              }
            }
          } else if (typeof struct[prop] === "object") {
            this.checkRollover(struct[prop]);
          }
        }
      });
      return true;
    }
  };
  var EventHandler3 = class {
    constructor(data) {
      this.pushToState = {};
      this.data = {};
      this.triggers = {};
      this.ctr = 0;
      this.setState = (updateObj) => {
        Object.assign(this.data, updateObj);
        let props = Object.getOwnPropertyNames(updateObj);
        for (const prop of props) {
          this.triggerEvent(prop, this.data[prop]);
        }
        if (this.triggers[statesubKey2]) {
          let run = (fn) => {
            fn(updateObj);
          };
          this.triggers[statesubKey2].forEach((v2) => {
            run(v2.onchange);
          });
        }
        return this.data;
      };
      this.setValue = (key, value) => {
        this.data[key] = value;
        this.triggerEvent(key, value);
      };
      this.triggerEvent = (key, value) => {
        if (this.triggers[key]) {
          let fn = (obj) => obj.onchange(value, this.triggers[key]);
          this.triggers[key].forEach(fn);
        }
      };
      this.subscribeState = (onchange) => {
        return this.subscribeEvent(statesubKey2, onchange);
      };
      this.unsubscribeState = (sub) => {
        return this.unsubscribeEvent(statesubKey2, sub);
      };
      this.subscribeEvent = (key, onchange, refObject, refKey) => {
        if (key) {
          if (refObject && refKey && !this.triggers[key]) {
            Object.defineProperty(this.data, key, { get: () => {
              return refObject[refKey];
            }, set: (value) => {
              refObject[refKey] = value;
            }, enumerable: true, configurable: true });
          }
          if (!this.triggers[key]) {
            this.triggers[key] = [];
          }
          let l = this.ctr;
          this.ctr++;
          this.triggers[key].push({ sub: l, onchange });
          return l;
        } else
          return void 0;
      };
      this.unsubscribeEvent = (key, sub) => {
        let triggers = this.triggers[key];
        if (triggers) {
          if (sub === void 0) {
            delete this.triggers[key];
            delete this.data[key];
          } else {
            let idx = void 0;
            let obj = triggers.find((o, i4) => {
              if (o.sub === sub) {
                idx = i4;
                return true;
              }
            });
            if (obj)
              triggers.splice(idx, 1);
            if (Object.keys(triggers).length === 0) {
              delete this.triggers[key];
              delete this.data[key];
            }
            if (this.onRemoved)
              this.onRemoved(obj);
            return true;
          }
        }
      };
      this.subscribeEventOnce = (key, onchange) => {
        let sub;
        let changed = (value) => {
          onchange(value);
          this.unsubscribeEvent(key, sub);
        };
        sub = this.subscribeEvent(key, changed);
      };
      this.getEvent = (key, sub) => {
        for (const s in this.triggers[key]) {
          if (this.triggers[key][s].sub === sub)
            return this.triggers[key][s];
        }
      };
      this.getSnapshot = () => {
        const snapshot = {};
        for (const key in this.data) {
          snapshot[key] = this.data[key];
        }
      };
      if (typeof data === "object")
        this.data = data;
    }
  };
  var statesubKey2 = "*s";
  var state2 = new EventHandler3();
  var GraphNode2 = class {
    constructor(properties, parent, graph3) {
      this.__node = { tag: `node${Math.floor(Math.random() * 1e15)}`, unique: `${Math.floor(Math.random() * 1e15)}`, state: state2 };
      this.__setProperties = (properties2, parent2, graph4) => {
        let enforceProperties = () => {
          let orig = properties2;
          if (!("__node" in properties2))
            properties2.__node = {};
          if (typeof properties2 === "function") {
            if (isNativeClass2(properties2)) {
              properties2 = new properties2();
            } else
              properties2 = { __operator: properties2, __node: { forward: true, tag: properties2.name } };
          } else if (typeof properties2 === "string") {
            if (graph4?.get(properties2)) {
              properties2 = graph4.get(properties2);
            }
          }
          if (!properties2.__node.initial)
            properties2.__node.initial = orig;
        };
        enforceProperties();
        if (typeof properties2 === "object") {
          let assignState = () => {
            if (properties2.__node?.state)
              this.__node.state = properties2.__node.state;
          };
          let setProps4 = () => {
            if (properties2.__props) {
              if (typeof properties2.__props === "function")
                properties2.__props = new properties2.__props();
              if (typeof properties2.__props === "object") {
                this.__proxyObject(properties2.__props);
              }
            }
          };
          let setTag = () => {
            if (!properties2.__node.tag) {
              if (properties2.__operator?.name)
                properties2.__node.tag = properties2.__operator.name;
              else
                properties2.__node.tag = `node${Math.floor(Math.random() * 1e15)}`;
            }
          };
          let setNode = () => {
            if (typeof properties2.__node === "string") {
              if (graph4?.get(properties2.__node.tag)) {
                properties2 = graph4.get(properties2.__node.tag);
              } else
                properties2.__node = {};
            } else if (!properties2.__node)
              properties2.__node = {};
            if (graph4) {
              properties2.__node.graph = graph4;
            }
            if (properties2 instanceof Graph2)
              properties2.__node.source = properties2;
          };
          let setParent = () => {
            if (!properties2.__parent && parent2)
              properties2.__parent = parent2;
            if (parent2?.__node && !(parent2 instanceof Graph2 || properties2 instanceof Graph2))
              properties2.__node.tag = parent2.__node.tag + "." + properties2.__node.tag;
            if (parent2 instanceof Graph2 && properties2 instanceof Graph2) {
              if (properties2.__node.loaders)
                Object.assign(parent2.__node.loaders ? parent2.__node.loaders : {}, properties2.__node.loaders);
              if (parent2.__node.mapGraphs) {
                properties2.__node.nodes.forEach((n) => {
                  parent2.set(properties2.__node.tag + "." + n.__node.tag, n);
                });
                let ondelete = () => {
                  properties2.__node.nodes.forEach((n) => {
                    parent2.__node.nodes.delete(properties2.__node.tag + "." + n.__node.tag);
                  });
                };
                this.__addOndisconnected(ondelete);
              }
            }
          };
          let setOp = () => {
            if (typeof properties2.default === "function" && !properties2.__operator) {
              properties2.__operator = properties2.default;
            }
            if (properties2.__operator) {
              if (typeof properties2.__operator === "string") {
                if (graph4) {
                  let n = graph4.get(properties2.__operator);
                  if (n)
                    properties2.__operator = n.__operator;
                  if (!properties2.__node.tag && properties2.__operator.name)
                    properties2.__node.tag = properties2.__operator.name;
                }
              }
              if (typeof properties2.__operator === "function")
                properties2.__operator = this.__setOperator(properties2.__operator);
              if (properties2.default)
                properties2.default = properties2.__operator;
            }
          };
          let assignProps = () => {
            properties2.__node = Object.assign(this.__node, properties2.__node);
            let keys4 = Object.getOwnPropertyNames(properties2);
            for (const key of keys4) {
              this[key] = properties2[key];
            }
          };
          let bindCallbacks = () => {
            if (this.__onconnected) {
              if (typeof this.__onconnected === "function") {
                this.__onconnected = this.__onconnected.bind(this);
              } else if (Array.isArray(this.__onconnected)) {
                this.__onconnected = this.__onconnected.map((f) => {
                  return f.bind(this);
                });
              }
              if (typeof this.__ondisconnected === "function") {
                this.__ondisconnected = this.__ondisconnected.bind(this);
              } else if (Array.isArray(this.__ondisconnected)) {
                this.__ondisconnected = this.__ondisconnected.map((f) => {
                  return f.bind(this);
                });
              }
            }
          };
          assignState();
          setTag();
          setProps4();
          setNode();
          setParent();
          assignProps();
          bindCallbacks();
          setOp();
        }
      };
      this.__subscribe = (callback, key, subInput, bound, target) => {
        const subscribeToFunction = (k, setTarget = (callback2, target2) => callback2, triggerCallback = callback) => {
          let sub = this.__node.state.subscribeEvent(k, triggerCallback, this, key);
          let trigger = this.__node.state.getEvent(k, sub);
          if (!trigger)
            return sub;
          trigger.source = this.__node.tag;
          if (key)
            trigger.key = key;
          trigger.target = setTarget(callback);
          if (bound)
            trigger.bound = bound;
          return sub;
        };
        const subscribeToGraph = (callback2) => {
          let fn = this.__node.graph.get(callback2);
          if (!fn && callback2.includes(".")) {
            let n = this.__node.graph.get(callback2.substring(0, callback2.lastIndexOf(".")));
            let key2 = callback2.substring(callback2.lastIndexOf(".") + 1);
            if (n && typeof n[key2] === "function")
              callback2 = (...args) => {
                return n[key2](...args);
              };
          }
        };
        if (key) {
          if (!this.__node.localState || !this.__node.localState[key]) {
            this.__addLocalState(this, key);
          }
          if (typeof callback === "string") {
            if (target) {
              if (this.__node.graph?.get(target)) {
                let n = this.__node.graph?.get(target);
                if (typeof n[callback] === "function") {
                  let fn = n[callback];
                  callback = (...inp) => {
                    fn(...inp);
                  };
                } else {
                  let k2 = callback;
                  let setter = (inp) => {
                    n[k2] = inp;
                  };
                  callback = setter;
                }
              }
            } else if (typeof this[callback] === "function") {
              let fn = this[callback];
              callback = (...inp) => {
                fn(...inp);
              };
            } else if (this.__node.graph?.get(callback))
              subscribeToGraph(callback);
            if (typeof callback !== "function")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        } else {
          if (typeof callback === "string") {
            if (this.__node.graph.get(callback))
              callback = this.__node.graph.get(callback);
            if (typeof callback !== "object")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "input" : this.__node.unique;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        }
      };
      this.__unsubscribe = (sub, key, unsubInput) => {
        if (key) {
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key, sub);
        } else
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "input" : this.__node.unique, sub);
      };
      this.__setOperator = (fn) => {
        fn = fn.bind(this);
        if (this.__args && this.__node.graph) {
          fn = wrapArgs2(fn, this.__args, this.__node.graph);
        }
        let inpstr = `${this.__node.unique}input`;
        this.__operator = (...args) => {
          if (this.__node.state.triggers[inpstr])
            this.__node.state.setValue(inpstr, args);
          let result = fn(...args);
          if (this.__node.state.triggers[this.__node.unique]) {
            if (typeof result?.then === "function") {
              result.then((res2) => {
                if (res2 !== void 0)
                  this.__node.state.setValue(this.__node.unique, res2);
              }).catch(console.error);
            } else if (result !== void 0)
              this.__node.state.setValue(this.__node.unique, result);
          }
          return result;
        };
        if (this.__parent instanceof GraphNode2 && !this.__subscribedToParent) {
          if (this.__parent.__operator) {
            let sub = this.__parent.__subscribe(this);
            let ondelete = () => {
              this.__parent?.__unsubscribe(sub);
              delete this.__subscribedToParent;
            };
            this.__addOndisconnected(ondelete);
            this.__subscribedToParent = true;
          }
        }
        return this.__operator;
      };
      this.__addLocalState = (props, key) => {
        if (!props)
          return;
        if (!this.__node.localState) {
          this.__node.localState = {};
        }
        const localState = this.__node.localState;
        const initState = (props2, k) => {
          let str22 = this.__node.unique + "." + k;
          let inpstr = `${str22}input`;
          if (typeof props2[k] === "function" && k !== "__operator") {
            let fn = props2[k].bind(this);
            props2[k] = (...args) => {
              if (this.__node.state.triggers[inpstr])
                this.__node.state.setValue(inpstr, args);
              let result = fn(...args);
              if (this.__node.state.triggers[str22]) {
                if (typeof result?.then === "function") {
                  result.then((res2) => {
                    this.__node.state.triggerEvent(str22, res2);
                  }).catch(console.error);
                } else
                  this.__node.state.triggerEvent(str22, result);
              }
              return result;
            };
          } else {
            let get, set;
            if (this.__props?.[k]) {
              get = () => {
                return this.__props[k];
              };
              set = (v2) => {
                this.__props[k] = v2;
                if (this.__node.state.triggers[str22])
                  this.__node.state.triggerEvent(str22, v2);
              };
            } else {
              localState[k] = props2[k];
              get = () => {
                return localState[k];
              };
              set = (v2) => {
                localState[k] = v2;
                if (this.__node.state.triggers[str22])
                  this.__node.state.triggerEvent(str22, v2);
              };
            }
            const descriptor = { get, set, enumerable: true, configurable: true };
            Object.defineProperty(props2, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        };
        if (key)
          initState(props, key);
        else {
          for (let k in props) {
            initState(props, k);
          }
        }
      };
      this.__proxyObject = (obj) => {
        const allProps = getAllProperties2(obj);
        for (const k of allProps) {
          if (typeof obj[k] === "function") {
            this[k] = (...args) => {
              return obj[k](...args);
            };
          } else {
            const descriptor = { get: () => {
              return obj[k];
            }, set: (value) => {
              obj[k] = value;
            }, enumerable: true, configurable: true };
            Object.defineProperty(this, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        }
      };
      this.__setProperties(properties, parent, graph3);
    }
    __addOnconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__onconnected)) {
        this.__onconnected.push(callback);
      } else if (typeof this.__onconnected === "function") {
        this.__onconnected = [callback, this.__onconnected];
      } else
        this.__onconnected = callback;
    }
    __addOndisconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__ondisconnected)) {
        this.__ondisconnected.push(callback);
      } else if (typeof this.__ondisconnected === "function") {
        this.__ondisconnected = [callback, this.__ondisconnected];
      } else
        this.__ondisconnected = callback;
    }
    __callConnected(node = this) {
      if (typeof this.__onconnected === "function") {
        this.__onconnected(this);
      } else if (Array.isArray(this.__onconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__onconnected.forEach(fn);
      }
    }
    __callDisconnected(node = this) {
      if (typeof this.__ondisconnected === "function")
        this.__ondisconnected(this);
      else if (Array.isArray(this.__ondisconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__ondisconnected.forEach(fn);
      }
    }
  };
  var Graph2 = class {
    constructor(options) {
      this.__node = { tag: `graph${Math.floor(Math.random() * 1e15)}`, unique: `${Math.random()}`, nodes: /* @__PURE__ */ new Map(), state: state2, roots: {} };
      this.init = (options2) => {
        if (options2) {
          let cpy = Object.assign({}, options2);
          delete cpy.roots;
          recursivelyAssign3(this.__node, cpy);
          if (options2.roots)
            this.load(options2.roots);
        }
      };
      this.load = (roots) => {
        function recursivelyAssignChildren(target, obj, inChildren = true, top = true) {
          if (top) {
            if (target)
              Object.assign(target, obj);
            else
              target = Object.assign({}, obj);
            recursivelyAssignChildren(target, obj, true, false);
          }
          if (obj.__children && !inChildren) {
            if (obj.__children?.constructor.name === "Object") {
              if (target.__children?.constructor.name === "Object")
                recursivelyAssignChildren(target.__children, obj.__children, true, false);
              else
                target.__children = recursivelyAssignChildren({}, obj.__children, true, false);
            } else {
              target.__children = obj.__children;
            }
          } else if (inChildren) {
            for (const key in obj) {
              target[key] = Object.assign({}, obj[key]);
              if (obj[key].__children) {
                recursivelyAssignChildren({}, obj[key].__children, false, false);
              }
            }
          }
          return target;
        }
        this.__node.roots = recursivelyAssignChildren(this.__node.roots ? this.__node.roots : {}, roots);
        let cpy = Object.assign({}, roots);
        if (cpy.__node)
          delete cpy.__node;
        let listeners = this.recursiveSet(cpy, this, void 0, roots);
        if (roots.__node) {
          if (!roots.__node.tag)
            roots.__node._tag = `roots${Math.floor(Math.random() * 1e15)}`;
          else if (!this.get(roots.__node.tag)) {
            let node = new GraphNode2(roots, this, this);
            this.set(node.__node.tag, node);
            this.runLoaders(node, this, roots, roots.__node.tag);
            if (node.__listeners) {
              listeners[node.__node.tag] = node.__listeners;
            }
          }
        } else if (roots.__listeners) {
          this.setListeners(roots.__listeners);
        }
        this.setListeners(listeners);
        return cpy;
      };
      this.setLoaders = (loaders22, replace) => {
        if (replace)
          this.__node.loaders = loaders22;
        else
          Object.assign(this.__node.loaders, loaders22);
        return this.__node.loaders;
      };
      this.runLoaders = (node, parent, properties, key) => {
        for (const l in this.__node.loaders) {
          if (typeof this.__node.loaders[l] === "object") {
            if (this.__node.loaders[l].init)
              this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
            if (this.__node.loaders[l].connected)
              node.__addOnconnected(this.__node.loaders[l].connect);
            if (this.__node.loaders[l].disconnected)
              node.__addOndisconnected(this.__node.loaders[l].disconnect);
          } else if (typeof this.__node.loaders[l] === "function")
            this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
        }
      };
      this.add = (properties, parent) => {
        let listeners = {};
        if (typeof parent === "string")
          parent = this.get(parent);
        let instanced;
        if (typeof properties === "function") {
          if (isNativeClass2(properties)) {
            if (properties.prototype instanceof GraphNode2) {
              properties = properties.prototype.constructor(properties, parent, this);
              instanced = true;
            } else
              properties = new properties();
          } else
            properties = { __operator: properties };
        } else if (typeof properties === "string") {
          properties = this.__node.roots[properties];
        }
        if (!properties)
          return;
        if (!instanced) {
          let keys4 = Object.getOwnPropertyNames(properties);
          let cpy = {};
          for (const key of keys4) {
            cpy[key] = properties[key];
          }
          properties = cpy;
        }
        if (!properties.__node)
          properties.__node = {};
        properties.__node.initial = properties;
        if (typeof properties === "object" && (!properties?.__node?.tag || !this.get(properties.__node.tag))) {
          let node;
          if (instanced)
            node = properties;
          else
            node = new GraphNode2(properties, parent, this);
          this.set(node.__node.tag, node);
          this.runLoaders(node, parent, properties, node.__node.tag);
          this.__node.roots[node.__node.tag] = properties;
          if (node.__children) {
            node.__children = Object.assign({}, node.__children);
            this.recursiveSet(node.__children, node, listeners, node.__children);
          }
          if (node.__listeners) {
            listeners[node.__node.tag] = Object.assign({}, node.__listeners);
            for (const key in node.__listeners) {
              let listener = node.__listeners[key];
              if (node[key]) {
                delete listeners[node.__node.tag][key];
                listeners[node.__node.tag][node.__node.tag + "." + key] = listener;
              }
              if (typeof listener === "string") {
                if (node.__children?.[listener]) {
                  listeners[node.__node.tag][key] = node.__node.tag + "." + listener;
                } else if (parent instanceof GraphNode2 && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                  listeners[node.__node.tag][key] = parent.__node.tag;
                }
              }
            }
          }
          this.setListeners(listeners);
          node.__callConnected();
          return node;
        }
        return;
      };
      this.recursiveSet = (t3, parent, listeners = {}, origin) => {
        let keys4 = Object.getOwnPropertyNames(origin);
        for (const key of keys4) {
          if (key.includes("__"))
            continue;
          let p2 = origin[key];
          if (Array.isArray(p2))
            continue;
          let instanced;
          if (typeof p2 === "function") {
            if (isNativeClass2(p2)) {
              p2 = new p2();
              if (p2 instanceof GraphNode2) {
                p2 = p2.prototype.constructor(p2, parent, this);
                instanced = true;
              }
            } else
              p2 = { __operator: p2 };
          } else if (typeof p2 === "string") {
            if (this.__node.nodes.get(p2))
              p2 = this.__node.nodes.get(p2);
            else
              p2 = this.__node.roots[p2];
          } else if (typeof p2 === "boolean") {
            if (this.__node.nodes.get(key))
              p2 = this.__node.nodes.get(key);
            else
              p2 = this.__node.roots[key];
          }
          if (typeof p2 === "object") {
            if (!instanced && !(p2 instanceof GraphNode2)) {
              let keys22 = Object.getOwnPropertyNames(p2);
              let cpy = {};
              for (const key2 of keys22) {
                cpy[key2] = p2[key2];
              }
              p2 = cpy;
            }
            if (!p2.__node)
              p2.__node = {};
            if (!p2.__node.tag)
              p2.__node.tag = key;
            if (!p2.__node.initial)
              p2.__node.initial = t3[key];
            if (this.get(p2.__node.tag) && !(!(parent instanceof Graph2) && parent?.__node) || parent?.__node && this.get(parent.__node.tag + "." + p2.__node.tag))
              continue;
            let node;
            let newnode = false;
            if (instanced || p2 instanceof GraphNode2) {
              node = p2;
            } else {
              node = new GraphNode2(p2, parent, this);
              newnode = true;
            }
            if (!newnode && p2 instanceof GraphNode2 && !instanced && parent instanceof GraphNode2) {
              let sub = this.subscribe(parent.__node.tag, node.__node.tag);
              let ondelete = (node2) => {
                this.unsubscribe(parent.__node.tag, sub);
              };
              node.__addOndisconnected(ondelete);
            } else {
              this.set(node.__node.tag, node);
              this.runLoaders(node, parent, t3[key], key);
              t3[key] = node;
              this.__node.roots[node.__node.tag] = p2;
              if (node.__children) {
                node.__children = Object.assign({}, node.__children);
                this.recursiveSet(node.__children, node, listeners, node.__children);
              }
              if (node.__listeners) {
                listeners[node.__node.tag] = Object.assign({}, node.__listeners);
                for (const key2 in node.__listeners) {
                  let listener = node.__listeners[key2];
                  let k = key2;
                  if (node[key2]) {
                    delete listeners[node.__node.tag][key2];
                    k = node.__node.tag + "." + key2;
                    listeners[node.__node.tag][k] = listener;
                  }
                  if (typeof listener === "string") {
                    if (node.__children?.[listener]) {
                      listeners[node.__node.tag][k] = node.__node.tag + "." + listener;
                    } else if (parent instanceof GraphNode2 && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                      listeners[node.__node.tag][k] = parent.__node.tag;
                    }
                  }
                }
              }
              node.__callConnected();
            }
          }
        }
        return listeners;
      };
      this.remove = (node, clearListeners = true) => {
        this.unsubscribe(node);
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode2) {
          this.delete(node.__node.tag);
          delete this.__node.roots[node.__node.tag];
          if (clearListeners) {
            this.clearListeners(node);
          }
          node.__callDisconnected();
          const recursiveRemove = (t3) => {
            for (const key in t3) {
              this.unsubscribe(t3[key]);
              this.delete(t3[key].__node.tag);
              delete this.__node.roots[t3[key].__node.tag];
              this.delete(key);
              delete this.__node.roots[key];
              t3[key].__node.tag = t3[key].__node.tag.substring(t3[key].__node.tag.lastIndexOf(".") + 1);
              if (clearListeners) {
                this.clearListeners(t3[key]);
              }
              t3[key].__callDisconnected();
              if (t3[key].__children) {
                recursiveRemove(t3[key].__children);
              }
            }
          };
          if (node.__children) {
            recursiveRemove(node.__children);
          }
        }
        if (node?.__node.tag && node?.__parent) {
          delete node?.__parent;
          node.__node.tag = node.__node.tag.substring(node.__node.tag.indexOf(".") + 1);
        }
        if (node?.__node.graph)
          node.__node.graph = void 0;
        return node;
      };
      this.run = (node, ...args) => {
        if (typeof node === "string") {
          let nd = this.get(node);
          if (!nd && node.includes(".")) {
            nd = this.get(node.substring(0, node.lastIndexOf(".")));
            if (typeof nd?.[node.substring(node.lastIndexOf(".") + 1)] === "function")
              return nd[node.substring(node.lastIndexOf(".") + 1)](...args);
          } else if (nd?.__operator)
            return nd.__operator(...args);
        }
        if (node?.__operator) {
          return node?.__operator(...args);
        }
      };
      this.setListeners = (listeners) => {
        for (const key in listeners) {
          let node = this.get(key);
          if (!node)
            continue;
          if (typeof listeners[key] === "object") {
            for (const k in listeners[key]) {
              let n = this.get(k);
              let sub;
              if (typeof listeners[key][k] !== "object")
                listeners[key][k] = { __callback: listeners[key][k] };
              else if (!listeners[key][k].__callback) {
                for (const kk in listeners[key][k]) {
                  if (typeof listeners[key][k][kk] !== "object") {
                    listeners[key][k][kk] = { __callback: listeners[key][k][kk] };
                    if (node.__operator && (listeners[key][k][kk].__callback === true || typeof listeners[key][k][kk].__callback === "undefined"))
                      listeners[key][k][kk].__callback = node.__operator;
                  }
                  let nn = this.get(kk);
                  if (!nn) {
                    let tag = k.substring(0, k.lastIndexOf("."));
                    nn = this.get(tag);
                    if (nn) {
                      let prop = k.substring(k.lastIndexOf(".") + 1);
                      if (typeof node.__listeners[k][kk] !== "object")
                        node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState, target: key, bound: k };
                      sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k][kk].__args, prop, listeners[key][k][kk].inputState, key, k);
                      node.__listeners[k][kk].sub = sub;
                    }
                  } else {
                    if (typeof node.__listeners[k][kk] !== "object")
                      node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState, target: key, bound: k };
                    sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                    node.__listeners[k][kk].sub = sub;
                  }
                }
              }
              if ("__callback" in listeners[key][k]) {
                if (listeners[key][k].__callback === true || typeof listeners[key][k].__callback === "undefined")
                  listeners[key][k].__callback = node.__operator;
                if (typeof listeners[key][k].__callback === "function")
                  listeners[key][k].__callback = listeners[key][k].__callback.bind(node);
                if (typeof node.__listeners !== "object")
                  node.__listeners = {};
                if (!n) {
                  let tag = k.substring(0, k.lastIndexOf("."));
                  n = this.get(tag);
                  if (n) {
                    if (typeof node.__listeners[k] !== "object")
                      node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState, target: key, bound: k };
                    sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, k.substring(k.lastIndexOf(".") + 1), listeners[key][k].inputState, key, k);
                    node.__listeners[k].sub = sub;
                  }
                } else {
                  if (typeof node.__listeners[k] !== "object")
                    node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState, target: key, bound: k };
                  sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                  node.__listeners[k].sub = sub;
                }
              }
            }
          }
        }
      };
      this.clearListeners = (node, listener) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node?.__listeners) {
          for (const key in node.__listeners) {
            if (listener && key !== listener)
              continue;
            if (typeof node.__listeners[key]?.sub !== "number")
              continue;
            let n = this.get(key);
            if (!n) {
              n = this.get(key.substring(0, key.lastIndexOf(".")));
              if (n) {
                if (typeof node.__listeners[key] === "object" && !node.__listeners[key]?.__callback) {
                  for (const k in node.__listeners[key]) {
                    if (typeof node.__listeners[key][k]?.sub === "number") {
                      this.unsubscribe(n, node.__listeners[key][k].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key][k].inputState);
                      node.__listeners[key][k].sub = void 0;
                    }
                  }
                } else if (typeof node.__listeners[key]?.sub === "number") {
                  this.unsubscribe(n, node.__listeners[key].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key].inputState);
                  node.__listeners[key].sub = void 0;
                }
              }
            } else {
              if (typeof !node.__listeners[key]?.__callback === "number") {
                for (const k in node.__listeners[key]) {
                  if (node.__listeners[key][k]?.sub) {
                    this.unsubscribe(n, node.__listeners[key][k].sub, void 0, node.__listeners[key][k].inputState);
                    node.__listeners[key][k].sub = void 0;
                  }
                }
              } else if (typeof node.__listeners[key]?.sub === "number") {
                this.unsubscribe(n, node.__listeners[key].sub, void 0, node.__listeners[key].inputState);
                node.__listeners[key].sub = void 0;
              }
            }
          }
        }
      };
      this.get = (tag) => {
        return this.__node.nodes.get(tag);
      };
      this.set = (tag, node) => {
        return this.__node.nodes.set(tag, node);
      };
      this.delete = (tag) => {
        return this.__node.nodes.delete(tag);
      };
      this.getProps = (node, getInitial) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode2) {
          let cpy;
          if (getInitial)
            cpy = Object.assign({}, this.__node.roots[node.__node.tag]);
          else {
            cpy = Object.assign({}, node);
            for (const key in cpy) {
              if (key.includes("__"))
                delete cpy[key];
            }
          }
        }
      };
      this.subscribe = (nodeEvent, onEvent, args, key, subInput, target, bound) => {
        let nd = nodeEvent;
        if (typeof nodeEvent === "string") {
          nd = this.get(nodeEvent);
          if (!nd && nodeEvent.includes(".")) {
            nd = this.get(nodeEvent.substring(0, nodeEvent.lastIndexOf(".")));
            key = nodeEvent.substring(nodeEvent.lastIndexOf(".") + 1);
          }
        }
        if (target instanceof GraphNode2)
          target = target.__node.tag;
        if (typeof onEvent === "string") {
          let key2 = onEvent;
          let setOnEventFromString = (onEvent2) => {
            if (this.get(onEvent2)?.__operator) {
              let node = this.get(onEvent2);
              onEvent2 = function(...inp) {
                return node.__operator(...inp);
              };
            } else if (onEvent2.includes(".")) {
              let n = this.get(onEvent2.substring(0, onEvent2.lastIndexOf(".")));
              let key3 = onEvent2.substring(onEvent2.lastIndexOf(".") + 1);
              if (typeof n[key3] === "function") {
                if (n[key3] instanceof GraphNode2)
                  onEvent2 = n[key3];
                else
                  onEvent2 = function(...inp) {
                    return n[key3](...inp);
                  };
              } else {
                onEvent2 = function(inp) {
                  n[key3] = inp;
                  return n[key3];
                };
              }
            }
            return onEvent2;
          };
          if (target) {
            let node = this.get(target);
            if (typeof node?.[onEvent] === "function") {
              onEvent = function(...inp) {
                return node[key2](...inp);
              };
            } else if (node[key2]) {
              if (node[key2] instanceof GraphNode2)
                onEvent = node[key2];
              else
                onEvent = function(inp) {
                  node[key2] = inp;
                  return node[key2];
                };
            } else {
              onEvent = setOnEventFromString(onEvent);
            }
          } else {
            onEvent = setOnEventFromString(onEvent);
          }
        }
        if ((typeof onEvent === "function" || onEvent instanceof GraphNode2) && args) {
          if (onEvent instanceof GraphNode2 && onEvent.__operator)
            onEvent = function(inp) {
              return onEvent.__operator(inp);
            };
          onEvent = wrapArgs2(onEvent, args, this);
        }
        let sub;
        if (nd instanceof GraphNode2) {
          const doSub = () => {
            sub = nd.__subscribe(onEvent, key, subInput, target, bound);
            if (target && this.get(target) && this.get(target).__listeners[bound]) {
              if (typeof this.get(target).__listeners[bound] !== "object") {
                this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
              }
            }
            this.get(target).__listeners[bound].sub = sub;
            let ondelete = () => {
              if (sub !== void 0)
                nd.__unsubscribe(sub, key, subInput);
              sub = void 0;
            };
            nd.__addOndisconnected(() => {
              ondelete();
              nd.__addOnconnected(() => {
                if (sub === void 0 && nd.__node.graph.__node.tag === this.__node.tag)
                  doSub();
              });
            });
            if (typeof onEvent === "string" && this.get(onEvent))
              onEvent = this.get(onEvent);
            if (onEvent instanceof GraphNode2) {
              onEvent.__addOndisconnected(() => {
                ondelete();
              });
            }
          };
          doSub();
        } else if (typeof nodeEvent === "string") {
          let node = this.get(nodeEvent);
          if (node) {
            if (onEvent instanceof GraphNode2 && onEvent.__operator) {
              const doSub = () => {
                sub = node.__subscribe(onEvent.__operator, key, subInput, target, bound);
                if (target && this.get(target) && this.get(target).__listeners[bound]) {
                  if (typeof this.get(target).__listeners[bound] !== "object") {
                    this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
                  }
                  this.get(target).__listeners[bound].sub = sub;
                }
                let ondelete = () => {
                  if (sub !== void 0)
                    node.__unsubscribe(sub, key, subInput);
                };
                node.__addOndisconnected(() => {
                  ondelete();
                  node.__addOnconnected(() => {
                    if (sub === void 0 && node.__node.graph.__node.tag === this.__node.tag)
                      doSub();
                  });
                });
                onEvent.__addOndisconnected(ondelete);
              };
              doSub();
            } else if (typeof onEvent === "function" || typeof onEvent === "string") {
              const doSub = () => {
                sub = node.__subscribe(onEvent, key, subInput, target, bound);
                if (target && this.get(target) && this.get(target).__listeners[bound]) {
                  if (typeof this.get(target).__listeners[bound] !== "object") {
                    this.get(target).__listeners[bound] = this.get(target).__node.state.getEvent(bound);
                  }
                  this.get(target).__listeners[bound].sub = sub;
                }
                let ondelete = () => {
                  if (sub !== void 0)
                    node.__unsubscribe(sub, key, subInput);
                  sub = void 0;
                };
                node.__addOndisconnected(() => {
                  ondelete();
                  node.__addOnconnected(() => {
                    if (sub === void 0 && node.__node.graph.__node.tag === this.__node.tag)
                      doSub();
                  });
                });
                if (typeof onEvent === "string" && this.get(onEvent))
                  this.get(onEvent).__addOndisconnected(ondelete);
                this.__node.state.getEvent(node.__node.unique, sub).source = nodeEvent;
              };
              doSub();
            }
          } else {
            if (typeof onEvent === "string")
              onEvent = this.__node.nodes.get(onEvent).__operator;
            if (typeof onEvent === "function")
              sub = this.__node.state.subscribeEvent(nodeEvent, onEvent);
          }
        }
        return sub;
      };
      this.unsubscribe = (node, sub, key, subInput) => {
        if (node instanceof GraphNode2) {
          return node.__unsubscribe(sub, key, subInput);
        } else
          return this.get(node)?.__unsubscribe(sub, key, subInput);
      };
      this.setState = (update) => {
        this.__node.state.setState(update);
      };
      this.init(options);
    }
  };
  function recursivelyAssign3(target, obj) {
    for (const key in obj) {
      if (obj[key]?.constructor.name === "Object") {
        if (target[key]?.constructor.name === "Object")
          recursivelyAssign3(target[key], obj[key]);
        else
          target[key] = recursivelyAssign3({}, obj[key]);
      } else {
        target[key] = obj[key];
      }
    }
    return target;
  }
  function getAllProperties2(obj) {
    var allProps = [], curr = obj;
    do {
      var props = Object.getOwnPropertyNames(curr);
      let fn = function(prop) {
        if (allProps.indexOf(prop) === -1)
          allProps.push(prop);
      };
      props.forEach(fn);
    } while (curr = Object.getPrototypeOf(curr));
    return allProps;
  }
  function isNativeClass2(thing) {
    return isFunction2(thing) === "class";
  }
  function isFunction2(x3) {
    const res2 = typeof x3 === "function" ? x3.prototype ? Object.getOwnPropertyDescriptor(x3, "prototype")?.writable ? "function" : "class" : x3.constructor.name === "AsyncFunction" ? "async" : "arrow" : "";
    return res2;
  }
  var wrapArgs2 = (callback, argOrder, graph3) => {
    let args = [];
    let getCallbackFromString = (a) => {
      if (graph3.get(a)?.__operator) {
        let node = graph3.get(a);
        return (...inp) => {
          node.__operator(...inp);
        };
      } else if (a.includes(".")) {
        let split = a.split(".");
        let popped = split.pop();
        let joined = split.join(".");
        let node = graph3.get(joined);
        if (typeof graph3.get(joined)?.[popped] === "function") {
          return (...inp) => {
            return node[popped](...inp);
          };
        } else
          return () => {
            return node[popped];
          };
      } else if (graph3.get(a)) {
        let node = graph3.get(a);
        return () => {
          return node;
        };
      } else {
        let arg = a;
        return () => {
          return arg;
        };
      }
    };
    let forArg = (a, i4) => {
      if (a === "__output" || a === "__input") {
        args[i4] = (inp) => {
          return inp;
        };
      } else if (typeof a === "string") {
        args[i4] = getCallbackFromString(a);
      } else if (typeof a === "function") {
        let fn2 = a;
        args[i4] = (...inp) => {
          return fn2(...inp);
        };
      } else if (typeof a === "object" && a.__input) {
        let recursivelyCreateCallback = function(c) {
          let input = c.__input;
          if (typeof c.__input === "string") {
            input = getCallbackFromString(c.__input);
          }
          if (c.__args) {
            input = wrapArgs2(input, c.__args, graph3);
          }
          if (c.__output) {
            let output = c.__output;
            if (typeof c.__output === "string") {
              output = getCallbackFromString(output);
            } else if (typeof a.__output === "object") {
              output = recursivelyCreateCallback(output);
            }
            if (typeof output === "function") {
              let fn2 = input;
              input = (...inp) => {
                return output(fn2(...inp));
              };
            }
          }
          return input;
        };
        args[i4] = recursivelyCreateCallback(a);
      } else {
        let arg = a;
        args[i4] = () => {
          return arg;
        };
      }
    };
    argOrder.forEach(forArg);
    if (typeof callback === "string")
      callback = getCallbackFromString(callback);
    let fn = callback;
    callback = function(...inp) {
      let mapArg = (arg) => {
        return arg(...inp);
      };
      return fn(...args.map(mapArg));
    };
    return callback;
  };
  var backprop2 = (node, parent, graph3) => {
    if (node.__node.backward && parent instanceof GraphNode2) {
      graph3.setListeners({ [parent.__node.tag]: { [node.__node.tag]: parent } });
    }
  };
  var loop2 = (node, parent, graph3) => {
    if (node.__operator && !node.__node.looperSet) {
      if (typeof node.__node.delay === "number") {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            setTimeout(async () => {
              res2(await fn(...args));
            }, node.__node.delay);
          });
        });
      } else if (node.__node.frame === true) {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            requestAnimationFrame(async () => {
              res2(await fn(...args));
            });
          });
        });
      }
      if (typeof node.__node.repeat === "number" || typeof node.__node.recursive === "number") {
        let fn = node.__operator;
        node.__setOperator(async (...args) => {
          let i4 = node.__node.repeat ? node.__node.repeat : node.__node.recursive;
          let result;
          let repeater = async (tick, ...inp) => {
            while (tick > 0) {
              if (node.__node.delay || node.__node.frame) {
                fn(...inp).then(async (res2) => {
                  if (node.__node.recursive) {
                    await repeater(tick, res2);
                  } else
                    await repeater(tick, ...inp);
                });
                break;
              } else
                result = await fn(...args);
              tick--;
            }
          };
          await repeater(i4, ...args);
          return result;
        });
      }
      if (node.__node.loop && typeof node.__node.loop === "number") {
        node.__node.looperSet = true;
        let fn = node.__operator;
        let time = node.__node.loop;
        node.__setOperator((...args) => {
          if (!("looping" in node.__node))
            node.__node.looping = true;
          if (node.__node.looping) {
            let last = performance.now();
            fn(...args);
            setTimeout(() => {
              let now = performance.now();
              let overshoot = now - last - node.__node.loop;
              if (overshoot > 0)
                time = node.__node.loop - overshoot;
              else
                time = node.__node.loop;
              if (time <= 0)
                time = node.__node.loop;
              node.__operator(...args);
            }, time);
          }
        });
        if (node.__node.looping)
          node.__operator();
        let ondelete = (node2) => {
          if (node2.__node.looping)
            node2.__node.looping = false;
        };
        node.__addOndisconnected(ondelete);
      }
    }
  };
  var animate2 = (node, parent, graph3) => {
    if (node.__node.animate === true || node.__animation) {
      let fn = node.__operator;
      node.__setOperator((...args) => {
        if (!("animating" in node.__node))
          node.__node.animating = true;
        if (node.__node.animating) {
          if (typeof node.__animation === "function")
            node.__animation(...args);
          else
            fn(...args);
          requestAnimationFrame(() => {
            node.__operator(...args);
          });
        }
      });
      if (node.__node.animating || (!("animating" in node.__node) || node.__node.animating) && node.__animation)
        setTimeout(() => {
          requestAnimationFrame(node.__operator);
        }, 10);
      let ondelete = (node2) => {
        if (node2.__node.animating)
          node2.__node.animating = false;
      };
      node.__addOndisconnected(ondelete);
    }
  };
  var branching2 = (node, parent, graph3) => {
    if (typeof node.__branch === "object" && node.__operator && !node.__branchApplied) {
      let fn = node.__operator;
      node.__branchApplied = true;
      node.__operator = (...args) => {
        let result = fn(...args);
        for (const key in node.__branch) {
          let triggered = () => {
            if (typeof node.__branch[key].then === "function") {
              node.__branch[key].then(result);
            } else if (node.__branch[key].then instanceof GraphNode2 && node.__branch[key].then.__operator) {
              node.__branch[key].then.__operator(result);
            } else
              result = node.__branch[key].then;
          };
          if (typeof node.__branch[key].if === "function") {
            if (node.__branch[key].if(result) == true) {
              triggered();
            }
          } else if (node.__branch[key].if === result) {
            triggered();
          }
        }
        return result;
      };
    }
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].branch && !node.__listeners[key].branchApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].branchApplied = true;
            node.__listeners.callback = (ret) => {
              let triggered = () => {
                if (typeof node.__listeners[key].branch.then === "function") {
                  ret = node.__listeners[key].branch.then(ret);
                } else if (node.__listeners[key].branch.then instanceof GraphNode2 && node.__listeners[key].branch.then.__operator) {
                  ret = node.__listeners[key].branch.then.__operator(ret);
                } else
                  ret = node.__listeners[key].branch.then;
              };
              if (typeof node.__listeners[key].branch.if === "function") {
                if (node.__listeners[key].branch.if(ret)) {
                  triggered();
                }
              } else if (node.__listeners[key].branch.if === ret) {
                triggered();
              }
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var triggerListenerOncreate2 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].oncreate) {
            node.__listeners[key].callback(node.__listeners[key].oncreate);
          }
        }
      }
    }
  };
  var bindListener2 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].binding === "object") {
            node.__listeners.callback = node.__listeners.callback.bind(node.__listeners[key].binding);
          }
        }
      }
    }
  };
  var transformListenerResult2 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].transform === "function" && !node.__listeners[key].transformApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].transformApplied = true;
            node.__listeners.callback = (ret) => {
              ret = node.__listeners[key].transform(ret);
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var substitute__operator2 = (node, parent, graph3) => {
    if (node.post && !node.__operator) {
      node.__setOperator(node.post);
    } else if (!node.__operator && typeof node.get == "function") {
      node.__setOperator(node.get);
    }
    if (!node.get && node.__operator) {
      node.get = node.__operator;
    }
    if (node.aliases) {
      node.aliases.forEach((a) => {
        graph3.set(a, node);
        let ondelete = (node2) => {
          graph3.__node.nodes.delete(a);
        };
        node.__addOndisconnected(ondelete);
      });
    }
    if (typeof graph3.__node.roots?.[node.__node.tag] === "object" && node.get)
      graph3.__node.roots[node.__node.tag].get = node.get;
  };
  var loaders2 = { backprop: backprop2, loop: loop2, animate: animate2, branching: branching2, triggerListenerOncreate: triggerListenerOncreate2, bindListener: bindListener2, transformListenerResult: transformListenerResult2, substitute__operator: substitute__operator2 };
  var Service2 = class extends Graph2 {
    constructor(options) {
      super({ ...options, loaders: options?.loaders ? Object.assign({ ...loaders2 }, options.loaders) : { ...loaders2 } });
      this.name = `service${Math.floor(Math.random() * 1e15)}`;
      this.addServices = (services) => {
        for (const s in services) {
          if (typeof services[s] === "function")
            services[s] = new services[s]();
          if (services[s]?.__node?.loaders)
            Object.assign(this.__node.loaders, services[s].__node.loaders);
          if (services[s]?.__node?.nodes) {
            services[s].__node.nodes.forEach((n, tag) => {
              if (!this.get(tag)) {
                this.set(tag, n);
              } else
                this.set(s + "." + tag, n);
            });
            this.__node.nodes.forEach((n, k) => {
              if (!services[s].__node.nodes.get(k))
                services[s].__node.nodes.set(k, n);
            });
            let set = this.set;
            this.set = (tag, node) => {
              services[s].set(tag, node);
              return set(tag, node);
            };
            let del = this.delete;
            this.delete = (tag) => {
              services[s].delete(tag);
              return del(tag);
            };
          } else if (typeof services[s] === "object") {
            this.load(services[s]);
          }
        }
      };
      this.handleMethod = (route, method, args) => {
        let m = method.toLowerCase();
        let src = this.__node.nodes.get(route);
        if (!src) {
          src = this.__node.roots[route];
        }
        if (src?.[m]) {
          if (typeof src[m] !== "function") {
            if (args) {
              if (Array.isArray(args) && args.length === 1)
                src[m] = args[0];
              else
                src[m] = args;
              return;
            }
            return src[m];
          } else {
            if (Array.isArray(args))
              return src[m](...args);
            else
              return src[m](args);
          }
        } else
          return this.handleServiceMessage({ route, args, method });
      };
      this.transmit = (...args) => {
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.receive = (...args) => {
        if (args[0]) {
          if (typeof args[0] === "string") {
            let substr = args[0].substring(0, 8);
            if (substr.includes("{") || substr.includes("[")) {
              if (substr.includes("\\"))
                args[0] = args[0].replace(/\\/g, "");
              if (args[0][0] === '"') {
                args[0] = args[0].substring(1, args[0].length - 1);
              }
              ;
              args[0] = JSON.parse(args[0]);
            }
          }
        }
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.pipe = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode2) {
          if (callback)
            return this.subscribe(source, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.subscribe(source, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.subscribe(source, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.pipeOnce = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode2) {
          if (callback)
            return source.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.terminate = (...args) => {
      };
      this.isTypedArray = isTypedArray2;
      this.recursivelyAssign = recursivelyAssign22;
      this.spliceTypedArray = spliceTypedArray2;
      this.ping = () => {
        console.log("pinged!");
        return "pong";
      };
      this.echo = (...args) => {
        this.transmit(...args);
        return args;
      };
      this.log = (...args) => {
        console.log(...args);
        return true;
      };
      this.error = (...args) => {
        console.error(...args);
        return true;
      };
      if (options?.services)
        this.addServices(options.services);
      this.load(this);
    }
    handleServiceMessage(message) {
      let call;
      if (typeof message === "object") {
        if (message.route)
          call = message.route;
        else if (message.node)
          call = message.node;
      }
      if (call) {
        if (Array.isArray(message.args))
          return this.run(call, ...message.args);
        else
          return this.run(call, message.args);
      } else
        return message;
    }
    handleGraphNodeCall(route, args) {
      if (!route)
        return args;
      if (args?.args) {
        this.handleServiceMessage(args);
      } else if (Array.isArray(args))
        return this.run(route, ...args);
      else
        return this.run(route, args);
    }
  };
  function isTypedArray2(x3) {
    return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
  }
  var recursivelyAssign22 = (target, obj) => {
    for (const key in obj) {
      if (obj[key]?.constructor.name === "Object" && !Array.isArray(obj[key])) {
        if (target[key]?.constructor.name === "Object" && !Array.isArray(target[key]))
          recursivelyAssign22(target[key], obj[key]);
        else
          target[key] = recursivelyAssign22({}, obj[key]);
      } else
        target[key] = obj[key];
    }
    return target;
  };
  function spliceTypedArray2(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let ta;
    if (s.length > 0 || e?.length > 0)
      ta = new arr.constructor(s.length + e.length);
    if (ta) {
      if (s.length > 0)
        ta.set(s);
      if (e && e.length > 0)
        ta.set(e, s.length);
    }
    return ta;
  }
  var randomId = (prefix) => (prefix ? `${prefix}` : "") + Math.floor(1e15 * Math.random());
  var StructFrontend = class extends Service2 {
    constructor(options, user) {
      super(options);
      this.name = "structs";
      this.tablet = new DataTablet();
      this.collections = this.tablet.collections;
      this.id = randomId();
      this.baseServerCallback = (data) => {
        let structs = data;
        if (typeof data === "object" && data?.structType)
          structs = [data];
        if (Array.isArray(structs)) {
          let filtered = structs.filter((o) => {
            if (o.structType !== "notification")
              return true;
          });
          if (this.tablet)
            this.tablet.sortStructsIntoTable(filtered);
          structs.forEach((struct) => {
            if (typeof struct === "object") {
              if (!struct.structType || struct.structType === "USER") {
                if (struct.email)
                  struct.structType = "user";
                else
                  struct.structType = "uncategorized";
              }
              if (struct.structType === "user" || struct.structType === "authorization" || struct.structType === "group") {
                if (struct.structType === "user") {
                  struct._id = struct.id;
                } else if (struct.structType === "group") {
                  if (this.currentUser) {
                    let uset = false;
                    if (struct.admins[this.currentUser?._id] && !this.currentUser.userRoles?.[struct.name + "_admin"]) {
                      this.currentUser.userRoles[struct.name + "_admin"] = true;
                      uset = true;
                    } else if (!struct.admins[this.currentUser?._id] && this.currentUser.userRoles?.[struct.name + "_admin"]) {
                      delete this.currentUser.userRoles[struct.name + "_admin"];
                      uset = true;
                    }
                    if (struct.admins[this.currentUser?._id] && !this.currentUser.userRoles?.[struct.name + "_peer"]) {
                      this.currentUser.userRoles[struct.name + "_peer"] = true;
                      uset = true;
                    } else if (!struct.admins[this.currentUser?._id] && this.currentUser.userRoles?.[struct.name + "_peer"]) {
                      delete this.currentUser.userRoles[struct.name + "_peer"];
                      uset = true;
                    }
                    if (struct.admins[this.currentUser?._id] && !this.currentUser.userRoles?.[struct.name + "_client"]) {
                      this.currentUser.userRoles[struct.name + "_client"] = true;
                      uset = true;
                    } else if (!struct.admins[this.currentUser?._id] && this.currentUser.userRoles?.[struct.name + "_client"]) {
                      delete this.currentUser.userRoles[struct.name + "_client"];
                      uset = true;
                    }
                    if (uset)
                      this.setUser(this.currentUser);
                  }
                }
                this.setLocalData(struct);
              } else {
                if (struct.structType === "notification") {
                  let found = this.getLocalData("notification", { "ownerId": struct.ownerId, "_id": struct.parent._id });
                  if (found) {
                    this.setLocalData(struct);
                  } else {
                    if (this.getLocalData(struct.structType, { "_id": struct.parent._id })) {
                    } else {
                      this.overwriteLocalData(struct);
                    }
                  }
                  if (struct.ownerId === this.currentUser?._id && (struct.parent.structType === "user" || struct.parent.structType === "dataInstance" || struct.parent.structType === "schedule" || struct.parent.structType === "authorization")) {
                    this.resolveNotifications([struct], true);
                  }
                } else {
                  this.overwriteLocalData(struct);
                }
              }
            }
          });
        }
        if (data?.message === "notifications") {
          this.checkForNotifications();
        }
        if (data?.message === "deleted") {
          this.deleteLocalData(data.data);
        }
        this.onResult(data);
      };
      this.getUser = async (info = "", callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getUser", args: [this.currentUser._id, info] });
          callback(res2);
          return res2;
        }
      };
      this.getUsers = async (ids = [], callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getUsersByIds", args: [this.currentUser._id, ids] });
          callback(res2);
          return res2;
        }
      };
      this.getUsersByRole = async (userRole, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getUsersByRole", args: [this.currentUser._id, userRole] });
          callback(res2);
          return res2;
        }
      };
      this.getAllUserData = async (ownerId, excluded = [], callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getAllData", args: [ownerId, excluded] });
          callback(res2);
          return res2;
        }
      };
      this.query = async (collection, queryObj = {}, findOne = false, skip = 0, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          if (!collection || !queryObj)
            return void 0;
          let res2 = await this.currentUser.request({ route: "query", args: [this.currentUser._id, collection, queryObj, findOne, skip] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.getData = async (collection, ownerId, searchDict, limit = 0, skip = 0, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getData", args: [this.currentUser._id, collection, ownerId, searchDict, limit, skip] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.getDataByIds = async (structIds = [], ownerId, collection, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getDataByIds", args: [this.currentUser._id, structIds, ownerId, collection] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.getStructParentData = async (struct, callback = this.baseServerCallback) => {
        if (!struct.parent)
          return;
        if (this.currentUser?.request) {
          let args = [this.currentUser._id, struct.parent?.structType, "_id", struct.parent?._id];
          let res2 = (await this.currentUser.request({ route: "getData", args }))?.[0];
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.setUser = async (userStruct = {}, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "setUser", args: [this.currentUser._id, this.stripStruct(userStruct)] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.checkUserToken = async (usertoken, user2 = this.currentUser, callback = this.baseServerCallback) => {
        if (!usertoken)
          return false;
        let changed = false;
        for (const prop in usertoken) {
          let dummystruct = this.userStruct();
          if (user2[prop] && prop !== "_id") {
            if (Array.isArray(usertoken[prop])) {
              for (let i4 = 0; i4 < user2[prop].length; i4++) {
                if (usertoken[prop].indexOf(user2[prop][i4]) < 0) {
                  user2[prop] = usertoken[prop];
                  changed = true;
                  break;
                }
              }
              if (!changed)
                for (let i4 = 0; i4 < usertoken[prop].length; i4++) {
                  if (user2[prop].indexOf(usertoken[prop][i4]) < 0) {
                    user2[prop] = usertoken[prop];
                    changed = true;
                    break;
                  }
                }
            } else if (user2[prop] !== usertoken[prop]) {
              user2[prop] = usertoken[prop];
              changed = true;
            }
          } else if (!user2[prop] && dummystruct[prop]) {
            user2[prop] = usertoken[prop];
            changed = true;
          }
        }
        if (changed)
          return await this.setUser(user2, callback);
        return changed;
      };
      this.setData = async (structs = [], notify = true, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          const copies = new Array();
          if (!Array.isArray(structs) && typeof structs === "object")
            structs = [structs];
          structs.forEach((struct) => {
            copies.push(this.stripStruct(struct));
          });
          let res2 = await this.currentUser.request({ route: "setData", args: [this.currentUser._id, copies, notify] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.updateServerData = this.setData;
      this.deleteData = async (structs = [], callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let toDelete = [];
          structs.forEach((struct) => {
            if (typeof struct === "object") {
              if (struct?.structType && struct?._id) {
                toDelete.push({ structType: struct.structType, _id: struct._id });
                this.deleteLocalData(struct);
              }
            } else if (typeof struct === "string") {
              let localstruct = this.getLocalData(void 0, { _id: struct });
              if (localstruct && !Array.isArray(localstruct)) {
                toDelete.push({ structType: localstruct.structType, _id: localstruct._id });
              } else {
                toDelete.push({ _id: struct });
              }
            }
          });
          let res2 = await this.currentUser.request({ route: "deleteData", args: [this.currentUser._id, toDelete] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.deleteUser = async (userId, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          if (!userId)
            return;
          let res2 = await this.currentUser.request({ route: "deleteUser", args: [this.currentUser._id, userId] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.setGroup = async (groupStruct = {}, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "setGroup", args: [this.currentUser._id, this.stripStruct(groupStruct)] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.getUserGroups = async (userId = this.currentUser._id, groupId = "", callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "getUserGroups", args: [this.currentUser._id, userId, groupId] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.deleteGroup = async (groupId, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          if (!groupId)
            return;
          this.deleteLocalData(groupId);
          let res2 = await this.currentUser.request({ route: "deleteGroup", args: [this.currentUser._id, groupId] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.setAuthorization = async (authorizationStruct = {}, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          let res2 = await this.currentUser.request({ route: "setAuthorization", args: [this.currentUser._id, this.stripStruct(authorizationStruct)] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.getAuthorizations = async (userId = this.currentUser?._id, authorizationId = "", callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          if (userId === void 0)
            return;
          let res2 = await this.currentUser.request({ route: "getAuthorizations", args: [this.currentUser._id, userId, authorizationId] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.deleteAuthorization = async (authorizationId, callback = this.baseServerCallback) => {
        if (this.currentUser?.request) {
          if (!authorizationId)
            return;
          this.deleteLocalData(authorizationId);
          let res2 = await this.currentUser.request({ route: "deleteAuthorization", args: [authorizationId] });
          if (typeof callback === "function")
            callback(res2);
          return res2;
        }
      };
      this.checkForNotifications = async (userId = this.currentUser?._id) => {
        return await this.getData("notification", userId);
      };
      this.resolveNotifications = async (notifications = [], pull = true, user2 = this.currentUser) => {
        if (!user2 || notifications.length === 0)
          return;
        let structIds = [];
        let notificationIds = [];
        let nTypes = [];
        let unote = false;
        if (notifications.length === 0)
          notifications = this.getLocalData("notification", { "ownerId": user2._id });
        notifications.forEach((struct) => {
          if (struct.parent.structType === "user")
            unote = true;
          nTypes.push(struct.parent.structType);
          structIds.push(struct.parent._id);
          notificationIds.push(struct._id);
          this.deleteLocalData(struct);
        });
        this.deleteData(notifications);
        if (pull) {
          nTypes.reverse().forEach((note, i4) => {
            if (note === "user") {
              this.getUser(structIds[i4]);
              structIds.splice(structIds.length - i4 - 1, 1);
            }
          });
          if (structIds.length === 1)
            return await this.getDataByIds(structIds, void 0, notifications[0].parent.structType);
          if (structIds.length > 0)
            return await this.getDataByIds(structIds);
        }
        return true;
      };
      this.setAuthorizationsByGroup = async (user2 = this.currentUser) => {
        let auths = this.getLocalData("authorization", { "ownerId": user2._id });
        let newauths = [];
        if (user2.userRoles)
          await Promise.all(Object.keys(user2.userRoles).map(async (role) => {
            let split = role.split("_");
            let team = split[0];
            let otherrole;
            if (role.includes("client")) {
              otherrole = team + "_peer";
            } else if (role.includes("peer")) {
              otherrole = team + "_client";
            } else if (role.includes("admin")) {
              otherrole = team + "_owner";
            }
            if (otherrole) {
              let users = await this.getUsersByRole(otherrole);
              if (users)
                await Promise.all(users.map(async (groupie) => {
                  let theirname = groupie.username;
                  if (!theirname)
                    theirname = groupie.email;
                  if (!theirname)
                    theirname = groupie._id;
                  let myname = user2.username;
                  if (!myname)
                    myname = user2.email;
                  if (!myname)
                    myname = user2._id;
                  if (theirname !== myname) {
                    if (role.includes("client")) {
                      let found = auths.find((a) => {
                        if (a.authorizerId === groupie._id && a.authorizedId === user2._id)
                          return true;
                      });
                      if (!found) {
                        let auth = await this.authorizeUser(DataStructures_exports.ProfileStruct("user", user2, user2), groupie._id, theirname, user2._id, myname, { "peer": true }, void 0, { group: team });
                        newauths.push(auth);
                      }
                    } else if (role.includes("peer")) {
                      let found = auths.find((a) => {
                        if (a.authorizedId === groupie._id && a.authorizerId === user2._id)
                          return true;
                      });
                      if (!found) {
                        let auth = await this.authorizeUser(DataStructures_exports.ProfileStruct("user", user2, user2), user2._id, myname, groupie._id, theirname, { "peer": true }, void 0, { group: team });
                        newauths.push(auth);
                      }
                    }
                  }
                }));
            }
          }));
        if (newauths.length > 0)
          return newauths;
        return void 0;
      };
      this.deleteRoom = async (roomStruct) => {
        if (!roomStruct)
          return false;
        let toDelete = [roomStruct];
        roomStruct.comments?.forEach((id) => {
          let struct = this.getLocalData("comment", { "_id": id });
          toDelete.push(struct);
        });
        if (roomStruct)
          return await this.deleteData(toDelete);
        else
          return false;
      };
      this.deleteComment = async (commentStruct) => {
        let allReplies = [commentStruct];
        let getRepliesRecursive = (head = commentStruct) => {
          if (head?.replies) {
            head.replies.forEach((replyId) => {
              let reply = this.getLocalData("comment", { "_id": replyId });
              if (reply) {
                if (reply.replies.length > 0) {
                  reply.replies.forEach((replyId2) => {
                    getRepliesRecursive(replyId2);
                  });
                }
                allReplies.push(reply);
              }
            });
          }
        };
        getRepliesRecursive(commentStruct);
        let parent = this.getLocalData(commentStruct.parent?.structType, { "_id": commentStruct.parent?._id });
        let toUpdate = [];
        if (parent) {
          toUpdate = [parent];
          allReplies.forEach((r) => {
            let idx = parent.replies?.indexOf(r._id);
            if (idx > -1)
              parent.replies.splice(idx, 1);
            let idx2 = parent.comments?.indexOf(r._id);
            if (idx2 > -1)
              parent.comments.splice(idx2, 1);
          });
        }
        let replyTo = this.getLocalData("comment", { "_id": commentStruct.replyTo });
        if (replyTo?._id !== parent?._id) {
          let idx = replyTo.replies?.indexOf(parent._id);
          if (idx > -1)
            replyTo.replies.splice(idx, 1);
          toUpdate.push(replyTo);
        }
        if (toUpdate.length > 0)
          await this.updateServerData(toUpdate);
        return await this.deleteData(allReplies);
      };
      this.getUserDataByAuthorization = async (authorizationStruct, collection, searchDict, limit = 0, skip = 0, callback = this.baseServerCallback) => {
        let u3 = authorizationStruct.authorizerId;
        if (u3) {
          return new Promise(async (resolve) => {
            this.getUser(u3, async (data) => {
              if (!collection)
                await this.getAllUserData(u3, ["notification"], callback);
              else
                await this.getData(collection, u3, searchDict, limit, skip, callback);
              resolve(data);
              callback(data);
            });
          });
        } else
          return void 0;
      };
      this.getUserDataByAuthorizationGroup = async (groupId = "", collection, searchDict, limit = 0, skip = 0, callback = this.baseServerCallback) => {
        let auths = this.getLocalData("authorization");
        let results = [];
        await Promise.all(auths.map(async (o) => {
          if (o.groups?.includes(groupId)) {
            let u3 = o.authorizerId;
            if (u3) {
              let data;
              let user2 = await this.getUser(u3, callback);
              if (user2)
                results.push(user2);
              if (!collection)
                data = await this.getAllUserData(u3, ["notification"], callback);
              else
                data = await this.getData(collection, u3, searchDict, limit, skip, callback);
              if (data)
                results.push(data);
            }
            return true;
          }
        }));
        return results;
      };
      this.getLocalUserPeerIds = (user2 = this.currentUser) => {
        if (!user2)
          return [];
        let result = [];
        let authorizations = this.getLocalData("authorization", user2._id);
        authorizations.forEach((a) => {
          if (a.authorizations["peer"] && a.authorizerId === user2._id)
            result.push(a.authorizedId);
        });
        return result;
      };
      this.authorizeUser = async (parentUser, authorizerUserId = "", authorizerUserName = "", authorizedUserId = "", authorizedUserName = "", authorizations = {}, structs = {}, excluded = {}, groups = {}, expires = false) => {
        if (!parentUser)
          return void 0;
        let newAuthorization = this.createStruct("authorization", void 0, parentUser, void 0);
        newAuthorization.authorizedId = authorizedUserId;
        newAuthorization.authorizedName = authorizedUserName;
        newAuthorization.authorizerId = authorizerUserId;
        newAuthorization.authorizerName = authorizerUserName;
        newAuthorization.authorizations = authorizations;
        newAuthorization.structs = structs;
        newAuthorization.excluded = excluded;
        newAuthorization.groups = groups;
        newAuthorization.expires = expires;
        newAuthorization.status = "PENDING";
        newAuthorization.associatedAuthId = "";
        newAuthorization.ownerId = parentUser._id;
        newAuthorization = await this.setAuthorization(newAuthorization);
        return newAuthorization;
      };
      this.addGroup = async (parentUser, name2 = "", details = "", admins = {}, peers = {}, clients = {}, updateServer = true) => {
        if (!parentUser)
          return void 0;
        let newGroup = this.createStruct("group", void 0, parentUser);
        newGroup.name = name2;
        newGroup.details = details;
        newGroup.admins = admins;
        newGroup.peers = peers;
        newGroup.clients = clients;
        newGroup.users = {};
        Object.assign(newGroup.users, newGroup.admins);
        Object.assign(newGroup.users, newGroup.peers);
        Object.assign(newGroup.users, newGroup.clients);
        newGroup.ownerId = parentUser._id;
        if (updateServer) {
          newGroup = await this.setGroup(newGroup);
        }
        return newGroup;
      };
      this.addData = async (parentUser, author = "", title = "", type = "", data = [], expires = false, updateServer = true) => {
        if (!parentUser)
          return void 0;
        let newDataInstance = this.createStruct("dataInstance", void 0, parentUser);
        newDataInstance.author = author;
        newDataInstance.title = title;
        newDataInstance.type = type;
        newDataInstance.data = data;
        newDataInstance.expires = expires;
        newDataInstance.ownerId = parentUser._id;
        if (updateServer)
          newDataInstance = await this.updateServerData([newDataInstance])[0];
        return newDataInstance;
      };
      this.addEvent = async (parentUser, author = "", event = "", notes = "", startTime = 0, endTime = 0, grade = 0, attachments = [], users = {}, updateServer = true) => {
        if (!parentUser)
          return void 0;
        if (Object.keys(users).length === 0)
          users = this.getLocalUserPeerIds(parentUser);
        let newEvent = this.createStruct("event", void 0, parentUser);
        newEvent.author = author;
        newEvent.event = event;
        newEvent.notes = notes;
        newEvent.startTime = startTime;
        newEvent.endTime = endTime;
        newEvent.grade = grade;
        newEvent.attachments = attachments;
        newEvent.users = users;
        newEvent.ownerId = parentUser._id;
        if (updateServer)
          newEvent = await this.updateServerData([newEvent])[0];
        return newEvent;
      };
      this.addChatroom = async (parentUser, authorId = "", message = "", attachments = [], users = {}, updateServer = true) => {
        if (!parentUser)
          return void 0;
        if (Object.keys(users).length === 0)
          users = this.getLocalUserPeerIds(parentUser);
        let newChatroom = this.createStruct("chatroom", void 0, parentUser);
        newChatroom.message = message;
        newChatroom.attachments = attachments;
        newChatroom.authorId = authorId;
        newChatroom.users = users;
        newChatroom.replies = [];
        newChatroom.comments = [];
        newChatroom.ownerId = parentUser._id;
        let update = [newChatroom];
        if (updateServer)
          newChatroom = await this.updateServerData(update)[0];
        return newChatroom;
      };
      this.addComment = async (parentUser, roomStruct, replyTo, authorId = "", message = "", attachments = [], updateServer = true) => {
        if (!roomStruct)
          return void 0;
        if (!replyTo)
          replyTo = roomStruct;
        if (!parentUser)
          return void 0;
        let newComment = this.createStruct("comment", void 0, parentUser, roomStruct);
        newComment.authorId = authorId;
        newComment.replyTo = replyTo?._id;
        newComment.message = message;
        newComment.attachments = attachments;
        newComment.users = roomStruct?.users;
        newComment.replies = [];
        newComment.ownerId = parentUser._id;
        if (!updateServer)
          replyTo?.replies.push(newComment._id);
        if (!updateServer)
          roomStruct?.comments.push(newComment._id);
        let update = [newComment, roomStruct];
        if (replyTo?._id !== roomStruct._id)
          update.push(replyTo);
        let res2;
        if (updateServer)
          res2 = await this.updateServerData(update);
        let updatedComment;
        if (typeof res2 === "object") {
          updatedComment = res2.find((s) => {
            if (newComment.ownerId === s.ownerId && newComment.timestamp === s.timestamp && newComment.message === s.message) {
              return true;
            }
          });
        }
        if (updatedComment)
          return updatedComment;
        return res2;
      };
      this.load(this);
      if (user instanceof Object && Object.keys(user).length > 0)
        this.setupUser(user);
    }
    async setupUser(userinfo, callback = (currentUser) => {
    }) {
      if (!userinfo) {
        console.error('must provide a minimum info object! e.g. {_id:"abc123"}');
        callback(void 0);
        return void 0;
      }
      let changed = false;
      if (userinfo.id && !userinfo._id)
        userinfo._id = userinfo.id;
      else if (userinfo._id)
        userinfo.id = userinfo._id;
      let res2 = await this.getUser(userinfo._id);
      let user = res2?.user;
      let u3;
      let newu = false;
      if (!user || !user._id) {
        u3 = this.userStruct(userinfo, false);
        newu = true;
        let wasSet = await this.setUser(u3);
        let structs = this.getLocalData(void 0, { "ownerId": u3._id });
        if (structs?.length > 0)
          this.updateServerData(structs);
        this.setAuthorizationsByGroup(u3);
      } else {
        u3 = user;
        if (res2?.authorizations) {
          if (Array.isArray(res2.authorizations)) {
            this.setLocalData(res2.authorizations);
          }
        }
        if (res2?.groups) {
          if (Array.isArray(res2.groups)) {
            this.setLocalData(res2.groups);
          }
        }
      }
      if (newu) {
        this.setLocalData(u3);
      } else {
        let data = await this.getAllUserData(u3._id, void 0);
        if (!data || data.length === 0) {
        } else {
          this.setLocalData(data);
          let notes = data.filter((s) => {
            if (s.structType === "notification") {
              if (this.getLocalData("authorization", s.parent._id)) {
                return true;
              }
              if (s.parent.structType === "user" || s.parent.structType === "authorization") {
                return true;
              }
              if (!this.getLocalData(s.parent.structType, s.parent._id))
                return true;
            }
          });
          let comments = data.filter((s) => {
            if (s.structType === "comment") {
              return true;
            }
          });
          let toDelete = [];
          comments.forEach((comment) => {
            if (!this.getLocalData("comment", { "_id": comment._id }))
              toDelete.push(comment._id);
          });
          if (toDelete.length > 0)
            this.deleteData(toDelete);
          if (notes.length > 0) {
            this.resolveNotifications(notes, false, void 0);
            changed = true;
          }
          let filtered = data.filter((o) => {
            if (o.structType !== "notification")
              return true;
          });
          if (this.tablet)
            this.tablet.sortStructsIntoTable(filtered);
        }
        this.setLocalData(u3);
      }
      if (u3) {
        if (this.currentUser)
          Object.assign(this.currentUser, u3);
        else
          this.currentUser = u3;
        callback(this.currentUser);
        return this.currentUser;
      } else {
        callback(u3);
        return u3;
      }
    }
    onResult(data) {
    }
    randomId(tag = "") {
      return `${tag + Math.floor(Math.random() + Math.random() * Math.random() * 1e16)}`;
    }
    async addStruct(structType = "struct", props = {}, parentUser, parentStruct, updateServer = true) {
      let newStruct = DataStructures_exports.Struct(structType, props, parentUser, parentStruct);
      if (updateServer)
        newStruct = await this.updateServerData([newStruct])[0];
      return newStruct;
    }
    overwriteLocalData(structs) {
      if (Array.isArray(structs)) {
        structs.forEach((struct) => {
          let localdat = this.getLocalData(struct.structType, { "ownerId": struct.ownerId, "_id": struct._id });
          if (!localdat || localdat?.length === 0) {
            this.setLocalData(struct);
          } else
            Object.assign(localdat, struct);
        });
      } else {
        let localdat = this.getLocalData(structs.structType, { "ownerId": structs.ownerId, "_id": structs._id });
        if (!localdat || localdat?.length === 0) {
          this.setLocalData(structs);
        } else
          Object.assign(localdat, structs);
      }
    }
    setLocalData(structs) {
      this.tablet.setLocalData(structs);
    }
    getLocalData(collection, query) {
      return this.tablet.getLocalData(collection, query);
    }
    getLocalReplies(struct) {
      let replies = [];
      if (!struct.replies)
        return replies;
      else if (struct.replies.reduce((a, b) => a * (typeof b === "object" ? 1 : 0), 1))
        return struct.replies;
      replies = this.getLocalData("comment", { "replyTo": struct._id });
      return replies;
    }
    hasLocalAuthorization(otherUserId, ownerId = this.currentUser._id) {
      let auths = this.getLocalData("authorization", { ownerId });
      let found = auths.find((a) => {
        if (a.authorizedId === ownerId && a.authorizerId === otherUserId)
          return true;
        if (a.authorizerId === ownerId && a.authorizedId === otherUserId)
          return true;
      });
      if (found) {
        return found;
      } else
        return false;
    }
    deleteLocalData(structs) {
      if (Array.isArray(structs))
        structs.forEach((s) => this.deleteStruct(s));
      else
        this.deleteStruct(structs);
      return true;
    }
    deleteStruct(struct) {
      if (typeof struct === "string")
        struct = this.getLocalData(struct);
      if (!struct)
        throw new Error("Struct not supplied");
      if (!struct.structType || !struct._id)
        return false;
      this.tablet.collections.get(struct.structType).delete(struct._id);
      return true;
    }
    stripStruct(struct = {}) {
      const copy = Object.assign({}, struct);
      for (const prop in copy) {
        if (copy[prop] === void 0 || copy[prop].constructor.name === "Map" || typeof copy[prop] === "function")
          delete copy[prop];
      }
      return copy;
    }
    createStruct(structType, props, parentUser = this.currentUser, parentStruct) {
      let struct = DataStructures_exports.Struct(structType, props, parentUser, parentStruct);
      return struct;
    }
    userStruct(props = {}, currentUser = false) {
      let user = DataStructures_exports.ProfileStruct(void 0, props, props);
      if (props._id)
        user.id = props._id;
      else if (props.id)
        user.id = props.id;
      else
        user.id = "user" + Math.floor(Math.random() * 1e15);
      user._id = user.id;
      user.ownerId = user.id;
      for (const prop in props) {
        if (Object.keys(DataStructures_exports.ProfileStruct()).indexOf(prop) < 0) {
          delete user[prop];
        }
      }
      if (currentUser)
        this.currentUser = user;
      return user;
    }
    dataObject(data = void 0, type = "any", timestamp = Date.now()) {
      return { type, data, timestamp };
    }
  };
  var import_bson_objectid = __toESM3(require_objectid());
  var Systems = { collision: { setupEntities: function(entities) {
    for (const key in entities) {
      const entity = entities[key];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      this.setupEntity(entity);
    }
    return entities;
  }, setupEntity: function(entity) {
    if (!("collisionEnabled" in entity))
      entity.collisionEnabled = true;
    if (!entity.collisionType)
      entity.collisionType = "sphere";
    if (!entity.collisionRadius)
      entity.collisionRadius = 1;
    if (!entity.collisionBoundsScale)
      entity.collisionBoundsScale = { x: 1, y: 1, z: 1 };
    if (!entity.colliding)
      entity.colliding = {};
    if (!entity.position)
      entity.position = { x: 0, y: 0, z: 0 };
    return entity;
  }, __node: { tag: "collision" }, __operator: function(entities) {
    let keys4 = this.entityKeys;
    for (let i4 = 0; i4 < keys4.length; i4++) {
      const entity1 = entities[keys4[i4]];
      if (entity1.components) {
        if (!entity1.components[this.__node.tag] || !entity1.collisionEnabled)
          continue;
      }
      if (!entity1.collisionEnabled)
        continue;
      for (let j = 0; j < keys4.length; j++) {
        if (i4 === j)
          continue;
        const entity2 = entities[keys4[j]];
        if (entity2.components) {
          if (!entity2.components[this.__node.tag])
            continue;
        }
        if (!entity2.collisionEnabled)
          continue;
        let colliding = Systems.collision.collisionCheck(entity1, entity2);
        if (colliding !== false) {
          if (!entity1.colliding)
            entity1.colliding = {};
          if (!entity2.colliding)
            entity2.colliding = {};
          entity1.colliding[entity2.__node.tag] = colliding;
          entity2.colliding[entity1.__node.tag] = colliding;
        }
      }
    }
    return entities;
  }, collisionCheck: (body1, body2) => {
    if (body1.collisionEnabled === false || body2.collisionEnabled === false)
      return false;
    const dist = Systems.collision.distance(body1.position, body2.position);
    if (dist < Math.max(...Object.values(body1.collisionBoundsScale)) * body1.collisionRadius + Math.max(...Object.values(body2.collisionBoundsScale)) * body2.collisionRadius) {
      let isColliding = false;
      if (body1.collisionType === "sphere") {
        if (body2.collisionType === "sphere") {
          isColliding = Systems.collision.sphereCollisionCheck(body1, body2, dist);
        } else if (body2.collisionType === "box") {
          isColliding = Systems.collision.sphereBoxCollisionCheck(body1, body2, dist);
        } else if (body2.collisionType === "point") {
          isColliding = Systems.collision.isPointInsideSphere(body2.position, body1, dist);
        }
      } else if (body1.collisionType === "box") {
        if (body2.collisionType === "sphere") {
          isColliding = Systems.collision.sphereBoxCollisionCheck(body2, body1, dist);
        } else if (body2.collisionType === "box") {
          isColliding = Systems.collision.boxCollisionCheck(body1, body2);
        } else if (body2.collisionType === "point") {
          isColliding = Systems.collision.isPointInsideBox(body1.position, body1);
        }
      } else if (body1.collisionType === "point") {
        if (body2.collisionType === "sphere") {
          isColliding = Systems.collision.isPointInsideSphere(body1.position, body2, dist);
        } else if (body2.collisionType === "box") {
          isColliding = Systems.collision.isPointInsideBox(body1.position, body2);
        }
      }
      if (isColliding)
        return dist;
    }
    return false;
  }, sphereCollisionCheck: (body1, body2, dist) => {
    if (dist === void 0)
      dist = Systems.collision.distance(body1.position, body2.position);
    return dist < body1.collisionRadius + body2.collisionRadius;
  }, boxCollisionCheck: (body1, body2) => {
    let body1minX = (body1.position.x - body1.collisionRadius) * body1.collisionBoundsScale.x;
    let body1maxX = (body1.position.x + body1.collisionRadius) * body1.collisionBoundsScale.x;
    let body1minY = (body1.position.y - body1.collisionRadius) * body1.collisionBoundsScale.y;
    let body1maxY = (body1.position.y + body1.collisionRadius) * body1.collisionBoundsScale.y;
    let body1minZ = (body1.position.z - body1.collisionRadius) * body1.collisionBoundsScale.z;
    let body1maxZ = (body1.position.z + body1.collisionRadius) * body1.collisionBoundsScale.z;
    let body2minX = (body2.position.x - body2.collisionRadius) * body1.collisionBoundsScale.x;
    let body2maxX = (body2.position.x + body2.collisionRadius) * body1.collisionBoundsScale.x;
    let body2minY = (body2.position.y - body2.collisionRadius) * body1.collisionBoundsScale.y;
    let body2maxY = (body2.position.y + body2.collisionRadius) * body1.collisionBoundsScale.y;
    let body2minZ = (body2.position.z - body2.collisionRadius) * body1.collisionBoundsScale.z;
    let body2maxZ = (body2.position.z + body2.collisionRadius) * body1.collisionBoundsScale.z;
    return (body1maxX <= body2maxX && body1maxX >= body2minX || body1minX <= body2maxX && body1minX >= body2minX) && (body1maxY <= body2maxY && body1maxY >= body2minY || body1minY <= body2maxY && body1minY >= body2minY) && (body1maxZ <= body2maxZ && body1maxZ >= body2minZ || body1minZ <= body2maxZ && body1minZ >= body2minZ);
  }, sphereBoxCollisionCheck: (sphere, box, dist) => {
    let boxMinX = (box.position.x - box.collisionRadius) * box.collisionBoundsScale.x;
    let boxMaxX = (box.position.x + box.collisionRadius) * box.collisionBoundsScale.x;
    let boxMinY = (box.position.y - box.collisionRadius) * box.collisionBoundsScale.y;
    let boxMaxY = (box.position.y + box.collisionRadius) * box.collisionBoundsScale.y;
    let boxMinZ = (box.position.z - box.collisionRadius) * box.collisionBoundsScale.z;
    let boxMaxZ = (box.position.z + box.collisionRadius) * box.collisionBoundsScale.z;
    let clamp = { x: Math.max(boxMinX, Math.min(sphere.position.x, boxMaxX)), y: Math.max(boxMinY, Math.min(sphere.position.y, boxMaxY)), z: Math.max(boxMinZ, Math.min(sphere.position.z, boxMaxZ)) };
    if (dist === void 0)
      dist = Systems.collision.distance(sphere.position, clamp);
    return dist > sphere.collisionRadius;
  }, isPointInsideSphere: (point, sphere, dist) => {
    if (dist === void 0)
      dist = Systems.collision.distance(point, sphere.position);
    return dist < sphere.collisionRadius;
  }, isPointInsideBox: (point, box) => {
    let boxminX = (box.position.x - box.collisionRadius) * box.collisionBoundsScale.x;
    let boxmaxX = (box.position.x + box.collisionRadius) * box.collisionBoundsScale.x;
    let boxminY = (box.position.y - box.collisionRadius) * box.collisionBoundsScale.x;
    let boxmaxY = (box.position.y + box.collisionRadius) * box.collisionBoundsScale.x;
    let boxminZ = (box.position.z - box.collisionRadius) * box.collisionBoundsScale.x;
    let boxmaxZ = (box.position.z + box.collisionRadius) * box.collisionBoundsScale.x;
    return point.x >= boxminX && point.x <= boxmaxX && (point.y >= boxminY && point.y <= boxmaxY) && (point.z >= boxminZ && point.z <= boxmaxZ);
  }, closestPointOnLine: (point, lineStart, lineEnd) => {
    let a = { x: lineEnd.x - lineStart.x, y: lineEnd.y - lineStart.y, z: lineEnd.z - lineStart.z };
    let b = { x: lineStart.x - point.x, y: lineStart.y - point.y, z: lineStart.z - point.z };
    let c = { x: lineEnd.x - point.x, y: lineEnd.y - point.y, z: lineEnd.z - point.z };
    let bdota = Systems.collision.dot(b, a);
    if (bdota <= 0)
      return lineStart;
    let cdota = Systems.collision.dot(c, a);
    if (cdota <= 0)
      return lineEnd;
    let _bdotapluscdota = 1 / (bdota + cdota);
    return { x: lineStart.x + (lineEnd.x - lineStart.x) * bdota * _bdotapluscdota, y: lineStart.y + (lineEnd.y - lineStart.y) * bdota * _bdotapluscdota, z: lineStart.z + (lineEnd.z - lineStart.z) * bdota * _bdotapluscdota };
  }, closestPointOnPolygon: (point, t0, t1, t22) => {
    let n = Systems.collision.calcNormal(t0, t1, t22);
    let dist = Systems.collision.dot(point, n) - Systems.collision.dot(t0, n);
    let projection = Systems.collision.vecadd(point, Systems.collision.vecscale(n, -dist));
    let v0x = t22[0] - t0[0];
    let v0y = t22[1] - t0[1];
    let v0z = t22[2] - t0[2];
    let v1x = t1[0] - t0[0];
    let v1y = t1[1] - t0[1];
    let v1z = t1[2] - t0[2];
    let v2x = projection[0] - t0[0];
    let v2y = projection[1] - t0[1];
    let v2z = projection[2] - t0[2];
    let dot00 = v0x * v0x + v0y * v0y + v0z * v0z;
    let dot01 = v0x * v1x + v0y * v1y + v0z * v1z;
    let dot02 = v0x * v2x + v0y * v2y + v0z * v2z;
    let dot11 = v1x * v1x + v1y * v1y + v1z * v1z;
    let dot12 = v1x * v2x + v1y * v2y + v1z * v2z;
    let denom = dot00 * dot11 - dot01 * dot01;
    if (Math.abs(denom) < 1e-30) {
      return void 0;
    }
    let _denom = 1 / denom;
    let u3 = (dot11 * dot02 - dot01 * dot12) * _denom;
    let v2 = (dot00 * dot12 - dot01 * dot02) * _denom;
    if (u3 >= 0 && v2 >= 0 && u3 + v2 < 1) {
      return projection;
    } else
      return void 0;
  }, calcNormal: (t0, t1, t22, positive = true) => {
    var QR = Systems.collision.makeVec(t0, t1);
    var QS = Systems.collision.makeVec(t0, t22);
    if (positive === true) {
      return Systems.collision.normalize(Systems.collision.cross3D(QR, QS));
    } else {
      return Systems.collision.normalize(Systems.collision.cross3D(QS, QR));
    }
  }, dot: (v1, v2) => {
    let dot = 0;
    for (const key in v1) {
      dot += v1[key] * v2[key];
    }
    return dot;
  }, makeVec(p1, p2) {
    return { x: p2.x - p1.x, y: p2.y - p1.y, z: p2.z - p1.z };
  }, vecadd: (v1, v2) => {
    let result = Object.assign({}, v1);
    for (const key in result) {
      result[key] += v2[key];
    }
    return result;
  }, vecsub: (v1, v2) => {
    let result = Object.assign({}, v1);
    for (const key in result) {
      result[key] -= v2[key];
    }
    return result;
  }, vecmul: (v1, v2) => {
    let result = Object.assign({}, v1);
    for (const key in result) {
      result[key] *= v2[key];
    }
    return result;
  }, vecdiv: (v1, v2) => {
    let result = Object.assign({}, v1);
    for (const key in result) {
      result[key] /= v2[key];
    }
    return result;
  }, vecscale: (v1, scalar) => {
    let result = Object.assign({}, v1);
    for (const key in result) {
      result[key] *= scalar;
    }
    return result;
  }, distance: (v1, v2) => {
    let distance = 0;
    for (const key in v1) {
      distance += Math.pow(v1[key] - v2[key], 2);
    }
    return Math.sqrt(distance);
  }, magnitude: (v2) => {
    let magnitude = 0;
    for (const key in v2) {
      magnitude += v2[key] * v2[key];
    }
    return Math.sqrt(magnitude);
  }, normalize: (v2) => {
    let magnitude = Systems.collision.magnitude(v2);
    let _mag = magnitude ? 1 / magnitude : 0;
    let vn = {};
    for (const key in v2) {
      vn[key] = v2[key] * _mag;
    }
    return vn;
  }, distance3D(v1, v2) {
    return Math.sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y) + (v1.z - v2.z) * (v1.z - v2.z));
  }, cross3D(v1, v2) {
    return { x: v1.y * v2.z - v1.z * v2.y, y: v1.z * v2.x - v1.x * v2.z, z: v1.x * v2.y - v1.y * v2.x };
  }, nearestNeighborSearch(entities, isWithinRadius = 1e15) {
    var tree = {};
    ;
    for (const key in entities) {
      let newnode = { tag: key, position: void 0, neighbors: [] };
      newnode.position = entities[key].position;
      tree[key] = newnode;
    }
    for (const i4 in tree) {
      for (const j in tree) {
        var dist = Systems.collision.distance3D(tree[i4].position, tree[j].position);
        if (dist < isWithinRadius) {
          var newNeighbori = { tag: j, position: entities[j].position, dist };
          tree[i4].neighbors.push(newNeighbori);
          var newNeighborj = { tag: j, position: entities[i4].position, dist };
          tree[j].neighbors.push(newNeighborj);
        }
      }
      tree[i4].neighbors.sort(function(a, b) {
        return a.dist - b.dist;
      });
    }
    return tree;
  }, generateBoundingVolumeTree(entities, mode = "octree", withinRadius = 1e15, minEntities = 3) {
    let dynamicBoundingVolumeTree = { proto: { parent: void 0, children: {}, entities: {}, collisionType: "box", collisionRadius: 1, collisionBoundsScale: { x: 1, y: 1, z: 1 }, position: { x: 0, y: 0, z: 0 } }, tree: {} };
    let maxX, maxY, maxZ;
    let minX = 0, minY = 0, minZ = 0;
    let positions = {};
    let minRadius = withinRadius;
    for (const key in entities) {
      const body = entities[key];
      let xx = body.position.x + body.collisionRadius * body.collisionBoundsScale.x;
      let yy = body.position.y + body.collisionRadius * body.collisionBoundsScale.y;
      let zz = body.position.z + body.collisionRadius * body.collisionBoundsScale.z;
      if (maxX < xx)
        maxX = xx;
      if (minX > xx)
        minX = xx;
      if (maxY < yy)
        maxY = yy;
      if (minY > yy)
        minY = yy;
      if (maxZ < zz)
        maxZ = zz;
      if (minZ > zz)
        minZ = zz;
      if (minRadius > body.collisionRadius)
        minRadius = body.collisionRadius;
      positions[key] = body.position;
    }
    ;
    let head = JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto));
    let boxpos = { x: (maxX + minX) * 0.5, y: (maxY + minY) * 0.5, z: (maxZ + minZ) * 0.5 };
    let boxbounds = { x: maxX - boxpos.x, y: maxY - boxpos.y, z: maxZ - boxpos.z };
    head.position = boxpos;
    head.collisionBoundsScale = boxbounds;
    head.entities = entities;
    dynamicBoundingVolumeTree.tree = head;
    minRadius *= 2;
    if (mode === "octree") {
      let genOct = function(parentPos, halfbounds) {
        let oct1 = { x: parentPos.x + halfbounds.x, y: parentPos.y + halfbounds.y, z: parentPos.z + halfbounds.z };
        let oct2 = { x: parentPos.x - halfbounds.x, y: parentPos.y + halfbounds.y, z: parentPos.z + halfbounds.z };
        let oct3 = { x: parentPos.x + halfbounds.x, y: parentPos.y - halfbounds.y, z: parentPos.z + halfbounds.z };
        let oct4 = { x: parentPos.x + halfbounds.x, y: parentPos.y + halfbounds.y, z: parentPos.z - halfbounds.z };
        let oct5 = { x: parentPos.x - halfbounds.x, y: parentPos.y - halfbounds.y, z: parentPos.z + halfbounds.z };
        let oct6 = { x: parentPos.x - halfbounds.x, y: parentPos.y + halfbounds.y, z: parentPos.z - halfbounds.z };
        let oct7 = { x: parentPos.x + halfbounds.x, y: parentPos.y - halfbounds.y, z: parentPos.z - halfbounds.z };
        let oct8 = { x: parentPos.x - halfbounds.x, y: parentPos.y - halfbounds.y, z: parentPos.z - halfbounds.z };
        return [oct1, oct2, oct3, oct4, oct5, oct6, oct7, oct8];
      }, genOctTree = function(head2) {
        let halfbounds = { x: head2.collisionBoundsScale.x * 0.5, y: head2.collisionBoundsScale.y * 0.5, z: head2.collisionBoundsScale.z * 0.5 };
        let octPos = genOct(head2.position, halfbounds);
        let check2 = Object.assign({}, head2.bodies);
        for (let i4 = 0; i4 < 8; i4++) {
          let octquadrant = Object.assign(JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto)), { position: octPos[i4], collisionBoundsScale: halfbounds });
          octquadrant.parent = head2;
          for (const j in check2) {
            let collided = Systems.collision.collisionCheck(check2[j], octquadrant);
            if (collided) {
              octquadrant.entities[j] = check2[j];
              delete check2[j];
            }
          }
          if (Object.keys(octquadrant.entities).length > minEntities - 1) {
            head2.children[i4] = octquadrant;
            octquadrant.parent = head2;
            if (Object.keys(octquadrant.entities).length > minEntities && octquadrant.collisionRadius * 0.5 > minRadius) {
              genOctTree(octquadrant);
            }
          }
        }
      };
      genOctTree(head);
      return head;
    } else {
      let tree = Systems.collision.nearestNeighborSearch(positions, withinRadius);
      let keys4 = Object.keys(tree);
      let tag = keys4[Math.floor(Math.random() * keys4.length)];
      let searching = true;
      let count = 0;
      let genBoundingBoxLevel = (tree2, volumes) => {
        let newVolumes = {};
        let foundidxs = {};
        let treekeys = Object.keys(tree2);
        while (searching && count < treekeys.length) {
          let node = tree2[tag];
          let i4 = 0;
          let j = 0;
          let ux = positions[node.tag].x - volumes[node.tag].collisionBoundsScale.x, uy = positions[node.tag].y - volumes[node.tag].collisionBoundsScale.y, uz = positions[node.tag].z - volumes[node.tag].collisionBoundsScale.z, mx = positions[node.tag].x + volumes[node.tag].collisionBoundsScale.x, my = positions[node.tag].y + volumes[node.tag].collisionBoundsScale.y, mz = positions[node.tag].z + volumes[node.tag].collisionBoundsScale.z;
          let newvolume = JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto));
          newvolume.tag = `bound${Math.floor(Math.random() * 1e15)}`;
          newvolume.children[node.tag] = volumes[node.tag];
          newvolume.bodies[node.tag] = entities[node.tag];
          volumes[node.tag].parent = newvolume;
          foundidxs[node.tag] = true;
          i4++;
          j++;
          let nkeys = Object.keys(node.neighbors);
          while (i4 < nkeys.length && j < 3) {
            if (foundidxs[node.neighbors[i4].tag]) {
              i4++;
              continue;
            }
            let uxn = positions[node.neighbors[i4].tag].x - volumes[node.neighbors[i4].tag].collisionBoundsScale.x, uyn = positions[node.neighbors[i4].tag].y - volumes[node.neighbors[i4].tag].collisionBoundsScale.y, uzn = positions[node.neighbors[i4].tag].z - volumes[node.neighbors[i4].tag].collisionBoundsScale.z, mxn = positions[node.neighbors[i4].tag].x + volumes[node.neighbors[i4].tag].collisionBoundsScale.x, myn = positions[node.neighbors[i4].tag].y + volumes[node.neighbors[i4].tag].collisionBoundsScale.y, mzn = positions[node.neighbors[i4].tag].z + volumes[node.neighbors[i4].tag].collisionBoundsScale.z;
            if (ux > uxn)
              ux = uxn;
            if (mx < mxn)
              mx = mxn;
            if (uy > uyn)
              uy = uyn;
            if (my < myn)
              my = myn;
            if (uz > uzn)
              uz = uzn;
            if (mz < mzn)
              mz = mzn;
            newvolume.children[node.neighbors[i4].tag] = volumes[node.neighbors[i4].tag];
            newvolume.entities[node.neighbors[i4].tag] = entities[node.neighbors[i4].tag];
            volumes[node.neighbors[i4].tag].parent = newvolume;
            foundidxs[node.neighbors[i4].tag] = true;
            i4++;
            j++;
          }
          let pos = { x: (mx + ux) * 0.5, y: (my + uy) * 0.5, z: (mz + uz) * 0.5 };
          let bounds = { x: mx - pos.x, y: my - pos.y, z: mz - pos.z };
          newvolume.position = pos;
          newvolume.collisionBoundsScale = bounds;
          if (newvolume.bodies.length === 1)
            newvolume = node;
          newVolumes[newvolume.tag] = newvolume;
          while (i4 < node.neighbors.length) {
            if (!foundidxs[node.neighbors[i4].tag])
              break;
            i4++;
          }
          if (i4 < node.neighbors.length) {
            tag = node.neighbors[i4].tag;
          } else if (Object.keys(foundidxs).length < Object.keys(tree2).length) {
            tag = keys4[0];
          } else
            searching = false;
          count++;
        }
        return newVolumes;
      };
      let result = genBoundingBoxLevel(tree, entities);
      while (Object.keys(result).length > 2) {
        let nextTree = Systems.collision.nearestNeighborSearch(result, withinRadius);
        result = genBoundingBoxLevel(nextTree, result);
      }
      head.children = result;
      head.children.forEach((n) => {
        n.parent = head;
      });
      return head;
    }
  } }, collider: { lastTime: performance.now(), setupEntities: function(entities) {
    for (const key in entities) {
      const entity = entities[key];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      this.setupEntity(entity);
    }
    return entities;
  }, setupEntity: function(entity) {
    if (!("collisionEnabled" in entity))
      Systems.collision.setupEntity(entity);
    if (!("boundingBox" in entity))
      entity.boundingBox = { bot: 0, top: 100, left: 0, right: 100, front: 0, back: 100 };
    if (!("position" in entity)) {
      Systems.movement.setupEntity(entity);
    }
    if (!("restitution" in entity))
      entity.restitution = 1;
    if (!("useBoundingBox" in entity))
      entity.useBoundingBox = true;
    if (!entity.position.x && !entity.position.y && !entity.position.z) {
      entity.position.x = Math.random() * entity.boundingBox.right;
      entity.position.y = Math.random() * entity.boundingBox.back;
      entity.position.z = Math.random() * entity.boundingBox.top;
    }
    return entity;
  }, __operator: function(entities) {
    let keys4 = this.entityKeys;
    for (let i4 = 0; i4 < keys4.length; i4++) {
      const entity1 = entities[keys4[i4]];
      if (entity1.components) {
        if (!entity1.components[this.__node.tag] || !entity1.collisionEnabled)
          continue;
      }
      if (entity1.useBoundingBox)
        this.checkBoundingBox(entity1);
      if (!entity1.collisionEnabled)
        continue;
      if (entity1.colliding) {
        for (const key2 in entity1.colliding) {
          const entity2 = entities[key2];
          if (entity1.colliding[key2] === false) {
            delete entity1.colliding[key2];
            delete entity2.colliding[entity1.__node.tag];
            continue;
          }
          if (!entity2.collisionEnabled)
            continue;
          if (entity2.collisionType === "box") {
            this.resolveBoxCollision(entity1, entity2, entity1.colliding[key2]);
          } else {
            if (entity1.collisionType === "box") {
              entity1.fixed = true;
              this.resolveSphereCollisions(entity1, entity2, entity1.colliding[key2]);
              entity1.fixed = false;
            } else {
              this.resolveSphereCollisions(entity1, entity2, entity1.colliding[key2]);
              delete entity2.colliding[entity1.__node.tag];
            }
          }
          delete entity1.colliding[entity2.__node.tag];
        }
        delete entity1.colliding;
      }
    }
    return entities;
  }, __node: { tag: "collider" }, checkBoundingBox: (entity) => {
    const xsize = entity.collisionRadius * entity.collisionBoundsScale.x;
    const ysize = entity.collisionRadius * entity.collisionBoundsScale.y;
    const zsize = entity.collisionRadius * entity.collisionBoundsScale.z;
    if (entity.position.y - ysize <= entity.boundingBox.front) {
      entity.velocity.y *= -entity.restitution;
      entity.position.y = entity.boundingBox.front + ysize;
    }
    if (entity.position.y + ysize >= entity.boundingBox.back) {
      entity.velocity.y *= -entity.restitution;
      entity.position.y = entity.boundingBox.back - ysize;
    }
    if (entity.position.x - xsize <= entity.boundingBox.left) {
      entity.velocity.x *= -entity.restitution;
      entity.position.x = entity.boundingBox.left + xsize;
    }
    if (entity.position.x + xsize >= entity.boundingBox.right) {
      entity.velocity.x *= -entity.restitution;
      entity.position.x = entity.boundingBox.right - xsize;
    }
    if (entity.position.z - zsize <= entity.boundingBox.bot) {
      entity.velocity.z *= -entity.restitution;
      entity.position.z = entity.boundingBox.bot + zsize;
    }
    if (entity.position.z + zsize >= entity.boundingBox.top) {
      entity.velocity.z *= -entity.restitution;
      entity.position.z = entity.boundingBox.top - zsize;
    }
  }, resolveBoxCollision: (body1, box, negate) => {
    let positionVec = Systems.collision.makeVec(body1.position, box.position);
    var directionVec = Object.values(positionVec);
    let closestSide;
    let closestDist = Infinity;
    let mul = -1;
    if (directionVec[idx] < 0)
      mul = 1;
    if (negate)
      mul = -mul;
    for (const key in body1.position) {
      let dist = Math.abs(box.position[key] - body1.position[key]);
      if (dist < closestDist && Math.abs(box.position[key] - body1.position[key] + body1.velocity[key] * 1e-17) < dist) {
        closestSide = key;
        closestDist = dist;
      }
    }
    var idx = directionVec.indexOf(closestSide);
    if (idx === 0)
      idx = "x";
    if (idx === 1)
      idx = "y";
    if (idx === 2)
      idx = "z";
    if (idx === 3)
      idx = "w";
    let boxEdgeAxisPosition = box.position[idx] + box.collisionRadius * box.collisionBoundsScale[idx] * mul;
    if (negate) {
      let body1Offset = boxEdgeAxisPosition - body1.collisionRadius * body1.collisionBoundsScale[idx] * mul;
      body1.position[idx] = body1Offset;
    } else {
      let body1Offset = boxEdgeAxisPosition + body1.collisionRadius * body1.collisionBoundsScale[idx] * mul;
      body1.position[idx] = body1Offset;
    }
    body1.velocity[idx] = -body1.velocity[idx] * body1.restitution;
    if (negate)
      body1.force[idx] = -body1.velocity[idx];
    var body2AccelMag = Systems.collision.magnitude(box.acceleration);
    var body2AccelNormal = Systems.collision.normalize(box.acceleration);
    body1.force[idx] = -body2AccelNormal[idx] * body2AccelMag * box.mass;
    if (negate)
      body1.force[idx] = -body1.force[idx];
  }, resolveSphereCollisions: (entity1, entity2, dist) => {
    if (dist === void 0)
      dist = Systems.collision.distance(entity1.position, entity2.position);
    let vecn = Systems.collision.normalize(Systems.collision.makeVec(entity1.position, entity2.position));
    let sumMass = entity1.mass + entity2.mass;
    let ratio = entity1.mass / sumMass;
    let rmin = 1 - ratio;
    if (entity1.fixed === false) {
      entity1.position.x += vecn.x * rmin * 1.01;
      entity1.position.y += vecn.y * rmin * 1.01;
      entity1.position.z += vecn.z * rmin * 1.001;
    } else {
      entity2.position.x -= vecn.x * 1.01;
      entity2.position.y -= vecn.y * 1.01;
      entity2.position.z -= vecn.z * 1.01;
    }
    if (entity2.fixed === false) {
      entity2.position.x += vecn.x * ratio * 1.01;
      entity2.position.y += vecn.y * ratio * 1.01;
      entity2.position.z += vecn.z * ratio * 1.01;
    } else {
      entity1.position.x += vecn.x * 1.01;
      entity1.position.y += vecn.y * 1.01;
      entity1.position.z += vecn.z * 1.01;
    }
    dist = Systems.collision.distance(entity1.position, entity2.position);
    let vrel = { x: entity1.velocity.x - entity2.velocity.x, y: entity1.velocity.y - entity2.velocity.y, z: entity1.velocity.z - entity2.velocity.z };
    let speed = vrel.x * vecn.x + vrel.y * vecn.y + vrel.z * vecn.z;
    if (speed > 0) {
      let impulse = 2 * speed / sumMass;
      if (entity1.fixed === false) {
        entity1.velocity.x -= impulse * vecn.x * entity2.mass * entity1.restitution;
        entity1.velocity.y -= impulse * vecn.y * entity2.mass * entity1.restitution;
        entity1.velocity.z -= impulse * vecn.z * entity2.mass * entity1.restitution;
      }
      if (entity2.fixed === false) {
        entity2.velocity.x += impulse * vecn.x * entity2.mass * entity2.restitution / entity2.mass;
        entity2.velocity.y += impulse * vecn.y * entity2.mass * entity2.restitution / entity2.mass;
        entity2.velocity.z += impulse * vecn.z * entity2.mass * entity2.restitution / entity2.mass;
      }
    }
  } }, nbody: { lastTime: performance.now(), G: 6674e-14, setupEntities: function(entities) {
    for (const key in entities) {
      const entity = entities[key];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      this.setupEntity(entity);
    }
    return entities;
  }, setupEntity: function(entity) {
    if (!("collisionEnabled" in entity))
      Systems.collider.setupEntity(entity);
    entity.isAttractor = true;
    if (!("attractorGroup" in entity))
      entity.attractorGroup = 0;
    if (!("attractorFrameSearchMax" in entity))
      entity.attractorFrameSearchMax = 10;
    if (!("attractorGroupRules" in entity))
      entity.attractorGroupRules = { 0: { G: this.G, maxDist: void 0 } };
    return entity;
  }, __operator: function(entities) {
    let keys4 = this.entityKeys;
    for (let i4 = 0; i4 < keys4.length; i4++) {
      const entity = entities[keys4[i4]];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      if (!entity.mass)
        continue;
      let nSearched = 0;
      nested:
        for (let j = 0; j < keys4.length; j++) {
          let randKey = keys4[Math.floor(Math.random() * keys4.length)];
          nSearched++;
          const entity2 = entities[randKey];
          if (entity2.components) {
            if (!entity2.components[this.__node.tag])
              continue nested;
          }
          if (!entity2.mass || !entity2.isAttractor)
            continue nested;
          this.attract(entity, entity2, void 0, this.G);
          if (nSearched > entity.attractorFrameSearchMax)
            break nested;
        }
    }
    return entities;
  }, __node: { tag: "nbody" }, attract: function(body1, body2, dist, G3 = this.G, vecn) {
    if (dist === void 0)
      dist = Systems.collision.distance3D(body1.position, body2.position);
    if (vecn === void 0)
      vecn = Systems.collision.normalize(Systems.collision.makeVec(body1.position, body2.position));
    let Fg = 0;
    if (dist < 0.01)
      dist = 0.01;
    if (body1.attractorGroupRules[body2.attractorGroup]) {
      if (typeof body1.attractorGroupRules[body2.attractorGroup] === "object") {
        if (body1.attractorGroupRules[body2.attractorGroup].maxDist && body1.attractorGroupRules[body2.attractorGroup].maxDist < dist) {
        } else
          Fg = body1.attractorGroupRules[body2.attractorGroup].G * body1.mass * body2.mass / (dist * dist);
      } else
        Fg = body1.attractorGroupRules[body2.attractorGroup] * body1.mass * body2.mass / (dist * dist);
    } else
      Fg = G3 * body1.mass * body2.mass / (dist * dist);
    body1.force.x += vecn.x * Fg;
    body1.force.y += vecn.y * Fg;
    body1.force.z += vecn.z * Fg;
    body2.force.x -= vecn.x * Fg;
    body2.force.y -= vecn.y * Fg;
    body2.force.z -= vecn.z * Fg;
  } }, boid: { lastTime: performance.now(), defaultAnchor: { x: Math.random(), y: Math.random(), z: Math.random(), mul: 6e-3 }, setupEntities: function(entities) {
    for (const key in entities) {
      const entity = entities[key];
      this.setupEntity(entity);
    }
    return entities;
  }, setupEntity: function(entity) {
    if (!entity.position) {
      Systems.collider.setupEntity(entity);
    }
    let adjustedAnchor = Object.assign({}, this.defaultAnchor);
    adjustedAnchor.x *= entity.boundingBox.right;
    adjustedAnchor.y *= entity.boundingBox.back;
    adjustedAnchor.z *= entity.boundingBox.top;
    let boidDefaults = { cohesion: 1e-5, separation: 1e-4, alignment: 6e-3, swirl: adjustedAnchor, attractor: Object.assign(adjustedAnchor, { mul: 2e-3 }), useCohesion: true, useSeparation: true, useAlignment: true, useSwirl: true, useAttractor: true, useAttraction: false, groupRadius: 200, groupSize: 5, searchLimit: 5 };
    if (!entity.boid) {
      entity.boid = boidDefaults;
    } else
      entity.boid = Object.assign(boidDefaults, entity.boid);
    if (this.entityKeys.length > 1e3) {
      entity.boid.groupSize = 1;
      entity.boid.searchLimit = 1;
    }
    return entity;
  }, __operator: function(entities) {
    let now = performance.now();
    let timeStep = now - this.lastTime;
    this.lastTime = now;
    let keys4 = this.entityKeys;
    let length = keys4.length;
    let _timeStep = 1 / timeStep;
    let w = -1;
    outer:
      for (let i4 = 0; i4 < keys4.length; i4++) {
        w++;
        let p0 = entities[keys4[i4]];
        const inRange = [];
        const distances = [];
        const boidVelocities = [p0.position.x, p0.position.y, p0.position.z, 0, 0, 0, p0.velocity.x, p0.velocity.y, p0.velocity.z, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        let groupCount = 1;
        let k = -1;
        nested:
          for (let j = 0; j < keys4.length; j++) {
            k++;
            if (distances.length > p0.boid.groupSize || k > p0.boid.searchLimit) {
              break nested;
            }
            let randj = keys4[Math.floor(Math.random() * length)];
            if (k === w || randj === keys4[i4] || inRange.indexOf(randj) > -1) {
              continue nested;
            } else {
              let pr = entities[randj];
              let disttemp = Math.sqrt((p0.position.x - pr.position.x) * (p0.position.x - pr.position.x) + (p0.position.y - pr.position.y) * (p0.position.y - pr.position.y) + (p0.position.z - pr.position.z) * (p0.position.z - pr.position.z));
              if (disttemp > p0.boid.groupRadius) {
                continue nested;
              } else {
                distances.push(disttemp);
                inRange.push(randj);
                let distInv;
                if (p0.boid.useSeparation || p0.boid.useAlignment) {
                  distInv = p0.boid.groupRadius / (disttemp * disttemp);
                  if (distInv > p0.maxSpeed)
                    distInv = p0.maxSpeed;
                  else if (distInv < -p0.maxSpeed)
                    distInv = -p0.maxSpeed;
                }
                if (p0.boid.useCohesion) {
                  boidVelocities[0] += (pr.position.x - p0.position.x) * 0.5 * disttemp * _timeStep;
                  boidVelocities[1] += (pr.position.y - p0.position.y) * 0.5 * disttemp * _timeStep;
                  boidVelocities[2] += (pr.position.z - p0.position.z) * 0.5 * disttemp * _timeStep;
                }
                if (isNaN(disttemp) || isNaN(boidVelocities[0]) || isNaN(pr.position.x)) {
                  console.log(disttemp, i4, randj, p0.position, pr.position, boidVelocities);
                  p0.position.x = NaN;
                  return;
                }
                if (p0.boid.useSeparation) {
                  boidVelocities[3] = boidVelocities[3] + (p0.position.x - pr.position.x) * distInv;
                  boidVelocities[4] = boidVelocities[4] + (p0.position.y - pr.position.y) * distInv;
                  boidVelocities[5] = boidVelocities[5] + (p0.position.z - pr.position.z) * distInv;
                }
                if (p0.boid.useAttraction && pr.boid.useAttraction) {
                  Systems.nbody.attract(p0, pr, disttemp);
                }
                if (p0.boid.useAlignment) {
                  boidVelocities[6] = boidVelocities[6] + pr.velocity.x * distInv;
                  boidVelocities[7] = boidVelocities[7] + pr.velocity.y * distInv;
                  boidVelocities[8] = boidVelocities[8] + pr.velocity.z * distInv;
                }
                groupCount++;
              }
            }
          }
        let _groupCount = 1 / groupCount;
        if (p0.boid.useCohesion) {
          boidVelocities[0] = p0.boid.cohesion * (boidVelocities[0] * _groupCount);
          boidVelocities[1] = p0.boid.cohesion * (boidVelocities[1] * _groupCount);
          boidVelocities[2] = p0.boid.cohesion * (boidVelocities[2] * _groupCount);
        } else {
          boidVelocities[0] = 0;
          boidVelocities[1] = 0;
          boidVelocities[2] = 0;
        }
        if (p0.boid.useSeparation) {
          boidVelocities[3] = p0.boid.separation * boidVelocities[3];
          boidVelocities[4] = p0.boid.separation * boidVelocities[4];
          boidVelocities[5] = p0.boid.separation * boidVelocities[5];
        } else {
          boidVelocities[3] = 0;
          boidVelocities[4] = 0;
          boidVelocities[5] = 0;
        }
        if (p0.boid.useAlignment) {
          boidVelocities[6] = -(p0.boid.alignment * boidVelocities[6] * _groupCount);
          boidVelocities[7] = p0.boid.alignment * boidVelocities[7] * _groupCount;
          boidVelocities[8] = p0.boid.alignment * boidVelocities[8] * _groupCount;
        } else {
          boidVelocities[6] = 0;
          boidVelocities[7] = 0;
          boidVelocities[8] = 0;
        }
        const swirlVec = [0, 0, 0];
        if (p0.boid.useSwirl == true) {
          boidVelocities[9] = -(p0.position.y - p0.boid.swirl.y) * p0.boid.swirl.mul;
          boidVelocities[10] = (p0.position.z - p0.boid.swirl.z) * p0.boid.swirl.mul;
          boidVelocities[11] = (p0.position.x - p0.boid.swirl.x) * p0.boid.swirl.mul;
        }
        const attractorVec = [0, 0, 0];
        if (p0.boid.useAttractor == true) {
          boidVelocities[12] = (p0.boid.attractor.x - p0.position.x) * p0.boid.attractor.mul;
          if (p0.position.x > p0.boundingBox.left || p0.position.x < p0.boundingBox.right) {
            boidVelocities[12] *= 3;
          }
          boidVelocities[13] = (p0.boid.attractor.y - p0.position.y) * p0.boid.attractor.mul;
          if (p0.position.y > p0.boundingBox.top || p0.position.y < p0.boundingBox.bottom) {
            boidVelocities[13] *= 3;
          }
          boidVelocities[14] = (p0.boid.attractor.z - p0.position.z) * p0.boid.attractor.mul;
          if (p0.position.z > p0.boundingBox.front || p0.position.z < p0.boundingBox.back) {
            boidVelocities[14] *= 3;
          }
        }
        p0.velocity.x = p0.velocity.x + boidVelocities[0] + boidVelocities[3] + boidVelocities[6] + boidVelocities[9] + boidVelocities[12] + boidVelocities[15], p0.velocity.y = p0.velocity.y + boidVelocities[1] + boidVelocities[4] + boidVelocities[7] + boidVelocities[10] + boidVelocities[13] + boidVelocities[16], p0.velocity.z = p0.velocity.z + boidVelocities[2] + boidVelocities[5] + boidVelocities[8] + boidVelocities[11] + boidVelocities[14] + boidVelocities[17];
        if (isNaN(p0.velocity.x))
          console.error(p0, i4, groupCount, p0.position, p0.velocity, swirlVec, attractorVec);
      }
    return entities;
  }, __node: { tag: "boid" } }, movement: { __node: { tag: "movement" }, lastTime: performance.now(), setupEntities: function(entities) {
    for (const key in entities) {
      const entity = entities[key];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      this.setupEntity(entity);
    }
  }, setupEntity: function(entity) {
    if (!("mass" in entity))
      entity.mass = 1;
    if (!("fixed" in entity))
      entity.fixed = false;
    if (!entity.force)
      entity.force = { x: 0, y: 0, z: 0 };
    if (!("mass" in entity))
      entity.mass = 1;
    if (!("gravity" in entity))
      entity.gravity = -9.81;
    if (!entity.acceleration)
      entity.acceleration = { x: 0, y: 0, z: 0 };
    if (!entity.velocity)
      entity.velocity = { x: 0, y: 0, z: 0 };
    if (!("maxSpeed" in entity))
      entity.maxSpeed = 10;
    if (!entity.position)
      entity.position = { x: 0, y: 0, z: 0 };
    return entity;
  }, __operator: function(entities) {
    let now = performance.now();
    let timeStep = (now - this.lastTime) * 1e-3;
    this.lastTime = now;
    let keys4 = this.entityKeys;
    for (let i4 = 0; i4 < keys4.length; i4++) {
      const entity = entities[keys4[i4]];
      if (entity.components) {
        if (!entity.components[this.__node.tag])
          continue;
      }
      if (entity.fixed)
        continue;
      if (entity.mass) {
        if (entity.force.x) {
          entity.acceleration.x += entity.force.x / entity.mass;
          entity.force.x = 0;
        }
        if (entity.force.y) {
          entity.acceleration.y += entity.force.y / entity.mass;
          entity.force.y = 0;
        }
        if (entity.force.z) {
          entity.acceleration.z += entity.force.z / entity.mass + entity.gravity;
          entity.force.z = 0;
        }
      }
      if (entity.drag) {
        if (entity.acceleration.x)
          entity.acceleration.x -= entity.acceleration.x * entity.drag * timeStep;
        if (entity.acceleration.y)
          entity.acceleration.y -= entity.acceleration.y * entity.drag * timeStep;
        if (entity.acceleration.z)
          entity.acceleration.z -= entity.acceleration.z * entity.drag * timeStep;
      }
      if (entity.acceleration.x)
        entity.velocity.x += entity.acceleration.x * timeStep;
      if (entity.acceleration.y)
        entity.velocity.y += entity.acceleration.y * timeStep;
      if (entity.acceleration.z)
        entity.velocity.z += entity.acceleration.z * timeStep;
      if (entity.maxSpeed > 0) {
        let magnitude = Systems.collision.magnitude(entity.velocity);
        if (magnitude > entity.maxSpeed) {
          let scalar = entity.maxSpeed / magnitude;
          entity.velocity.x *= scalar;
          entity.velocity.y *= scalar;
          entity.velocity.z *= scalar;
        }
      }
      if (entity.velocity.x)
        entity.position.x += entity.velocity.x * timeStep;
      if (entity.velocity.y)
        entity.position.y += entity.velocity.y * timeStep;
      if (entity.velocity.z)
        entity.position.z += entity.velocity.z * timeStep;
    }
    return entities;
  } } };
  var v = class {
    constructor(e, t3, s, h) {
      this.r = e, this.g = t3, this.b = s, this.a = h;
    }
  };
  var A2 = class {
    constructor() {
      this.scaleX = 1, this.scaleY = 1, this.offsetX = 0, this.offsetY = 0, this.loop = false, this._vbuffer = 0, this._coord = 0, this.visible = true, this.intensity = 1, this.xy = new Float32Array([]), this.numPoints = 0, this.color = new v(0, 0, 0, 1), this.webglNumPoints = 0;
    }
  };
  var d = class extends A2 {
    constructor(e, t3) {
      super(), this.currentIndex = 0, this.webglNumPoints = t3, this.numPoints = t3, this.color = e, this.xy = new Float32Array(2 * this.webglNumPoints);
    }
    setX(e, t3) {
      this.xy[e * 2] = t3;
    }
    setY(e, t3) {
      this.xy[e * 2 + 1] = t3;
    }
    getX(e) {
      return this.xy[e * 2];
    }
    getY(e) {
      return this.xy[e * 2 + 1];
    }
    lineSpaceX(e, t3) {
      for (let s = 0; s < this.numPoints; s++)
        this.setX(s, e + t3 * s);
    }
    arrangeX() {
      this.lineSpaceX(-1, 2 / this.numPoints);
    }
    constY(e) {
      for (let t3 = 0; t3 < this.numPoints; t3++)
        this.setY(t3, e);
    }
    shiftAdd(e) {
      let t3 = e.length;
      for (let s = 0; s < this.numPoints - t3; s++)
        this.setY(s, this.getY(s + t3));
      for (let s = 0; s < t3; s++)
        this.setY(s + this.numPoints - t3, e[s]);
    }
    addArrayY(e) {
      if (this.currentIndex + e.length <= this.numPoints)
        for (let t3 = 0; t3 < e.length; t3++)
          this.setY(this.currentIndex, e[t3]), this.currentIndex++;
    }
    replaceArrayY(e) {
      if (e.length == this.numPoints)
        for (let t3 = 0; t3 < this.numPoints; t3++)
          this.setY(t3, e[t3]);
    }
  };
  var M = (c, e, t3) => {
    let s = { x: 0, y: 0 };
    return s.x = c.x + e.x * t3, s.y = c.y + e.y * t3, s;
  };
  var P = (c) => Y(-c.y, c.x);
  var x2 = (c, e) => {
    let t3 = T(c, e);
    return t3 = S(t3), t3;
  };
  var C2 = (c, e) => {
    let t3 = { x: 0, y: 0 };
    return t3.x = c.x + e.x, t3.y = c.y + e.y, t3;
  };
  var R = (c, e) => c.x * e.x + c.y * e.y;
  var S = (c) => {
    let e = { x: 0, y: 0 }, t3 = c.x * c.x + c.y * c.y;
    return t3 > 0 && (t3 = 1 / Math.sqrt(t3), e.x = c.x * t3, e.y = c.y * t3), e;
  };
  var Y = (c, e) => {
    let t3 = { x: 0, y: 0 };
    return t3.x = c, t3.y = e, t3;
  };
  var T = (c, e) => {
    let t3 = { x: 0, y: 0 };
    return t3.x = c.x - e.x, t3.y = c.y - e.y, t3;
  };
  var F2 = (c) => {
    let e, t3 = { x: 0, y: 0 }, s = { x: 0, y: 0 }, h = [], o = (n, l) => {
      h.push({ vec2: n, miterLength: l });
    }, a = (n) => ({ x: c[n * 2], y: c[n * 2 + 1] });
    t3 = x2(a(1), a(0)), e = P(t3), o(e, 1);
    let r = c.length / 2;
    for (let n = 1; n < r - 1; n++) {
      let l = a(n - 1), i4 = a(n), u3 = a(n + 1);
      t3 = x2(i4, l), e = P(t3), s = x2(u3, i4);
      let g2 = N(t3, s), f = X(t3, g2, 1);
      o(g2, f);
    }
    return t3 = x2(a(r - 1), a(r - 2)), e = P(t3), o(e, 1), h;
  };
  var N = (c, e) => {
    let t3 = C2(c, e);
    return t3 = S(t3), Y(-t3.y, t3.x);
  };
  var X = (c, e, t3) => {
    let s = Y(-c.y, c.x);
    return t3 / R(e, s);
  };
  var p = class extends A2 {
    constructor(e, t3, s) {
      super(), this.currentIndex = 0, this._thicknessRequested = 0, this._actualThickness = 0, this.webglNumPoints = t3 * 2, this.numPoints = t3, this.color = e, this._thicknessRequested = s, this._linePoints = new Float32Array(t3 * 2), this.xy = new Float32Array(2 * this.webglNumPoints);
    }
    convertToTriPoints() {
      let e = this._actualThickness / 2, t3 = F2(this._linePoints);
      for (let s = 0; s < this.numPoints; s++) {
        let h = this._linePoints[2 * s], o = this._linePoints[2 * s + 1], a = { x: h, y: o }, r = M(a, t3[s].vec2, t3[s].miterLength * e), n = M(a, t3[s].vec2, -t3[s].miterLength * e);
        this.xy[s * 4] = r.x, this.xy[s * 4 + 1] = r.y, this.xy[s * 4 + 2] = n.x, this.xy[s * 4 + 3] = n.y;
      }
    }
    setX(e, t3) {
      this._linePoints[e * 2] = t3;
    }
    setY(e, t3) {
      this._linePoints[e * 2 + 1] = t3;
    }
    lineSpaceX(e, t3) {
      for (let s = 0; s < this.numPoints; s++)
        this.setX(s, e + t3 * s);
    }
    setThickness(e) {
      this._thicknessRequested = e;
    }
    getThickness() {
      return this._thicknessRequested;
    }
    setActualThickness(e) {
      this._actualThickness = e;
    }
  };
  var L = class {
    constructor(e, t3) {
      this.debug = false, this.addLine = this.addDataLine, t3 == null ? this.webgl = e.getContext("webgl", { antialias: true, transparent: false }) : (this.webgl = e.getContext("webgl", { antialias: t3.antialias, transparent: t3.transparent, desynchronized: t3.deSync, powerPerformance: t3.powerPerformance, preserveDrawing: t3.preserveDrawing }), this.debug = t3.debug == null ? false : t3.debug), this.log("canvas type is: " + e.constructor.name), this.log(`[webgl-plot]:width=${e.width}, height=${e.height}`), this._linesData = [], this._linesAux = [], this._thickLines = [], this._surfaces = [], this.gScaleX = 1, this.gScaleY = 1, this.gXYratio = 1, this.gOffsetX = 0, this.gOffsetY = 0, this.gLog10X = false, this.gLog10Y = false, this.webgl.clear(this.webgl.COLOR_BUFFER_BIT), this.webgl.viewport(0, 0, e.width, e.height), this._progLine = this.webgl.createProgram(), this.initThinLineProgram(), this.webgl.enable(this.webgl.BLEND), this.webgl.blendFunc(this.webgl.SRC_ALPHA, this.webgl.ONE_MINUS_SRC_ALPHA);
    }
    get linesData() {
      return this._linesData;
    }
    get linesAux() {
      return this._linesAux;
    }
    get thickLines() {
      return this._thickLines;
    }
    get surfaces() {
      return this._surfaces;
    }
    _drawLines(e) {
      let t3 = this.webgl;
      e.forEach((s) => {
        if (s.visible) {
          t3.useProgram(this._progLine);
          let h = t3.getUniformLocation(this._progLine, "uscale");
          t3.uniformMatrix2fv(h, false, new Float32Array([s.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, s.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));
          let o = t3.getUniformLocation(this._progLine, "uoffset");
          t3.uniform2fv(o, new Float32Array([s.offsetX + this.gOffsetX, s.offsetY + this.gOffsetY]));
          let a = t3.getUniformLocation(this._progLine, "is_log");
          t3.uniform2iv(a, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));
          let r = t3.getUniformLocation(this._progLine, "uColor");
          t3.uniform4fv(r, [s.color.r, s.color.g, s.color.b, s.color.a]), t3.bufferData(t3.ARRAY_BUFFER, s.xy, t3.STREAM_DRAW), t3.drawArrays(s.loop ? t3.LINE_LOOP : t3.LINE_STRIP, 0, s.webglNumPoints);
        }
      });
    }
    _drawSurfaces(e) {
      let t3 = this.webgl;
      e.forEach((s) => {
        if (s.visible) {
          t3.useProgram(this._progLine);
          let h = t3.getUniformLocation(this._progLine, "uscale");
          t3.uniformMatrix2fv(h, false, new Float32Array([s.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, s.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));
          let o = t3.getUniformLocation(this._progLine, "uoffset");
          t3.uniform2fv(o, new Float32Array([s.offsetX + this.gOffsetX, s.offsetY + this.gOffsetY]));
          let a = t3.getUniformLocation(this._progLine, "is_log");
          t3.uniform2iv(a, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));
          let r = t3.getUniformLocation(this._progLine, "uColor");
          t3.uniform4fv(r, [s.color.r, s.color.g, s.color.b, s.color.a]), t3.bufferData(t3.ARRAY_BUFFER, s.xy, t3.STREAM_DRAW), t3.drawArrays(t3.TRIANGLE_STRIP, 0, s.webglNumPoints);
        }
      });
    }
    _drawTriangles(e) {
      let t3 = this.webgl;
      t3.bufferData(t3.ARRAY_BUFFER, e.xy, t3.STREAM_DRAW), t3.useProgram(this._progLine);
      let s = t3.getUniformLocation(this._progLine, "uscale");
      t3.uniformMatrix2fv(s, false, new Float32Array([e.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, e.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));
      let h = t3.getUniformLocation(this._progLine, "uoffset");
      t3.uniform2fv(h, new Float32Array([e.offsetX + this.gOffsetX, e.offsetY + this.gOffsetY]));
      let o = t3.getUniformLocation(this._progLine, "is_log");
      t3.uniform2iv(o, new Int32Array([0, 0]));
      let a = t3.getUniformLocation(this._progLine, "uColor");
      t3.uniform4fv(a, [e.color.r, e.color.g, e.color.b, e.color.a]), t3.drawArrays(t3.TRIANGLE_STRIP, 0, e.xy.length / 2);
    }
    _drawThickLines() {
      this._thickLines.forEach((e) => {
        if (e.visible) {
          let t3 = Math.min(this.gScaleX, this.gScaleY);
          e.setActualThickness(e.getThickness() / t3), e.convertToTriPoints(), this._drawTriangles(e);
        }
      });
    }
    update() {
      this.clear(), this.draw();
    }
    draw() {
      this._drawLines(this.linesData), this._drawLines(this.linesAux), this._drawThickLines(), this._drawSurfaces(this.surfaces);
    }
    clear() {
      this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);
    }
    _addLine(e) {
      e._vbuffer = this.webgl.createBuffer(), this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, e._vbuffer), this.webgl.bufferData(this.webgl.ARRAY_BUFFER, e.xy, this.webgl.STREAM_DRAW), e._coord = this.webgl.getAttribLocation(this._progLine, "coordinates"), this.webgl.vertexAttribPointer(e._coord, 2, this.webgl.FLOAT, false, 0, 0), this.webgl.enableVertexAttribArray(e._coord);
    }
    addDataLine(e) {
      this._addLine(e), this.linesData.push(e);
    }
    addAuxLine(e) {
      this._addLine(e), this.linesAux.push(e);
    }
    addThickLine(e) {
      this._addLine(e), this._thickLines.push(e);
    }
    addSurface(e) {
      this._addLine(e), this.surfaces.push(e);
    }
    initThinLineProgram() {
      let e = `
      attribute vec2 coordinates;
      uniform mat2 uscale;
      uniform vec2 uoffset;
      uniform ivec2 is_log;

      void main(void) {
         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;
         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;
         vec2 line = vec2(x, y);
         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);
      }`, t3 = this.webgl.createShader(this.webgl.VERTEX_SHADER);
      this.webgl.shaderSource(t3, e), this.webgl.compileShader(t3);
      let s = `
         precision mediump float;
         uniform highp vec4 uColor;
         void main(void) {
            gl_FragColor =  uColor;
         }`, h = this.webgl.createShader(this.webgl.FRAGMENT_SHADER);
      this.webgl.shaderSource(h, s), this.webgl.compileShader(h), this._progLine = this.webgl.createProgram(), this.webgl.attachShader(this._progLine, t3), this.webgl.attachShader(this._progLine, h), this.webgl.linkProgram(this._progLine);
    }
    popDataLine() {
      this.linesData.pop();
    }
    removeAllLines() {
      this._linesData = [], this._linesAux = [], this._thickLines = [], this._surfaces = [];
    }
    removeDataLines() {
      this._linesData = [];
    }
    removeAuxLines() {
      this._linesAux = [];
    }
    viewport(e, t3, s, h) {
      this.webgl.viewport(e, t3, s, h);
    }
    log(e) {
      this.debug && console.log("[webgl-plot]:" + e);
    }
  };
  var y2 = class {
    constructor() {
      this.plots = {};
    }
    initPlot(e, t3) {
      if (t3 || (t3 = new L(e.canvas, e.webglOptions)), !e._id)
        e._id = `plot${Math.floor(Math.random() * 1e15)}`;
      else if (this.plots[e._id]) {
        let l = this.plots[e._id].initial;
        if (e.lines) {
          for (let i4 in e.lines)
            if (l.lines[i4] && Array.isArray(e.lines[i4])) {
              let u3 = e.lines[i4];
              e.lines[i4] = l.lines[i4];
            }
        }
        e = Object.assign(l, e);
      }
      e.overlay && (typeof e.overlay != "object" && (e.overlay = document.createElement("canvas"), e.overlay.style.position = "absolute", e.overlay.width = e.canvas.width, e.overlay.height = e.canvas.height, e.canvas.appendChild(e.overlay)), e.overlayCtx || (e.overlayCtx = e.overlay.getContext("2d"))), e.width && (e.canvas.width = e.width, e.canvas.style && (e.canvas.style.width = e.width + "px"), typeof e.overlay == "object" && (e.overlay.width = e.width, e.overlay.style && (e.overlay.style.width = e.width + "px"))), e.height && (e.canvas.height = e.height, e.canvas.style && (e.canvas.style.height = e.height + "px"), typeof e.overlay == "object" && (e.overlay.height = e.height, e.overlay.style && (e.overlay.style.height = e.height + "px"))), e.lines?.timestamp && delete e.lines.timestamp, e.lines || (e.lines = {});
      let s = {};
      for (let l in e.lines)
        s[l] = Object.assign({}, s[l]), "viewing" in e.lines[l] || (e.lines[l].viewing = true), s[l].viewing = e.lines[l].viewing, s[l].sps = e.lines[l].sps, s[l].nSec = e.lines[l].nSec, s[l].nPoints = e.lines[l].nPoints, s[l].ymin = e.lines[l].ymin, s[l].ymax = e.lines[l].ymax, s[l].units = e.lines[l].units;
      let h = { plot: t3, settings: e, initial: Object.assign(Object.assign({}, e), { lines: s }), anim: () => {
        t3.update();
      } };
      this.plots[e._id] = h;
      let o = 0, a = 0;
      Object.keys(e.lines).forEach((l) => {
        e.lines[l]?.viewing !== false && a++;
      }), e.nLines = a;
      let r, n;
      typeof e.overlay == "object" && (r = e.overlay, n = e.overlayCtx, n.clearRect(0, 0, e.overlay.width, e.overlay.height), n.font = e.overlayFont ? e.overlayFont : "1em Courier", n.fillStyle = e.overlayColor ? e.overlayColor : "white");
      for (let l in e.lines) {
        let i4 = e.lines[l];
        if (Array.isArray(i4) && (i4 = { values: i4 }, e.lines[l] = i4), "viewing" in i4 || (i4.viewing = true), i4.color)
          Array.isArray(i4.color) && (i4.color = new v(...i4.color));
        else {
          let m = y2.HSLToRGB(360 * (o / a) % 360, 100, 50, 1);
          h.initial.lines[l].color = [...m, 1], i4.color = new v(...m, 1);
        }
        let u3;
        if (i4.nSec && i4.sps ? u3 = Math.ceil(i4.nSec * i4.sps) : i4.nPoints ? u3 = i4.nPoints : i4.points ? u3 = i4.points : e.linePoints ? u3 = e.linePoints : i4.values ? u3 = i4.values.length : u3 = 1e3, i4.points = u3, e.lines[l].viewing === false)
          continue;
        if ((i4.width || e.lineWidth) && i4.width !== 0) {
          let m = e.lineWidth;
          m || (m = i4.width), i4.width ? i4.line = new p(i4.color, u3, i4.width) : e.lineWidth && (i4.line = new p(i4.color, u3, e.lineWidth)), i4.line.lineSpaceX(-1, 2 / i4.line.numPoints);
        } else
          i4.line = new d(i4.color, u3), i4.line.arrangeX();
        i4.values?.length === i4.points ? i4.values.length !== u3 && (i4.interpolate ? i4.values.length > u3 ? i4.values = y2.downsample(i4.values, u3) : i4.values.length < u3 && (i4.values = y2.upsample(i4.values, u3)) : i4.values.length > i4.points ? i4.values = i4.values.slice(i4.values.length - i4.points) : i4.values = [...new Array(i4.points - i4.values.length).fill(0), ...i4.values]) : Array.isArray(i4.values) ? i4.values.length > u3 ? i4.values = i4.values.slice(i4.values.length - u3) : i4.values.length < u3 && (i4.values = [...new Array(u3 - i4.values.length).fill(0), ...i4.values]) : i4.values = new Array(i4.points).fill(0);
        let g2 = i4.ymin, f = i4.ymax, b = i4.values.length <= 1e5;
        if (g2 === f ? (f = b ? Math.max(...i4.values) : 1, g2 = b ? Math.min(...i4.values) : 0) : isNaN(f) && (f = b ? Math.max(...i4.values) : 1), isNaN(g2) && (g2 = b ? Math.min(...i4.values) : 0), g2 > f) {
          let m = g2;
          f = g2, g2 = m;
        }
        let w = Math.abs(g2);
        if (i4.absmax = w > f ? w : f, "autoscale" in i4 || (i4.autoscale = true), i4.position || (i4.position = e.nLines - o - 1), i4.autoscale ? i4.autoscale === 2 ? ("clamp" in i4 || (i4.clamp = true), i4.scaled = y2.autoscale(i4.values, i4.position, a, i4.centerZero, g2, f, i4.clamp)) : (i4.scaled = i4.values, i4.line.scaleY = y2.getYScalar(i4.values, a, i4.centerZero, g2, f), i4.line.offsetY = y2.getYOffset(i4.position, a, g2, i4.line.scaleY)) : i4.scaled = i4.values, i4.scaled.forEach((m, _) => i4.line.setY(_, m)), i4.line instanceof p ? t3.addThickLine(i4.line) : i4.line instanceof d && t3.addDataLine(i4.line), "xAxis" in i4 || (i4.xAxis = true), i4.xAxis) {
          i4.xColor ? Array.isArray(i4.xColor) && (i4.xColor = new v(...i4.xColor)) : i4.xColor = new v(1, 1, 1, 0.3);
          let m = new d(i4.xColor, 2), _ = i4.autoscale ? (o + 1) * 2 / a - 1 - 1 / a : 0;
          m.constY(_), m.arrangeX(), m.xy[2] = 1, i4.x = m, t3.addAuxLine(m);
        }
        if (a > 1 && i4.autoscale && o !== a - 1) {
          e.dividerColor ? Array.isArray(e.dividerColor) && (e.dividerColor = new v(...e.dividerColor)) : e.dividerColor = new v(1, 1, 1, 1);
          let m = new d(e.dividerColor, 2);
          m.constY(i4.autoscale ? (o + 1) * 2 / a - 1 : 1), m.arrangeX(), m.xy[2] = 1, i4.divider = m, t3.addAuxLine(m);
        }
        if (typeof e.overlay == "object" && (i4.useOverlay || !("useOverlay" in i4))) {
          let m = e.nLines - i4.position - 1;
          n.fillText(l, 20, r.height * (m + 0.2) / e.nLines), n.fillText(`${Math.floor(f) === f ? f : f?.toFixed(5)} ${i4.units ? i4.units : ""}`, r.width - 100, r.height * (m + 0.2) / e.nLines), n.fillText(`${Math.floor(g2) === g2 ? g2 : g2?.toFixed(5)} ${i4.units ? i4.units : ""}`, r.width - 100, r.height * (m + 0.9) / e.nLines);
        }
        o++;
      }
      return requestAnimationFrame(h.anim), this.plots[e._id];
    }
    deinitPlot(e) {
      return typeof e == "string" && (e = this.plots[e]), e.plot.clear(), e.plot.removeAllLines(), true;
    }
    reinitPlot(e, t3) {
      if (typeof e == "string") {
        let s = e;
        e = this.plots[e], t3._id || (t3._id = s);
      }
      if (e.plot)
        return e.plot.clear(), e.plot.removeAllLines(), e.settings.overlayCtx && e.settings.overlayCtx.clearRect(0, 0, e.settings.overlay?.width, e.settings.overlay?.height), this.initPlot(t3, e.plot);
    }
    getChartSettings(e, t3) {
      let s = this.plots[e];
      if (s) {
        let h = Object.assign({}, s.initial);
        for (let o in s.initial.lines)
          typeof s.initial.lines[o]?.ymax != "number" && (h.lines[o].ymax = s.settings.lines[o]?.ymax), typeof s.initial.lines[o]?.ymin != "number" && (h.lines[o].ymin = s.settings.lines[o]?.ymin), t3 && (h.lines[o].values = s.settings.lines[o].values);
        return delete h.canvas, delete h.overlay, delete h.overlayCtx, h;
      }
    }
    update(e, t3, s = true) {
      if (typeof e == "string" && (e = this.plots[e]), !e)
        return false;
      if (t3) {
        let h = false, o, a;
        typeof e.settings.overlay == "object" && (o = e.settings.overlay, a = e.settings.overlayCtx, a.font = e.settings.overlayFont ? e.settings.overlayFont : "1em Courier", a.fillStyle = e.settings.overlayColor ? e.settings.overlayColor : "white");
        for (let r in t3)
          if (e.settings.lines[r] && e.settings.lines[r].line) {
            if (e.settings.lines[r]?.viewing === false)
              continue;
            let n = e.settings.lines[r];
            if (n.values) {
              if (e.settings.mode && e.settings.mode === "sweep") {
                "ct" in n || (n.ct = 0);
                let f = (b) => {
                  n.ct > n.values.length && (n.ct = 0), n.values[n.ct] = b, n.ct++;
                };
                Array.isArray(t3[r]) ? t3[r].forEach(f) : typeof t3[r] == "number" ? f(t3[r]) : t3[r].values && t3[r].values.forEach(f);
              } else
                Array.isArray(t3[r]) && n.values?.length < 1e5 ? (n.values.length === 0 && (n.values.length = n.points ? n.points : 1e3), t3[r].length === n.values.length ? n.values = t3[r] : y2.circularBuffer(n.values, t3[r])) : typeof t3[r] == "number" ? (n.values.push(t3[r]), n.values.shift()) : t3[r]?.values && (n.values.length === 0 && (n.values.length = n.points ? n.points : 1e3), t3[r].values.length === n.values.length ? n.values = t3[r].values : y2.circularBuffer(n.values, t3[r].values));
              n.values.length !== n.points && (n.interpolate ? n.values.length > n.points ? n.values = y2.downsample(n.values, n.points) : n.scaled.length < n.points && (n.values = y2.upsample(n.values, n.points)) : n.values.length > n.points ? n.values.splice(0, n.values.length - n.points) : n.values = new Array(n.points).fill(0).splice(n.points - n.values.length, 0, n.values));
              let l = n.ymin, i4 = n.ymax, u3 = n.values.length <= 1e5;
              if (l === i4 ? (i4 = u3 ? Math.max(...n.values) : 1, l = u3 ? Math.min(...n.values) : 0) : isNaN(i4) && (i4 = u3 ? Math.max(...n.values) : 1), isNaN(l) && (l = u3 ? Math.min(...n.values) : 0), l > i4) {
                let f = l;
                i4 = l, l = f;
              }
              let g2 = Math.abs(l);
              if (n.absmax = g2 > i4 ? g2 : i4, n.autoscale ? n.autoscale === 2 ? n.scaled = y2.autoscale(n.values, n.position, e.settings.nLines, n.centerZero, l, i4, n.clamp) : (n.scaled = n.values, n.line.scaleY = y2.getYScalar(n.values, e.settings.nLines, n.centerZero, l, i4), n.line.offsetY = y2.getYOffset(n.position, e.settings.nLines, l, n.line.scaleY)) : n.scaled = n.values, n.scaled.forEach((f, b) => {
                !n.autoscale && n.absmax > 1 ? n.line.setY(b, f / n.absmax) : n.line.setY(b, f);
              }), typeof e.settings.overlay == "object" && (n.useOverlay || !("useOverlay" in n))) {
                let f = e.settings.nLines - n.position - 1, b = o.height * f / e.settings.nLines, w = o.height / e.settings.nLines;
                if (a.clearRect(0, b, o.width, w), e.settings.mode && e.settings.mode === "sweep") {
                  a.fillStyle = e.settings.sweepColor ? e.settings.sweepColor : "rgba(0,255,0,0.25)", a.beginPath();
                  let m = o.width * n.ct / n.values.length;
                  a.moveTo(m, b), a.lineTo(m, w), a.stroke();
                }
                a.fillStyle = e.settings.overlayColor ? e.settings.overlayColor : "white", a.fillText(r, 20, o.height * (f + 0.2) / e.settings.nLines), a.fillText(`${Math.floor(i4) === i4 ? i4 : i4?.toFixed(5)} ${n.units ? n.units : ""}`, o.width - 100, o.height * (f + 0.2) / e.settings.nLines), a.fillText(`${Math.floor(l) === l ? l : l?.toFixed(5)} ${n.units ? n.units : ""}`, o.width - 100, o.height * (f + 0.9) / e.settings.nLines);
              }
            }
          } else
            e.settings.generateNewLines && !r.includes("timestamp") && (Array.isArray(t3[r]) && (t3[r] = { values: t3[r] }), !t3[r].nSec && !t3[r].nPoints && !e.settings.linePoints && (t3[r].nPoints = 1e3), h = true);
        if (h)
          return e.settings.cleanGeneration || Object.keys(e.initial.lines).forEach((r) => {
            t3[r] ? t3[r] = Object.assign(e.initial.lines[r], t3[r]) : t3[r] = e.initial.lines[r];
          }), this.reinitPlot(e, { _id: e.settings._id, lines: t3 }), true;
      }
      return s && requestAnimationFrame(e.anim), true;
    }
    updateLine(e, t3, s, h, o, a, r) {
      return e.numPoints !== t3.length && (s ? e.numPoints > t3.length ? t3 = y2.downsample(t3, e.numPoints) : e.numPoints < t3.length && (t3 = y2.upsample(t3, e.numPoints)) : t3.length > e.numPoints ? t3 = t3.slice(t3.length - e.numPoints) : t3 = [...new Array(t3.length).fill(0), ...t3]), h && (t3 = y2.autoscale(t3, o, a, r)), t3.forEach((n, l) => e.setY(l, n)), true;
    }
    static autoscale(e, t3 = 0, s = 1, h = false, o, a, r) {
      if (e?.length === 0)
        return e;
      let n = typeof a == "number" ? a : e.length <= 1e5 ? Math.max(...e) : 1, l = typeof o == "number" ? o : e.length <= 1e5 ? Math.min(...e) : 0, i4 = 1 / s, u3 = 1;
      if (h) {
        let g2 = Math.max(Math.abs(l), Math.abs(n));
        return g2 !== 0 && (u3 = i4 / g2), e.map((f) => (r && (f < l && (f = l), f > n && (f = n)), f * u3 + (i4 * (t3 + 1) * 2 - 1 - i4)));
      } else
        return n === l ? n !== 0 ? u3 = i4 / n : l !== 0 && (u3 = i4 / Math.abs(l)) : u3 = i4 / (n - l), e.map((g2) => (r && (g2 < l && (g2 = l), g2 > n && (g2 = n)), 2 * ((g2 - l) * u3 - 1 / (2 * s)) + (i4 * (t3 + 1) * 2 - 1 - i4)));
    }
    static getYScalar(e, t3 = 1, s = false, h, o) {
      if (e?.length === 0)
        return e;
      let a = typeof o == "number" ? o : e.length <= 1e5 ? Math.max(...e) : 1, r = typeof h == "number" ? h : e.length <= 1e5 ? Math.min(...e) : 0, n = 1 / t3, l = 1;
      if (s) {
        let i4 = Math.max(Math.abs(r), Math.abs(a));
        return i4 !== 0 && (l = n / i4), 2 * l;
      } else
        return a === r ? a !== 0 ? l = n / a : r !== 0 && (l = n / Math.abs(r)) : l = n / (a - r), 2 * l;
    }
    static getYOffset(e = 0, t3 = 1, s = 0, h = 1) {
      let o = 1 / t3, a = o * (e + 1) * 2 - 1 - o;
      return s !== 0 ? a -= s * h + 1 / t3 : a -= h + 1 / t3, a;
    }
    static absmax(e) {
      return Math.max(Math.abs(Math.min(...e)), Math.max(...e));
    }
    static downsample(e, t3, s = 1) {
      if (e.length > t3) {
        let h = new Array(t3), o = e.length / t3, a = e.length - 1, r = 0, n = 0;
        for (let l = o; l < e.length; l += o) {
          let i4 = Math.round(l);
          i4 > a && (i4 = a);
          for (let u3 = r; u3 < i4; u3++)
            h[n] += e[u3];
          h[n] /= (i4 - r) * s, n++, r = i4;
        }
        return h;
      } else
        return e;
    }
    static upsample(e, t3, s = 1) {
      var h = function(g2, f, b) {
        return (g2 + (f - g2) * b) * s;
      }, o = new Array(t3), a = (e.length - 1) / (t3 - 1);
      o[0] = e[0];
      for (var r = 1; r < t3 - 1; r++) {
        var n = r * a, l = Math.floor(n), i4 = Math.ceil(n), u3 = n - l;
        o[r] = h(e[l], e[i4], u3);
      }
      return o[t3 - 1] = e[e.length - 1], o;
    }
    static interpolate(e, t3, s = 1) {
      return e.length > t3 ? y2.downsample(e, t3, s) : e.length < t3 ? y2.upsample(e, t3, s) : e;
    }
    static HSLToRGB(e, t3, s, h = 255) {
      t3 /= 100, s /= 100;
      let o = (1 - Math.abs(2 * s - 1)) * t3, a = o * (1 - Math.abs(e / 60 % 2 - 1)), r = s - o / 2, n = 0, l = 0, i4 = 0;
      return 0 <= e && e < 60 ? (n = o, l = a, i4 = 0) : 60 <= e && e < 120 ? (n = a, l = o, i4 = 0) : 120 <= e && e < 180 ? (n = 0, l = o, i4 = a) : 180 <= e && e < 240 ? (n = 0, l = a, i4 = o) : 240 <= e && e < 300 ? (n = a, l = 0, i4 = o) : 300 <= e && e < 360 && (n = o, l = 0, i4 = a), n = (n + r) * h, l = (l + r) * h, i4 = (i4 + r) * h, [n, l, i4];
    }
    static circularBuffer(e, t3) {
      if (t3.length < e.length) {
        let s = e.slice(t3.length), h = e.length;
        e.splice(0, h, ...s, ...t3);
      } else if (t3.length > e.length) {
        let s = e.length;
        e.splice(0, s, ...t3.slice(t3.length - s));
      } else
        e.splice(0, e.length, ...t3);
      return e;
    }
    static formatDataForCharts(e, t3) {
      if (Array.isArray(e)) {
        if (Array.isArray(e[0])) {
          let s = {};
          if (e.forEach((h, o) => {
            s[o] = h;
          }), e = s, isNaN(e[0][0]))
            return;
        } else if (t3) {
          if (e = { [t3]: e }, isNaN(e[t3][0]))
            return;
        } else if (e = { 0: e }, isNaN(e[0][0]))
          return;
      } else if (typeof e == "object") {
        for (let s in e)
          if (typeof e[s] == "number" ? e[s] = [e[s]] : e[s]?.values && typeof e[s].values == "number" && (e[s].values = [e[s].values]), isNaN(e[s][0]))
            return;
      } else if (typeof e == "string") {
        let s;
        if (e.includes(`\r
`)) {
          let h = e.split(`\r
`);
          e = {}, h.forEach((o, a) => {
            o.includes("	") ? s = o.split("	") : o.includes(",") ? s = o.split(",") : o.includes("|") && (s = o.split("|")), s && s.forEach((r, n) => {
              if (r.includes(":")) {
                let [l, i4] = r.split(":"), u3 = parseFloat(i4);
                isNaN(u3) || (e[l] = [u3]);
              } else {
                let l = parseFloat(r);
                isNaN(l) || (e[n] = [l]);
              }
            });
          });
        } else
          e.includes("	") ? s = e.split("	") : e.includes(",") ? s = e.split(",") : e.includes("|") && (s = e.split("|"));
        e = {}, s && s.forEach((h, o) => {
          if (h.includes(":")) {
            let [a, r] = h.split(":"), n = parseFloat(r);
            isNaN(n) || (e[a] = [n]);
          } else {
            let a = parseFloat(h);
            isNaN(a) || (e[o] = [a]);
          }
        });
      } else
        typeof e == "number" && (t3 ? e = { [t3]: [e] } : e = { 0: [e] });
      return e;
    }
    static padTime(e, t3, s, h) {
      let o = (e[0] - t3) / s / h;
      return [...new Array(h - e.length).map((r, n) => t3 + o * (n + 1)), ...e];
    }
    static interpolateForTime(e, t3, s) {
      return y2.interpolate(e, Math.ceil(s * t3));
    }
  };
  var __defProp22 = Object.defineProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp22(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var _Math2 = class {
    constructor() {
    }
    static genSineWave(freq = 20, peakAmp = 1, nSec = 1, fs = 512, freq2 = 0, peakAmp2 = 1) {
      var sineWave = [];
      var t3 = [];
      var increment = 1 / fs;
      for (var ti = 0; ti < nSec; ti += increment) {
        var amplitude = Math.sin(2 * Math.PI * freq * ti) * peakAmp;
        amplitude += Math.sin(2 * Math.PI * freq2 * ti) * peakAmp2;
        sineWave.push(amplitude);
        t3.push(ti);
      }
      return [t3, sineWave];
    }
    static getSineAmplitude(frequency = 20, peakAmplitude = 1, ti = 0, tOffset = 0) {
      return Math.sin(this.TWO_PI * frequency * ti + tOffset) * peakAmplitude;
    }
    static mean(arr) {
      var sum = arr.reduce((prev, curr) => curr += prev);
      return sum / arr.length;
    }
    static mode(arr) {
      return arr.sort((a, b) => arr.filter((v2) => v2 === a).length - arr.filter((v2) => v2 === b).length).pop();
    }
    static std(arr, mean = void 0) {
      let avg = mean;
      if (!mean)
        avg = this.mean(arr);
      let summed = 0;
      for (let i4 = 0; i4 < arr.length; i4++) {
        let subbed = arr[i4] - avg;
        summed += subbed * subbed;
      }
      return Math.sqrt(summed / arr.length);
    }
    static relError(actual = [], forecast = [], abs = true) {
      if (actual.length !== forecast.length)
        throw new Error("Input arrays of same length!");
      let i4 = actual.length;
      let d2 = new Array(actual.length);
      for (let j = 0; j < i4; j++) {
        let dd = (actual[j] - forecast[j]) / actual[j];
        if (abs)
          dd = Math.abs(dd);
        d2[j] = dd;
      }
      return d2;
    }
    static informationEntropy(probabilities = []) {
      let len = probabilities.length;
      let entropy = new Array(len);
      for (let i4 = 0; i4 < len; i4++) {
        let ent = probabilities[i4] * Math.log(probabilities[i4]);
        if (isNaN(ent))
          ent = 0;
        entropy[i4] = ent;
      }
      return entropy;
    }
    static zscore(arr) {
      let mean = this.mean(arr);
      let std = this.std(arr, mean);
      let z3 = new Array().length(arr.length);
      for (let i4 = 0; i4 < arr.length; i4++) {
        z3[i4] = (arr[i4] - mean) / std;
      }
      return z3;
    }
    static variance(arr) {
      var mean = this.mean(arr);
      return arr.reduce((a, b) => a + (b - mean) ** 2, 0) / arr.length;
    }
    static dot(vec1, vec2) {
      var dot = 0;
      for (var i4 = 0; i4 < vec1.length; i4++) {
        dot += vec1[i4] * vec2[i4];
      }
      return dot;
    }
    static cross3D(vec1, vec2) {
      return [vec1[1] * vec2[2] - vec1[2] * vec2[1], vec1[2] * vec2[0] - vec1[0] * vec2[2], vec1[0] * vec2[1] - vec1[1] * vec2[0]];
    }
    static magnitude(vec) {
      var sqrd = 0;
      vec.forEach((c) => {
        sqrd += c * c;
      });
      return Math.sqrt(sqrd);
    }
    static distance(point1, point2) {
      var dsqrd = 0;
      point1.forEach((c, i4) => {
        dsqrd += (point2[i4] - c) * (point2[i4] - c);
      });
      return Math.sqrt(dsqrd);
    }
    static midpoint(point1 = [1, 2, 3], point2 = [3, 4, 5]) {
      return point1.map((c, i4) => {
        return (c + point2[i4]) * 0.5;
      });
    }
    static normalize(vec) {
      var norm = 0;
      norm = this.magnitude(vec);
      var vecn = new Array(vec.length);
      vec.forEach((c, i4) => {
        vecn[i4] = c * norm;
      });
      return vecn;
    }
    static normalizeSeries(arr = [], fromZero = true) {
      let max = Math.max(...arr);
      let min = Math.min(...arr);
      if (fromZero == false) {
        max = Math.max(max, Math.abs(min));
        min = 0;
      }
      if (max - min === 0) {
        min = 0;
        if (max === 0)
          max = 1e-13;
      }
      return arr.map((v2) => (v2 - min) / (max - min));
    }
    static quadraticFormula(a, b, c) {
      let bbmac4 = Math.sqrt(b * b - 4 * a * c);
      if (!isNaN(bbmac4))
        return ["complex", "complex"];
      let _a2 = 1 / (2 * a);
      if (bbmac4 === 0)
        return [b * _a2];
      let nb = -b;
      return [(nb + bbmac4) * _a2, (nb - bbmac4) * _a2];
    }
    static newtonsMethod(foo = (x22) => {
      return Math.pow(x22, 5) + x22 * x22 - x22 - 0.2;
    }, start = 0, end = 1, precision = 0.01, attempts = 10) {
      let roots = [];
      for (let i4 = 0; i4 < attempts; i4++) {
        let seedx = Math.random() * (end - start);
        let guess = foo(seedx);
        let guess2 = foo(seedx + precision);
        let slope = (guess2 - guess) / precision;
        let xn = seedx + precision;
        while (Math.abs(slope) > precision) {
          let step = -guess / slope2;
          let xn12 = xn + step;
          guess = guess2;
          guess2 = foo(xn12);
          let slope2 = (guess2 - guess) / (xn12 - xn);
        }
        let idx;
        let f = roots.find((root2, i22) => {
          if (Math.abs(xn1 - root2) < precision) {
            idx = i22;
            return true;
          }
        });
        if (f)
          roots[idx] = (xn1 + f) * 0.5;
        else
          roots.push(xn1);
      }
      return roots;
    }
    static makeVec(point1, point2) {
      var vec = [];
      point1.forEach((c, i4) => {
        vec.push(point2[i4] - c);
      });
      return vec;
    }
    static getBufferedValueByCoordinates(vb = new Array(300).fill(1), dims = [10, 10, 2], coordinate = [1, 2, 1], cardinal = void 0) {
      let getIdx = (foundIdx = 0, dimIdx = 0) => {
        if (dimIdx === dims.length)
          return foundIdx;
        if (dimIdx == 0)
          foundIdx += coordinate[dimIdx];
        else if (dims[dimIdx] == 0)
          dimsAt0++;
        else {
          let reMul = (val = coordinate[dimIdx], di = dimIdx - 1) => {
            val *= dims[di];
            di--;
            if (di == 0)
              return val;
            else
              return reMul(val, di);
          };
          foundIdx += reMul(coordinate[dimIdx] + 1, dimIdx - 1);
        }
        dimIdx++;
        return getIdx(foundIdx, dimIdx);
      };
      let found = getIdx();
      if (cardinal) {
        if (coordinate[coordinate.length - 1] === 0) {
          let lastnonzero = 0;
          let idx = 0;
          while (idx !== coordinate.length - 1) {
            if (coordinate[idx] !== 0)
              lastnonzero = idx;
            idx++;
          }
          return vb[found - lastnonzero + cardinal];
        }
        return vb[found - dims.length + cardinal];
      } else {
        if (coordinate[coordinate.length - 1] === 0) {
          let lastnonzero = 0;
          let idx = 0;
          while (idx !== coordinate.length - 1) {
            if (coordinate[idx] !== 0)
              lastnonzero = idx;
            idx++;
          }
          return vb.slice(found - lastnonzero, found + 1);
        }
        return vb.slice(found - dims.length, found + 1);
      }
    }
    static forBufferedMat(vb = new Array(100).fill(1), dims = [10, 10], asIndex = (v2, i4, x22, y22) => {
      return v2 + x22 + y22;
    }) {
      let coordinate = [];
      let idx = 0;
      let recurseFor = (depth = 0, nextDepth = depth + 1) => {
        let result = new Array(vb.length);
        for (let di = 0; di < dims[depth]; di++) {
          coordinate[depth] = di;
          if (dims[nextDepth])
            recurseFor(nextDepth);
          else {
            result[idx] = asIndex(vb[idx], idx, ...coordinate);
            idx++;
          }
        }
        return result;
      };
      let recurseForArrFuncs = (depth, nextDepth = depth + 1) => {
        let result = new Array(vb.length);
        for (let di = 0; di < dims[depth]; di++) {
          coordinate[depth] = di;
          if (dims[nextDepth])
            recurseFor(nextDepth);
          else {
            for (let dj = 0; dj < dims.length; dj++) {
              result[idx] = asIndex[dj](vb[idx], idx, ...coordinate);
              idx++;
            }
          }
        }
        return result;
      };
      if (typeof asIndex === "function") {
        return recurseFor();
      } else if (Array.isArray(asIndex)) {
        return recurseForArrFuncs();
      }
    }
    static mapBufferedMat(buffer2 = new Array(100).fill(1), dimensions = [10, 10], asIndex = (v2, idx, i4, j) => {
      console.log(`value:${v2}, idx:${idx}, x:${i4},y:${j}`);
      return v2 + i4 + j;
    }) {
      let coordinate = new Array(dimensions.length).fill(0);
      const iterateCoordinate = (coord, idx = 0) => {
        if (coord[idx] >= dimensions[idx]) {
          coord[idx] = 0;
          idx++;
          if (idx === dimensions.length)
            return;
          iterateCoordinate(coord, idx);
        } else
          coord[idx]++;
      };
      let result = new Array(buffer2.length);
      let i4 = 0;
      if (typeof asIndex === "function") {
        while (i4 < buffer2.length) {
          result[i4] = asIndex(buffer2[i4], i4, ...coordinate);
          i4 += dimensions.length;
          iterateCoordinate(coordinate);
        }
      } else if (Array.isArray(asIndex)) {
        while (i4 < buffer2.length) {
          asIndex.forEach((func) => {
            result[i4] = func(buffer2[i4], i4, ...coordinate);
            i4++;
            iterateCoordinate(coordinate);
          });
        }
      }
      return result;
    }
    static combinations(choices = ["a", "b", "c"], vecsize = 3) {
      var result = [];
      if (vecsize <= 0) {
        result.push([]);
      } else {
        _Math2.combinations(choices, vecsize - 1).forEach(function(previousComb) {
          choices.forEach(function(element) {
            result.push([element].concat(previousComb));
          });
        });
      }
      return result;
    }
    static generateCoordinateSpace(upperBounds = [10, 10, 10], lowerBounds = [-10, -10, -10], steps = [1, 1, 1], mutater = void 0) {
      for (let i4 = 0; i4 < upperBounds.length; i4++) {
        if (lowerBounds[i4] > upperBounds[i4]) {
          let temp = upperBounds[i4];
          upperBounds[i4] = lowerBounds[i4];
          lowerBounds[i4] = temp;
        }
      }
      let result = [];
      let copy = [...upperBounds];
      let lastindex = copy.length - 1;
      result.push([...copy]);
      while (copy[0] >= lowerBounds[0]) {
        let checkNextIndex = (decrIdx2) => {
          if (copy[decrIdx2] <= lowerBounds[decrIdx2]) {
            if (decrIdx2 === 0)
              return;
            copy[decrIdx2] = upperBounds[decrIdx2];
            decrIdx2--;
            if (decrIdx2 < 0)
              return;
            if (typeof steps[decrIdx2] == "function")
              copy[decrIdx2] -= steps[decrIdx2](copy[decrIdx2]);
            else
              copy[decrIdx2] -= steps[decrIdx2];
            checkNextIndex(decrIdx2);
          }
        };
        let decrIdx = lastindex;
        if (typeof steps[decrIdx] == "function")
          copy[decrIdx] -= steps[decrIdx](copy[decrIdx]);
        else
          copy[decrIdx] -= steps[decrIdx];
        result.push([...copy]);
        checkNextIndex(decrIdx);
        if (mutater)
          result[result.length - 1] = mutater(result[result.length - 1]);
      }
      return result;
    }
    static calcVectorField(coordinates = [[0, 0], [0, 1], [1, 0], [1, 1]], formula = (x22, y22) => {
      return [x22 * 10, y22 * 10];
    }) {
      return coordinates.map((vec) => formula(...vec));
    }
    static transpose(mat) {
      return mat[0].map((_, colIndex) => mat.map((row) => row[colIndex]));
    }
    static matmul(a, b) {
      var aNumRows = a.length, aNumCols = a[0].length, bNumRows = b.length, bNumCols = b[0].length, m = new Array(aNumRows);
      for (var r = 0; r < aNumRows; ++r) {
        m[r] = new Array(bNumCols);
        for (var c = 0; c < bNumCols; ++c) {
          m[r][c] = 0;
          for (var i4 = 0; i4 < aNumCols; ++i4) {
            m[r][c] += a[r][i4] * b[i4][c];
          }
        }
      }
      return m;
    }
    static matscale(mat, scalar) {
      let m = [];
      for (var i4 = 0; i4 < mat.length; i4++) {
        m[i4] = [];
        for (let j = 0; j < mat[0].length; j++) {
          m[i4][j] = mat[i4][j] * scalar;
        }
      }
      return m;
    }
    static matadd(a, b) {
      let m = [];
      for (let i4 = 0; i4 < a.length; i4++) {
        m[i4] = [];
        for (var j = 0; j < a[0].length; j++) {
          m[i4][j] = a[i4][j] + b[i4][j];
        }
      }
      return m;
    }
    static matsub(a, b) {
      let m = [];
      for (let i4 = 0; i4 < a.length; i4++) {
        m[i4] = [];
        for (var j = 0; j < a[0].length; j++) {
          m[i4][j] = a[i4][j] - b[i4][j];
        }
      }
      return m;
    }
    static histogram(arr = [], binSize = 1, nBins = void 0) {
      let copy = [...arr];
      copy.sort(function(a, b) {
        return a - b;
      });
      let binStart = Math.min(...copy);
      if (typeof nBins === "number") {
        let binEnd = Math.max(...copy);
        binSize = Math.abs((binEnd - binStart) / (nBins - 1));
      }
      let j = binStart;
      let binx = [];
      let biny = [];
      for (let i4 = 0; i4 < copy.length; i4++) {
        let binidx = binSize * j;
        if (copy[i4] > binStart + binidx) {
          j++;
          binidx += binSize;
          let binmin = binStart + binidx;
          let binmid = binmin + binidx * 0.5;
          binx.push(binmid);
          biny.push(0);
        }
        biny[biny.length - 1]++;
      }
      return [binx, biny];
    }
    static normalDistribution(samples = [], normalize = true, cutoff = 1e-4) {
      let m = this.mean(samples);
      let vari = this.variance(samples);
      let nSamples = samples.length;
      let probabilities = [];
      let denom = 1 / (this.TWO_PI * vari);
      let _variance = 1 / vari;
      let sum = 0;
      for (let i4 = 0; i4 < nSamples; i4++) {
        let px = Math.exp(-0.5 * Math.pow((samples[i4] - m) * _variance, 2)) * denom;
        if (px < cutoff)
          px = 0;
        probabilities.push(px);
        sum += px;
      }
      if (normalize) {
        let _sum = 1 / sum;
        probabilities = probabilities.map((x22) => x22 * _sum);
      }
      return probabilities;
    }
    static expectedValue(samples = [], probabilities = this.normalDistribution(samples)) {
      return samples.reduce((sum, item, idx) => sum + item * probabilities[idx]);
    }
    static originMoment(samples = [], probabilities = this.normalDistribution(samples), order = 1) {
      return samples.reduce((sum, item, idx) => sum + Math.pow(item, order) * probabilities[idx]);
    }
    static centralMoment(samples = [], probabilities = this.normalDistribution(samples), order = 1) {
      let m = this.mean(samples);
      return samples.reduce((sum, item, idx) => sum + Math.pow(item - m, order) * probabilities[idx] / samples.length);
    }
    static linearDiscriminantAnalysis(samples = [], classifier = []) {
      let mean = this.mean(samples);
      let meank = this.mean(classifier);
      let covariance = this.cov1d(samples, classifier);
      let probs = this.normalDistribution(samples);
      let dk = [];
      for (let i4 = 0; i4 < samples.length; i4++) {
        dk.push(x[i4] * covariance * meank - 0.5 * mean * covariance * meank + Math.log10(probs[i4]));
      }
      return dk;
    }
    static conv1D(arr = [], kern = [1 / 3, 1 / 3, 1 / 3], pad = Math.floor(kern.length * 0.5)) {
      let result = [];
      let _n = 1 / kern.length;
      if (pad > 0) {
        let pads = new Array(pad).fill(0);
        arr = [...pads, ...arr, ...pads];
      }
      let start = Math.floor(kern.length * 0.5);
      let end = arr.length - kern.length + start;
      for (let i4 = start; i4 < end; i4++) {
        let acc = 0;
        for (let j = 0; j < kern.length; j++) {
          acc += arr[i4 - start] * kern[j];
        }
        result.push(acc * _n);
      }
      return result;
    }
    static conv2D(mat = [[], [], []], kern = [[], [], []], pad = 0) {
      let result = new Array(mat.length - Math.ceil(kern.length * 0.5)).fill([]);
      let mat_t;
      let kern_t = _Math2.transpose(kern_t);
      if (pad > 0) {
        let pads = new Array(pad).fill(0);
        mat_t = _Math2.transpose(mat);
        for (let i22 = 0; i22 < mat_t.length; i22++) {
          mat_t[i22] = [...pads, ...mat_t[i22], ...pads];
        }
        mat = _Math2.transpose(mat_t);
        for (let j = 0; j < mat.length; j++) {
          mat[j] = [...pads, ...mat[j], ...pads];
        }
      }
      let startr = Math.floor(kern[0].length * 0.5);
      let startl = Math.floor(kern_t[0].length * 0.5);
      let endr = mat[0].length - kern[0].length + startr;
      let endl = mat_t[0].length - kern_t[0].length + startl;
      let _n = 1 / (kern[0].length * kern_t[0].length);
      let iters = endr * endl;
      let i4 = startr;
      let x22;
      let y22 = startl;
      while (i4 < iters) {
        let acc = 0;
        x22 = i4 % mat[0].length;
        if (x22 === 0) {
          y22++;
        }
        for (let j = 0; j < kern[0].length; j++) {
          for (let k = 0; k < kern_t[0].length; j++) {
            acc += mat[y22 - startl + k][x22 - startr + j] * kern[k][j];
          }
          result[y22].push(acc * _n);
        }
        i4++;
      }
      return result;
    }
    static cov2d(mat) {
      var mattransposed = this.transpose(mat);
      var matproducts = [];
      var rowmeans = [];
      var colmeans = [];
      mat.forEach((row, idx) => {
        rowmeans.push(this.mean(row));
      });
      mattransposed.forEach((col, idx) => {
        colmeans.push(this.mean(col));
      });
      mat.forEach((row, idx) => {
        matproducts.push([]);
        for (var col = 0; col < row.length; col++) {
          matproducts[idx].push((mat[idx][col] - rowmeans[idx]) * (mat[idx][col] - colmeans[col]) / (row.length - 1));
        }
      });
      var matproductstransposed = this.transpose(matproducts);
      var aNumRows = matproducts.length, aNumCols = matproducts[0].length, bNumRows = matproductstransposed.length, bNumCols = matproductstransposed[0].length, m = new Array(aNumRows);
      for (var r = 0; r < aNumRows; ++r) {
        m[r] = new Array(bNumCols);
        for (var c = 0; c < bNumCols; ++c) {
          m[r][c] = 0;
          for (var i4 = 0; i4 < aNumCols; ++i4) {
            m[r][c] += matproducts[r][i4] * matproductstransposed[i4][c] / (mat[0].length - 1);
          }
        }
      }
      return m;
    }
    static cov1d(arr1 = [], arr2 = []) {
      return this.cov2d([arr1, arr2]);
    }
    static cov3d(x22 = [], y22 = [], z3 = []) {
      return [[this.cov1d(x22, x22), this.cov1d(x22, y22), this.cov1d(x22, z3)], [this.cov1d(y22, x22), this.cov1d(y22, y22), this.cov1d(y22, z3)], [this.cov1d(z3, x22), this.cov1d(z3, y22), this.cov1d(z3, z3)]];
    }
    static covNd(dimensionalData = []) {
      let covariance = [];
      dimensionalData.forEach((arr, i4) => {
        covariance.push([]);
        dimensionalData.forEach((arr2, j) => {
          covariance[i4].push(this.cov1d(arr, arr2));
        });
      });
    }
    static eigens2x2(mat = [[1, 2], [3, 4]]) {
      let det = mat[0][0] * mat[1][1] - mat[0][1] * mat[1][0];
      let mean = (mat[0][0] + mat[1][1]) * 0.5;
      let sqrt = Math.sqrt(mean * mean - det);
      let eig1 = mean + sqrt;
      let eig2 = mean - sqrt;
      return [eig1, eig2];
    }
    static eigenvectors2x2(mat = [[1, 2], [3, 4]], eigens = [1, 2]) {
      let v1 = [-mat[0][1], mat[0][0] - eigens[0]];
      if (v1[0] === 0 && v1[1] === 0) {
        v1[0] = mat[1][1] - eigens[0];
        v1[1] = -mat[1][0];
      }
      let v2 = [-mat[0][1], mat[0][0] - eigens[1]];
      if (v2[0] === 0 && v2[1] === 0) {
        v2[0] = mat[1][1] - eigens[1];
        v2[1] = -mat[1][0];
      }
      return [v1, v2];
    }
    static fastpca2d(xarr, yarr) {
      let cov1d = this.cov1d(xarr, yarr);
      let eigs = this.eigens2x2(cov1d);
      if (eigs[1] > eigs[0])
        eigs.reverse();
      let evs = this.eigenvectors2x2(cov1d, eigs);
      console.log(eigs, evs);
      return [eigs, evs];
    }
    static crosscorrelation(arr1, arr2) {
      var arr2buf = [...arr2, ...Array(arr2.length).fill(0)];
      var mean1 = this.mean(arr1);
      var mean2 = this.mean(arr2);
      var arr1Est = arr1.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr1Est = Math.sqrt(Math.abs(arr1Est));
      var arr2Est2 = arr2.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr2Est2 = Math.sqrt(Math.abs(arr2Est2));
      let denom = arr1Est * arr2Est2;
      if (denom === 0)
        denom = 1e-26;
      var _arrEstsMul = 1 / denom;
      var correlations = new Array(arr1.length).fill(0);
      for (var delay = 0; delay < arr1.length; delay++) {
        var r = arr1.reduce((sum, item, i4) => sum += (item - mean1) * (arr2buf[delay + i4] - mean2));
        correlations[delay] = r * _arrEstsMul;
      }
      return correlations;
    }
    static autocorrelation(arr1) {
      var delaybuf = [...arr1, ...Array(arr1.length).fill(0)];
      var mean1 = this.mean(arr1);
      var arr1Est = arr1.reduce((sum, item) => sum += Math.pow(item - mean1, 2));
      arr1Est = Math.sqrt(Math.abs(arr1Est));
      let denom = arr1Est * arr2Est;
      if (denom === 0)
        denom = 1e-26;
      var _arr1estsqrd = 1 / denom;
      var correlations = new Array(arr1.length).fill(0);
      for (var delay = 0; delay < arr1.length; delay++) {
        var r = arr1.reduce((sum, item, i4) => sum += (item - mean1) * (delaybuf[delay + i4] - mean1));
        correlations[delay] = r * _arr1estsqrd;
      }
      return correlations;
    }
    static autocorrelation2dNormalized(mat2d2) {
      let result = [];
      for (let y22 = 0; y22 < mat2d2.length; y22++) {
        result.push([]);
        for (let x22 = 0; x22 < mat2d2[y22].length; x22++) {
          let G3 = 0;
          let _G = 0;
          for (let b = 0; b < mat2d2.length; b++) {
            for (let a = 0; a < mat2d2[b].length; a++) {
              G3 += mat2d2[y22][x22] * mat2d2[mat2d2.length - 1 - b][mat2d2[y22].length - 1 - a];
              _G += mat2d2[y22][x22] * mat2d2[mat2d2.length - 1][mat2d2[y22].length - 1];
            }
          }
          result[y22][x22] = G3 / _G - 1;
        }
      }
      return result;
    }
    static crosscorrelation2d(mat2d1, mat2d2) {
      let result = [];
      for (let y22 = 0; y22 < mat2d1.length; y22++) {
        result.push([]);
        for (let x22 = 0; x22 < mat2d1[y22].length; x22++) {
          let G3 = 0;
          for (let b = 0; b < mat2d2.length; b++) {
            for (let a = 0; a < mat2d2[b].length; a++) {
              G3 += mat2d1[y22][x22] * mat2d2[mat2d2.length - 1 - b][mat2d2[y22].length - 1 - a];
            }
          }
          result[y22][x22] = G3;
        }
      }
      return result;
    }
    static crosscorrelation2dNormalized(mat2d1, mat2d2) {
      let result = [];
      for (let y22 = 0; y22 < mat2d1.length; y22++) {
        result.push([]);
        for (let x22 = 0; x22 < mat2d1[y22].length; x22++) {
          let G3 = 0;
          let _G = 0;
          for (let b = 0; b < mat2d2.length; b++) {
            for (let a = 0; a < mat2d2[b].length; a++) {
              G3 += mat2d1[y22][x22] * mat2d2[mat2d.length - 1 - b][mat2d2[y22].length - 1 - a];
              _G += mat2d1[y22][x22] * mat2d2[mat2d2.length - 1][mat2d2[y22].length - 1];
            }
          }
          result[y22][x22] = G3 / _G - 1;
        }
      }
      return result;
    }
    static correlograms(dat = [[], []]) {
      var correlograms = [];
      dat.forEach((row1, i4) => {
        dat.forEach((row2, j) => {
          if (j >= i4) {
            correlograms.push(_Math2.crosscorrelation(row1, row2));
          }
        });
      });
      return correlograms;
    }
    static dft(sineWave = []) {
      var TWOPI = 2 * 3.141592653589793;
      var real = [];
      var imag = [];
      var mags = [];
      for (var k = 0; k < sineWave.length; k++) {
        real.push(0);
        imag.push(0);
        for (var j = 0; j < sineWave.length; j++) {
          var shared = TWOPI * k * j / sineWave.length;
          real[k] = real[k] + sineWave[j] * Math.cos(shared);
          imag[k] = imag[k] - sineWave[j] * Math.sin(shared);
        }
        mags.push(Math.sqrt(real[k] * real[k] + imag[k] * imag[k]));
      }
      function orderMagnitudes(unorderedMags) {
        return [...unorderedMags.slice(Math.ceil(unorderedMags.length * 0.5), unorderedMags.length), ...unorderedMags.slice(0, Math.ceil(unorderedMags.length * 0.5))];
      }
      mags = orderMagnitudes(mags);
      let halflen = mags.length * 0.5;
      let freqs = mags.map((m, i4) => {
        return i4 - halflen;
      });
      return { real, imag, freqs, mags };
    }
    static sma(arr = [], window2) {
      var smaArr = [];
      for (var i4 = 0; i4 < arr.length; i4++) {
        if (i4 == 0) {
          smaArr.push(arr[0]);
        } else if (i4 < window2) {
          var arrslice = arr.slice(0, i4 + 1);
          smaArr.push(arrslice.reduce((previous, current) => current += previous) / (i4 + 1));
        } else {
          var arrslice = arr.slice(i4 - window2, i4);
          smaArr.push(arrslice.reduce((previous, current) => current += previous) / window2);
        }
      }
      return smaArr;
    }
    static sum(arr = []) {
      if (arr.length > 0) {
        var sum = arr.reduce((prev, curr) => curr += prev);
        return sum;
      } else {
        return 0;
      }
    }
    static reduceArrByFactor(arr, factor = 2) {
      let x22 = arr.filter((element, index) => {
        return index % factor === 0;
      });
      return x22;
    }
    static makeArr(startValue, stopValue, nSteps) {
      var arr = [];
      var step = (stopValue - startValue) / (nSteps - 1);
      for (var i4 = 0; i4 < nSteps; i4++) {
        arr.push(startValue + step * i4);
      }
      return arr;
    }
    static autoscale(array, stackedLines = 1, stackPosition = 0, centerZero = false) {
      if (array?.length === 0)
        return array;
      let max = Math.max(...array);
      let min = Math.min(...array);
      let _lines = 1 / stackedLines;
      let scalar;
      if (centerZero) {
        let absmax = Math.max(Math.abs(min), Math.abs(max));
        scalar = _lines / absmax;
        return array.map((y22) => y22 * scalar + (_lines * (stackPosition + 1) * 2 - 1 - _lines));
      } else {
        scalar = _lines / (max - min);
        return array.map((y22) => 2 * ((y22 - min) * scalar - 1 / (2 * stackedLines)) + (_lines * (stackPosition + 1) * 2 - 1 - _lines));
      }
    }
    static absmax(array) {
      return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
    }
    static downsample(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        let output = new Array(fitCount);
        let incr = array.length / fitCount;
        let lastIdx = array.length - 1;
        let last = 0;
        let counter = 0;
        for (let i4 = incr; i4 < array.length; i4 += incr) {
          let rounded = Math.round(i4);
          if (rounded > lastIdx)
            rounded = lastIdx;
          for (let j = last; j < rounded; j++) {
            output[counter] += array[j];
          }
          output[counter] /= (rounded - last) * scalar;
          counter++;
          last = rounded;
        }
        return output;
      } else
        return array;
    }
    static interpolateArray(data, fitCount, scalar = 1) {
      var linearInterpolate = function(before2, after2, atPoint2) {
        return (before2 + (after2 - before2) * atPoint2) * scalar;
      };
      var newData = new Array();
      var springFactor = (data.length - 1) / (fitCount - 1);
      newData[0] = data[0];
      for (var i4 = 1; i4 < fitCount - 1; i4++) {
        var tmp = i4 * springFactor;
        var before = Math.floor(tmp);
        var after = Math.ceil(tmp);
        var atPoint = tmp - before;
        newData[i4] = linearInterpolate(data[before], data[after], atPoint);
      }
      newData[fitCount - 1] = data[data.length - 1];
      return newData;
    }
    static isExtrema(arr, critical = "peak") {
      let ref = [...arr];
      if (ref.length % 2 === 0)
        ref.pop();
      if (arr.length > 1) {
        let pass = true;
        for (let i4 = 0; i4 < ref.length; i4++) {
          let val = ref[i4];
          if (critical === "peak") {
            if (i4 < Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i4 > Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          } else if (critical === "valley") {
            if (i4 < Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i4 > Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          } else {
            if (i4 < Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i4 > Math.floor(ref.length * 0.5) && val <= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          }
        }
        if (critical !== "peak" && critical !== "valley" && pass === false) {
          pass = true;
          for (let i4 = 0; i4 < ref.length; i4++) {
            let val = ref[i4];
            if (i4 < Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            } else if (i4 > Math.floor(ref.length * 0.5) && val >= ref[Math.floor(ref.length * 0.5)]) {
              pass = false;
              break;
            }
          }
        }
        return pass;
      } else
        return void 0;
    }
    static isCriticalPoint(arr, critical = "peak") {
      let ref = [...arr];
      if (ref.length % 2 === 0)
        ref.pop();
      if (arr.length > 1) {
        let pass = true;
        for (let i4 = 0; i4 < ref.length; i4++) {
          let val = ref[i4];
          if (critical === "peak") {
            if (i4 < ref.length * 0.5 && val <= 0) {
              pass = false;
              break;
            } else if (i4 > ref.length * 0.5 && val > 0) {
              pass = false;
              break;
            }
          } else if (critical === "valley") {
            if (i4 < ref.length * 0.5 && val >= 0) {
              pass = false;
              break;
            } else if (i4 > ref.length * 0.5 && val < 0) {
              pass = false;
              break;
            }
          } else {
            if (i4 < ref.length * 0.5 && val >= 0) {
              pass = false;
              break;
            } else if (i4 > ref.length * 0.5 && val < 0) {
              pass = false;
              break;
            }
          }
        }
        if (critical !== "peak" && critical !== "valley" && pass === false) {
          pass = true;
          for (let i4 = 0; i4 < ref.length; i4++) {
            let val = ref[i4];
            if (i4 < ref.length * 0.5 && val <= 0) {
              pass = false;
              break;
            } else if (i4 > ref.length * 0.5 && val > 0) {
              pass = false;
              break;
            }
          }
        }
        return pass;
      } else
        return void 0;
    }
    static getPeakThreshold(arr, peakIndices, thresholdVar) {
      let threshold;
      let filtered = arr.filter((o, i4) => {
        if (peakIndices.indexOf(i4) > -1)
          return true;
      });
      if (thresholdVar === 0) {
        threshold = this.mean(filtered);
      } else
        threshold = (thresholdVar + this.mean(filtered)) * 0.5;
      return threshold;
    }
    static column(mat, x22) {
      let col = new Array(mat.length).fill(0).map(() => new Array(1).fill(0));
      for (let i4 = 0; i4 < mat.length; i4++) {
        col[i4][0] = mat[i4][x22];
      }
      return col;
    }
    static flatten_vector(v2) {
      let v_new = [];
      for (let i4 = 0; i4 < v2.length; i4++) {
        v_new[i4] = v2[i4][0];
      }
      return v_new;
    }
    static squared_difference(v1, v2) {
      let sum = 0;
      for (let i4 = 0; i4 < v1.length; i4++) {
        sum = sum + Math.pow(v1[i4] - v2[i4], 2);
      }
      return sum;
    }
    static shift_deflate(mat, eigenvalue, eigenvector) {
      let len = Math.sqrt(this.matmul(this.transpose(eigenvector), eigenvector));
      let U = this.matscale(eigenvector, 1 / len);
      let delta = this.matscale(this.matmul(U, this.transpose(U)), eigenvalue);
      let M_new = this.matsub(mat, delta);
      return M_new;
    }
    static eigenvalue_of_vector(mat, eigenvector) {
      ev = this.matmul(this.matmul(this.transpose(eigenvector), mat), eigenvector);
      return ev;
    }
    static power_iteration(mat, tolerance = 1e-5, max_iterations = 1e3) {
      let rank = mat.length;
      let eigenvector = new Array(rank).fill(0).map(() => new Array(1).fill(Math.sqrt(rank)));
      let eigenvalue = this.eigenvalue_of_vector(mat, eigenvector);
      let epsilon = 1;
      let iter = 0;
      while (epsilon > tolerance && iter < max_iterations) {
        let old_eigenvalue = JSON.parse(JSON.stringify(eigenvalue));
        let Mv = this.matmul(mat, eigenvector);
        eigenvector = this.normalize(Mv);
        eigenvalue = this.eigenvalue_of_vector(mat, eigenvector);
        epsilon = Math.abs(eigenvalue - old_eigenvalue);
        iter++;
      }
      ;
      return [eigenvalue, eigenvector];
    }
    static eigens(mat, tolerance = 1e-4, max_iterations = 1e3) {
      let eigenvalues = [];
      let eigenvectors = [];
      for (let i4 = 0; i4 < mat.length; i4++) {
        let result = this.power_iteration(mat, tolerance, max_iterations);
        let eigenvalue = result[0];
        let eigenvector = result[1];
        eigenvalues[i4] = eigenvalue;
        eigenvectors[i4] = this.flatten_vector(eigenvector);
        mat = this.shift_deflate(mat, eigenvalue, eigenvector);
      }
      return [eigenvalues, eigenvectors];
    }
    static pca(mat, tolerance = 1e-5) {
      let dims = mat.length;
      let t3 = new Array(dims);
      let p2 = new Array(dims);
      let mat_t = this.transpose(mat);
      t3[0] = this.column(mat, 0);
      let epsilon = 1;
      let iter = 0;
      while (espilon > tolerance) {
        iter++;
        p2[0] = this.matmul(mat_t, t3[0]);
        let tp = this.matmul(this.transpose(t3[0]), t3[0]);
        p2[0] = this.matscale(p2[0], 1 / tp);
        let p_length = Math.sqrt(this.matmul(this.transpose(p2[0]), p2[0]));
        p2[0] = this.matscale(p2[0], 1 / p_length);
        let t_new = this.matmul(mat, p2[0]);
        let pp = this.matmul(this.transpose(p2[0]), p2[0]);
        t_new = this.matscale(t_new, 1 / pp);
        epsilon = this.squared_difference(t3[0], t_new);
        t3[0] = JSON.parse(JSON.stringify(t_new));
      }
      let components = this.matmul(this.transpose(t3[0]), t3[0]);
      return components;
    }
    static circularBuffer(arr, newEntries) {
      if (Array.isArray(newEntries)) {
        if (newEntries.length < arr.length) {
          let slice = arr.slice(newEntries.length);
          let len = arr.length;
          arr.splice(0, len, ...slice, ...newEntries);
        } else if (newEntries.length > arr.length) {
          let len = arr.length;
          arr.splice(0, len, newEntries.slice(len - newEntries.length));
        } else {
          arr.splice(0, arr.length, ...newEntries);
        }
      } else {
        arr.push(newEntries);
        arr.shift();
      }
      return arr;
    }
    static HSLToRGB(h, s, l, scalar = 255) {
      s /= 100;
      l /= 100;
      let c = (1 - Math.abs(2 * l - 1)) * s, x22 = c * (1 - Math.abs(h / 60 % 2 - 1)), m = l - c / 2, r = 0, g2 = 0, b = 0;
      if (0 <= h && h < 60) {
        r = c;
        g2 = x22;
        b = 0;
      } else if (60 <= h && h < 120) {
        r = x22;
        g2 = c;
        b = 0;
      } else if (120 <= h && h < 180) {
        r = 0;
        g2 = c;
        b = x22;
      } else if (180 <= h && h < 240) {
        r = 0;
        g2 = x22;
        b = c;
      } else if (240 <= h && h < 300) {
        r = x22;
        g2 = 0;
        b = c;
      } else if (300 <= h && h < 360) {
        r = c;
        g2 = 0;
        b = x22;
      }
      r = (r + m) * scalar;
      g2 = (g2 + m) * scalar;
      b = (b + m) * scalar;
      return [r, g2, b];
    }
    static p300(event_timestamps = [], raw_signal = [], signal_timestamps = [], sps6 = 256) {
      let smoothingstep = Math.floor(sps6 / 10);
      let smoothed = this.sma(raw_signal, smoothingstep);
      let peaks = this.peakDetect(smoothed, "peak", smoothingstep);
      let mean = this.mean(smoothed);
      let std = this.std(smoothed, mean);
      let p_idx = 0;
      let candidates = [];
      if (peaks.length > 0) {
        event_timestamps.forEach((t3, j) => {
          while (signal_timestamps[peaks[p_idx]] < t3 + 200) {
            p_idx++;
            if (!peaks[p_idx])
              break;
          }
          let tempi = 0;
          let tempcandidates = [];
          while (signal_timestamps[peaks[p_idx + tempi]] < t3 + 600) {
            tempcandidates.push(p_idx + tempi);
            tempi++;
            if (!peaks[p_idx + tempi])
              break;
          }
          if (tempcandidates.length > 1) {
            let peakvals = [];
            tempcandidates.forEach((tc) => {
              peakvals.push(smoothed[peaks[tc]]);
            });
            let max = Math.max(...peakvals);
            let maxi = tempcandidates[peakvals.indexOf(max)];
            candidates.push({ event_timestamp: t3, event_index: j, peak_timestamp: signal_timestamps[[peaks[maxi]]], signal_index: [peaks[maxi]], signal_amplitude: raw_signal[[peaks[maxi]]], zscore: (smoothed[peaks[maxi]] - mean) / std });
          } else if (tempcandidates.length === 1)
            candidates.push({ event_timestamp: t3, event_index: j, peak_timestamp: signal_timestamps[peaks[tempcandidates[0]]], signal_index: peaks[tempcandidates[0]], signal_amplitude: raw_signal[[peaks[tempcandidates[0]]]], zscore: (smoothed[peaks[tempcandidates[0]]] - mean) / std });
        });
      }
      return candidates;
    }
  };
  var Math2 = _Math2;
  __publicField(Math2, "TWO_PI", Math.PI * 2);
  __publicField(Math2, "C", 299792458);
  __publicField(Math2, "G", 66743e-15);
  __publicField(Math2, "h", 662607015e-42);
  __publicField(Math2, "R", 8314.32);
  __publicField(Math2, "Ra", 287);
  __publicField(Math2, "H", 69.3);
  __publicField(Math2, "kbar", 1054571817e-43);
  __publicField(Math2, "kB", 1380649e-29);
  __publicField(Math2, "ke", 89875517923e-1);
  __publicField(Math2, "me", 91093837015e-41);
  __publicField(Math2, "mp", 167262192369e-38);
  __publicField(Math2, "mn", 167492749804e-38);
  __publicField(Math2, "P0", 101325);
  __publicField(Math2, "T0", 288.15);
  __publicField(Math2, "p0", 1.225);
  __publicField(Math2, "Na", 60220978e16);
  __publicField(Math2, "y", 1.405);
  __publicField(Math2, "M0", 28.96643);
  __publicField(Math2, "g0", 9.80665);
  __publicField(Math2, "Re", 6378100);
  __publicField(Math2, "B", 1458e-9);
  __publicField(Math2, "S", 110.4);
  __publicField(Math2, "Sigma", 365e-12);
  __publicField(Math2, "imgkernels", { edgeDetection: [[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]], boxBlur: [[1 / 9, 1 / 9, 1 / 9], [1 / 9, 1 / 9, 1 / 9], [1 / 9, 1 / 9, 1 / 9]], sobelLeft: [[1, 0, -1], [2, 0, -2], [1, 0, -1]], sobelRight: [[-1, 0, 1], [-2, 0, 2], [-1, 0, 1]], sobelTop: [[1, 2, 1], [0, 0, 0], [-1, -2, -1]], sobelBottom: [[-1, 2, 1], [0, 0, 0], [1, 2, 1]], identity: [[0, 0, 0], [0, 1, 0], [0, 0, 0]], gaussian3x3: [[1, 2, 1], [2, 4, 2], [1, 2, 1]], guassian7x7: [[0, 0, 0, 5, 0, 0, 0], [0, 5, 18, 32, 18, 5, 0], [0, 18, 64, 100, 64, 18, 0], [5, 32, 100, 100, 100, 32, 5], [0, 18, 64, 100, 64, 18, 0], [0, 5, 18, 32, 18, 5, 0], [0, 0, 0, 5, 0, 0, 0]], emboss: [[-2, -1, 0], [-1, 1, 1], [0, 1, 2]], sharpen: [[0, -1, 0], [-1, 5, -1], [0, -1, 0]] });
  __publicField(Math2, "integral", (func = (x22) => {
    let y22 = x22;
    return y22;
  }, range = [], stepx = 0.01) => {
    let area = 0;
    for (let i4 = range[0]; i4 < range[1]; i4 += stepx) {
      let y22 = func(i4);
      area += y22 * stepx;
    }
    return area;
  });
  __publicField(Math2, "dintegral", (func = (x22, y22) => {
    let z3 = x22 + y22;
    return z3;
  }, range = [[], []], stepx = 0.01, stepy = stepx) => {
    let volume = 0;
    for (let i4 = range[0][0] + stepx; i4 < range[0][1]; i4 += stepx) {
      for (let j = range[1][0] + stepy; j < range[1][1]; j += stepy) {
        let z3 = func(i4, j);
        volume += z3 * stepx * stepy;
      }
    }
    return volume;
  });
  __publicField(Math2, "tintegral", (func = (x22, y22, z3) => {
    let w = x22 + y22 + z3;
    return w;
  }, range = [[], [], []], stepx = 0.01, stepy = stepx, stepz = stepx) => {
    let volume = 0;
    for (let i4 = range[0][0] + stepx; i4 < range[0][1]; i4 += stepx) {
      for (let j = range[1][0] + stepy; j < range[1][1]; j += stepy) {
        for (let k = range[2][0] + stepz; k < range[2][1]; k += stepz) {
          let w = func(i4, j, k);
          volume += w * stepx * stepy * stepz;
        }
      }
    }
    return volume;
  });
  __publicField(Math2, "pintegral", (func = (x22) => {
    let y22 = x22;
    return y22;
  }, range = [], stepx = 0.01) => {
    let length = 0;
    let y0 = void 0;
    let yi = void 0;
    for (let i4 = range[0]; i4 < range[1]; i4 += stepx) {
      y0 = yi;
      yi = func(i4);
      if (y0)
        length += _Math2.distance([0, y0], [stepx, yi]);
    }
    return length;
  });
  __publicField(Math2, "meshgrid", _Math2.generateCoordinateSpace);
  __publicField(Math2, "autocorrelation2d", (mat2d2) => {
    let result = [];
    for (let y22 = 0; y22 < mat2d2.length; y22++) {
      result.push([]);
      for (let x22 = 0; x22 < mat2d2[y22].length; x22++) {
        let G3 = 0;
        for (let b = 0; b < mat2d2.length; b++) {
          for (let a = 0; a < mat2d2[b].length; a++) {
            G3 += mat2d2[y22][x22] * mat2d2[mat2d2.length - 1 - b][mat2d2[y22].length - 1 - a];
          }
        }
        result[y22][x22] = G3;
      }
    }
    return result;
  });
  __publicField(Math2, "lerp", _Math2.makeArr);
  __publicField(Math2, "upsample", _Math2.interpolateArray);
  __publicField(Math2, "lerp", (v0, v1, fit, floor = true) => {
    function lerp(v02, v12, t3) {
      return (1 - t3) * v02 + t3 * v12;
    }
    function interpolerp(v02, v12, fit2, floor2 = true) {
      if (fit2 <= 2)
        return [v02, v12];
      let a = 1 / fit2;
      let result = new Array(fit2);
      result[0] = v02;
      for (let i4 = 1; i4 <= fit2; i4++) {
        result[i4] = lerp(v02, v12, a * i4);
        if (floor2)
          result[i4] = Math.floor(result[i4]);
      }
      return result;
    }
  });
  __publicField(Math2, "peakDetect", (smoothedArray, type = "peak", window2 = 49) => {
    let mid = Math.floor(window2 * 0.5);
    let peaks = [];
    for (let i4 = 0; i4 < smoothedArray.length - window2; i4++) {
      let isPeak = _Math2.isExtrema(smoothedArray.slice(i4, i4 + window2), type);
      if (isPeak) {
        peaks.push(i4 + mid - 1);
      }
    }
    return peaks;
  });
  Object.assign(Math, Math2);
  var accel_gyro = { accelConstant: 1 / 8192, gyroConstant: 1 / 65.5, gyroXAngle: 0, gyroYAngle: 0, gyroZAngle: 0, px: 0, py: 0, pz: 0, sps: 100, lastAccelTime: Date.now(), lastGyroTime: Date.now(), __operator: function(data) {
    if (!("ax" in data) && !("gx" in data))
      return void 0;
    if (!data.timestamp) {
      if (data.ax && Array.isArray(data.ax) || data.gx && Array.isArray(data.gx)) {
        let len = data.ax ? data.ax.length : data.gx.length;
        let now = Date.now();
        let toInterp = [now - len * this.sps * 1e3, now];
        data.timestamp = Math2.upsample(toInterp, len);
      } else {
        data.timestamp = Date.now();
      }
    }
    let result;
    if (data.ax) {
      let apass = (timestamp, ax, ay, az) => {
        ax = ax * this.accelConstant;
        ay = ay * this.accelConstant;
        az = az * this.accelConstant;
        const accelXAngle = Math.atan(ay / Math.sqrt(ax * ax) + az * az * 180 / Math.PI) + this.accelXError;
        const accelYAngle = Math.atan(-ax / Math.sqrt(ay * ay) + az * az * 180 / Math.PI) + this.accelYError;
        return { ax, ay, az, roll: accelXAngle, pitch: accelYAngle };
      };
      if (Array.isArray(data.timestamp)) {
        result = data.timestamp.map((v2, i4) => {
          return apass(v2, data.ax[i4], data.ay[i4], data.az[i4]);
        });
      } else
        result = apass(data.timestamp, data.ax, data.ay, data.az);
    }
    if (data.gx) {
      let gpass = (timestamp, gx, gy, gz) => {
        const elapsed = timestamp - this.lastGyroTime;
        this.lastGyroTime = timestamp;
        gx = gx * this.gyroConstant + this.gyroXError;
        gy = gy * this.gyroConstant + this.gyroYError;
        gz = gz * this.gyroConstant + this.gyroZError;
        this.gyroXAngle += gx * elapsed;
        this.gyroYAngle += gy * elapsed;
        this.gyroZAngle += gz * elapsed;
        return { gx, gy, gz, roll: this.gyroXAngle, pitch: this.gyroYAngle, yaw: this.gyroZAngle };
      };
      let res2;
      if (Array.isArray(data.timestamp)) {
        res2 = data.timestamp.map((v2, i4) => {
          if (result) {
            let r = gpass(v2, data.gx[i4], data.gy[i4], data.gz[i4]);
            result.roll = result.roll * 0.04 + r.roll * 0.96;
            result.pitch = result.pitch * 0.04 + r.pitch * 0.96;
            result.yaw = res2.yaw;
          } else
            return gpass(v2, data.gx[i4], data.gy[i4], data.gz[i4]);
        });
        if (!result)
          result = res2;
      } else {
        res2 = gpass(data.timestamp, data.gx, data.gy, data.gz);
        if (result) {
          result.roll = result.roll * 0.04 + res2.roll * 0.96;
          result.pitch = result.pitch * 0.04 + res2.pitch * 0.96;
          result.yaw = res2.yaw;
        } else
          result = res2;
      }
    } else if (this.gyroXAngle || this.gyroYAngle || this.gyroZAngle) {
      result.roll = result.roll * 0.04 + this.gyroXAngle * 0.96;
      result.pitch = result.pitch * 0.04 + this.gyroYAngle * 0.96;
      result.yaw = this.gyroXAngle;
    }
    if (result.ax) {
      const setPositionOffset = (timestamp, result2) => {
        const elapsed = timestamp - this.lastAccelTime;
        this.lastAccelTime = timestamp;
        this.px += result2.ax * elapsed * elapsed * Math.cos(this.pitch * Math.PI * 0.005555555555);
        this.py += result2.ay * elapsed * elapsed * Math.cos(this.roll * Math.PI * 0.005555555555);
        this.pz += result2.az * elapsed * elapsed * Math.sin(this.pitch * Math.PI * 0.005555555555);
        result2.px = this.px;
        result2.py = this.py;
        result2.pz = this.pz;
        return result2;
      };
      if (Array.isArray(data.timestamp)) {
        data.timestamp.map((timestamp, i4) => {
          setPositionOffset(timestamp, result);
        });
      } else {
        setPositionOffset(data.timestamp, result);
      }
    }
    return result;
  } };
  var Biquad = class {
    constructor(type, freq, sps6, Q = 1 / Math.sqrt(2), dbGain = 0) {
      this.a0 = 0;
      this.a1 = 0;
      this.a2 = 0;
      this.b0 = 0;
      this.b1 = 0;
      this.b2 = 0;
      this.x1 = 0;
      this.x2 = 0;
      this.y1 = 0;
      this.y2 = 0;
      let types = ["lowpass", "highpass", "bandpass", "notch", "peak", "lowshelf", "highshelf"];
      if (types.indexOf(type) < 0) {
        console.error("Valid types: 'lowpass','highpass','bandpass','notch','peak','lowshelf','highshelf'");
        return;
      }
      this.type = type;
      this.freq = freq;
      this.sps = sps6;
      this.Q = Q;
      this.dbGain = dbGain;
      let A22 = Math.pow(10, dbGain / 40);
      let omega = 2 * Math.PI * freq / sps6;
      let sn = Math.sin(omega);
      let cs = Math.cos(omega);
      let alpha = sn / (2 * Q);
      let beta = Math.sqrt(A22 + A22);
      this[type](A22, sn, cs, alpha, beta);
      this.b0 /= this.a0;
      this.b1 /= this.a0;
      this.b2 /= this.a0;
      this.a1 /= this.a0;
      this.a2 /= this.a0;
    }
    lowpass(A22, sn, cs, alpha, beta) {
      this.b0 = (1 - cs) * 0.5;
      this.b1 = 1 - cs;
      this.b2 = (1 - cs) * 0.5;
      this.a0 = 1 + alpha;
      this.a1 = -2 * cs;
      this.a2 = 1 - alpha;
    }
    highpass(A22, sn, cs, alpha, beta) {
      this.b0 = (1 + cs) * 0.5;
      this.b1 = -(1 + cs);
      this.b2 = (1 + cs) * 0.5;
      this.a0 = 1 + alpha;
      this.a1 = -2 * cs;
      this.a2 = 1 - alpha;
    }
    bandpass(A22, sn, cs, alpha, beta) {
      this.b0 = alpha;
      this.b1 = 0;
      this.b2 = -alpha;
      this.a0 = 1 + alpha;
      this.a1 = -2 * cs;
      this.a2 = 1 - alpha;
    }
    notch(A22, sn, cs, alpha, beta) {
      this.b0 = 1;
      this.b1 = -2 * cs;
      this.b2 = 1;
      this.a0 = 1 + alpha;
      this.a1 = -2 * cs;
      this.a2 = 1 - alpha;
    }
    peak(A22, sn, cs, alpha, beta) {
      this.b0 = 1 + alpha * A22;
      this.b1 = -2 * cs;
      this.b2 = 1 - alpha * A22;
      this.a0 = 1 + alpha / A22;
      this.a1 = -2 * cs;
      this.a2 = 1 - alpha / A22;
    }
    lowshelf(A22, sn, cs, alpha, beta) {
      this.b0 = A22 * (A22 + 1 - (A22 - 1) * cs + beta * sn);
      this.b1 = 2 * A22 * (A22 - 1 - (A22 + 1) * cs);
      this.b2 = A22 * (A22 + 1 - (A22 - 1) * cs - beta * sn);
      this.a0 = A22 + 1 + (A22 + 1) * cs + beta * sn;
      this.a1 = 2 * (A22 - 1 + (A22 + 1) * cs);
      this.a2 = A22 + 1 + (A22 - 1) * cs - beta * sn;
    }
    highshelf(A22, sn, cs, alpha, beta) {
      this.b0 = A22 * (A22 + 1 + (A22 - 1) * cs + beta * sn);
      this.b1 = 2 * A22 * (A22 - 1 + (A22 + 1) * cs);
      this.b2 = A22 * (A22 + 1 - (A22 - 1) * cs - beta * sn);
      this.a0 = A22 + 1 - (A22 + 1) * cs - beta * sn;
      this.a1 = 2 * (A22 - 1 - (A22 + 1) * cs);
      this.a2 = A22 + 1 - (A22 - 1) * cs - beta * sn;
    }
    applyFilter(signal_step) {
      let y22 = this.b0 * signal_step + this.b1 * this.x1 + this.b2 * this.x2 - this.a1 * this.y1 - this.a2 * this.y2;
      this.x2 = this.x1;
      this.x1 = signal_step;
      this.y2 = this.y1;
      this.y1 = y22;
      return y22;
    }
    zResult(freq) {
      try {
        let phi = Math.pow(Math.sin(Math.PI * freq * 2 / (2 * this.sps)), 2);
        let result = (Math.pow(this.b0 + this.b1 + this.b2, 2) - 4 * (this.b0 * this.b1 + 4 * this.b0 * this.b2 + this.b1 * this.b2) * phi + 16 * this.b0 * this.b2 * phi * phi) / (Math.pow(1 + this.a1 + this.a2, 2) - 4 * (this.a1 + 4 * this.a2 + this.a1 * this.a2) * phi + 16 * this.a2 * phi * phi);
        return result;
      } catch (err) {
        return -200;
      }
    }
    static calcCenterFrequency(freqStart, freqEnd) {
      return (freqStart + freqEnd) / 2;
    }
    static calcBandwidth(freqStart, freqEnd) {
      return freqEnd - this.calcCenterFrequency(freqStart, freqEnd);
    }
    static calcBandpassQ(frequency, bandwidth, resonance = Math.pow(10, Math.floor(Math.log10(frequency)))) {
      let Q = resonance * Math.sqrt((frequency - bandwidth) * (frequency + bandwidth)) / (2 * bandwidth);
      return Q;
    }
    static calcNotchQ(frequency, bandwidth, resonance = Math.pow(10, Math.floor(Math.log10(frequency)))) {
      let Q = resonance * frequency * bandwidth / Math.sqrt((frequency - bandwidth) * (frequency + bandwidth));
      return Q;
    }
  };
  var beat_detect = { refdata: [], lowpass: void 0, smoothed: [], timestamp: [], peaks: [], valleys: [], peak_distances: [], valley_distances: [], beats: [], lastPeak: 0, lastValley: 0, sps: 100, maxFreq: 4, limit: 10, __onconnected: function() {
    if (!this.lowpass) {
      let freq = this.maxFreq;
      if (!freq)
        freq = 1;
      if (freq > 1)
        freq *= 0.5;
      this.lowpass = new Biquad("lowpass", this.maxFreq, this.sps);
      this.peakFinderWindow = Math.floor(this.sps / this.maxFreq);
      if (this.peakFinderWindow % 2 === 0)
        this.peakFinderWindow += 1;
      if (this.peakFinderWindow < 5)
        this.peakFinderWindow = 5;
      this.midpoint = Math.round(this.peakFinderWindow * 0.5);
    }
  }, __operator: function(data) {
    if (!("red" in data) && !("heg" in data) && !("raw" in data))
      return void 0;
    let refdata = data.red ? data.red : data.heg ? data.heg : data.raw;
    if (!("timestamp" in data)) {
      if (Array.isArray(refdata)) {
        let now = Date.now();
        let len;
        if (refdata)
          len = refdata.length;
        let toInterp = [now - refdata.length * this.sps * 1e3, now];
        data.timestamp = Math2.upsample(toInterp, refdata.length);
      } else {
        data.timestamp = Date.now();
      }
    }
    let pass = (amplitude, timestamp) => {
      if (amplitude) {
        this.refdata.push(amplitude);
      }
      this.timestamp.push(timestamp);
      let beat;
      if (this.refdata.length > this.peakFinderWindow) {
        this.refdata.shift();
        this.timestamp.shift();
      }
      this.smoothed.push(this.lowpass.applyFilter(this.refdata[this.refdata.length - 1]));
      if (this.smoothed.length > this.peakFinderWindow) {
        this.smoothed.shift();
      }
      if (this.smoothed.length === this.peakFinderWindow) {
        if (Math2.isExtrema(this.smoothed, "valley")) {
          this.valleys.push({ value: this.smoothed[this.smoothed.length - this.midpoint ? this.midpoint : 1], timestamp: this.timestamp[this.timestamp.length - this.midpoint ? this.midpoint : 1] });
        } else if (Math2.isExtrema(this.smoothed, "peak")) {
          this.peaks.push({ value: this.smoothed[this.smoothed.length - this.midpoint ? this.midpoint : 1], timestamp: this.timestamp[this.timestamp.length - this.midpoint ? this.midpoint : 1] });
        }
        if (this.valleys.length > 2 && this.peaks.length > 2) {
          if (this.valleys[this.valleys.length - 1].timestamp < this.peaks[this.peaks.length - 2].timestamp)
            this.peaks.splice(this.peaks.length - 1);
          if (this.peaks[this.peaks.length - 1].timestamp < this.valleys[this.valleys.length - 2].timestamp)
            this.valleys.splice(this.valleys.length - 1);
          this.valley_distances.push({ distance: this.valleys[this.valleys.length - 1].timestamp - this.valleys[this.valleys.length - 2].timestamp, timestamp: this.valleys[this.valleys.length - 1].timestamp, peak0: this.valleys[this.valleys.length - 1].value, peak1: this.valleys[this.valleys.length - 2].value });
          this.peak_distances.push({ distance: this.peaks[this.peaks.length - 1].timestamp - this.peaks[this.peaks.length - 2].timestamp, timestamp: this.peaks[this.peaks.length - 1].timestamp, peak0: this.peaks[this.peaks.length - 1].value, peak1: this.peaks[this.peaks.length - 2].value });
          if (this.peak_distances.length > 1 && this.valley_distances.length > 1) {
            if (this.lastPeak < this.peaks[this.peaks.length - 1].timestamp && this.lastValley < this.peaks[this.peaks.length - 1].timestamp) {
              if (this.valley_distances[this.valley_distances.length - 1].timestamp > this.peak_distances[this.peak_distances.length - 1].timestamp) {
                let bpm, change = 0;
                if (this.beats.length < 1) {
                  bpm = 60 / (5e-4 * (this.peak_distances[this.peak_distances.length - 1].distance + this.valley_distances[this.valley_distances.length - 1].distance));
                } else if (this.beats[this.beats.length - 1].timestamp !== this.peak_distances[this.peak_distances.length - 1].timestamp) {
                  bpm = 60 / (5e-4 * (this.peak_distances[this.peak_distances.length - 1].dt + this.valley_distances[this.valley_distances.length - 1].dt));
                  change = Math.abs(bpm - this.beats[this.beats.length - 1].bpm);
                }
                beat = { timestamp: this.peak_distances[this.peak_distances.length - 1].timestamp, change, bpm, height0: this.peak_distances[this.peak_distances.length - 1].peak0 - this.valley_distances[this.valley_distances.length - 1].peak0, height1: this.peak_distances[this.peak_distances.length - 1].peak1 - this.valley_distances[this.valley_distances.length - 1].peak1 };
                this.beats.push(beat);
                this.lastPeak = this.peaks[this.peaks.length - 1].timestamp;
                this.lastValley = this.peaks[this.peaks.length - 1].timestamp;
              } else {
                let bpm, change = 0;
                if (this.beats.length < 2) {
                  bpm = 60 / (5e-4 * (this.peak_distances[this.peak_distances.length - 2].distance + this.valley_distances[this.valley_distances.length - 2].distance));
                } else if (this.beats[this.beats.length - 1].timestamp !== this.peak_distances[this.peak_distances.length - 2].timestamp) {
                  bpm = 60 / (5e-4 * (this.peak_distances[this.peak_distances.length - 2].distance + this.valley_distances[this.valley_distances.length - 2].distance));
                  change = Math.abs(bpm - this.beats[this.beats.length - 2].bpm);
                }
                beat = { timestamp: this.peak_distances[this.peak_distances.length - 2].timestamp, change, bpm, height0: this.peak_distances[this.peak_distances.length - 2].peak0 - this.valley_distances[this.valley_distances.length - 2].peak0, height1: this.peak_distances[this.peak_distances.length - 2].peak1 - this.valley_distances[this.valley_distances.length - 2].peak1 };
                this.beats.push(beat);
                this.lastPeak = this.peaks[this.peaks.length - 1].timestamp;
                this.lastValley = this.peaks[this.peaks.length - 1].timestamp;
              }
            }
          }
          if (this.peaks.length > this.limit) {
            this.peaks.shift();
          }
          if (this.valleys.length > this.limit) {
            this.valleys.shift();
          }
          if (this.peak_distances.length > this.limit) {
            this.peak_distances.shift();
          }
          if (this.valley_distances.length > this.limit) {
            this.valley_distances.shift();
          }
          if (this.beats.length > this.limit) {
            this.beats.shift();
          }
        }
      }
      return beat;
    };
    if (data.red) {
      if ("ir" in data && !Array.isArray(data.red))
        return pass(data.red + data.ir, data.timestamp);
      let result;
      if (data.ir)
        result = data.red.map((v2, i4) => {
          return pass(v2 + data.ir[i4], data.timestamp[i4]);
        });
      else
        result = data.red.map((v2, i4) => {
          return pass(v2, data.timestamp[i4]);
        });
      return result;
    } else if (data.raw) {
      if (!Array.isArray(data.raw))
        return pass(data.raw, data.timestamp);
      let result = data.raw.map((v2, i4) => {
        return pass(v2, data.timestamp[i4]);
      });
      return result;
    } else if (Array.isArray(data.heg)) {
      if (!Array.isArray(data.heg))
        return pass(data.heg, data.timestamp);
      let result = data.heg.map((v2, i4) => {
        return pass(v2, data.timestamp[i4]);
      });
      return result;
    }
  } };
  var blink_detect = { sps: 250, intervals: {}, watch: ["0"], tolerance: 0.2, __onconnected: (node) => {
    node.watch.forEach((ch) => node.intervals[ch] = { lowpass: new Biquad("lowpass", 20, node.sps), filtered: [], averaged: [] });
  }, __operator: function(data) {
    let checkCt = 5;
    let averageCt = 50;
    let found = {};
    let passed = false;
    let pass = (key, n) => {
      let next = this.intervals[key].lowpass.applyFilter(n);
      this.intervals[key].filtered.push(next);
      this.intervals[key].averaged.push(next);
      if (this.intervals[key].filtered.length > checkCt) {
        if (this.intervals[key].averaged.length > averageCt) {
          this.intervals[key].averaged.splice(0, checkCt);
          let mean = Math2.mean(this.intervals[key].averaged);
          if (Math.abs(Math.min(...this.intervals[key].filtered)) > Math.abs(mean) + this.tolerance) {
            this.intervals[key].filtered.length = 0;
            passed = true;
            found[key] = true;
          }
        } else
          this.intervals[key].filtered.shift();
      }
    };
    for (const key in this.intervals) {
      if (data[key]) {
        if (Array.isArray(data[key])) {
          data[key].forEach((n) => {
            pass(key, n);
          });
        } else if (typeof data[key] === "number")
          pass(key, data[key]);
      }
    }
    if (passed)
      return found;
  } };
  var _ArrayManip = class {
    constructor() {
      this.recursivelyAssign = (target, obj) => {
        for (const key in obj) {
          if (typeof obj[key] === "object") {
            if (typeof target[key] === "object")
              this.recursivelyAssign(target[key], obj[key]);
            else
              target[key] = this.recursivelyAssign({}, obj[key]);
          } else
            target[key] = obj[key];
        }
        return target;
      };
    }
    static autoscale(array, lineIdx = 0, nLines = 1, centerZero = false, ymin, ymax, clamp) {
      if (array?.length === 0)
        return array;
      let max = ymax ? ymax : Math.max(...array);
      let min = ymin ? ymin : Math.min(...array);
      let _lines = 1 / nLines;
      let scalar = 1;
      if (centerZero) {
        let absmax = Math.max(Math.abs(min), Math.abs(max));
        if (absmax !== 0)
          scalar = _lines / absmax;
        return array.map((y22) => {
          if (clamp) {
            if (y22 < min)
              y22 = min;
            if (y22 > max)
              y22 = max;
          }
          return y22 * scalar + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      } else {
        if (max === min) {
          if (max !== 0) {
            scalar = _lines / max;
          } else if (min !== 0) {
            scalar = _lines / Math.abs(min);
          }
        } else
          scalar = _lines / (max - min);
        return array.map((y22) => {
          if (clamp) {
            if (y22 < min)
              y22 = min;
            if (y22 > max)
              y22 = max;
          }
          return 2 * ((y22 - min) * scalar - 1 / (2 * nLines)) + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      }
    }
    static genTimestamps(ct, sps6) {
      let now = Date.now();
      let toInterp = [now - ct * 1e3 / sps6, now];
      return _ArrayManip.upsample(toInterp, ct);
    }
    static absmax(array) {
      return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
    }
    static downsample(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        let output = new Array(fitCount);
        let incr = array.length / fitCount;
        let lastIdx = array.length - 1;
        let last = 0;
        let counter = 0;
        for (let i4 = incr; i4 < array.length; i4 += incr) {
          let rounded = Math.round(i4);
          if (rounded > lastIdx)
            rounded = lastIdx;
          for (let j = last; j < rounded; j++) {
            output[counter] += array[j];
          }
          output[counter] /= (rounded - last) * scalar;
          counter++;
          last = rounded;
        }
        return output;
      } else
        return array;
    }
    static upsample(array, fitCount, scalar = 1) {
      var linearInterpolate = function(before2, after2, atPoint2) {
        return (before2 + (after2 - before2) * atPoint2) * scalar;
      };
      var newData = new Array(fitCount);
      var springFactor = (array.length - 1) / (fitCount - 1);
      newData[0] = array[0];
      for (var i4 = 1; i4 < fitCount - 1; i4++) {
        var tmp = i4 * springFactor;
        var before = Math.floor(tmp);
        var after = Math.ceil(tmp);
        var atPoint = tmp - before;
        newData[i4] = linearInterpolate(array[before], array[after], atPoint);
      }
      newData[fitCount - 1] = array[array.length - 1];
      return newData;
    }
    static interpolate(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        return _ArrayManip.downsample(array, fitCount, scalar);
      } else if (array.length < fitCount) {
        return _ArrayManip.upsample(array, fitCount, scalar);
      }
      return array;
    }
    static HSLToRGB(h, s, l, scalar = 255) {
      s /= 100;
      l /= 100;
      let c = (1 - Math.abs(2 * l - 1)) * s, x3 = c * (1 - Math.abs(h / 60 % 2 - 1)), m = l - c / 2, r = 0, g2 = 0, b = 0;
      if (0 <= h && h < 60) {
        r = c;
        g2 = x3;
        b = 0;
      } else if (60 <= h && h < 120) {
        r = x3;
        g2 = c;
        b = 0;
      } else if (120 <= h && h < 180) {
        r = 0;
        g2 = c;
        b = x3;
      } else if (180 <= h && h < 240) {
        r = 0;
        g2 = x3;
        b = c;
      } else if (240 <= h && h < 300) {
        r = x3;
        g2 = 0;
        b = c;
      } else if (300 <= h && h < 360) {
        r = c;
        g2 = 0;
        b = x3;
      }
      r = (r + m) * scalar;
      g2 = (g2 + m) * scalar;
      b = (b + m) * scalar;
      return [r, g2, b];
    }
    static circularBuffer(arr, newEntries) {
      if (newEntries.length < arr.length) {
        let slice = arr.slice(newEntries.length);
        let len = arr.length;
        arr.splice(0, len, ...slice, ...newEntries);
      } else if (newEntries.length > arr.length) {
        let len = arr.length;
        arr.splice(0, len, ...newEntries.slice(newEntries.length - len));
      } else {
        arr.splice(0, arr.length, ...newEntries);
      }
      return arr;
    }
    static reformatData(data, key) {
      if (Array.isArray(data)) {
        if (Array.isArray(data[0])) {
          let d2 = {};
          data.forEach((arr, i4) => {
            d2[i4] = arr;
          });
          data = d2;
          if (isNaN(data[0][0]))
            return void 0;
        } else if (key) {
          data = { [key]: data };
          if (isNaN(data[key][0]))
            return void 0;
        } else {
          data = { 0: data };
          if (isNaN(data[0][0]))
            return void 0;
        }
      } else if (typeof data === "object") {
        for (const key2 in data) {
          if (typeof data[key2] === "number")
            data[key2] = [data[key2]];
          else if (data[key2]?.values) {
            if (typeof data[key2].values === "number")
              data[key2].values = [data[key2].values];
          }
          if (isNaN(data[key2][0]))
            return void 0;
        }
      } else if (typeof data === "string") {
        let split;
        if (data.includes("\r\n")) {
          let lines = data.split("\r\n");
          data = {};
          lines.forEach((l, j) => {
            if (l.includes("	")) {
              split = l.split("	");
            } else if (l.includes(",")) {
              split = l.split(",");
            } else if (l.includes("|")) {
              split = l.split("|");
            }
            if (Array.isArray(split)) {
              split.forEach((val, i4) => {
                if (val.includes(":")) {
                  let [key2, v2] = val.split(":");
                  let fl = parseFloat(v2);
                  if (fl)
                    data[key2] = [fl];
                  else
                    return void 0;
                } else {
                  let fl = parseFloat(val);
                  if (fl)
                    data[i4] = [fl];
                  else
                    return void 0;
                }
              });
            }
          });
        } else if (data.includes("	")) {
          split = data.split("	");
        } else if (data.includes(",")) {
          split = data.split(",");
        } else if (data.includes("|")) {
          split = data.split("|");
        }
        data = {};
        if (Array.isArray(split)) {
          split.forEach((val, i4) => {
            if (val.includes(":")) {
              let [key2, v2] = val.split(":");
              let fl = parseFloat(v2);
              if (fl)
                data[key2] = [fl];
              else
                return void 0;
            } else {
              let fl = parseFloat(val);
              if (fl)
                data[i4] = [fl];
              else
                return void 0;
            }
          });
        }
      } else if (typeof data === "number") {
        if (key)
          data = { [key]: [data] };
        else
          data = { 0: [data] };
      }
      return data;
    }
    static padTime(data, lastValue, time, targetFit) {
      let slopeIncr = (data[0] - lastValue) / time / targetFit;
      let padded = [...new Array(targetFit - data.length).map((_, i4) => lastValue + slopeIncr * (i4 + 1)), ...data];
      return padded;
    }
    static interpolateForTime(data, time, targetSPS) {
      return _ArrayManip.interpolate(data, Math.ceil(targetSPS * time));
    }
    isTypedArray(x3) {
      return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
    }
    spliceTypedArray(arr, start, end) {
      let s = arr.subarray(0, start);
      let e;
      if (end) {
        e = arr.subarray(end + 1);
      }
      let n;
      if (s.length > 0 || e?.length > 0)
        n = new arr.constructor(s.length + e.length);
      if (s.length > 0)
        n.set(s);
      if (e && e.length > 0)
        n.set(e, s.length);
      return n;
    }
  };
  var ArrayManip = _ArrayManip;
  ArrayManip.bufferValues = (objects, property, keys4, buffer2) => {
    if (!Array.isArray(keys4) && typeof keys4 === "object")
      keys4 = Object.keys(keys4);
    if (!buffer2) {
      let object_keys = Object.keys(objects);
      if (keys4)
        buffer2 = new Float32Array(object_keys.length * keys4.length);
      else {
        if (typeof objects[object_keys[0]][property] === "object") {
          keys4 = Object.keys(objects[object_keys[0]][property]);
          buffer2 = new Float32Array(object_keys.length * keys4.length);
        } else
          buffer2 = new Float32Array(object_keys.length);
      }
    }
    let i4 = 0;
    for (const key in objects) {
      if (objects[key][property]) {
        if (keys4) {
          for (let j = 0; j < keys4.length; j++) {
            buffer2[i4] = objects[key][property][keys4[j]];
            i4++;
          }
        } else {
          buffer2[i4] = objects[key][property];
          i4++;
        }
      }
    }
    return buffer2;
  };
  var rechk = /^([<>])?(([1-9]\d*)?([xcbB?hHiIfdsp]))*$/;
  var refmt = /([1-9]\d*)?([xcbB?hHiIfdsp])/g;
  var str = (v2, o, c) => String.fromCharCode(...new Uint8Array(v2.buffer, v2.byteOffset + o, c));
  var rts = (v2, o, c, s) => new Uint8Array(v2.buffer, v2.byteOffset + o, c).set(s.split("").map((str22) => str22.charCodeAt(0)));
  var pst = (v2, o, c) => str(v2, o + 1, Math.min(v2.getUint8(o), c - 1));
  var tsp = (v2, o, c, s) => {
    v2.setUint8(o, s.length);
    rts(v2, o + 1, c - 1, s);
  };
  var lut = (le) => ({ x: (c) => [1, c, 0], c: (c) => [c, 1, (o) => ({ u: (v2) => str(v2, o, 1), p: (v2, c2) => rts(v2, o, 1, c2) })], "?": (c) => [c, 1, (o) => ({ u: (v2) => Boolean(v2.getUint8(o)), p: (v2, B3) => v2.setUint8(o, B3) })], b: (c) => [c, 1, (o) => ({ u: (v2) => v2.getInt8(o), p: (v2, b) => v2.setInt8(o, b) })], B: (c) => [c, 1, (o) => ({ u: (v2) => v2.getUint8(o), p: (v2, B3) => v2.setUint8(o, B3) })], h: (c) => [c, 2, (o) => ({ u: (v2) => v2.getInt16(o, le), p: (v2, h) => v2.setInt16(o, h, le) })], H: (c) => [c, 2, (o) => ({ u: (v2) => v2.getUint16(o, le), p: (v2, H3) => v2.setUint16(o, H3, le) })], i: (c) => [c, 4, (o) => ({ u: (v2) => v2.getInt32(o, le), p: (v2, i4) => v2.setInt32(o, i4, le) })], I: (c) => [c, 4, (o) => ({ u: (v2) => v2.getUint32(o, le), p: (v2, I) => v2.setUint32(o, I, le) })], f: (c) => [c, 4, (o) => ({ u: (v2) => v2.getFloat32(o, le), p: (v2, f) => v2.setFloat32(o, f, le) })], d: (c) => [c, 8, (o) => ({ u: (v2) => v2.getFloat64(o, le), p: (v2, d2) => v2.setFloat64(o, d2, le) })], s: (c) => [1, c, (o) => ({ u: (v2) => str(v2, o, c), p: (v2, s) => rts(v2, o, c, s.slice(0, c)) })], p: (c) => [1, c, (o) => ({ u: (v2) => pst(v2, o, c), p: (v2, s) => tsp(v2, o, c, s.slice(0, c - 1)) })] });
  var errbuf = new RangeError("Structure larger than remaining buffer");
  var errval = new RangeError("Not enough values for structure");
  var _ByteParser = class extends ArrayManip {
    static toDataView(value) {
      if (!(value instanceof DataView)) {
        if (typeof value === "string" && parseInt(value))
          value = parseInt(value);
        if (typeof value === "string") {
          let enc = new TextEncoder();
          let hascodes = {};
          for (const code2 in _ByteParser.codes) {
            while (value.indexOf(code2) > -1) {
              let idx = value.indexOf(code2);
              value = value.replace(code2, "");
              hascodes[idx] = code2;
            }
          }
          let encoded = Array.from(enc.encode(value));
          for (const key in hascodes) {
            encoded.splice(parseInt(key), 0, _ByteParser.codes[hascodes[key]]);
          }
          value = new DataView(new Uint8Array(encoded).buffer);
        } else if (typeof value === "number") {
          let tmp = value;
          if (value < 256) {
            value = new DataView(new ArrayBuffer(1));
            value.setUint8(0, tmp);
          } else if (value < 65536) {
            value = new DataView(new ArrayBuffer(2));
            value.setInt16(0, tmp);
          } else {
            value = new DataView(new ArrayBuffer(4));
            value.setUint32(0, tmp);
          }
        } else if (value instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && value instanceof SharedArrayBuffer) {
          value = new DataView(value);
        } else if (Array.isArray(value)) {
          value = new DataView(Uint8Array.from(value).buffer);
        } else if (typeof value === "object") {
          value = new TextEncoder().encode(JSON.stringify(value));
        }
      }
      return value;
    }
    static searchBuffer(buffer2, searchString, limit) {
      var needle = searchString;
      var haystack = buffer2;
      var search = _ByteParser.boyerMoore(needle);
      var skip = search.byteLength;
      var indices = [];
      for (var i4 = search(haystack); i4 !== -1; i4 = search(haystack, i4 + skip)) {
        indices.push(i4);
        if (limit) {
          if (indices.length >= limit)
            break;
        }
      }
      return indices;
    }
    static bytesToInt16(x0, x1) {
      let int16 = (255 & x0) << 8 | 255 & x1;
      if ((int16 & 32768) > 0) {
        int16 |= 4294901760;
      } else {
        int16 &= 65535;
      }
      return int16;
    }
    static bytesToUInt16(x0, x1) {
      return x0 * 256 + x1;
    }
    static Uint16ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255];
    }
    static bytesToInt24(x0, x1, x22) {
      let int24 = (255 & x0) << 16 | (255 & x1) << 8 | 255 & x22;
      if ((int24 & 8388608) > 0) {
        int24 |= 4278190080;
      } else {
        int24 &= 16777215;
      }
      return int24;
    }
    static bytesToUInt24(x0, x1, x22) {
      return x0 * 65536 + x1 * 256 + x22;
    }
    static Uint24ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255, y22 >> 16 & 255];
    }
    static bytesToInt32(x0, x1, x22, x3) {
      let int32 = (255 & x0) << 24 | (255 & x1) << 16 | (255 & x22) << 8 | 255 & x3;
      if ((int32 & 2147483648) > 0) {
        int32 |= 0;
      } else {
        int32 &= 4294967295;
      }
      return int32;
    }
    static bytesToUInt32(x0, x1, x22, x3) {
      return x0 * 16777216 + x1 * 65536 + x22 * 256 + x3;
    }
    static Uint32ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255, y22 >> 16 & 255, y22 >> 24 & 255];
    }
    static get2sCompliment(val, nbits3) {
      if (val > 4294967296)
        return null;
      return val << 32 - nbits3 >> 32 - nbits3;
    }
    static getSignedInt(...args) {
      let pos = 0;
      function getInt(size) {
        var value = 0;
        var first = true;
        while (size--) {
          if (first) {
            let byte = args[pos++];
            value += byte & 127;
            if (byte & 128) {
              value -= 128;
            }
            first = false;
          } else {
            value *= 256;
            value += args[pos++];
          }
        }
        return value;
      }
      return getInt(args.length);
    }
    static asUint8Array(input) {
      if (input instanceof Uint8Array) {
        return input;
      } else if (typeof input === "string") {
        var arr = new Uint8Array(input.length);
        for (var i4 = 0; i4 < input.length; i4++) {
          var c = input.charCodeAt(i4);
          if (c > 127) {
            throw new TypeError("Only ASCII patterns are supported");
          }
          arr[i4] = c;
        }
        return arr;
      } else {
        return new Uint8Array(input);
      }
    }
    static boyerMoore(patternBuffer) {
      var pattern = _ByteParser.asUint8Array(patternBuffer);
      var M2 = pattern.length;
      if (M2 === 0) {
        throw new TypeError("patternBuffer must be at least 1 byte long");
      }
      var R2 = 256;
      var rightmost_positions = new Int32Array(R2);
      for (var c = 0; c < R2; c++) {
        rightmost_positions[c] = -1;
      }
      for (var j = 0; j < M2; j++) {
        rightmost_positions[pattern[j]] = j;
      }
      var boyerMooreSearch = (txtBuffer, start, end) => {
        var txt = _ByteParser.asUint8Array(txtBuffer);
        if (start === void 0)
          start = 0;
        if (end === void 0)
          end = txt.length;
        var pat = pattern;
        var right = rightmost_positions;
        var lastIndex = end - pat.length;
        var lastPatIndex = pat.length - 1;
        var skip;
        for (var i4 = start; i4 <= lastIndex; i4 += skip) {
          skip = 0;
          for (var j2 = lastPatIndex; j2 >= 0; j2--) {
            var c2 = txt[i4 + j2];
            if (pat[j2] !== c2) {
              skip = Math.max(1, j2 - right[c2]);
              break;
            }
          }
          if (skip === 0) {
            return i4;
          }
        }
        return -1;
      };
      boyerMooreSearch.byteLength = pattern.byteLength;
      return boyerMooreSearch;
    }
    static struct(format) {
      let fns = [], size = 0, m = rechk.exec(format);
      if (!m) {
        throw new RangeError("Invalid format string");
      }
      const t3 = lut("<" === m[1]), lu = (n, c) => t3[c](n ? parseInt(n, 10) : 1);
      while (m = refmt.exec(format)) {
        ((r, s, f) => {
          for (let i4 = 0; i4 < r; ++i4, size += s) {
            if (f) {
              fns.push(f(size));
            }
          }
        })(...lu(...m.slice(1)));
      }
      const unpack_from = (arrb, offs) => {
        if (arrb.byteLength < (offs | 0) + size) {
          throw errbuf;
        }
        let v2 = new DataView(arrb, offs | 0);
        return fns.map((f) => f.u(v2));
      };
      const pack_into = (arrb, offs, ...values) => {
        if (values.length < fns.length) {
          throw errval;
        }
        if (arrb.byteLength < offs + size) {
          throw errbuf;
        }
        const v2 = new DataView(arrb, offs);
        new Uint8Array(arrb, offs, size).fill(0);
        fns.forEach((f, i4) => f.p(v2, values[i4]));
      };
      const pack = (...values) => {
        let b = new ArrayBuffer(size);
        pack_into(b, 0, ...values);
        return b;
      };
      const unpack = (arrb) => unpack_from(arrb, 0);
      function* iter_unpack(arrb) {
        for (let offs = 0; offs + size <= arrb.byteLength; offs += size) {
          yield unpack_from(arrb, offs);
        }
      }
      return Object.freeze({ unpack, pack, unpack_from, pack_into, iter_unpack, format, size });
    }
  };
  var ByteParser = _ByteParser;
  ByteParser.codes = { "\\n": 10, "\\r": 13, "\\t": 9, "\\s": 32, "\\b": 8, "\\f": 12, "\\": 92 };
  var rms = { sps: 250, nSec: 1, watch: ["0", "1", "2", "3"], data: {}, rms: {}, __operator: function(data) {
    this.watch.forEach((key) => {
      if (data[key]) {
        if (!this.data[key]) {
          if (Array.isArray(data[key])) {
            this.data[key] = new Array(Math.floor(this.sps * this.nSec)).fill(data[key][0]);
          } else
            this.data[key] = new Array(Math.floor(this.sps * this.nSec)).fill(data[key]);
        }
        ByteParser.circularBuffer(this.data[key], data[key]);
      }
    });
    if (data.timestamp) {
      if (Array.isArray(data.timestamp)) {
        this.rms.timestamp = data.timestamp[data.timestamp.length - 1];
      } else
        this.rms.timestamp = data.timestamp;
    } else
      this.rms.timestamp = Date.now();
    return new Promise(async (res2) => {
      await Promise.all(this.watch.map(async (key) => {
        if (this.data[key])
          this.rms[key] = Math.sqrt(Math.abs(this.data[key].reduce((p2, v2, i4) => p2 + v2 * v2) / this.data[key].length));
        else
          delete this.rms[key];
      }));
      res2(this.rms);
    });
  } };
  var circularBuffer2d = { bufferSize: 250, watch: ["0", "1", "2", "3"], data: {}, blocking: false, __onconnected: function(node) {
    for (const key in node.watch) {
      node.data[key] = new Array(node.bufferSize).fill(0);
    }
  }, __operator: function(data) {
    let buffer2d = [];
    this.watch.forEach((key) => {
      if (data[key]) {
        ByteParser.circularBuffer(this.data[key], data[key]);
        buffer2d.push(this.data[key]);
      }
    });
    return buffer2d;
  } };
  var algorithms = { beat_detect, accel_gyro, heartrate: beat_detect, breath: Object.assign({}, beat_detect), blink_detect, rms, circularBuffer2d };
  algorithms["breath"].maxFreq = 0.2;

  // backend/serverconfig.js
  var serverconfig_default = server = {
    //node server settings, set false to skip server step or add serve:true to config object to only serve (alt methods)
    debug: false,
    protocol: "http",
    //'http' or 'https'. HTTPS required for Nodejs <---> Python sockets. If using http, set production to False in python/server.py as well
    host: "localhost",
    //'localhost' or '127.0.0.1' etc.
    port: 8081,
    //e.g. port 80, 443, 8000\
    dataserverport: 8082,
    datasocketport: 8083,
    mongodbmode: "dev",
    //local, dev, production, or undefined/false/null/0 for no mongoose
    localdbport: 27017,
    //mongodb localhost port
    localdb: "test",
    //a mongodb database added onto the end of our localdb uri e.g. localhost/test
    key: "./.key",
    //key file location, use MONGODB to set your private URI, do not share this!
    startpage: "index.html",
    //home page
    socket_protocol: "ws",
    //frontend socket protocol, wss for served, ws for localhost
    hotreload: 7e3,
    //hotreload websocket server port 
    //watch: ['../'], //watch additional directories other than the current working directory
    pwa: "dist/service-worker.js",
    //pwa mode? Injects service worker registry code in (see pwa README.md)
    python: false,
    //7000,  //quart server port (configured via the python server script file still)
    python_node: 7001,
    //websocket relay port (relays messages to client from nodejs that were sent to it by python)
    errpage: "node_modules/tinybuild/tinybuild/node_server/other/404.html",
    //default error page, etc.
    certpath: "node_modules/tinybuild/tinybuild/node_server/ssl/cert.pem",
    //if using https, this is required. See cert.pfx.md for instructions
    keypath: "node_modules/tinybuild/tinybuild/node_server/ssl/key.pem"
    //if using https, this is required. See cert.pfx.md for instructions
  };

  // node_modules/graphscript-services/struct/datastructures/DataStructures.ts
  var DataStructures_exports2 = {};
  __export(DataStructures_exports2, {
    AuthorizationStruct: () => AuthorizationStruct2,
    ChatroomStruct: () => ChatroomStruct2,
    CoherenceMap: () => CoherenceMap2,
    CoherenceStruct: () => CoherenceStruct2,
    CommentStruct: () => CommentStruct2,
    Data: () => Data2,
    DataStruct: () => DataStruct2,
    DateStruct: () => DateStruct2,
    ECGStruct: () => ECGStruct2,
    EDAStruct: () => EDAStruct2,
    EEGCoordinates: () => EEGCoordinates2,
    EEGStruct: () => EEGStruct2,
    EMGStruct: () => EMGStruct2,
    EventStruct: () => EventStruct2,
    EyeTrackerStruct: () => EyeTrackerStruct2,
    FNIRSStruct: () => FNIRSStruct2,
    FrequencyBandsStruct: () => FrequencyBandsStruct2,
    GroupStruct: () => GroupStruct2,
    HRVStruct: () => HRVStruct2,
    IMUStruct: () => IMUStruct2,
    NotificationStruct: () => NotificationStruct2,
    PPGStruct: () => PPGStruct2,
    ProfileStruct: () => ProfileStruct2,
    ScheduleStruct: () => ScheduleStruct2,
    Struct: () => Struct2,
    eegCoordinates: () => eegCoordinates2,
    setCoordinate: () => setCoordinate2,
    structRegistry: () => structRegistry2
  });
  function Struct2(structType = "struct", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    function randomId2(tag = "") {
      return `${tag + Math.floor(Math.random() + Math.random() * Math.random() * 1e16)}`;
    }
    let struct = {
      _id: randomId2(structType + "defaultId"),
      //random id associated for unique identification, used for lookup and indexing
      structType,
      //this is how you will look it up by type in the server
      ownerId: parentUser?._id,
      //owner user
      timestamp: Date.now(),
      //date of creation
      parent: { structType: parentStruct?.structType, _id: parentStruct?._id }
      //parent struct it's associated with (e.g. if it needs to spawn with it)
    };
    if (!struct.ownerId)
      delete struct.ownerId;
    if (!struct?.parent?._id)
      delete struct.parent;
    if (Object.keys(assignProps).length > 0)
      Object.assign(struct, assignProps);
    return struct;
  }
  var eegCoordinates2 = {
    FP1: [-21.2, 66.9, 12.1],
    FPZ: [1.4, 65.1, 11.3],
    FP2: [24.3, 66.3, 12.5],
    AF7: [-41.7, 52.8, 11.3],
    AF3: [-32.7, 48.4, 32.8],
    AFZ: [1.8, 54.8, 37.9],
    AF4: [35.1, 50.1, 31.1],
    AF8: [43.9, 52.7, 9.3],
    F5: [-51.4, 26.7, 24.7],
    F3: [-39.7, 25.3, 44.7],
    F1: [-22.1, 26.8, 54.9],
    FZ: [0, 26.8, 60.6],
    F2: [23.6, 28.2, 55.6],
    F4: [41.9, 27.5, 43.9],
    F6: [52.9, 28.7, 25.2],
    F7: [-52.1, 28.6, 3.8],
    F8: [53.2, 28.4, 3.1],
    FC5: [-59.1, 3, 26.1],
    FC3: [-45.5, 2.4, 51.3],
    FC1: [-24.7, 0.3, 66.4],
    FCZ: [1, 1, 72.8],
    FC2: [26.1, 3.2, 66],
    FC4: [47.5, 4.6, 49.7],
    FC6: [60.5, 4.9, 25.5],
    FT9: [-53.8, -2.1, -29.1],
    FT7: [-59.2, 3.4, -2.1],
    FT8: [60.2, 4.7, -2.8],
    FT10: [55, -3.6, -31],
    T7: [-65.8, -17.8, -2.9],
    T5: [-61.5, -65.3, 1.1],
    T3: [-70.2, -21.3, -10.7],
    T4: [71.9, -25.2, -8.2],
    T6: [59.3, -67.6, 3.8],
    T8: [67.4, -18.5, -3.4],
    C5: [-63.6, -18.9, 25.8],
    C3: [-49.1, -20.7, 53.2],
    C1: [-25.1, -22.5, 70.1],
    CZ: [0.8, -21.9, 77.4],
    C2: [26.7, -20.9, 69.5],
    C4: [50.3, -18.8, 53],
    C6: [65.2, -18, 26.4],
    CP5: [-61.8, -46.2, 22.5],
    CP3: [-46.9, -47.7, 49.7],
    CP1: [-24, -49.1, 66.1],
    CPZ: [0.7, -47.9, 72.6],
    CP2: [25.8, -47.1, 66],
    CP4: [49.5, -45.5, 50.7],
    CP6: [62.9, -44.6, 24.4],
    TP9: [-73.6, -46.7, -4],
    // estimated
    TP7: [-63.6, -44.7, -4],
    TP8: [64.6, -45.4, -3.7],
    TP10: [74.6, -47.4, -3.7],
    // estimated
    P9: [-50.8, -51.3, -37.7],
    P7: [-55.9, -64.8, 0],
    P5: [-52.7, -67.1, 19.9],
    P3: [-41.4, -67.8, 42.4],
    P1: [-21.6, -71.3, 52.6],
    PZ: [0.7, -69.3, 56.9],
    P2: [24.4, -69.9, 53.5],
    P4: [44.2, -65.8, 42.7],
    P6: [54.4, -65.3, 20.2],
    P8: [56.4, -64.4, 0.1],
    P10: [51, -53.9, -36.5],
    PO7: [-44, -81.7, 1.6],
    PO3: [-33.3, -84.3, 26.5],
    POZ: [0, -87.9, 33.5],
    PO4: [35.2, -82.6, 26.1],
    PO8: [43.3, -82, 0.7],
    O1: [-25.8, -93.3, 7.7],
    OZ: [0.3, -97.1, 8.7],
    O2: [25, -95.2, 6.2]
  };
  function setCoordinate2(channelDict, assignTo = {}) {
    if (!eegCoordinates2[channelDict.tag] && channelDict.position) {
      eegCoordinates2[channelDict.tag] = [channelDict.position.x, channelDict.position.y, channelDict.position.z];
    }
    if (eegCoordinates2[channelDict.tag]) {
      let props = {
        channel: "",
        position: {
          x: eegCoordinates2[channelDict.tag][0],
          y: eegCoordinates2[channelDict.tag][1],
          z: eegCoordinates2[channelDict.tag][2]
        }
      };
      return Object.assign(assignTo, props);
    } else
      return Object.assign(assignTo, channelDict);
  }
  function EEGCoordinates2(channelDicts = [], genCoherenceMap = true) {
    let structs = [];
    for (let channelDict of channelDicts) {
      let struct = EEGStruct2(channelDict);
      structs.push(struct);
    }
    if (genCoherenceMap) {
      structs.push(...CoherenceMap2({ channelDicts }));
    }
    return structs;
  }
  function FrequencyBandsStruct2(additionalBands = [], assignTo = {}) {
    let bands = {
      scp: [],
      delta: [],
      theta: [],
      alpha1: [],
      alpha2: [],
      beta: [],
      lowgamma: [],
      highgamma: []
    };
    additionalBands.forEach((band) => bands[band] = []);
    return Object.assign(assignTo, bands);
  }
  function EEGStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let bands = FrequencyBandsStruct2();
    let props = {
      tag,
      position: { x: 0, y: 0, z: 0 },
      count: 0,
      times: [],
      raw: [],
      filtered: [],
      fftCount: 0,
      fftTimes: [],
      //Separate timing for ffts on workers
      ffts: [],
      slices: JSON.parse(JSON.stringify(bands)),
      means: JSON.parse(JSON.stringify(bands)),
      startTime: Date.now()
    };
    let struct = Struct2("eeg", props, parentUser, parentStruct);
    if (tag)
      setCoordinate2(props, struct);
    return Object.assign(struct, assignProps);
  }
  function CoherenceStruct2(coords = { 0: EEGStruct2("FP1"), 1: EEGStruct2("FP2") }, assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let bands = FrequencyBandsStruct2();
    let props = {
      tag: coords[0]?.tag + "::" + coords[1]?.tag,
      x0: coords[0]?.position?.x,
      y0: coords[0]?.position?.y,
      z0: coords[0]?.position?.z,
      x1: coords[1]?.position?.x,
      y1: coords[1]?.position?.y,
      z1: coords[1]?.position?.z,
      fftCount: 0,
      fftTimes: [],
      ffts: [],
      slices: JSON.parse(JSON.stringify(bands)),
      means: JSON.parse(JSON.stringify(bands)),
      // counter value when this struct was last read from (for using get functions)
      startTime: Date.now()
    };
    let struct = Struct2("coherence", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function CoherenceMap2(opts = { channelDicts: [{ ch: 0, tag: "FP1", analyze: false }, { ch: 1, tag: "FP2", analyze: false }], taggedOnly: true }, _ = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    var cmap = [];
    var l = 1, k = 0;
    for (var i4 = 0; i4 < opts.channelDicts.length * (opts.channelDicts.length + 1) / 2 - opts.channelDicts.length; i4++) {
      if (opts.taggedOnly === false || opts.taggedOnly === true && (opts.channelDicts[k].tag !== null && opts.channelDicts[k + l].tag !== null && (opts.channelDicts[k].tag !== "other" && opts.channelDicts[k + l].tag !== "other") && (opts.channelDicts[k].analyze === true && opts.channelDicts[k + l].analyze === true))) {
        var coord0 = EEGStruct2(opts.channelDicts[k].tag);
        var coord1 = EEGStruct2(opts.channelDicts[k + l].tag);
        cmap.push(CoherenceStruct2({ 0: coord0, 1: coord1 }, {}, parentUser, parentStruct));
      }
      l++;
      if (l + k === opts.channelDicts.length) {
        k++;
        l = 1;
      }
    }
    return cmap;
  }
  function FNIRSStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      position: { x: 0, y: 0, z: 0 },
      count: 0,
      times: [],
      red: [],
      ir: [],
      ir2: [],
      //if there is a second IR led for the site
      ambient: [],
      ratio: [],
      temp: [],
      beat_detect: {
        beats: [],
        breaths: [],
        rir: [],
        rir2: [],
        drir_dt: [],
        localmins: [],
        localmaxs: [],
        val_dists: [],
        peak_dists: [],
        localmins2: [],
        localmaxs2: [],
        val_dists2: [],
        peak_dists2: []
      },
      startTime: Date.now()
    };
    let struct = Struct2("fnirs", props, parentUser, parentStruct);
    if (tag)
      setCoordinate2(props, struct);
    return Object.assign(struct, assignProps);
  }
  function IMUStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      Ax: [],
      Ay: [],
      Az: [],
      Gx: [],
      Gy: [],
      Gz: [],
      startTime: Date.now()
    };
    let struct = Struct2("imu", props, parentUser, parentStruct);
    if (tag)
      setCoordinate2(props, struct);
    return Object.assign(struct, assignProps);
  }
  function EyeTrackerStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      count: 0,
      times: [],
      x: [],
      y: [],
      smax: [],
      //simple moving averages
      smay: [],
      startTime: Date.now()
    };
    let struct = Struct2("eyetracker", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ECGStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      count: 0,
      times: [],
      raw: [],
      filtered: [],
      bpm: [],
      hrv: [],
      startTime: Date.now()
    };
    let struct = Struct2("ecg", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function EDAStruct2(_ = "", __ = {}, ___ = { _id: "" }, ____ = { structType: "struct", _id: "" }) {
  }
  function PPGStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = FNIRSStruct2(tag, parentUser, parentStruct, assignProps);
    struct.structType = "ppg";
    return struct;
  }
  function HRVStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = ECGStruct2(tag, parentUser, parentStruct, assignProps);
    struct.structType = "hrv";
    return struct;
  }
  function EMGStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let struct = EEGStruct2(tag, parentUser, parentStruct, assignProps);
    struct.structType = "emg";
    return struct;
  }
  function ProfileStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      name: "",
      username: "",
      firstName: "",
      lastName: "",
      email: "",
      phone: "",
      sex: "",
      birthday: "",
      type: "",
      userRoles: {},
      socials: {},
      data: {},
      //arbitrary stuff
      id: ""
      //references the token id which is behind a collection permission
    };
    let struct = Struct2("profile", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function AuthorizationStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      authorizedId: "",
      authorizedName: "",
      authorizerId: "",
      authorizerName: "",
      authorizations: {},
      //authorization types e.g. what types of data the person has access to
      structs: {},
      //specific structs, contains structrefs
      excluded: {},
      groups: {},
      status: "PENDING",
      //PENDING for non-approved auths
      expires: false,
      associatedAuthId: ""
      //other authorization id belonging to other user
    };
    let struct = Struct2("authorization", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function GroupStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      name: "",
      details: "",
      admins: {},
      // can add/remove peers/clients.
      peers: {},
      // gets access to clients
      clients: {},
      // //gives access to peers
      users: {}
      //all users (for notifying)   
    };
    let struct = Struct2("group", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function Data2(type, data) {
    return {
      type,
      data,
      timestamp: Date.now()
    };
  }
  function DataStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      title: "",
      author: "",
      expires: false,
      //date of expiration, or never. Data that never expires should generally only be patient controlled stuff so its transparent
      type: "",
      //graph, file, table, fitbit_hr, fitbit_diet, etc.
      data: new Array()
      //arrays, objects, links, API refrences, pdfs, csvs, xls, etc.
    };
    let struct = Struct2("data", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function EventStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      event: "",
      //event type e.g. relapse, hospitalization
      author: "",
      //
      startTime: "",
      //event began
      endTime: "",
      //event ended
      grade: 0,
      //severity
      notes: "",
      //additional details
      attachments: new Array(),
      users: {}
      //users to be informed (i.e. peers)
    };
    let struct = Struct2("event", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ChatroomStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      message: "",
      topic: "",
      author: "",
      attachments: new Array(),
      comments: new Array(),
      replies: new Array(),
      users: {},
      audioChatActive: false,
      videoChatActive: false
    };
    let struct = Struct2("chatroom", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function CommentStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      author: "",
      replyTo: "",
      message: "",
      rating: 0,
      replies: new Array(),
      users: {},
      attachments: new Array()
    };
    let struct = Struct2("comment", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function NotificationStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      note: "",
      parentUserId: ""
    };
    let struct = Struct2("notification", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function ScheduleStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      title: "",
      author: "",
      attachments: new Array(),
      dates: new Array()
    };
    let struct = Struct2("schedule", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  function DateStruct2(tag = "", assignProps = {}, parentUser = { _id: "" }, parentStruct = { structType: "struct", _id: "" }) {
    let props = {
      tag,
      timeSet: "",
      notes: "",
      recurs: "NEVER",
      attachments: new Array()
    };
    let struct = Struct2("date", props, parentUser, parentStruct);
    return Object.assign(struct, assignProps);
  }
  var structRegistry2 = {
    Struct: Struct2,
    EEGStruct: EEGStruct2,
    FNIRSStruct: FNIRSStruct2,
    CoherenceStruct: CoherenceStruct2,
    CoherenceMap: CoherenceMap2,
    FrequencyBandsStruct: FrequencyBandsStruct2,
    IMUStruct: IMUStruct2,
    EyeTrackerStruct: EyeTrackerStruct2,
    ECGStruct: ECGStruct2,
    EDAStruct: EDAStruct2,
    PPGStruct: PPGStruct2,
    HRVStruct: HRVStruct2,
    EMGStruct: EMGStruct2,
    ProfileStruct: ProfileStruct2,
    AuthorizationStruct: AuthorizationStruct2,
    GroupStruct: GroupStruct2,
    DataStruct: DataStruct2,
    EventStruct: EventStruct2,
    ChatroomStruct: ChatroomStruct2,
    CommentStruct: CommentStruct2,
    NotificationStruct: NotificationStruct2,
    ScheduleStruct: ScheduleStruct2,
    DateStruct: DateStruct2
  };

  // src/scripts/client.ts
  var client = new StructFrontend();
  var sockets = new WSSfrontend();
  var webrtc = new WebRTCfrontend();
  var usersocket;
  var makeSocket = () => {
    usersocket = sockets.open({
      host: serverconfig_default.host,
      port: serverconfig_default.dataserverport,
      path: "wss"
    });
    usersocket.socket.addEventListener("message", (ev2) => {
      let data = ev2.data;
      console.log(ev2.data);
      if (data.includes("{"))
        data = JSON.parse(data);
      client.baseServerCallback(ev2.data);
    });
  };
  makeSocket();
  var graph = new Router({
    services: {
      client,
      sockets,
      webrtc,
      SessionsService,
      WorkerService
    },
    roots: {}
  });
  var appState = {
    route: "/",
    //current pathname
    isLoggedIn: false,
    //logged in?
    appInitialized: false,
    //initialized app?
    loggedInId: void 0,
    //id of the current user
    viewingId: void 0
    //id of the user currently being viewed
  };
  graph.setState(appState);
  var onLogin = async (result) => {
    let resultHasUser = false;
    let p2;
    if (result && result?.type !== "FAIL") {
      if (result?.data?._id) {
        client.currentUser = {
          ...usersocket,
          _id: result.data._id
        };
        await usersocket.run("addUser", [result.data, { [usersocket._id]: usersocket._id }]);
        p2 = client.setupUser(result.data);
      }
    }
    if (p2) {
      let user = await p2;
      if (user) {
        resultHasUser = true;
        graph.setState({
          isLoggedIn: true,
          loggedInId: user._id,
          viewingId: user._id
        });
        console.log("Logged in: ", user, client);
        return user;
      }
    }
    if (!resultHasUser) {
      console.log("User not created with info:", result?.data);
      if (graph.__node.state.data["isLoggedIn"])
        graph.setState({
          isLoggedIn: false
        });
    }
    return void 0;
  };
  var onLogout = (result) => {
    usersocket.terminate();
    makeSocket();
    graph.setState({
      isLoggedIn: false,
      loggedInId: void 0,
      viewingId: void 0
    });
  };
  var testuser = DataStructures_exports2.ProfileStruct(
    "test",
    {
      _id: "testclient",
      //randomId('test'),
      email: "testclient@myalyce.com",
      username: "testclient",
      firstName: "Harvey",
      lastName: "Dent",
      sex: "m",
      birthday: "09/10/1993"
      // data:{
      //     fitbit: {
      //         access_token: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIyMkM3UUsiLCJzdWIiOiI5TVA1WlgiLCJpc3MiOiJGaXRiaXQiLCJ0eXAiOiJhY2Nlc3NfdG9rZW4iLCJzY29wZXMiOiJ3aHIgd251dCB3cHJvIHdzbGUgd3dlaSB3c29jIHdhY3Qgd3NldCB3bG9jIiwiZXhwIjoxNjQ4MjEwODM3LCJpYXQiOjE2NDgxODIwMzd9.BMpbb3v69OW2r5QXvFsbMsEAALvvUxI9Vuyy28f98bo',
      //         expires_in: 28800,
      //         refresh_token: '56a85241ae06b8b48b667634daee08927c39b7e6bdffbf0459d0148c7c683e84',
      //         user_id: '9MP5ZX',
      //         scope: 'social location nutrition sleep profile heartrate activity settings weight',
      //         token_type: 'Bearer'
      //     }
      // }
    }
  );
  async function setupTestUser() {
    return await new Promise(async (res2) => {
      console.log(usersocket._id);
      let ping = await usersocket.run("ping");
      console.log("Ping Result: ", ping);
      res2(testuser);
    });
  }

  // src/app.tsx
  var import_my_alyce_component_lib = __toESM(require_dist2(), 1);
  var import_react_burger_menu = __toESM(require_BurgerMenu(), 1);

  // src/components/WebRTC.tsx
  var import_react4 = __toESM(require_react(), 1);

  // src/components/Device.tsx
  var import_react3 = __toESM(require_react(), 1);

  // src/scripts/webglplot/canvas.worker.ts
  var str2 = String('(()=>{var mouseEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","altKey","shiftKey","button","which","pointerType","clientX","clientY","pageX","pageY","movementX","movementY","x","y","which","timeStamp"]);var wheelEventHandlerImpl=makeSendPropertiesHandler(["deltaX","deltaY"]);var keydownEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","altKey","isComposing","keyCode","key","code","repeat","timeStamp"]);function focusEventHandler(event,sendFn){const data={type:event.type};data.isTrusted=event.isTrusted;data.bubbles=event.bubbles;data.cancelBubble=event.cancelBubble;data.cancelable=event.cancelable;data.composed=event.composed;data.defaultPrevent=event.defaultPrevented;data.eventPhase=event.eventPhase;data.returnValue=event.returnValue;data.currentTarget=event.currentTarget.id?event.currentTarget.id:event.currentTarget.constructor.name;data.target=data.currentTarget;data.srcElement=data.currentTarget;sendFn(data)}function wheelEventHandler(event,sendFn){if(event.preventDefault)event.preventDefault();wheelEventHandlerImpl(event,sendFn)}function preventDefaultHandler(event){if(event.preventDefault)event.preventDefault()}function copyProperties(src,properties,dst){for(const name of properties){dst[name]=src[name]}}function makeSendPropertiesHandler(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties(event,properties,data);sendFn(data)}}function touchEventHandler(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i2=0;i2<event.touches.length;++i2){const touch=event.touches[i2];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var i=1;var keys={};while(i<222){keys[i]=true;i++}function filteredKeydownEventHandler(event,sendFn){let{keyCode}=event;if(keys[keyCode]){if(event.preventDefault&&(keyCode<110||keyCode>123))event.preventDefault();keydownEventHandler(event,sendFn)}}var eventHandlers={contextmenu:preventDefaultHandler,mousedown:mouseEventHandler,mousemove:mouseEventHandler,mouseup:mouseEventHandler,pointerdown:mouseEventHandler,pointermove:mouseEventHandler,pointerup:mouseEventHandler,pointerlockchange:mouseEventHandler,webkitpointerlockchange:mouseEventHandler,focus:focusEventHandler,blur:focusEventHandler,pointerout:mouseEventHandler,touchstart:touchEventHandler,touchmove:touchEventHandler,touchend:touchEventHandler,wheel:wheelEventHandler,keydown:filteredKeydownEventHandler,keyup:filteredKeydownEventHandler};function initProxyElement(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{if(!worker){handleProxyEvent(data,id)}else worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}if(eventHandlers.keydown){globalThis.addEventListener("keydown",function(ev){eventHandlers.keydown(ev,sendEvent)})}if(eventHandlers.keyup){globalThis.addEventListener("keyup",function(ev){eventHandlers.keyup(ev,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher=class{addEventListener(type,listener){if(this.__listeners===void 0)this.__listeners={};const listeners=this.__listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this.__listeners===void 0)return false;const listeners=this.__listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i2=0,l=array.length;i2<l;i2++){array[i2].call(this,event)}}}};function noop(){}var ElementProxyReceiver=class extends EventDispatcher{constructor(){super();this.__listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.style.width=this.width+"px";this.proxied.style.height=this.height+"px";this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop;data.stopPropagation=noop;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}blur(){}};var ProxyManager=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;if(typeof WorkerGlobalScope!=="undefined")addTo.style=proxy.style;if(proxy.width){addTo.style.width=proxy.width+"px";addTo.clientWidth=proxy.width}if(proxy.height){addTo.style.height=proxy.height+"px";addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy);addTo.blur=proxy.blur.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={elementFromPoint:(...args)=>{return this.targets[Object.keys(this.targets)[0]].proxied}}}};function makeProxy(id,elm){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;this.__node.graph.ProxyManager.makeProxy(id,elm)}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;globalThis.ProxyManager.makeProxy(id,elm)}return id}function handleProxyEvent(data,id){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;if(this.__node.graph.ProxyManager.handleEvent(data,id))return data}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;if(globalThis.ProxyManager.handleEvent(data,id))return data}}var proxyElementWorkerRoutes={initProxyElement,makeProxy,handleProxyEvent};function Renderer(options){if(options.worker){let worker=options.worker;let route=options.route;if(worker instanceof Blob||typeof worker==="string"){worker=new Worker(worker)}delete options.worker;delete options.route;return transferCanvas(worker,options,route)}else{initProxyElement(options.canvas,void 0,options._id);return setupCanvas(options)}}function transferCanvas(worker,options,route){console.log(options);if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();if(!options.width)options.width=options.canvas.clientWidth;if(!options.height)options.height=options.canvas.clientHeight;let message={route:route?route:"setupCanvas",args:{...options,canvas:offscreen}};if(this?.__node?.graph)this.__node.graph.run("initProxyElement",options.canvas,worker,options._id);else initProxyElement(options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let tr=[offscreen];if(options.transfer){tr.push(...options.transfer);delete options.transfer}worker.postMessage(message,tr);const canvascontrols={_id:options._id,width:options.width,height:options.height,worker,draw:(props,transfer)=>{worker.postMessage({route:"drawFrame",args:[props,options._id]},transfer)},update:(props,transfer)=>{worker.postMessage({route:"updateCanvas",args:[props,options._id]},transfer)},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:(newDrawProps,transfer)=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]},transfer)},terminate:()=>{worker.terminate()}};return canvascontrols}function setDraw(settings,_id){let canvasopts;if(this?.__node?.graph){if(_id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]]}else{if(_id)canvasopts=globalThis.CANVASES?.[settings._id];else if(settings._id)canvasopts=globalThis.CANVASES?.[settings._id];else canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]]}if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasopts._id,canvasopts.canvas);else proxyElementWorkerRoutes.makeProxy(canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw.bind(settings)}if(typeof settings.update==="string")settings.update=parseFunctionFromText(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update.bind(settings)}if(typeof settings.init==="string")settings.init=parseFunctionFromText(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init.bind(settings)}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear.bind(settings)}return settings._id}return void 0}function setupCanvas(options){if(this?.__node?.graph){if(!this.__node.graph.CANVASES)this.__node.graph.CANVASES={}}else if(!globalThis.CANVASES)globalThis.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this?.__node?.graph?.CANVASES[canvasOptions._id]){this.__node.graph.run("setDraw",canvasOptions)}else if(globalThis.CANVASES?.[canvasOptions._id]){setDraw(canvasOptions)}else{if(this?.__node?.graph){canvasOptions.graph=this.__node.graph;if(!canvasOptions.__node){canvasOptions.__node={}}if(!canvasOptions.__node.tag)canvasOptions.__node.tag=canvasOptions._id;canvasOptions=this.__node.graph.add(canvasOptions);canvasOptions.__addOndisconnected=()=>{canvasOptions.stop();delete this.__node.graph.CANVASES[canvasOptions._id]}}if(this?.__node?.graph)this.__node.graph.CANVASES[canvasOptions._id]=canvasOptions;else globalThis.CANVASES[canvasOptions._id]=canvasOptions;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);else proxyElementWorkerRoutes.makeProxy(canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText(canvasOptions.draw)}else if(typeof canvasOptions.draw==="function"){canvasOptions.draw=canvasOptions.draw.bind(canvasOptions)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText(canvasOptions.update)}else if(typeof canvasOptions.update==="function"){canvasOptions.update=canvasOptions.update.bind(canvasOptions)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText(canvasOptions.init)}else if(typeof canvasOptions.init==="function"){canvasOptions.init=canvasOptions.init.bind(canvasOptions)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText(canvasOptions.clear)}else if(typeof canvasOptions.clear==="function"){canvasOptions.clear=canvasOptions.clear.bind(canvasOptions)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);canvasOptions.stop=()=>{stopAnim(canvasOptions._id)};canvasOptions.start=draw=>{startAnim(canvasOptions._id,draw)};canvasOptions.set=settings=>{setDraw(settings,canvasOptions._id)};if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)return canvasOptions._id;else{const canvascontrols={_id:options._id,width:options.width,height:options.height,draw:props=>{drawFrame(props,options._id)},update:props=>{updateCanvas(props,options._id)},clear:()=>{clearCanvas(options._id)},init:()=>{initCanvas(options._id)},stop:()=>{stopAnim(options._id)},start:()=>{startAnim(options._id)},set:newDrawProps=>{setDraw(newDrawProps,options._id)},terminate:()=>{if(this.__node?.graph)this.__node.graph.remove(options._id);else{stopAnim(options._id);if(this?.__node?.graph)delete this.__node.graph.CANVASES[canvasOptions._id];else delete globalThis.CANVASES[canvasOptions._id]}}};return canvascontrols}}function drawFrame(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0}function clearCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function initCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function updateCanvas(input,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0}function setProps(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0}function startAnim(_id,draw){let canvasopts=getCanvas.call(this,_id);canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function stopAnim(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")requestAnimationFrame(canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context));return _id}return void 0}function getCanvas(_id){let canvasopts;if(this?.__node?.graph){if(!_id)canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];else canvasopts=this.__node.graph.CANVASES?.[_id]}else{if(!_id)canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];else canvasopts=globalThis.CANVASES?.[_id]}return canvasopts}var workerCanvasRoutes={...proxyElementWorkerRoutes,Renderer,transferCanvas,setupCanvas,setDraw,drawFrame,clearCanvas,initCanvas,updateCanvas,setProps,startAnim,stopAnim,getCanvas};function parseFunctionFromText(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var v=class{constructor(e,t,s,h){this.r=e,this.g=t,this.b=s,this.a=h}};var A=class{constructor(){this.scaleX=1,this.scaleY=1,this.offsetX=0,this.offsetY=0,this.loop=false,this._vbuffer=0,this._coord=0,this.visible=true,this.intensity=1,this.xy=new Float32Array([]),this.numPoints=0,this.color=new v(0,0,0,1),this.webglNumPoints=0}};var d=class extends A{constructor(e,t){super(),this.currentIndex=0,this.webglNumPoints=t,this.numPoints=t,this.color=e,this.xy=new Float32Array(2*this.webglNumPoints)}setX(e,t){this.xy[e*2]=t}setY(e,t){this.xy[e*2+1]=t}getX(e){return this.xy[e*2]}getY(e){return this.xy[e*2+1]}lineSpaceX(e,t){for(let s=0;s<this.numPoints;s++)this.setX(s,e+t*s)}arrangeX(){this.lineSpaceX(-1,2/this.numPoints)}constY(e){for(let t=0;t<this.numPoints;t++)this.setY(t,e)}shiftAdd(e){let t=e.length;for(let s=0;s<this.numPoints-t;s++)this.setY(s,this.getY(s+t));for(let s=0;s<t;s++)this.setY(s+this.numPoints-t,e[s])}addArrayY(e){if(this.currentIndex+e.length<=this.numPoints)for(let t=0;t<e.length;t++)this.setY(this.currentIndex,e[t]),this.currentIndex++}replaceArrayY(e){if(e.length==this.numPoints)for(let t=0;t<this.numPoints;t++)this.setY(t,e[t])}};var M=(c,e,t)=>{let s={x:0,y:0};return s.x=c.x+e.x*t,s.y=c.y+e.y*t,s};var P=c=>Y(-c.y,c.x);var x=(c,e)=>{let t=T(c,e);return t=S(t),t};var C=(c,e)=>{let t={x:0,y:0};return t.x=c.x+e.x,t.y=c.y+e.y,t};var R=(c,e)=>c.x*e.x+c.y*e.y;var S=c=>{let e={x:0,y:0},t=c.x*c.x+c.y*c.y;return t>0&&(t=1/Math.sqrt(t),e.x=c.x*t,e.y=c.y*t),e};var Y=(c,e)=>{let t={x:0,y:0};return t.x=c,t.y=e,t};var T=(c,e)=>{let t={x:0,y:0};return t.x=c.x-e.x,t.y=c.y-e.y,t};var F=c=>{let e,t={x:0,y:0},s={x:0,y:0},h=[],o=(n,l)=>{h.push({vec2:n,miterLength:l})},a=n=>({x:c[n*2],y:c[n*2+1]});t=x(a(1),a(0)),e=P(t),o(e,1);let r=c.length/2;for(let n=1;n<r-1;n++){let l=a(n-1),i2=a(n),u=a(n+1);t=x(i2,l),e=P(t),s=x(u,i2);let g=N(t,s),f=X(t,g,1);o(g,f)}return t=x(a(r-1),a(r-2)),e=P(t),o(e,1),h};var N=(c,e)=>{let t=C(c,e);return t=S(t),Y(-t.y,t.x)};var X=(c,e,t)=>{let s=Y(-c.y,c.x);return t/R(e,s)};var p=class extends A{constructor(e,t,s){super(),this.currentIndex=0,this._thicknessRequested=0,this._actualThickness=0,this.webglNumPoints=t*2,this.numPoints=t,this.color=e,this._thicknessRequested=s,this._linePoints=new Float32Array(t*2),this.xy=new Float32Array(2*this.webglNumPoints)}convertToTriPoints(){let e=this._actualThickness/2,t=F(this._linePoints);for(let s=0;s<this.numPoints;s++){let h=this._linePoints[2*s],o=this._linePoints[2*s+1],a={x:h,y:o},r=M(a,t[s].vec2,t[s].miterLength*e),n=M(a,t[s].vec2,-t[s].miterLength*e);this.xy[s*4]=r.x,this.xy[s*4+1]=r.y,this.xy[s*4+2]=n.x,this.xy[s*4+3]=n.y}}setX(e,t){this._linePoints[e*2]=t}setY(e,t){this._linePoints[e*2+1]=t}lineSpaceX(e,t){for(let s=0;s<this.numPoints;s++)this.setX(s,e+t*s)}setThickness(e){this._thicknessRequested=e}getThickness(){return this._thicknessRequested}setActualThickness(e){this._actualThickness=e}};var L=class{constructor(e,t){this.debug=false,this.addLine=this.addDataLine,t==null?this.webgl=e.getContext("webgl",{antialias:true,transparent:false}):(this.webgl=e.getContext("webgl",{antialias:t.antialias,transparent:t.transparent,desynchronized:t.deSync,powerPerformance:t.powerPerformance,preserveDrawing:t.preserveDrawing}),this.debug=t.debug==null?false:t.debug),this.log("canvas type is: "+e.constructor.name),this.log(`[webgl-plot]:width=${e.width}, height=${e.height}`),this._linesData=[],this._linesAux=[],this._thickLines=[],this._surfaces=[],this.gScaleX=1,this.gScaleY=1,this.gXYratio=1,this.gOffsetX=0,this.gOffsetY=0,this.gLog10X=false,this.gLog10Y=false,this.webgl.clear(this.webgl.COLOR_BUFFER_BIT),this.webgl.viewport(0,0,e.width,e.height),this._progLine=this.webgl.createProgram(),this.initThinLineProgram(),this.webgl.enable(this.webgl.BLEND),this.webgl.blendFunc(this.webgl.SRC_ALPHA,this.webgl.ONE_MINUS_SRC_ALPHA)}get linesData(){return this._linesData}get linesAux(){return this._linesAux}get thickLines(){return this._thickLines}get surfaces(){return this._surfaces}_drawLines(e){let t=this.webgl;e.forEach(s=>{if(s.visible){t.useProgram(this._progLine);let h=t.getUniformLocation(this._progLine,"uscale");t.uniformMatrix2fv(h,false,new Float32Array([s.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,s.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let o=t.getUniformLocation(this._progLine,"uoffset");t.uniform2fv(o,new Float32Array([s.offsetX+this.gOffsetX,s.offsetY+this.gOffsetY]));let a=t.getUniformLocation(this._progLine,"is_log");t.uniform2iv(a,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));let r=t.getUniformLocation(this._progLine,"uColor");t.uniform4fv(r,[s.color.r,s.color.g,s.color.b,s.color.a]),t.bufferData(t.ARRAY_BUFFER,s.xy,t.STREAM_DRAW),t.drawArrays(s.loop?t.LINE_LOOP:t.LINE_STRIP,0,s.webglNumPoints)}})}_drawSurfaces(e){let t=this.webgl;e.forEach(s=>{if(s.visible){t.useProgram(this._progLine);let h=t.getUniformLocation(this._progLine,"uscale");t.uniformMatrix2fv(h,false,new Float32Array([s.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,s.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let o=t.getUniformLocation(this._progLine,"uoffset");t.uniform2fv(o,new Float32Array([s.offsetX+this.gOffsetX,s.offsetY+this.gOffsetY]));let a=t.getUniformLocation(this._progLine,"is_log");t.uniform2iv(a,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));let r=t.getUniformLocation(this._progLine,"uColor");t.uniform4fv(r,[s.color.r,s.color.g,s.color.b,s.color.a]),t.bufferData(t.ARRAY_BUFFER,s.xy,t.STREAM_DRAW),t.drawArrays(t.TRIANGLE_STRIP,0,s.webglNumPoints)}})}_drawTriangles(e){let t=this.webgl;t.bufferData(t.ARRAY_BUFFER,e.xy,t.STREAM_DRAW),t.useProgram(this._progLine);let s=t.getUniformLocation(this._progLine,"uscale");t.uniformMatrix2fv(s,false,new Float32Array([e.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,e.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let h=t.getUniformLocation(this._progLine,"uoffset");t.uniform2fv(h,new Float32Array([e.offsetX+this.gOffsetX,e.offsetY+this.gOffsetY]));let o=t.getUniformLocation(this._progLine,"is_log");t.uniform2iv(o,new Int32Array([0,0]));let a=t.getUniformLocation(this._progLine,"uColor");t.uniform4fv(a,[e.color.r,e.color.g,e.color.b,e.color.a]),t.drawArrays(t.TRIANGLE_STRIP,0,e.xy.length/2)}_drawThickLines(){this._thickLines.forEach(e=>{if(e.visible){let t=Math.min(this.gScaleX,this.gScaleY);e.setActualThickness(e.getThickness()/t),e.convertToTriPoints(),this._drawTriangles(e)}})}update(){this.clear(),this.draw()}draw(){this._drawLines(this.linesData),this._drawLines(this.linesAux),this._drawThickLines(),this._drawSurfaces(this.surfaces)}clear(){this.webgl.clear(this.webgl.COLOR_BUFFER_BIT)}_addLine(e){e._vbuffer=this.webgl.createBuffer(),this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER,e._vbuffer),this.webgl.bufferData(this.webgl.ARRAY_BUFFER,e.xy,this.webgl.STREAM_DRAW),e._coord=this.webgl.getAttribLocation(this._progLine,"coordinates"),this.webgl.vertexAttribPointer(e._coord,2,this.webgl.FLOAT,false,0,0),this.webgl.enableVertexAttribArray(e._coord)}addDataLine(e){this._addLine(e),this.linesData.push(e)}addAuxLine(e){this._addLine(e),this.linesAux.push(e)}addThickLine(e){this._addLine(e),this._thickLines.push(e)}addSurface(e){this._addLine(e),this.surfaces.push(e)}initThinLineProgram(){let e=`\n      attribute vec2 coordinates;\n      uniform mat2 uscale;\n      uniform vec2 uoffset;\n      uniform ivec2 is_log;\n\n      void main(void) {\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\n         vec2 line = vec2(x, y);\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\n      }`,t=this.webgl.createShader(this.webgl.VERTEX_SHADER);this.webgl.shaderSource(t,e),this.webgl.compileShader(t);let s=`\n         precision mediump float;\n         uniform highp vec4 uColor;\n         void main(void) {\n            gl_FragColor =  uColor;\n         }`,h=this.webgl.createShader(this.webgl.FRAGMENT_SHADER);this.webgl.shaderSource(h,s),this.webgl.compileShader(h),this._progLine=this.webgl.createProgram(),this.webgl.attachShader(this._progLine,t),this.webgl.attachShader(this._progLine,h),this.webgl.linkProgram(this._progLine)}popDataLine(){this.linesData.pop()}removeAllLines(){this._linesData=[],this._linesAux=[],this._thickLines=[],this._surfaces=[]}removeDataLines(){this._linesData=[]}removeAuxLines(){this._linesAux=[]}viewport(e,t,s,h){this.webgl.viewport(e,t,s,h)}log(e){this.debug&&console.log("[webgl-plot]:"+e)}};var y=class{constructor(){this.plots={}}initPlot(e,t){if(t||(t=new L(e.canvas,e.webglOptions)),!e._id)e._id=`plot${Math.floor(Math.random()*1e15)}`;else if(this.plots[e._id]){let l=this.plots[e._id].initial;if(e.lines){for(let i2 in e.lines)if(l.lines[i2]&&Array.isArray(e.lines[i2])){let u=e.lines[i2];e.lines[i2]=l.lines[i2]}}e=Object.assign(l,e)}e.overlay&&(typeof e.overlay!="object"&&(e.overlay=document.createElement("canvas"),e.overlay.style.position="absolute",e.overlay.width=e.canvas.width,e.overlay.height=e.canvas.height,e.canvas.appendChild(e.overlay)),e.overlayCtx||(e.overlayCtx=e.overlay.getContext("2d"))),e.width&&(e.canvas.width=e.width,e.canvas.style&&(e.canvas.style.width=e.width+"px"),typeof e.overlay=="object"&&(e.overlay.width=e.width,e.overlay.style&&(e.overlay.style.width=e.width+"px"))),e.height&&(e.canvas.height=e.height,e.canvas.style&&(e.canvas.style.height=e.height+"px"),typeof e.overlay=="object"&&(e.overlay.height=e.height,e.overlay.style&&(e.overlay.style.height=e.height+"px"))),e.lines?.timestamp&&delete e.lines.timestamp,e.lines||(e.lines={});let s={};for(let l in e.lines)s[l]=Object.assign({},s[l]),"viewing"in e.lines[l]||(e.lines[l].viewing=true),s[l].viewing=e.lines[l].viewing,s[l].sps=e.lines[l].sps,s[l].nSec=e.lines[l].nSec,s[l].nPoints=e.lines[l].nPoints,s[l].ymin=e.lines[l].ymin,s[l].ymax=e.lines[l].ymax,s[l].units=e.lines[l].units;let h={plot:t,settings:e,initial:Object.assign(Object.assign({},e),{lines:s}),anim:()=>{t.update()}};this.plots[e._id]=h;let o=0,a=0;Object.keys(e.lines).forEach(l=>{e.lines[l]?.viewing!==false&&a++}),e.nLines=a;let r,n;typeof e.overlay=="object"&&(r=e.overlay,n=e.overlayCtx,n.clearRect(0,0,e.overlay.width,e.overlay.height),n.font=e.overlayFont?e.overlayFont:"1em Courier",n.fillStyle=e.overlayColor?e.overlayColor:"white");for(let l in e.lines){let i2=e.lines[l];if(Array.isArray(i2)&&(i2={values:i2},e.lines[l]=i2),"viewing"in i2||(i2.viewing=true),i2.color)Array.isArray(i2.color)&&(i2.color=new v(...i2.color));else{let m=y.HSLToRGB(360*(o/a)%360,100,50,1);h.initial.lines[l].color=[...m,1],i2.color=new v(...m,1)}let u;if(i2.nSec&&i2.sps?u=Math.ceil(i2.nSec*i2.sps):i2.nPoints?u=i2.nPoints:i2.points?u=i2.points:e.linePoints?u=e.linePoints:i2.values?u=i2.values.length:u=1e3,i2.points=u,e.lines[l].viewing===false)continue;if((i2.width||e.lineWidth)&&i2.width!==0){let m=e.lineWidth;m||(m=i2.width),i2.width?i2.line=new p(i2.color,u,i2.width):e.lineWidth&&(i2.line=new p(i2.color,u,e.lineWidth)),i2.line.lineSpaceX(-1,2/i2.line.numPoints)}else i2.line=new d(i2.color,u),i2.line.arrangeX();i2.values?.length===i2.points?i2.values.length!==u&&(i2.interpolate?i2.values.length>u?i2.values=y.downsample(i2.values,u):i2.values.length<u&&(i2.values=y.upsample(i2.values,u)):i2.values.length>i2.points?i2.values=i2.values.slice(i2.values.length-i2.points):i2.values=[...new Array(i2.points-i2.values.length).fill(0),...i2.values]):Array.isArray(i2.values)?i2.values.length>u?i2.values=i2.values.slice(i2.values.length-u):i2.values.length<u&&(i2.values=[...new Array(u-i2.values.length).fill(0),...i2.values]):i2.values=new Array(i2.points).fill(0);let g=i2.ymin,f=i2.ymax,b=i2.values.length<=1e5;if(g===f?(f=b?Math.max(...i2.values):1,g=b?Math.min(...i2.values):0):isNaN(f)&&(f=b?Math.max(...i2.values):1),isNaN(g)&&(g=b?Math.min(...i2.values):0),g>f){let m=g;f=g,g=m}let w=Math.abs(g);if(i2.absmax=w>f?w:f,"autoscale"in i2||(i2.autoscale=true),i2.position||(i2.position=e.nLines-o-1),i2.autoscale?i2.autoscale===2?("clamp"in i2||(i2.clamp=true),i2.scaled=y.autoscale(i2.values,i2.position,a,i2.centerZero,g,f,i2.clamp)):(i2.scaled=i2.values,i2.line.scaleY=y.getYScalar(i2.values,a,i2.centerZero,g,f),i2.line.offsetY=y.getYOffset(i2.position,a,g,i2.line.scaleY)):i2.scaled=i2.values,i2.scaled.forEach((m,_)=>i2.line.setY(_,m)),i2.line instanceof p?t.addThickLine(i2.line):i2.line instanceof d&&t.addDataLine(i2.line),"xAxis"in i2||(i2.xAxis=true),i2.xAxis){i2.xColor?Array.isArray(i2.xColor)&&(i2.xColor=new v(...i2.xColor)):i2.xColor=new v(1,1,1,.3);let m=new d(i2.xColor,2),_=i2.autoscale?(o+1)*2/a-1-1/a:0;m.constY(_),m.arrangeX(),m.xy[2]=1,i2.x=m,t.addAuxLine(m)}if(a>1&&i2.autoscale&&o!==a-1){e.dividerColor?Array.isArray(e.dividerColor)&&(e.dividerColor=new v(...e.dividerColor)):e.dividerColor=new v(1,1,1,1);let m=new d(e.dividerColor,2);m.constY(i2.autoscale?(o+1)*2/a-1:1),m.arrangeX(),m.xy[2]=1,i2.divider=m,t.addAuxLine(m)}if(typeof e.overlay=="object"&&(i2.useOverlay||!("useOverlay"in i2))){let m=e.nLines-i2.position-1;n.fillText(l,20,r.height*(m+.2)/e.nLines),n.fillText(`${Math.floor(f)===f?f:f?.toFixed(5)} ${i2.units?i2.units:""}`,r.width-100,r.height*(m+.2)/e.nLines),n.fillText(`${Math.floor(g)===g?g:g?.toFixed(5)} ${i2.units?i2.units:""}`,r.width-100,r.height*(m+.9)/e.nLines)}o++}return requestAnimationFrame(h.anim),this.plots[e._id]}deinitPlot(e){return typeof e=="string"&&(e=this.plots[e]),e.plot.clear(),e.plot.removeAllLines(),true}reinitPlot(e,t){if(typeof e=="string"){let s=e;e=this.plots[e],t._id||(t._id=s)}if(e.plot)return e.plot.clear(),e.plot.removeAllLines(),e.settings.overlayCtx&&e.settings.overlayCtx.clearRect(0,0,e.settings.overlay?.width,e.settings.overlay?.height),this.initPlot(t,e.plot)}getChartSettings(e,t){let s=this.plots[e];if(s){let h=Object.assign({},s.initial);for(let o in s.initial.lines)typeof s.initial.lines[o]?.ymax!="number"&&(h.lines[o].ymax=s.settings.lines[o]?.ymax),typeof s.initial.lines[o]?.ymin!="number"&&(h.lines[o].ymin=s.settings.lines[o]?.ymin),t&&(h.lines[o].values=s.settings.lines[o].values);return delete h.canvas,delete h.overlay,delete h.overlayCtx,h}}update(e,t,s=true){if(typeof e=="string"&&(e=this.plots[e]),!e)return false;if(t){let h=false,o,a;typeof e.settings.overlay=="object"&&(o=e.settings.overlay,a=e.settings.overlayCtx,a.font=e.settings.overlayFont?e.settings.overlayFont:"1em Courier",a.fillStyle=e.settings.overlayColor?e.settings.overlayColor:"white");for(let r in t)if(e.settings.lines[r]&&e.settings.lines[r].line){if(e.settings.lines[r]?.viewing===false)continue;let n=e.settings.lines[r];if(n.values){if(e.settings.mode&&e.settings.mode==="sweep"){"ct"in n||(n.ct=0);let f=b=>{n.ct>n.values.length&&(n.ct=0),n.values[n.ct]=b,n.ct++};Array.isArray(t[r])?t[r].forEach(f):typeof t[r]=="number"?f(t[r]):t[r].values&&t[r].values.forEach(f)}else Array.isArray(t[r])&&n.values?.length<1e5?(n.values.length===0&&(n.values.length=n.points?n.points:1e3),t[r].length===n.values.length?n.values=t[r]:y.circularBuffer(n.values,t[r])):typeof t[r]=="number"?(n.values.push(t[r]),n.values.shift()):t[r]?.values&&(n.values.length===0&&(n.values.length=n.points?n.points:1e3),t[r].values.length===n.values.length?n.values=t[r].values:y.circularBuffer(n.values,t[r].values));n.values.length!==n.points&&(n.interpolate?n.values.length>n.points?n.values=y.downsample(n.values,n.points):n.scaled.length<n.points&&(n.values=y.upsample(n.values,n.points)):n.values.length>n.points?n.values.splice(0,n.values.length-n.points):n.values=new Array(n.points).fill(0).splice(n.points-n.values.length,0,n.values));let l=n.ymin,i2=n.ymax,u=n.values.length<=1e5;if(l===i2?(i2=u?Math.max(...n.values):1,l=u?Math.min(...n.values):0):isNaN(i2)&&(i2=u?Math.max(...n.values):1),isNaN(l)&&(l=u?Math.min(...n.values):0),l>i2){let f=l;i2=l,l=f}let g=Math.abs(l);if(n.absmax=g>i2?g:i2,n.autoscale?n.autoscale===2?n.scaled=y.autoscale(n.values,n.position,e.settings.nLines,n.centerZero,l,i2,n.clamp):(n.scaled=n.values,n.line.scaleY=y.getYScalar(n.values,e.settings.nLines,n.centerZero,l,i2),n.line.offsetY=y.getYOffset(n.position,e.settings.nLines,l,n.line.scaleY)):n.scaled=n.values,n.scaled.forEach((f,b)=>{!n.autoscale&&n.absmax>1?n.line.setY(b,f/n.absmax):n.line.setY(b,f)}),typeof e.settings.overlay=="object"&&(n.useOverlay||!("useOverlay"in n))){let f=e.settings.nLines-n.position-1,b=o.height*f/e.settings.nLines,w=o.height/e.settings.nLines;if(a.clearRect(0,b,o.width,w),e.settings.mode&&e.settings.mode==="sweep"){a.fillStyle=e.settings.sweepColor?e.settings.sweepColor:"rgba(0,255,0,0.25)",a.beginPath();let m=o.width*n.ct/n.values.length;a.moveTo(m,b),a.lineTo(m,w),a.stroke()}a.fillStyle=e.settings.overlayColor?e.settings.overlayColor:"white",a.fillText(r,20,o.height*(f+.2)/e.settings.nLines),a.fillText(`${Math.floor(i2)===i2?i2:i2?.toFixed(5)} ${n.units?n.units:""}`,o.width-100,o.height*(f+.2)/e.settings.nLines),a.fillText(`${Math.floor(l)===l?l:l?.toFixed(5)} ${n.units?n.units:""}`,o.width-100,o.height*(f+.9)/e.settings.nLines)}}}else e.settings.generateNewLines&&!r.includes("timestamp")&&(Array.isArray(t[r])&&(t[r]={values:t[r]}),!t[r].nSec&&!t[r].nPoints&&!e.settings.linePoints&&(t[r].nPoints=1e3),h=true);if(h)return e.settings.cleanGeneration||Object.keys(e.initial.lines).forEach(r=>{t[r]?t[r]=Object.assign(e.initial.lines[r],t[r]):t[r]=e.initial.lines[r]}),this.reinitPlot(e,{_id:e.settings._id,lines:t}),true}return s&&requestAnimationFrame(e.anim),true}updateLine(e,t,s,h,o,a,r){return e.numPoints!==t.length&&(s?e.numPoints>t.length?t=y.downsample(t,e.numPoints):e.numPoints<t.length&&(t=y.upsample(t,e.numPoints)):t.length>e.numPoints?t=t.slice(t.length-e.numPoints):t=[...new Array(t.length).fill(0),...t]),h&&(t=y.autoscale(t,o,a,r)),t.forEach((n,l)=>e.setY(l,n)),true}static autoscale(e,t=0,s=1,h=false,o,a,r){if(e?.length===0)return e;let n=typeof a=="number"?a:e.length<=1e5?Math.max(...e):1,l=typeof o=="number"?o:e.length<=1e5?Math.min(...e):0,i2=1/s,u=1;if(h){let g=Math.max(Math.abs(l),Math.abs(n));return g!==0&&(u=i2/g),e.map(f=>(r&&(f<l&&(f=l),f>n&&(f=n)),f*u+(i2*(t+1)*2-1-i2)))}else return n===l?n!==0?u=i2/n:l!==0&&(u=i2/Math.abs(l)):u=i2/(n-l),e.map(g=>(r&&(g<l&&(g=l),g>n&&(g=n)),2*((g-l)*u-1/(2*s))+(i2*(t+1)*2-1-i2)))}static getYScalar(e,t=1,s=false,h,o){if(e?.length===0)return e;let a=typeof o=="number"?o:e.length<=1e5?Math.max(...e):1,r=typeof h=="number"?h:e.length<=1e5?Math.min(...e):0,n=1/t,l=1;if(s){let i2=Math.max(Math.abs(r),Math.abs(a));return i2!==0&&(l=n/i2),2*l}else return a===r?a!==0?l=n/a:r!==0&&(l=n/Math.abs(r)):l=n/(a-r),2*l}static getYOffset(e=0,t=1,s=0,h=1){let o=1/t,a=o*(e+1)*2-1-o;return s!==0?a-=s*h+1/t:a-=h+1/t,a}static absmax(e){return Math.max(Math.abs(Math.min(...e)),Math.max(...e))}static downsample(e,t,s=1){if(e.length>t){let h=new Array(t),o=e.length/t,a=e.length-1,r=0,n=0;for(let l=o;l<e.length;l+=o){let i2=Math.round(l);i2>a&&(i2=a);for(let u=r;u<i2;u++)h[n]+=e[u];h[n]/=(i2-r)*s,n++,r=i2}return h}else return e}static upsample(e,t,s=1){var h=function(g,f,b){return(g+(f-g)*b)*s},o=new Array(t),a=(e.length-1)/(t-1);o[0]=e[0];for(var r=1;r<t-1;r++){var n=r*a,l=Math.floor(n),i2=Math.ceil(n),u=n-l;o[r]=h(e[l],e[i2],u)}return o[t-1]=e[e.length-1],o}static interpolate(e,t,s=1){return e.length>t?y.downsample(e,t,s):e.length<t?y.upsample(e,t,s):e}static HSLToRGB(e,t,s,h=255){t/=100,s/=100;let o=(1-Math.abs(2*s-1))*t,a=o*(1-Math.abs(e/60%2-1)),r=s-o/2,n=0,l=0,i2=0;return 0<=e&&e<60?(n=o,l=a,i2=0):60<=e&&e<120?(n=a,l=o,i2=0):120<=e&&e<180?(n=0,l=o,i2=a):180<=e&&e<240?(n=0,l=a,i2=o):240<=e&&e<300?(n=a,l=0,i2=o):300<=e&&e<360&&(n=o,l=0,i2=a),n=(n+r)*h,l=(l+r)*h,i2=(i2+r)*h,[n,l,i2]}static circularBuffer(e,t){if(t.length<e.length){let s=e.slice(t.length),h=e.length;e.splice(0,h,...s,...t)}else if(t.length>e.length){let s=e.length;e.splice(0,s,...t.slice(t.length-s))}else e.splice(0,e.length,...t);return e}static formatDataForCharts(e,t){if(Array.isArray(e)){if(Array.isArray(e[0])){let s={};if(e.forEach((h,o)=>{s[o]=h}),e=s,isNaN(e[0][0]))return}else if(t){if(e={[t]:e},isNaN(e[t][0]))return}else if(e={0:e},isNaN(e[0][0]))return}else if(typeof e=="object"){for(let s in e)if(typeof e[s]=="number"?e[s]=[e[s]]:e[s]?.values&&typeof e[s].values=="number"&&(e[s].values=[e[s].values]),isNaN(e[s][0]))return}else if(typeof e=="string"){let s;if(e.includes(`\\r\n`)){let h=e.split(`\\r\n`);e={},h.forEach((o,a)=>{o.includes("	")?s=o.split("	"):o.includes(",")?s=o.split(","):o.includes("|")&&(s=o.split("|")),s&&s.forEach((r,n)=>{if(r.includes(":")){let[l,i2]=r.split(":"),u=parseFloat(i2);isNaN(u)||(e[l]=[u])}else{let l=parseFloat(r);isNaN(l)||(e[n]=[l])}})})}else e.includes("	")?s=e.split("	"):e.includes(",")?s=e.split(","):e.includes("|")&&(s=e.split("|"));e={},s&&s.forEach((h,o)=>{if(h.includes(":")){let[a,r]=h.split(":"),n=parseFloat(r);isNaN(n)||(e[a]=[n])}else{let a=parseFloat(h);isNaN(a)||(e[o]=[a])}})}else typeof e=="number"&&(t?e={[t]:[e]}:e={0:[e]});return e}static padTime(e,t,s,h){let o=(e[0]-t)/s/h;return[...new Array(h-e.length).map((r,n)=>t+o*(n+1)),...e]}static interpolateForTime(e,t,s){return y.interpolate(e,Math.ceil(s*t))}};if(typeof WorkerGlobalScope!=="undefined"){globalThis.plotter=new y;const routes={...workerCanvasRoutes};self.onmessage=ev=>{if(ev.data.route){if(Array.isArray(ev.data.args)){routes[ev.data.route](...ev.data.args)}else routes[ev.data.route](ev.data.args)}}}var canvas_worker_default=self;})();\n');
  var url = URL.createObjectURL(new globalThis.Blob([str2], { type: "text/javascript" }));
  var canvas_worker_default = url;

  // node_modules/graphscript/src/services/worker/ProxyListener.ts
  var mouseEventHandler2 = makeSendPropertiesHandler2([
    "ctrlKey",
    "metaKey",
    "altKey",
    "shiftKey",
    "button",
    "which",
    "pointerType",
    "clientX",
    "clientY",
    "pageX",
    "pageY",
    "movementX",
    "movementY",
    "x",
    "y",
    "which",
    "timeStamp"
  ]);
  var wheelEventHandlerImpl2 = makeSendPropertiesHandler2([
    "deltaX",
    "deltaY"
  ]);
  var keydownEventHandler2 = makeSendPropertiesHandler2([
    "ctrlKey",
    "metaKey",
    "shiftKey",
    "altKey",
    "isComposing",
    "keyCode",
    "key",
    "code",
    "repeat",
    "timeStamp"
  ]);
  function focusEventHandler2(event, sendFn) {
    const data = { type: event.type };
    data.isTrusted = event.isTrusted;
    data.bubbles = event.bubbles;
    data.cancelBubble = event.cancelBubble;
    data.cancelable = event.cancelable;
    data.composed = event.composed;
    data.defaultPrevent = event.defaultPrevented;
    data.eventPhase = event.eventPhase;
    data.returnValue = event.returnValue;
    data.currentTarget = event.currentTarget.id ? event.currentTarget.id : event.currentTarget.constructor.name;
    data.target = data.currentTarget;
    data.srcElement = data.currentTarget;
    sendFn(data);
  }
  function wheelEventHandler2(event, sendFn) {
    if (event.preventDefault)
      event.preventDefault();
    wheelEventHandlerImpl2(event, sendFn);
  }
  function preventDefaultHandler2(event) {
    if (event.preventDefault)
      event.preventDefault();
  }
  function copyProperties2(src, properties, dst) {
    for (const name2 of properties) {
      dst[name2] = src[name2];
    }
  }
  function makeSendPropertiesHandler2(properties) {
    return function sendProperties(event, sendFn) {
      const data = { type: event.type };
      copyProperties2(event, properties, data);
      sendFn(data);
    };
  }
  function touchEventHandler2(event, sendFn) {
    const touches = [];
    const data = { type: event.type, touches };
    for (let i4 = 0; i4 < event.touches.length; ++i4) {
      const touch = event.touches[i4];
      touches.push({
        pageX: touch.pageX,
        pageY: touch.pageY
      });
    }
    sendFn(data);
  }
  var i2 = 1;
  var keys2 = {};
  while (i2 < 222) {
    keys2[i2] = true;
    i2++;
  }
  function filteredKeydownEventHandler2(event, sendFn) {
    let { keyCode } = event;
    if (keys2[keyCode]) {
      if (event.preventDefault && (keyCode < 110 || keyCode > 123))
        event.preventDefault();
      keydownEventHandler2(event, sendFn);
    }
  }
  var eventHandlers2 = {
    //you can register more event handlers in this object
    contextmenu: preventDefaultHandler2,
    mousedown: mouseEventHandler2,
    mousemove: mouseEventHandler2,
    mouseup: mouseEventHandler2,
    pointerdown: mouseEventHandler2,
    pointermove: mouseEventHandler2,
    pointerup: mouseEventHandler2,
    pointerlockchange: mouseEventHandler2,
    webkitpointerlockchange: mouseEventHandler2,
    focus: focusEventHandler2,
    blur: focusEventHandler2,
    pointerout: mouseEventHandler2,
    touchstart: touchEventHandler2,
    touchmove: touchEventHandler2,
    touchend: touchEventHandler2,
    wheel: wheelEventHandler2,
    keydown: filteredKeydownEventHandler2,
    keyup: filteredKeydownEventHandler2
  };
  function initProxyElement2(element, worker, id) {
    if (!id)
      id = "proxy" + Math.floor(Math.random() * 1e15);
    const sendEvent = (data) => {
      if (!worker) {
        handleProxyEvent2(data, id);
      } else
        worker.postMessage({ route: "handleProxyEvent", args: [data, id] });
    };
    let entries = Object.entries(eventHandlers2);
    for (const [eventName, handler] of entries) {
      element.addEventListener(eventName, function(event) {
        handler(event, sendEvent);
      });
    }
    if (eventHandlers2.keydown) {
      globalThis.addEventListener("keydown", function(ev2) {
        eventHandlers2.keydown(ev2, sendEvent);
      });
    }
    if (eventHandlers2.keyup) {
      globalThis.addEventListener("keyup", function(ev2) {
        eventHandlers2.keyup(ev2, sendEvent);
      });
    }
    const sendSize = () => {
      const rect = element.getBoundingClientRect();
      sendEvent({
        type: "resize",
        left: rect.left,
        top: rect.top,
        width: element.clientWidth,
        height: element.clientHeight
      });
    };
    sendSize();
    globalThis.addEventListener("resize", sendSize);
    return id;
  }
  var EventDispatcher2 = class {
    addEventListener(type, listener) {
      if (this.__listeners === void 0)
        this.__listeners = {};
      const listeners = this.__listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this.__listeners === void 0)
        return false;
      const listeners = this.__listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event, target) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        if (!target)
          event.target = this;
        else
          event.target = target;
        const array = listenerArray.slice(0);
        for (let i4 = 0, l = array.length; i4 < l; i4++) {
          array[i4].call(this, event);
        }
      }
    }
  };
  function noop2() {
  }
  var ElementProxyReceiver2 = class extends EventDispatcher2 {
    constructor() {
      super();
      this.__listeners = {};
      this.style = {};
      // OrbitControls call these as of r132. Maybe we should implement them
      this.setPointerCapture = () => {
      };
      this.releasePointerCapture = () => {
      };
      this.getBoundingClientRect = () => {
        return {
          left: this.left,
          top: this.top,
          width: this.width,
          height: this.height,
          right: this.left + this.width,
          bottom: this.top + this.height
        };
      };
      this.handleEvent = (data) => {
        if (data.type === "resize") {
          this.left = data.left;
          this.top = data.top;
          this.width = data.width;
          this.height = data.height;
          if (typeof this.proxied === "object") {
            this.proxied.style.width = this.width + "px";
            this.proxied.style.height = this.height + "px";
            this.proxied.clientWidth = this.width;
            this.proxied.clientHeight = this.height;
          }
        }
        data.preventDefault = noop2;
        data.stopPropagation = noop2;
        this.dispatchEvent(data, this.proxied);
      };
      this.style = {};
    }
    get clientWidth() {
      return this.width;
    }
    get clientHeight() {
      return this.height;
    }
    focus() {
    }
    blur() {
    }
  };
  var ProxyManager2 = class {
    constructor() {
      this.targets = {};
      this.makeProxy = (id, addTo = void 0) => {
        if (!id)
          id = `proxyReceiver${Math.floor(Math.random() * 1e15)}`;
        let proxy;
        if (this.targets[id])
          proxy = this.targets[id];
        else {
          proxy = new ElementProxyReceiver2();
          this.targets[id] = proxy;
        }
        if (typeof addTo === "object") {
          addTo.proxy = proxy;
          proxy.proxied = addTo;
          if (typeof WorkerGlobalScope !== "undefined")
            addTo.style = proxy.style;
          if (proxy.width) {
            addTo.style.width = proxy.width + "px";
            addTo.clientWidth = proxy.width;
          }
          if (proxy.height) {
            addTo.style.height = proxy.height + "px";
            addTo.clientHeight = proxy.height;
          }
          addTo.setPointerCapture = proxy.setPointerCapture.bind(proxy);
          addTo.releasePointerCapture = proxy.releasePointerCapture.bind(proxy);
          addTo.getBoundingClientRect = proxy.getBoundingClientRect.bind(proxy);
          addTo.addEventListener = proxy.addEventListener.bind(proxy);
          addTo.removeEventListener = proxy.removeEventListener.bind(proxy);
          addTo.handleEvent = proxy.handleEvent.bind(proxy);
          addTo.dispatchEvent = proxy.dispatchEvent.bind(proxy);
          addTo.focus = proxy.focus.bind(proxy);
          addTo.blur = proxy.blur.bind(proxy);
        }
      };
      this.getProxy = (id) => {
        return this.targets[id];
      };
      this.handleEvent = (data, id) => {
        if (!this.targets[id])
          this.makeProxy(id);
        if (this.targets[id]) {
          this.targets[id].handleEvent(data);
          return true;
        }
        return void 0;
      };
      if (!globalThis.document)
        globalThis.document = {
          elementFromPoint: (...args) => {
            return this.targets[Object.keys(this.targets)[0]].proxied;
          }
        };
    }
  };
  function makeProxy2(id, elm) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager2();
      this.__node.graph.ProxyManager.makeProxy(id, elm);
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager2();
      globalThis.ProxyManager.makeProxy(id, elm);
    }
    return id;
  }
  function handleProxyEvent2(data, id) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager2();
      if (this.__node.graph.ProxyManager.handleEvent(data, id))
        return data;
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager2();
      if (globalThis.ProxyManager.handleEvent(data, id))
        return data;
    }
  }
  var proxyElementWorkerRoutes2 = {
    initProxyElement: initProxyElement2,
    makeProxy: makeProxy2,
    handleProxyEvent: handleProxyEvent2
  };

  // node_modules/graphscript/src/services/worker/WorkerCanvas.ts
  function Renderer2(options) {
    if (options.worker) {
      let worker = options.worker;
      let route = options.route;
      if (worker instanceof Blob || typeof worker === "string") {
        worker = new Worker(worker);
      }
      delete options.worker;
      delete options.route;
      return transferCanvas2(worker, options, route);
    } else {
      initProxyElement2(options.canvas, void 0, options._id);
      return setupCanvas2(options);
    }
  }
  function transferCanvas2(worker, options, route) {
    console.log(options);
    if (!options)
      return void 0;
    if (!options._id)
      options._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    let offscreen = options.canvas.transferControlToOffscreen();
    if (!options.width)
      options.width = options.canvas.clientWidth;
    if (!options.height)
      options.height = options.canvas.clientHeight;
    let message = { route: route ? route : "setupCanvas", args: {
      ...options,
      canvas: offscreen
    } };
    if (this?.__node?.graph)
      this.__node.graph.run("initProxyElement", options.canvas, worker, options._id);
    else
      initProxyElement2(options.canvas, worker, options._id);
    if (options.draw) {
      if (typeof options.draw === "function")
        message.args.draw = options.draw.toString();
      else
        message.args.draw = options.draw;
    }
    if (options.update) {
      if (typeof options.update === "function")
        message.args.update = options.update.toString();
      else
        message.args.update = options.update;
    }
    if (options.init) {
      if (typeof options.init === "function")
        message.args.init = options.init.toString();
      else
        message.args.init = options.init;
    }
    if (options.clear) {
      if (typeof options.clear === "function")
        message.args.clear = options.clear.toString();
      else
        message.args.clear = options.clear;
    }
    let tr = [offscreen];
    if (options.transfer) {
      tr.push(...options.transfer);
      delete options.transfer;
    }
    worker.postMessage(message, tr);
    const canvascontrols = {
      _id: options._id,
      width: options.width,
      height: options.height,
      worker,
      draw: (props, transfer) => {
        worker.postMessage({ route: "drawFrame", args: [props, options._id] }, transfer);
      },
      update: (props, transfer) => {
        worker.postMessage({ route: "updateCanvas", args: [props, options._id] }, transfer);
      },
      clear: () => {
        worker.postMessage({ route: "clearCanvas", args: options._id });
      },
      init: () => {
        worker.postMessage({ route: "initCanvas", args: options._id });
      },
      stop: () => {
        worker.postMessage({ route: "stopAnim", args: options._id });
      },
      start: () => {
        worker.postMessage({ route: "startAnim", args: options._id });
      },
      set: (newDrawProps, transfer) => {
        worker.postMessage({ route: "setDraw", args: [newDrawProps, options._id] }, transfer);
      },
      terminate: () => {
        worker.terminate();
      }
    };
    return canvascontrols;
  }
  function setDraw2(settings2, _id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (_id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
    } else {
      if (_id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
    }
    if (canvasopts) {
      if (settings2.canvas) {
        canvasopts.canvas = settings2.canvas;
        if (this?.__node?.graph)
          this.__node.graph.run("makeProxy", canvasopts._id, canvasopts.canvas);
        else
          proxyElementWorkerRoutes2.makeProxy(canvasopts._id, canvasopts.canvas);
      }
      if (typeof settings2.context === "string")
        canvasopts.context = canvasopts.canvas.getContext(settings2.context);
      else if (settings2.context)
        canvasopts.context = settings2.context;
      if (settings2.width)
        canvasopts.canvas.width = settings2.width;
      if (settings2.height)
        canvasopts.canvas.height = settings2.height;
      if (typeof settings2.draw === "string")
        settings2.draw = parseFunctionFromText(settings2.draw);
      if (typeof settings2.draw === "function") {
        canvasopts.draw = settings2.draw.bind(settings2);
      }
      if (typeof settings2.update === "string")
        settings2.update = parseFunctionFromText(settings2.update);
      if (typeof settings2.update === "function") {
        canvasopts.update = settings2.update.bind(settings2);
      }
      if (typeof settings2.init === "string")
        settings2.init = parseFunctionFromText(settings2.init);
      if (typeof settings2.init === "function") {
        canvasopts.init = settings2.init.bind(settings2);
      }
      if (typeof settings2.clear === "string")
        settings2.clear = parseFunctionFromText(settings2.clear);
      if (typeof settings2.clear === "function") {
        canvasopts.clear = settings2.clear.bind(settings2);
      }
      return settings2._id;
    }
    return void 0;
  }
  function setupCanvas2(options) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.CANVASES)
        this.__node.graph.CANVASES = {};
    } else if (!globalThis.CANVASES)
      globalThis.CANVASES = {};
    let canvasOptions = options;
    options._id ? canvasOptions._id = options._id : canvasOptions._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    typeof options.context === "string" ? canvasOptions.context = options.canvas.getContext(options.context) : canvasOptions.context = options.context;
    "animating" in options ? canvasOptions.animating = options.animating : canvasOptions.animating = true;
    if (this?.__node?.graph?.CANVASES[canvasOptions._id]) {
      this.__node.graph.run("setDraw", canvasOptions);
    } else if (globalThis.CANVASES?.[canvasOptions._id]) {
      setDraw2(canvasOptions);
    } else {
      if (this?.__node?.graph) {
        canvasOptions.graph = this.__node.graph;
        if (!canvasOptions.__node) {
          canvasOptions.__node = {};
        }
        if (!canvasOptions.__node.tag)
          canvasOptions.__node.tag = canvasOptions._id;
        canvasOptions = this.__node.graph.add(canvasOptions);
        canvasOptions.__addOndisconnected = () => {
          canvasOptions.stop();
          delete this.__node.graph.CANVASES[canvasOptions._id];
        };
      }
      if (this?.__node?.graph)
        this.__node.graph.CANVASES[canvasOptions._id] = canvasOptions;
      else
        globalThis.CANVASES[canvasOptions._id] = canvasOptions;
      if (this?.__node?.graph)
        this.__node.graph.run("makeProxy", canvasOptions._id, canvasOptions.canvas);
      else
        proxyElementWorkerRoutes2.makeProxy(canvasOptions._id, canvasOptions.canvas);
      if (options.width)
        canvasOptions.canvas.width = options.width;
      if (options.height)
        canvasOptions.canvas.height = options.height;
      if (typeof canvasOptions.draw === "string") {
        canvasOptions.draw = parseFunctionFromText(canvasOptions.draw);
      } else if (typeof canvasOptions.draw === "function") {
        canvasOptions.draw = canvasOptions.draw.bind(canvasOptions);
      }
      if (typeof canvasOptions.update === "string") {
        canvasOptions.update = parseFunctionFromText(canvasOptions.update);
      } else if (typeof canvasOptions.update === "function") {
        canvasOptions.update = canvasOptions.update.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "string") {
        canvasOptions.init = parseFunctionFromText(canvasOptions.init);
      } else if (typeof canvasOptions.init === "function") {
        canvasOptions.init = canvasOptions.init.bind(canvasOptions);
      }
      if (typeof canvasOptions.clear === "string") {
        canvasOptions.clear = parseFunctionFromText(canvasOptions.clear);
      } else if (typeof canvasOptions.clear === "function") {
        canvasOptions.clear = canvasOptions.clear.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "function")
        canvasOptions.init(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      canvasOptions.stop = () => {
        stopAnim2(canvasOptions._id);
      };
      canvasOptions.start = (draw) => {
        startAnim2(canvasOptions._id, draw);
      };
      canvasOptions.set = (settings2) => {
        setDraw2(settings2, canvasOptions._id);
      };
      if (typeof canvasOptions.draw === "function" && canvasOptions.animating) {
        let draw = (s, canvas, context) => {
          if (s.animating) {
            s.draw(s, canvas, context);
            requestAnimationFrame(() => {
              draw(s, canvas, context);
            });
          }
        };
        draw(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      }
    }
    if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
      return canvasOptions._id;
    else {
      const canvascontrols = {
        _id: options._id,
        width: options.width,
        height: options.height,
        draw: (props) => {
          drawFrame2(props, options._id);
        },
        update: (props) => {
          updateCanvas2(props, options._id);
        },
        clear: () => {
          clearCanvas2(options._id);
        },
        init: () => {
          initCanvas2(options._id);
        },
        stop: () => {
          stopAnim2(options._id);
        },
        start: () => {
          startAnim2(options._id);
        },
        set: (newDrawProps) => {
          setDraw2(newDrawProps, options._id);
        },
        terminate: () => {
          if (this.__node?.graph)
            this.__node.graph.remove(options._id);
          else {
            stopAnim2(options._id);
            if (this?.__node?.graph)
              delete this.__node.graph.CANVASES[canvasOptions._id];
            else
              delete globalThis.CANVASES[canvasOptions._id];
          }
        }
      };
      return canvascontrols;
    }
  }
  function drawFrame2(props, _id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts) {
      if (props)
        Object.assign(canvasopts, props);
      if (canvasopts.draw) {
        canvasopts.draw(canvasopts, canvasopts.canvas, canvasopts.context);
        return _id;
      }
    }
    return void 0;
  }
  function clearCanvas2(_id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts?.clear) {
      canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function initCanvas2(_id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts?.init) {
      canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function updateCanvas2(input, _id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts?.update) {
      canvasopts.update(canvasopts, canvasopts.canvas, canvasopts.context, input);
      return _id;
    }
    return void 0;
  }
  function setProps2(props, _id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts) {
      Object.assign(canvasopts, props);
      if (props.width)
        canvasopts.canvas.width = props.width;
      if (props.height)
        canvasopts.canvas.height = props.height;
      return _id;
    }
    return void 0;
  }
  function startAnim2(_id, draw) {
    let canvasopts = getCanvas2.call(this, _id);
    canvasopts.animating = true;
    if (canvasopts && draw) {
      if (typeof draw === "string")
        draw = parseFunctionFromText(draw);
      if (typeof draw === "function") {
        canvasopts.draw = draw;
      }
      return _id;
    }
    if (typeof canvasopts?.draw === "function") {
      let draw2 = (s, canvas, context) => {
        if (s.animating) {
          s.draw(s, canvas, context);
          requestAnimationFrame(() => {
            draw2(s, canvas, context);
          });
        }
      };
      if (typeof canvasopts.clear === "function")
        canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      if (typeof canvasopts.init === "function")
        canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      draw2(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function stopAnim2(_id) {
    let canvasopts = getCanvas2.call(this, _id);
    if (canvasopts) {
      canvasopts.animating = false;
      if (typeof canvasopts.clear === "function")
        requestAnimationFrame(canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context));
      return _id;
    }
    return void 0;
  }
  function getCanvas2(_id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (!_id)
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
      else
        canvasopts = this.__node.graph.CANVASES?.[_id];
    } else {
      if (!_id)
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
      else
        canvasopts = globalThis.CANVASES?.[_id];
    }
    return canvasopts;
  }
  var workerCanvasRoutes2 = {
    ...proxyElementWorkerRoutes2,
    Renderer: Renderer2,
    transferCanvas: transferCanvas2,
    setupCanvas: setupCanvas2,
    setDraw: setDraw2,
    drawFrame: drawFrame2,
    clearCanvas: clearCanvas2,
    initCanvas: initCanvas2,
    updateCanvas: updateCanvas2,
    setProps: setProps2,
    startAnim: startAnim2,
    stopAnim: stopAnim2,
    getCanvas: getCanvas2
  };
  function parseFunctionFromText(method = "") {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf("=>") + 1;
      if (startindex <= 0) {
        startindex = methodString.indexOf("){");
      }
      if (startindex <= 0) {
        startindex = methodString.indexOf(") {");
      }
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    if (newFuncHead.includes("function")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else {
        try {
          newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
        } catch {
        }
      }
    }
    return newFunc;
  }

  // src/scripts/webglplot/plotter.ts
  var WGLPlotter = class {
    constructor(options) {
      this.plotter = new y2();
      this.create = (options = this.options) => {
        const init2 = (options2, canvas, context) => {
          this.plotter.initPlot(options2);
          let onresize = (o) => {
            if (canvas.clientHeight) {
              canvas.width = canvas.clientWidth;
              canvas.height = canvas.clientHeight;
              options2.overlay.width = canvas.clientWidth;
              options2.overlay.height = canvas.clientHeight;
              this.plotter.plots[options2._id].plot.webgl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);
              this.plotter.plots[options2._id].plot.update();
            }
          };
          if (typeof window !== "undefined")
            window.addEventListener("resize", onresize);
          else
            canvas.addEventListener("resize", onresize);
          setTimeout(() => {
            onresize(canvas);
          }, 10);
        };
        const update = (options2, canvas, context, input) => {
          this.plotter.update(options2._id, input);
        };
        const clear = (options2, canvas, context) => {
          this.plotter.deinitPlot(options2._id);
        };
        options.init = init2;
        options.update = update;
        options.clear = clear;
        if (options.worker) {
          if (options.worker === true)
            options.worker = new Worker(canvas_worker_default);
          else if (typeof options.worker === "string" || options.worker instanceof Blob)
            options.worker = new Worker(options.worker);
          if (options.overlay) {
            let offscreen = options.overlay.transferControlToOffscreen();
            options.overlay = offscreen;
            options.transfer = [options.overlay];
          }
        }
        this.plot = workerCanvasRoutes2.Renderer(options);
        return this.plot;
      };
      this.__operator = (data) => {
        if (!this.plot)
          this.create(this.options);
        this.plot.update(data);
      };
      if (options) {
        this.options = options;
        this.create(options);
      }
    }
  };

  // node_modules/device-decoder/src/util/arraymanip.ts
  var _ArrayManip2 = class {
    constructor() {
      this.recursivelyAssign = (target, obj) => {
        for (const key in obj) {
          if (typeof obj[key] === "object") {
            if (typeof target[key] === "object")
              this.recursivelyAssign(target[key], obj[key]);
            else
              target[key] = this.recursivelyAssign({}, obj[key]);
          } else
            target[key] = obj[key];
        }
        return target;
      };
    }
    //autoscale array to -1 and 1
    static autoscale(array, lineIdx = 0, nLines = 1, centerZero = false, ymin, ymax, clamp) {
      if (array?.length === 0)
        return array;
      let max = ymax ? ymax : Math.max(...array);
      let min = ymin ? ymin : Math.min(...array);
      let _lines = 1 / nLines;
      let scalar = 1;
      if (centerZero) {
        let absmax = Math.max(Math.abs(min), Math.abs(max));
        if (absmax !== 0)
          scalar = _lines / absmax;
        return array.map((y4) => {
          if (clamp) {
            if (y4 < min)
              y4 = min;
            if (y4 > max)
              y4 = max;
          }
          return y4 * scalar + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      } else {
        if (max === min) {
          if (max !== 0) {
            scalar = _lines / max;
          } else if (min !== 0) {
            scalar = _lines / Math.abs(min);
          }
        } else
          scalar = _lines / (max - min);
        return array.map((y4) => {
          if (clamp) {
            if (y4 < min)
              y4 = min;
            if (y4 > max)
              y4 = max;
          }
          return 2 * ((y4 - min) * scalar - 1 / (2 * nLines)) + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      }
    }
    static genTimestamps(ct, sps6) {
      let now = Date.now();
      let toInterp = [now - ct * 1e3 / sps6, now];
      return _ArrayManip2.upsample(toInterp, ct);
    }
    //absolute value maximum of array (for a +/- valued array)
    static absmax(array) {
      return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
    }
    //averages values when downsampling.
    static downsample(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        let output = new Array(fitCount);
        let incr = array.length / fitCount;
        let lastIdx = array.length - 1;
        let last = 0;
        let counter = 0;
        for (let i4 = incr; i4 < array.length; i4 += incr) {
          let rounded = Math.round(i4);
          if (rounded > lastIdx)
            rounded = lastIdx;
          for (let j = last; j < rounded; j++) {
            output[counter] += array[j];
          }
          output[counter] /= (rounded - last) * scalar;
          counter++;
          last = rounded;
        }
        return output;
      } else
        return array;
    }
    //Linear upscaling interpolation from https://stackoverflow.com/questions/26941168/javascript-interpolate-an-array-of-numbers. Input array and number of samples to fit the data to
    static upsample(array, fitCount, scalar = 1) {
      var linearInterpolate = function(before2, after2, atPoint2) {
        return (before2 + (after2 - before2) * atPoint2) * scalar;
      };
      var newData = new Array(fitCount);
      var springFactor = (array.length - 1) / (fitCount - 1);
      newData[0] = array[0];
      for (var i4 = 1; i4 < fitCount - 1; i4++) {
        var tmp = i4 * springFactor;
        var before = Math.floor(tmp);
        var after = Math.ceil(tmp);
        var atPoint = tmp - before;
        newData[i4] = linearInterpolate(array[before], array[after], atPoint);
      }
      newData[fitCount - 1] = array[array.length - 1];
      return newData;
    }
    static interpolate(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        return _ArrayManip2.downsample(array, fitCount, scalar);
      } else if (array.length < fitCount) {
        return _ArrayManip2.upsample(array, fitCount, scalar);
      }
      return array;
    }
    static HSLToRGB(h, s, l, scalar = 255) {
      s /= 100;
      l /= 100;
      let c = (1 - Math.abs(2 * l - 1)) * s, x3 = c * (1 - Math.abs(h / 60 % 2 - 1)), m = l - c / 2, r = 0, g2 = 0, b = 0;
      if (0 <= h && h < 60) {
        r = c;
        g2 = x3;
        b = 0;
      } else if (60 <= h && h < 120) {
        r = x3;
        g2 = c;
        b = 0;
      } else if (120 <= h && h < 180) {
        r = 0;
        g2 = c;
        b = x3;
      } else if (180 <= h && h < 240) {
        r = 0;
        g2 = x3;
        b = c;
      } else if (240 <= h && h < 300) {
        r = x3;
        g2 = 0;
        b = c;
      } else if (300 <= h && h < 360) {
        r = c;
        g2 = 0;
        b = x3;
      }
      r = (r + m) * scalar;
      g2 = (g2 + m) * scalar;
      b = (b + m) * scalar;
      return [r, g2, b];
    }
    //push new entries to end of array and roll over starting entries with a set array length
    static circularBuffer(arr, newEntries) {
      if (newEntries.length < arr.length) {
        let slice = arr.slice(newEntries.length);
        let len = arr.length;
        arr.splice(
          0,
          len,
          ...slice,
          ...newEntries
        );
      } else if (newEntries.length > arr.length) {
        let len = arr.length;
        arr.splice(
          0,
          len,
          newEntries.slice(len - newEntries.length)
        );
      } else {
        arr.splice(0, arr.length, ...newEntries);
      }
      return arr;
    }
    //e.g. mimic arduino serial plotter data, make sure we return an object of key:array pairs for each channel represented
    static reformatData(data, key) {
      if (Array.isArray(data)) {
        if (Array.isArray(data[0])) {
          let d2 = {};
          data.forEach((arr, i4) => {
            d2[i4] = arr;
          });
          data = d2;
          if (isNaN(data[0][0]))
            return void 0;
        } else if (key) {
          data = { [key]: data };
          if (isNaN(data[key][0]))
            return void 0;
        } else {
          data = { 0: data };
          if (isNaN(data[0][0]))
            return void 0;
        }
      } else if (typeof data === "object") {
        for (const key2 in data) {
          if (typeof data[key2] === "number")
            data[key2] = [data[key2]];
          else if (data[key2]?.values) {
            if (typeof data[key2].values === "number")
              data[key2].values = [data[key2].values];
          }
          if (isNaN(data[key2][0]))
            return void 0;
        }
      } else if (typeof data === "string") {
        let split;
        if (data.includes("\r\n")) {
          let lines = data.split("\r\n");
          data = {};
          lines.forEach((l, j) => {
            if (l.includes("	")) {
              split = l.split("	");
            } else if (l.includes(",")) {
              split = l.split(",");
            } else if (l.includes("|")) {
              split = l.split("|");
            }
            if (Array.isArray(split)) {
              split.forEach((val, i4) => {
                if (val.includes(":")) {
                  let [key2, v2] = val.split(":");
                  let fl = parseFloat(v2);
                  if (fl)
                    data[key2] = [fl];
                  else
                    return void 0;
                } else {
                  let fl = parseFloat(val);
                  if (fl)
                    data[i4] = [fl];
                  else
                    return void 0;
                }
              });
            }
          });
        } else if (data.includes("	")) {
          split = data.split("	");
        } else if (data.includes(",")) {
          split = data.split(",");
        } else if (data.includes("|")) {
          split = data.split("|");
        }
        data = {};
        if (Array.isArray(split)) {
          split.forEach((val, i4) => {
            if (val.includes(":")) {
              let [key2, v2] = val.split(":");
              let fl = parseFloat(v2);
              if (fl)
                data[key2] = [fl];
              else
                return void 0;
            } else {
              let fl = parseFloat(val);
              if (fl)
                data[i4] = [fl];
              else
                return void 0;
            }
          });
        }
      } else if (typeof data === "number") {
        if (key)
          data = { [key]: [data] };
        else
          data = { 0: [data] };
      }
      return data;
    }
    //pad an array based on a time interval between sample sets, averaging slope
    static padTime(data, lastValue, time, targetFit) {
      let slopeIncr = (data[0] - lastValue) / time / targetFit;
      let padded = [...new Array(targetFit - data.length).map((_, i4) => lastValue + slopeIncr * (i4 + 1)), ...data];
      return padded;
    }
    static interpolateForTime(data, time, targetSPS) {
      return _ArrayManip2.interpolate(data, Math.ceil(targetSPS * time));
    }
    isTypedArray(x3) {
      return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
    }
    //splice out a section of a typed array. If end is undefined we'll splice all values from the starting position to the end
    //if you want to replace values, just use .set, this is for quickly removing values to trim arrays e.g. if an entity is popped
    spliceTypedArray(arr, start, end) {
      let s = arr.subarray(0, start);
      let e;
      if (end) {
        e = arr.subarray(end + 1);
      }
      let n;
      if (s.length > 0 || e?.length > 0)
        n = new arr.constructor(s.length + e.length);
      if (s.length > 0)
        n.set(s);
      if (e && e.length > 0)
        n.set(e, s.length);
      return n;
    }
  };
  var ArrayManip2 = _ArrayManip2;
  //buffer numbers stored on common objects, including iterable objects or arrays. 
  //  It's much faster to buffer and use transfer than sending the objects raw over threads as things are jsonified inbetween otherwise, 
  //    and even faster to store everything in typed arrays altogether and use common objects to index array locations
  ArrayManip2.bufferValues = (objects, property, keys4, buffer2) => {
    if (!Array.isArray(keys4) && typeof keys4 === "object")
      keys4 = Object.keys(keys4);
    if (!buffer2) {
      let object_keys = Object.keys(objects);
      if (keys4)
        buffer2 = new Float32Array(object_keys.length * keys4.length);
      else {
        if (typeof objects[object_keys[0]][property] === "object") {
          keys4 = Object.keys(objects[object_keys[0]][property]);
          buffer2 = new Float32Array(object_keys.length * keys4.length);
        } else
          buffer2 = new Float32Array(object_keys.length);
      }
    }
    let i4 = 0;
    for (const key in objects) {
      if (objects[key][property]) {
        if (keys4) {
          for (let j = 0; j < keys4.length; j++) {
            buffer2[i4] = objects[key][property][keys4[j]];
            i4++;
          }
        } else {
          buffer2[i4] = objects[key][property];
          i4++;
        }
      }
    }
    return buffer2;
  };

  // node_modules/device-decoder/src/util/ByteParser.ts
  var rechk2 = /^([<>])?(([1-9]\d*)?([xcbB?hHiIfdsp]))*$/;
  var refmt2 = /([1-9]\d*)?([xcbB?hHiIfdsp])/g;
  var str3 = (v2, o, c) => String.fromCharCode(
    ...new Uint8Array(v2.buffer, v2.byteOffset + o, c)
  );
  var rts2 = (v2, o, c, s) => new Uint8Array(v2.buffer, v2.byteOffset + o, c).set(s.split("").map((str6) => str6.charCodeAt(0)));
  var pst2 = (v2, o, c) => str3(v2, o + 1, Math.min(v2.getUint8(o), c - 1));
  var tsp2 = (v2, o, c, s) => {
    v2.setUint8(o, s.length);
    rts2(v2, o + 1, c - 1, s);
  };
  var lut2 = (le) => ({
    x: (c) => [1, c, 0],
    c: (c) => [c, 1, (o) => ({ u: (v2) => str3(v2, o, 1), p: (v2, c2) => rts2(v2, o, 1, c2) })],
    "?": (c) => [c, 1, (o) => ({ u: (v2) => Boolean(v2.getUint8(o)), p: (v2, B3) => v2.setUint8(o, B3) })],
    b: (c) => [c, 1, (o) => ({ u: (v2) => v2.getInt8(o), p: (v2, b) => v2.setInt8(o, b) })],
    B: (c) => [c, 1, (o) => ({ u: (v2) => v2.getUint8(o), p: (v2, B3) => v2.setUint8(o, B3) })],
    h: (c) => [c, 2, (o) => ({ u: (v2) => v2.getInt16(o, le), p: (v2, h) => v2.setInt16(o, h, le) })],
    H: (c) => [c, 2, (o) => ({ u: (v2) => v2.getUint16(o, le), p: (v2, H3) => v2.setUint16(o, H3, le) })],
    i: (c) => [c, 4, (o) => ({ u: (v2) => v2.getInt32(o, le), p: (v2, i4) => v2.setInt32(o, i4, le) })],
    I: (c) => [c, 4, (o) => ({ u: (v2) => v2.getUint32(o, le), p: (v2, I) => v2.setUint32(o, I, le) })],
    f: (c) => [c, 4, (o) => ({ u: (v2) => v2.getFloat32(o, le), p: (v2, f) => v2.setFloat32(o, f, le) })],
    d: (c) => [c, 8, (o) => ({ u: (v2) => v2.getFloat64(o, le), p: (v2, d2) => v2.setFloat64(o, d2, le) })],
    s: (c) => [1, c, (o) => ({ u: (v2) => str3(v2, o, c), p: (v2, s) => rts2(v2, o, c, s.slice(0, c)) })],
    p: (c) => [1, c, (o) => ({ u: (v2) => pst2(v2, o, c), p: (v2, s) => tsp2(v2, o, c, s.slice(0, c - 1)) })]
  });
  var errbuf2 = new RangeError("Structure larger than remaining buffer");
  var errval2 = new RangeError("Not enough values for structure");
  var _ByteParser2 = class extends ArrayManip2 {
    // convert values to data views if not, with some basic encoding formats
    static toDataView(value) {
      if (!(value instanceof DataView)) {
        if (typeof value === "string" && parseInt(value))
          value = parseInt(value);
        if (typeof value === "string") {
          let enc = new TextEncoder();
          let hascodes = {};
          for (const code2 in _ByteParser2.codes) {
            while (value.indexOf(code2) > -1) {
              let idx = value.indexOf(code2);
              value = value.replace(code2, "");
              hascodes[idx] = code2;
            }
          }
          let encoded = Array.from(enc.encode(value));
          for (const key in hascodes) {
            encoded.splice(parseInt(key), 0, _ByteParser2.codes[hascodes[key]]);
          }
          value = new DataView(new Uint8Array(encoded).buffer);
        } else if (typeof value === "number") {
          let tmp = value;
          if (value < 256) {
            value = new DataView(new ArrayBuffer(1));
            value.setUint8(0, tmp);
          } else if (value < 65536) {
            value = new DataView(new ArrayBuffer(2));
            value.setInt16(0, tmp);
          } else {
            value = new DataView(new ArrayBuffer(4));
            value.setUint32(0, tmp);
          }
        } else if (value instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && value instanceof SharedArrayBuffer) {
          value = new DataView(value);
        } else if (Array.isArray(value)) {
          value = new DataView(Uint8Array.from(value).buffer);
        } else if (typeof value === "object") {
          value = new TextEncoder().encode(JSON.stringify(value));
        }
      }
      return value;
    }
    //search a buffer for matching indices. Can limit the number of indices to find if the buffer is giant but this allows asynchronous number crunching between buffers and outputs to build buffers and then parse through them from the stream
    static searchBuffer(buffer2, searchString, limit) {
      var needle = searchString;
      var haystack = buffer2;
      var search = _ByteParser2.boyerMoore(needle);
      var skip = search.byteLength;
      var indices = [];
      for (var i4 = search(haystack); i4 !== -1; i4 = search(haystack, i4 + skip)) {
        indices.push(i4);
        if (limit) {
          if (indices.length >= limit)
            break;
        }
      }
      return indices;
    }
    //signed int conversions
    static bytesToInt16(x0, x1) {
      let int16 = (255 & x0) << 8 | 255 & x1;
      if ((int16 & 32768) > 0) {
        int16 |= 4294901760;
      } else {
        int16 &= 65535;
      }
      return int16;
    }
    //turn 2 byte sequence (little endian input order) into a uint16 value
    static bytesToUInt16(x0, x1) {
      return x0 * 256 + x1;
    }
    static Uint16ToBytes(y4) {
      return [y4 & 255, y4 >> 8 & 255];
    }
    //signed int conversions
    static bytesToInt24(x0, x1, x22) {
      let int24 = (255 & x0) << 16 | (255 & x1) << 8 | 255 & x22;
      if ((int24 & 8388608) > 0) {
        int24 |= 4278190080;
      } else {
        int24 &= 16777215;
      }
      return int24;
    }
    static bytesToUInt24(x0, x1, x22) {
      return x0 * 65536 + x1 * 256 + x22;
    }
    static Uint24ToBytes(y4) {
      return [y4 & 255, y4 >> 8 & 255, y4 >> 16 & 255];
    }
    //signed int conversion
    static bytesToInt32(x0, x1, x22, x3) {
      let int32 = (255 & x0) << 24 | (255 & x1) << 16 | (255 & x22) << 8 | 255 & x3;
      if ((int32 & 2147483648) > 0) {
        int32 |= 0;
      } else {
        int32 &= 4294967295;
      }
      return int32;
    }
    static bytesToUInt32(x0, x1, x22, x3) {
      return x0 * 16777216 + x1 * 65536 + x22 * 256 + x3;
    }
    static Uint32ToBytes(y4) {
      return [y4 & 255, y4 >> 8 & 255, y4 >> 16 & 255, y4 >> 24 & 255];
    }
    //converts a signed int into its two's compliment value for up to 32 bit numbers
    static get2sCompliment(val, nbits3) {
      if (val > 4294967296)
        return null;
      return val << 32 - nbits3 >> 32 - nbits3;
    }
    //get any-sized signed int from an arbitrary byte array (little endian)
    static getSignedInt(...args) {
      let pos = 0;
      function getInt(size) {
        var value = 0;
        var first = true;
        while (size--) {
          if (first) {
            let byte = args[pos++];
            value += byte & 127;
            if (byte & 128) {
              value -= 128;
            }
            first = false;
          } else {
            value *= 256;
            value += args[pos++];
          }
        }
        return value;
      }
      return getInt(args.length);
    }
    //Boyer Moore fast byte search method copied from https://codereview.stackexchange.com/questions/20136/uint8array-indexof-method-that-allows-to-search-for-byte-sequences
    static asUint8Array(input) {
      if (input instanceof Uint8Array) {
        return input;
      } else if (typeof input === "string") {
        var arr = new Uint8Array(input.length);
        for (var i4 = 0; i4 < input.length; i4++) {
          var c = input.charCodeAt(i4);
          if (c > 127) {
            throw new TypeError("Only ASCII patterns are supported");
          }
          arr[i4] = c;
        }
        return arr;
      } else {
        return new Uint8Array(input);
      }
    }
    static boyerMoore(patternBuffer) {
      var pattern = _ByteParser2.asUint8Array(patternBuffer);
      var M2 = pattern.length;
      if (M2 === 0) {
        throw new TypeError("patternBuffer must be at least 1 byte long");
      }
      var R2 = 256;
      var rightmost_positions = new Int32Array(R2);
      for (var c = 0; c < R2; c++) {
        rightmost_positions[c] = -1;
      }
      for (var j = 0; j < M2; j++) {
        rightmost_positions[pattern[j]] = j;
      }
      var boyerMooreSearch = (txtBuffer, start, end) => {
        var txt = _ByteParser2.asUint8Array(txtBuffer);
        if (start === void 0)
          start = 0;
        if (end === void 0)
          end = txt.length;
        var pat = pattern;
        var right = rightmost_positions;
        var lastIndex = end - pat.length;
        var lastPatIndex = pat.length - 1;
        var skip;
        for (var i4 = start; i4 <= lastIndex; i4 += skip) {
          skip = 0;
          for (var j2 = lastPatIndex; j2 >= 0; j2--) {
            var c2 = txt[i4 + j2];
            if (pat[j2] !== c2) {
              skip = Math.max(1, j2 - right[c2]);
              break;
            }
          }
          if (skip === 0) {
            return i4;
          }
        }
        return -1;
      };
      boyerMooreSearch.byteLength = pattern.byteLength;
      return boyerMooreSearch;
    }
    //---------------------end copy/pasted solution------------------------
    //eg struct(format).unpack(Uint8Array[]) //to parse a struct with a specified format into an unpacked array
    static struct(format) {
      let fns = [], size = 0, m = rechk2.exec(format);
      if (!m) {
        throw new RangeError("Invalid format string");
      }
      const t3 = lut2("<" === m[1]), lu = (n, c) => t3[c](n ? parseInt(n, 10) : 1);
      while (m = refmt2.exec(format)) {
        ((r, s, f) => {
          for (let i4 = 0; i4 < r; ++i4, size += s) {
            if (f) {
              fns.push(f(size));
            }
          }
        })(
          ...lu(...m.slice(1))
        );
      }
      const unpack_from = (arrb, offs) => {
        if (arrb.byteLength < (offs | 0) + size) {
          throw errbuf2;
        }
        let v2 = new DataView(arrb, offs | 0);
        return fns.map((f) => f.u(v2));
      };
      const pack_into = (arrb, offs, ...values) => {
        if (values.length < fns.length) {
          throw errval2;
        }
        if (arrb.byteLength < offs + size) {
          throw errbuf2;
        }
        const v2 = new DataView(arrb, offs);
        new Uint8Array(arrb, offs, size).fill(0);
        fns.forEach((f, i4) => f.p(v2, values[i4]));
      };
      const pack = (...values) => {
        let b = new ArrayBuffer(size);
        pack_into(b, 0, ...values);
        return b;
      };
      const unpack = (arrb) => unpack_from(arrb, 0);
      function* iter_unpack(arrb) {
        for (let offs = 0; offs + size <= arrb.byteLength; offs += size) {
          yield unpack_from(arrb, offs);
        }
      }
      return Object.freeze({
        unpack,
        pack,
        unpack_from,
        pack_into,
        iter_unpack,
        format,
        size
      });
    }
  };
  var ByteParser2 = _ByteParser2;
  ByteParser2.codes = {
    //common codes
    "\\n": 10,
    //newline
    "\\r": 13,
    //carriage return
    "\\t": 9,
    //tab
    "\\s": 32,
    //space
    "\\b": 8,
    //backspace
    "\\f": 12,
    //form feed
    "\\": 92
    // backslash
  };

  // node_modules/device-decoder/src/devices/max30102.ts
  var max3010xChartSettings = {
    lines: {
      "red": { nSec: 10, sps: 96 },
      "ir": { nSec: 10, sps: 96 },
      "max_dietemp": { nSec: 10, sps: 3.33, units: "C" }
      //1 read per
    }
  };

  // node_modules/device-decoder/src/devices/mpu6050.ts
  var sps = 100;
  var mpu6050ChartSettings = {
    lines: {
      "ax": { nSec: 10, sps },
      "ay": { nSec: 10, sps },
      "az": { nSec: 10, sps },
      "gx": { nSec: 10, sps },
      "gy": { nSec: 10, sps },
      "gz": { nSec: 10, sps },
      "mpu_dietemp": { nSec: 10, sps: 5, units: "C" }
    }
  };

  // node_modules/device-decoder/src/devices/bme280.ts
  var bme280ChartSettings = {
    lines: {
      "temp": { nSec: 120, sps: 3.33, units: "C" },
      "pressure": { nSec: 120, sps: 3.33, units: "hPa" },
      "humidity": { nSec: 120, sps: 3.33, units: "%" },
      "altitude": { nSec: 120, sps: 3.33, units: "m" }
    }
  };

  // node_modules/device-decoder/src/devices/ads131m08.ts
  var decoder = new TextDecoder();
  var sps2 = 250;
  var defaultChartSetting = { nSec: 10, sps: sps2, units: "mV" };
  var ads131m08ChartSettings = {
    lines: {
      "0": JSON.parse(JSON.stringify(defaultChartSetting)),
      "1": JSON.parse(JSON.stringify(defaultChartSetting)),
      "2": JSON.parse(JSON.stringify(defaultChartSetting)),
      "3": JSON.parse(JSON.stringify(defaultChartSetting)),
      "4": JSON.parse(JSON.stringify(defaultChartSetting)),
      "5": JSON.parse(JSON.stringify(defaultChartSetting)),
      "6": JSON.parse(JSON.stringify(defaultChartSetting)),
      "7": JSON.parse(JSON.stringify(defaultChartSetting))
    }
  };
  var gain = 32;
  var nbits = 24;
  var vref = 1.2;
  var defaultsetting = {
    sps: sps2,
    useDCBlock: false,
    useBandpass: false,
    bandpassLower: 3,
    bandpassUpper: 45,
    useScaling: true,
    scalar: 0.96 * 1e3 * vref / (gain * (Math.pow(2, nbits) - 1))
    //trimOutliers:true,
    //outlierTolerance:0.3
  };
  var ads131m08FilterSettings = {
    "0": JSON.parse(JSON.stringify(defaultsetting)),
    "1": JSON.parse(JSON.stringify(defaultsetting)),
    "2": JSON.parse(JSON.stringify(defaultsetting)),
    "3": JSON.parse(JSON.stringify(defaultsetting)),
    "4": JSON.parse(JSON.stringify(defaultsetting)),
    "5": JSON.parse(JSON.stringify(defaultsetting)),
    "6": JSON.parse(JSON.stringify(defaultsetting)),
    "7": JSON.parse(JSON.stringify(defaultsetting))
  };

  // src/components/DeviceConnect.tsx
  var import_react2 = __toESM(require_react(), 1);

  // node_modules/device-decoder/dist/device.frontend.esm.js
  var __create4 = Object.create;
  var __defProp4 = Object.defineProperty;
  var __getOwnPropDesc4 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames4 = Object.getOwnPropertyNames;
  var __getProtoOf4 = Object.getPrototypeOf;
  var __hasOwnProp4 = Object.prototype.hasOwnProperty;
  var __require3 = ((x3) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x3, { get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b] }) : x3)(function(x3) {
    if (typeof __require !== "undefined")
      return __require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __esm2 = (fn, res2) => function __init() {
    return fn && (res2 = (0, fn[__getOwnPropNames4(fn)[0]])(fn = 0)), res2;
  };
  var __commonJS4 = (cb, mod) => function __require32() {
    return mod || (0, cb[__getOwnPropNames4(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export3 = (target, all) => {
    for (var name2 in all)
      __defProp4(target, name2, { get: all[name2], enumerable: true });
  };
  var __copyProps4 = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames4(from))
        if (!__hasOwnProp4.call(to, key) && key !== except)
          __defProp4(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc4(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM4 = (mod, isNodeMode, target) => (target = mod != null ? __create4(__getProtoOf4(mod)) : {}, __copyProps4(isNodeMode || !mod || !mod.__esModule ? __defProp4(target, "default", { value: mod, enumerable: true }) : target, mod));
  var createCapacitorPlatforms;
  var initPlatforms;
  var CapacitorPlatforms;
  var addPlatform;
  var setPlatform;
  var ExceptionCode;
  var CapacitorException;
  var getPlatformId;
  var createCapacitor;
  var initCapacitorGlobal;
  var Capacitor;
  var registerPlugin;
  var Plugins;
  var WebPlugin;
  var init_dist = __esm2({ "src/ble/node_modules/@capacitor/core/dist/index.js"() {
    createCapacitorPlatforms = (win) => {
      const defaultPlatformMap = /* @__PURE__ */ new Map();
      defaultPlatformMap.set("web", { name: "web" });
      const capPlatforms = win.CapacitorPlatforms || { currentPlatform: { name: "web" }, platforms: defaultPlatformMap };
      const addPlatform2 = (name2, platform) => {
        capPlatforms.platforms.set(name2, platform);
      };
      const setPlatform2 = (name2) => {
        if (capPlatforms.platforms.has(name2)) {
          capPlatforms.currentPlatform = capPlatforms.platforms.get(name2);
        }
      };
      capPlatforms.addPlatform = addPlatform2;
      capPlatforms.setPlatform = setPlatform2;
      return capPlatforms;
    };
    initPlatforms = (win) => win.CapacitorPlatforms = createCapacitorPlatforms(win);
    CapacitorPlatforms = initPlatforms(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    addPlatform = CapacitorPlatforms.addPlatform;
    setPlatform = CapacitorPlatforms.setPlatform;
    (function(ExceptionCode2) {
      ExceptionCode2["Unimplemented"] = "UNIMPLEMENTED";
      ExceptionCode2["Unavailable"] = "UNAVAILABLE";
    })(ExceptionCode || (ExceptionCode = {}));
    CapacitorException = class extends Error {
      constructor(message, code2, data) {
        super(message);
        this.message = message;
        this.code = code2;
        this.data = data;
      }
    };
    getPlatformId = (win) => {
      var _a, _b;
      if (win === null || win === void 0 ? void 0 : win.androidBridge) {
        return "android";
      } else if ((_b = (_a = win === null || win === void 0 ? void 0 : win.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b.bridge) {
        return "ios";
      } else {
        return "web";
      }
    };
    createCapacitor = (win) => {
      var _a, _b, _c, _d, _e;
      const capCustomPlatform = win.CapacitorCustomPlatform || null;
      const cap = win.Capacitor || {};
      const Plugins2 = cap.Plugins = cap.Plugins || {};
      const capPlatforms = win.CapacitorPlatforms;
      const defaultGetPlatform = () => {
        return capCustomPlatform !== null ? capCustomPlatform.name : getPlatformId(win);
      };
      const getPlatform = ((_a = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _a === void 0 ? void 0 : _a.getPlatform) || defaultGetPlatform;
      const defaultIsNativePlatform = () => getPlatform() !== "web";
      const isNativePlatform = ((_b = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _b === void 0 ? void 0 : _b.isNativePlatform) || defaultIsNativePlatform;
      const defaultIsPluginAvailable = (pluginName) => {
        const plugin = registeredPlugins.get(pluginName);
        if (plugin === null || plugin === void 0 ? void 0 : plugin.platforms.has(getPlatform())) {
          return true;
        }
        if (getPluginHeader(pluginName)) {
          return true;
        }
        return false;
      };
      const isPluginAvailable = ((_c = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _c === void 0 ? void 0 : _c.isPluginAvailable) || defaultIsPluginAvailable;
      const defaultGetPluginHeader = (pluginName) => {
        var _a2;
        return (_a2 = cap.PluginHeaders) === null || _a2 === void 0 ? void 0 : _a2.find((h) => h.name === pluginName);
      };
      const getPluginHeader = ((_d = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _d === void 0 ? void 0 : _d.getPluginHeader) || defaultGetPluginHeader;
      const handleError = (err) => win.console.error(err);
      const pluginMethodNoop = (_target, prop, pluginName) => {
        return Promise.reject(`${pluginName} does not have an implementation of "${prop}".`);
      };
      const registeredPlugins = /* @__PURE__ */ new Map();
      const defaultRegisterPlugin = (pluginName, jsImplementations = {}) => {
        const registeredPlugin = registeredPlugins.get(pluginName);
        if (registeredPlugin) {
          console.warn(`Capacitor plugin "${pluginName}" already registered. Cannot register plugins twice.`);
          return registeredPlugin.proxy;
        }
        const platform = getPlatform();
        const pluginHeader = getPluginHeader(pluginName);
        let jsImplementation;
        const loadPluginImplementation = async () => {
          if (!jsImplementation && platform in jsImplementations) {
            jsImplementation = typeof jsImplementations[platform] === "function" ? jsImplementation = await jsImplementations[platform]() : jsImplementation = jsImplementations[platform];
          } else if (capCustomPlatform !== null && !jsImplementation && "web" in jsImplementations) {
            jsImplementation = typeof jsImplementations["web"] === "function" ? jsImplementation = await jsImplementations["web"]() : jsImplementation = jsImplementations["web"];
          }
          return jsImplementation;
        };
        const createPluginMethod = (impl, prop) => {
          var _a2, _b2;
          if (pluginHeader) {
            const methodHeader = pluginHeader === null || pluginHeader === void 0 ? void 0 : pluginHeader.methods.find((m) => prop === m.name);
            if (methodHeader) {
              if (methodHeader.rtype === "promise") {
                return (options) => cap.nativePromise(pluginName, prop.toString(), options);
              } else {
                return (options, callback) => cap.nativeCallback(pluginName, prop.toString(), options, callback);
              }
            } else if (impl) {
              return (_a2 = impl[prop]) === null || _a2 === void 0 ? void 0 : _a2.bind(impl);
            }
          } else if (impl) {
            return (_b2 = impl[prop]) === null || _b2 === void 0 ? void 0 : _b2.bind(impl);
          } else {
            throw new CapacitorException(`"${pluginName}" plugin is not implemented on ${platform}`, ExceptionCode.Unimplemented);
          }
        };
        const createPluginMethodWrapper = (prop) => {
          let remove;
          const wrapper = (...args) => {
            const p2 = loadPluginImplementation().then((impl) => {
              const fn = createPluginMethod(impl, prop);
              if (fn) {
                const p22 = fn(...args);
                remove = p22 === null || p22 === void 0 ? void 0 : p22.remove;
                return p22;
              } else {
                throw new CapacitorException(`"${pluginName}.${prop}()" is not implemented on ${platform}`, ExceptionCode.Unimplemented);
              }
            });
            if (prop === "addListener") {
              p2.remove = async () => remove();
            }
            return p2;
          };
          wrapper.toString = () => `${prop.toString()}() { [capacitor code] }`;
          Object.defineProperty(wrapper, "name", { value: prop, writable: false, configurable: false });
          return wrapper;
        };
        const addListener = createPluginMethodWrapper("addListener");
        const removeListener = createPluginMethodWrapper("removeListener");
        const addListenerNative = (eventName, callback) => {
          const call = addListener({ eventName }, callback);
          const remove = async () => {
            const callbackId = await call;
            removeListener({ eventName, callbackId }, callback);
          };
          const p2 = new Promise((resolve) => call.then(() => resolve({ remove })));
          p2.remove = async () => {
            console.warn(`Using addListener() without 'await' is deprecated.`);
            await remove();
          };
          return p2;
        };
        const proxy = new Proxy({}, { get(_, prop) {
          switch (prop) {
            case "$$typeof":
              return void 0;
            case "toJSON":
              return () => ({});
            case "addListener":
              return pluginHeader ? addListenerNative : addListener;
            case "removeListener":
              return removeListener;
            default:
              return createPluginMethodWrapper(prop);
          }
        } });
        Plugins2[pluginName] = proxy;
        registeredPlugins.set(pluginName, { name: pluginName, proxy, platforms: /* @__PURE__ */ new Set([...Object.keys(jsImplementations), ...pluginHeader ? [platform] : []]) });
        return proxy;
      };
      const registerPlugin2 = ((_e = capPlatforms === null || capPlatforms === void 0 ? void 0 : capPlatforms.currentPlatform) === null || _e === void 0 ? void 0 : _e.registerPlugin) || defaultRegisterPlugin;
      if (!cap.convertFileSrc) {
        cap.convertFileSrc = (filePath) => filePath;
      }
      cap.getPlatform = getPlatform;
      cap.handleError = handleError;
      cap.isNativePlatform = isNativePlatform;
      cap.isPluginAvailable = isPluginAvailable;
      cap.pluginMethodNoop = pluginMethodNoop;
      cap.registerPlugin = registerPlugin2;
      cap.Exception = CapacitorException;
      cap.DEBUG = !!cap.DEBUG;
      cap.isLoggingEnabled = !!cap.isLoggingEnabled;
      cap.platform = cap.getPlatform();
      cap.isNative = cap.isNativePlatform();
      return cap;
    };
    initCapacitorGlobal = (win) => win.Capacitor = createCapacitor(win);
    Capacitor = initCapacitorGlobal(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    registerPlugin = Capacitor.registerPlugin;
    Plugins = Capacitor.Plugins;
    WebPlugin = class {
      constructor(config) {
        this.listeners = {};
        this.windowListeners = {};
        if (config) {
          console.warn(`Capacitor WebPlugin "${config.name}" config object was deprecated in v3 and will be removed in v4.`);
          this.config = config;
        }
      }
      addListener(eventName, listenerFunc) {
        const listeners = this.listeners[eventName];
        if (!listeners) {
          this.listeners[eventName] = [];
        }
        this.listeners[eventName].push(listenerFunc);
        const windowListener = this.windowListeners[eventName];
        if (windowListener && !windowListener.registered) {
          this.addWindowListener(windowListener);
        }
        const remove = async () => this.removeListener(eventName, listenerFunc);
        const p2 = Promise.resolve({ remove });
        Object.defineProperty(p2, "remove", { value: async () => {
          console.warn(`Using addListener() without 'await' is deprecated.`);
          await remove();
        } });
        return p2;
      }
      async removeAllListeners() {
        this.listeners = {};
        for (const listener in this.windowListeners) {
          this.removeWindowListener(this.windowListeners[listener]);
        }
        this.windowListeners = {};
      }
      notifyListeners(eventName, data) {
        const listeners = this.listeners[eventName];
        if (listeners) {
          listeners.forEach((listener) => listener(data));
        }
      }
      hasListeners(eventName) {
        return !!this.listeners[eventName].length;
      }
      registerWindowListener(windowEventName, pluginEventName) {
        this.windowListeners[pluginEventName] = { registered: false, windowEventName, pluginEventName, handler: (event) => {
          this.notifyListeners(pluginEventName, event);
        } };
      }
      unimplemented(msg = "not implemented") {
        return new Capacitor.Exception(msg, ExceptionCode.Unimplemented);
      }
      unavailable(msg = "not available") {
        return new Capacitor.Exception(msg, ExceptionCode.Unavailable);
      }
      async removeListener(eventName, listenerFunc) {
        const listeners = this.listeners[eventName];
        if (!listeners) {
          return;
        }
        const index = listeners.indexOf(listenerFunc);
        this.listeners[eventName].splice(index, 1);
        if (!this.listeners[eventName].length) {
          this.removeWindowListener(this.windowListeners[eventName]);
        }
      }
      addWindowListener(handle) {
        window.addEventListener(handle.windowEventName, handle.handler);
        handle.registered = true;
      }
      removeWindowListener(handle) {
        if (!handle) {
          return;
        }
        window.removeEventListener(handle.windowEventName, handle.handler);
        handle.registered = false;
      }
    };
  } });
  function numbersToDataView(value) {
    return new DataView(Uint8Array.from(value).buffer);
  }
  function dataViewToNumbers(value) {
    return Array.from(new Uint8Array(value.buffer));
  }
  function numberToUUID(value) {
    return `0000${value.toString(16).padStart(4, "0")}-0000-1000-8000-00805f9b34fb`;
  }
  function hexStringToDataView(value) {
    const numbers = value.trim().split(" ").filter((e) => e !== "").map((s) => parseInt(s, 16));
    return numbersToDataView(numbers);
  }
  function dataViewToHexString(value) {
    return dataViewToNumbers(value).map((n) => {
      let s = n.toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      return s;
    }).join(" ");
  }
  function webUUIDToString(uuid) {
    if (typeof uuid === "string") {
      return uuid;
    } else if (typeof uuid === "number") {
      return numberToUUID(uuid);
    } else {
      throw new Error("Invalid UUID");
    }
  }
  function mapToObject(map) {
    const obj = {};
    if (!map) {
      return void 0;
    }
    map.forEach((value, key) => {
      obj[key.toString()] = value;
    });
    return obj;
  }
  var init_conversion = __esm2({ "src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/conversion.js"() {
  } });
  async function runWithTimeout(promise, time, exception) {
    let timer;
    return Promise.race([promise, new Promise((_, reject) => {
      timer = setTimeout(() => reject(exception), time);
    })]).finally(() => clearTimeout(timer));
  }
  var init_timeout = __esm2({ "src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js"() {
  } });
  var web_exports = {};
  __export3(web_exports, { BluetoothLeWeb: () => BluetoothLeWeb });
  var BluetoothLeWeb;
  var init_web = __esm2({ "src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js"() {
    init_dist();
    init_conversion();
    init_timeout();
    BluetoothLeWeb = class extends WebPlugin {
      constructor() {
        super(...arguments);
        this.deviceMap = /* @__PURE__ */ new Map();
        this.discoveredDevices = /* @__PURE__ */ new Map();
        this.scan = null;
        this.DEFAULT_CONNECTION_TIMEOUT = 1e4;
        this.onAdvertisementReceivedCallback = this.onAdvertisementReceived.bind(this);
        this.onDisconnectedCallback = this.onDisconnected.bind(this);
        this.onCharacteristicValueChangedCallback = this.onCharacteristicValueChanged.bind(this);
      }
      async initialize() {
        if (typeof navigator === "undefined" || !navigator.bluetooth) {
          throw this.unavailable("Web Bluetooth API not available in this browser.");
        }
        const isAvailable = await navigator.bluetooth.getAvailability();
        if (!isAvailable) {
          throw this.unavailable("No Bluetooth radio available.");
        }
      }
      async isEnabled() {
        return { value: true };
      }
      async enable() {
        throw this.unavailable("enable is not available on web.");
      }
      async disable() {
        throw this.unavailable("disable is not available on web.");
      }
      async startEnabledNotifications() {
      }
      async stopEnabledNotifications() {
      }
      async isLocationEnabled() {
        throw this.unavailable("isLocationEnabled is not available on web.");
      }
      async openLocationSettings() {
        throw this.unavailable("openLocationSettings is not available on web.");
      }
      async openBluetoothSettings() {
        throw this.unavailable("openBluetoothSettings is not available on web.");
      }
      async openAppSettings() {
        throw this.unavailable("openAppSettings is not available on web.");
      }
      async setDisplayStrings() {
      }
      async requestDevice(options) {
        const filters = this.getFilters(options);
        const device2 = await navigator.bluetooth.requestDevice({ filters: filters.length ? filters : void 0, optionalServices: options === null || options === void 0 ? void 0 : options.optionalServices, acceptAllDevices: filters.length === 0 });
        this.deviceMap.set(device2.id, device2);
        const bleDevice = this.getBleDevice(device2);
        return bleDevice;
      }
      async requestLEScan(options) {
        this.requestBleDeviceOptions = options;
        const filters = this.getFilters(options);
        await this.stopLEScan();
        this.discoveredDevices = /* @__PURE__ */ new Map();
        navigator.bluetooth.removeEventListener("advertisementreceived", this.onAdvertisementReceivedCallback);
        navigator.bluetooth.addEventListener("advertisementreceived", this.onAdvertisementReceivedCallback);
        this.scan = await navigator.bluetooth.requestLEScan({ filters: filters.length ? filters : void 0, acceptAllAdvertisements: filters.length === 0, keepRepeatedDevices: options === null || options === void 0 ? void 0 : options.allowDuplicates });
      }
      onAdvertisementReceived(event) {
        var _a, _b;
        const deviceId = event.device.id;
        this.deviceMap.set(deviceId, event.device);
        const isNew = !this.discoveredDevices.has(deviceId);
        if (isNew || ((_a = this.requestBleDeviceOptions) === null || _a === void 0 ? void 0 : _a.allowDuplicates)) {
          this.discoveredDevices.set(deviceId, true);
          const device2 = this.getBleDevice(event.device);
          const result = { device: device2, localName: device2.name, rssi: event.rssi, txPower: event.txPower, manufacturerData: mapToObject(event.manufacturerData), serviceData: mapToObject(event.serviceData), uuids: (_b = event.uuids) === null || _b === void 0 ? void 0 : _b.map(webUUIDToString) };
          this.notifyListeners("onScanResult", result);
        }
      }
      async stopLEScan() {
        var _a;
        if ((_a = this.scan) === null || _a === void 0 ? void 0 : _a.active) {
          this.scan.stop();
        }
        this.scan = null;
      }
      async getDevices(_options) {
        const devices = await navigator.bluetooth.getDevices();
        const bleDevices = devices.map((device2) => {
          this.deviceMap.set(device2.id, device2);
          const bleDevice = this.getBleDevice(device2);
          return bleDevice;
        });
        return { devices: bleDevices };
      }
      async getConnectedDevices(_options) {
        const devices = await navigator.bluetooth.getDevices();
        const bleDevices = devices.filter((device2) => {
          var _a;
          return (_a = device2.gatt) === null || _a === void 0 ? void 0 : _a.connected;
        }).map((device2) => {
          this.deviceMap.set(device2.id, device2);
          const bleDevice = this.getBleDevice(device2);
          return bleDevice;
        });
        return { devices: bleDevices };
      }
      async connect(options) {
        var _a, _b;
        const device2 = this.getDeviceFromMap(options.deviceId);
        device2.removeEventListener("gattserverdisconnected", this.onDisconnectedCallback);
        device2.addEventListener("gattserverdisconnected", this.onDisconnectedCallback);
        const timeoutError = Symbol();
        if (device2.gatt === void 0) {
          throw new Error("No gatt server available.");
        }
        try {
          const timeout = (_a = options.timeout) !== null && _a !== void 0 ? _a : this.DEFAULT_CONNECTION_TIMEOUT;
          await runWithTimeout(device2.gatt.connect(), timeout, timeoutError);
        } catch (error) {
          await ((_b = device2.gatt) === null || _b === void 0 ? void 0 : _b.disconnect());
          if (error === timeoutError) {
            throw new Error("Connection timeout");
          } else {
            throw error;
          }
        }
      }
      onDisconnected(event) {
        const deviceId = event.target.id;
        const key = `disconnected|${deviceId}`;
        this.notifyListeners(key, null);
      }
      async createBond(_options) {
        throw this.unavailable("createBond is not available on web.");
      }
      async isBonded(_options) {
        throw this.unavailable("isBonded is not available on web.");
      }
      async disconnect(options) {
        var _a;
        (_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.disconnect();
      }
      async getServices(options) {
        var _a, _b;
        const services = (_b = await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryServices())) !== null && _b !== void 0 ? _b : [];
        const bleServices = [];
        for (const service of services) {
          const characteristics = await service.getCharacteristics();
          const bleCharacteristics = [];
          for (const characteristic of characteristics) {
            bleCharacteristics.push({ uuid: characteristic.uuid, properties: this.getProperties(characteristic), descriptors: await this.getDescriptors(characteristic) });
          }
          bleServices.push({ uuid: service.uuid, characteristics: bleCharacteristics });
        }
        return { services: bleServices };
      }
      async getDescriptors(characteristic) {
        try {
          const descriptors = await characteristic.getDescriptors();
          return descriptors.map((descriptor) => ({ uuid: descriptor.uuid }));
        } catch (_a) {
          return [];
        }
      }
      getProperties(characteristic) {
        return { broadcast: characteristic.properties.broadcast, read: characteristic.properties.read, writeWithoutResponse: characteristic.properties.writeWithoutResponse, write: characteristic.properties.write, notify: characteristic.properties.notify, indicate: characteristic.properties.indicate, authenticatedSignedWrites: characteristic.properties.authenticatedSignedWrites, reliableWrite: characteristic.properties.reliableWrite, writableAuxiliaries: characteristic.properties.writableAuxiliaries };
      }
      async getCharacteristic(options) {
        var _a;
        const service = await ((_a = this.getDeviceFromMap(options.deviceId).gatt) === null || _a === void 0 ? void 0 : _a.getPrimaryService(options === null || options === void 0 ? void 0 : options.service));
        return service === null || service === void 0 ? void 0 : service.getCharacteristic(options === null || options === void 0 ? void 0 : options.characteristic);
      }
      async getDescriptor(options) {
        const characteristic = await this.getCharacteristic(options);
        return characteristic === null || characteristic === void 0 ? void 0 : characteristic.getDescriptor(options === null || options === void 0 ? void 0 : options.descriptor);
      }
      async discoverServices(_options) {
        throw this.unavailable("discoverServices is not available on web.");
      }
      async readRssi(_options) {
        throw this.unavailable("readRssi is not available on web.");
      }
      async read(options) {
        const characteristic = await this.getCharacteristic(options);
        const value = await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.readValue());
        return { value };
      }
      async write(options) {
        const characteristic = await this.getCharacteristic(options);
        let dataView;
        if (typeof options.value === "string") {
          dataView = hexStringToDataView(options.value);
        } else {
          dataView = options.value;
        }
        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithResponse(dataView));
      }
      async writeWithoutResponse(options) {
        const characteristic = await this.getCharacteristic(options);
        let dataView;
        if (typeof options.value === "string") {
          dataView = hexStringToDataView(options.value);
        } else {
          dataView = options.value;
        }
        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.writeValueWithoutResponse(dataView));
      }
      async readDescriptor(options) {
        const descriptor = await this.getDescriptor(options);
        const value = await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.readValue());
        return { value };
      }
      async writeDescriptor(options) {
        const descriptor = await this.getDescriptor(options);
        let dataView;
        if (typeof options.value === "string") {
          dataView = hexStringToDataView(options.value);
        } else {
          dataView = options.value;
        }
        await (descriptor === null || descriptor === void 0 ? void 0 : descriptor.writeValue(dataView));
      }
      async startNotifications(options) {
        const characteristic = await this.getCharacteristic(options);
        characteristic === null || characteristic === void 0 ? void 0 : characteristic.removeEventListener("characteristicvaluechanged", this.onCharacteristicValueChangedCallback);
        characteristic === null || characteristic === void 0 ? void 0 : characteristic.addEventListener("characteristicvaluechanged", this.onCharacteristicValueChangedCallback);
        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.startNotifications());
      }
      onCharacteristicValueChanged(event) {
        var _a, _b;
        const characteristic = event.target;
        const key = `notification|${(_a = characteristic.service) === null || _a === void 0 ? void 0 : _a.device.id}|${(_b = characteristic.service) === null || _b === void 0 ? void 0 : _b.uuid}|${characteristic.uuid}`;
        this.notifyListeners(key, { value: characteristic.value });
      }
      async stopNotifications(options) {
        const characteristic = await this.getCharacteristic(options);
        await (characteristic === null || characteristic === void 0 ? void 0 : characteristic.stopNotifications());
      }
      getFilters(options) {
        var _a;
        const filters = [];
        for (const service of (_a = options === null || options === void 0 ? void 0 : options.services) !== null && _a !== void 0 ? _a : []) {
          filters.push({ services: [service], name: options === null || options === void 0 ? void 0 : options.name, namePrefix: options === null || options === void 0 ? void 0 : options.namePrefix });
        }
        if (((options === null || options === void 0 ? void 0 : options.name) || (options === null || options === void 0 ? void 0 : options.namePrefix)) && filters.length === 0) {
          filters.push({ name: options.name, namePrefix: options.namePrefix });
        }
        console.log(filters);
        return filters;
      }
      getDeviceFromMap(deviceId) {
        const device2 = this.deviceMap.get(deviceId);
        if (device2 === void 0) {
          throw new Error('Device not found. Call "requestDevice", "requestLEScan" or "getDevices" first.');
        }
        return device2;
      }
      getBleDevice(device2) {
        var _a;
        const bleDevice = { deviceId: device2.id, name: (_a = device2.name) !== null && _a !== void 0 ? _a : void 0 };
        return bleDevice;
      }
    };
  } });
  var require_throat = __commonJS4({ "src/ble/node_modules/throat/index.js"(exports, module2) {
    "use strict";
    function throatInternal(size) {
      var queue = new Queue();
      var s = size | 0;
      function run(fn, self2, args) {
        if ((s | 0) !== 0) {
          s = (s | 0) - 1;
          return new Promise(function(resolve) {
            resolve(fn.apply(self2, args));
          }).then(onFulfill, onReject);
        }
        return new Promise(function(resolve) {
          queue.push(new Delayed(resolve, fn, self2, args));
        }).then(runDelayed);
      }
      function runDelayed(d2) {
        try {
          return Promise.resolve(d2.fn.apply(d2.self, d2.args)).then(onFulfill, onReject);
        } catch (ex) {
          onReject(ex);
        }
      }
      function onFulfill(result) {
        release();
        return result;
      }
      function onReject(error) {
        release();
        throw error;
      }
      function release() {
        var next = queue.shift();
        if (next) {
          next.resolve(next);
        } else {
          s = (s | 0) + 1;
        }
      }
      return run;
    }
    function earlyBound(size, fn) {
      const run = throatInternal(size | 0);
      return function() {
        var args = new Array(arguments.length);
        for (var i22 = 0; i22 < arguments.length; i22++) {
          args[i22] = arguments[i22];
        }
        return run(fn, this, args);
      };
    }
    function lateBound(size) {
      const run = throatInternal(size | 0);
      return function(fn) {
        if (typeof fn !== "function") {
          throw new TypeError("Expected throat fn to be a function but got " + typeof fn);
        }
        var args = new Array(arguments.length - 1);
        for (var i22 = 1; i22 < arguments.length; i22++) {
          args[i22 - 1] = arguments[i22];
        }
        return run(fn, this, args);
      };
    }
    module2.exports = function throat2(size, fn) {
      if (typeof size === "function") {
        var temp = fn;
        fn = size;
        size = temp;
      }
      if (typeof size !== "number") {
        throw new TypeError("Expected throat size to be a number but got " + typeof size);
      }
      if (fn !== void 0 && typeof fn !== "function") {
        throw new TypeError("Expected throat fn to be a function but got " + typeof fn);
      }
      if (typeof fn === "function") {
        return earlyBound(size | 0, fn);
      } else {
        return lateBound(size | 0);
      }
    };
    module2.exports.default = module2.exports;
    function Delayed(resolve, fn, self2, args) {
      this.resolve = resolve;
      this.fn = fn;
      this.self = self2 || null;
      this.args = args;
    }
    var blockSize = 64;
    function Queue() {
      this._s1 = [];
      this._s2 = [];
      this._shiftBlock = this._pushBlock = new Array(blockSize);
      this._pushIndex = 0;
      this._shiftIndex = 0;
    }
    Queue.prototype.push = function(value) {
      if (this._pushIndex === blockSize) {
        this._pushIndex = 0;
        this._s1[this._s1.length] = this._pushBlock = new Array(blockSize);
      }
      this._pushBlock[this._pushIndex++] = value;
    };
    Queue.prototype.shift = function() {
      if (this._shiftIndex === blockSize) {
        this._shiftIndex = 0;
        var s2 = this._s2;
        if (s2.length === 0) {
          var s1 = this._s1;
          if (s1.length === 0) {
            return void 0;
          }
          this._s1 = s2;
          s2 = this._s2 = s1.reverse();
        }
        this._shiftBlock = s2.pop();
      }
      if (this._pushBlock === this._shiftBlock && this._pushIndex === this._shiftIndex) {
        return void 0;
      }
      var result = this._shiftBlock[this._shiftIndex];
      this._shiftBlock[this._shiftIndex++] = null;
      return result;
    };
  } });
  var __create22 = Object.create;
  var __defProp23 = Object.defineProperty;
  var __getOwnPropDesc22 = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames22 = Object.getOwnPropertyNames;
  var __getProtoOf22 = Object.getPrototypeOf;
  var __hasOwnProp22 = Object.prototype.hasOwnProperty;
  var __require22 = ((x3) => typeof __require3 !== "undefined" ? __require3 : typeof Proxy !== "undefined" ? new Proxy(x3, { get: (a, b) => (typeof __require3 !== "undefined" ? __require3 : a)[b] }) : x3)(function(x3) {
    if (typeof __require3 !== "undefined")
      return __require3.apply(this, arguments);
    throw new Error('Dynamic require of "' + x3 + '" is not supported');
  });
  var __commonJS22 = (cb, mod) => function __require222() {
    return mod || (0, cb[__getOwnPropNames22(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps22 = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames22(from))
        if (!__hasOwnProp22.call(to, key) && key !== except)
          __defProp23(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc22(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM22 = (mod, isNodeMode, target) => (target = mod != null ? __create22(__getProtoOf22(mod)) : {}, __copyProps22(isNodeMode || !mod || !mod.__esModule ? __defProp23(target, "default", { value: mod, enumerable: true }) : target, mod));
  var require_browser2 = __commonJS22({ "node_modules/web-worker/cjs/browser.js"(exports, module2) {
    module2.exports = Worker;
  } });
  var EventHandler5 = class {
    constructor(data) {
      this.pushToState = {};
      this.data = {};
      this.triggers = {};
      this.setState = (updateObj) => {
        Object.assign(this.data, updateObj);
        let props = Object.getOwnPropertyNames(updateObj);
        for (const prop of props) {
          this.triggerEvent(prop, this.data[prop]);
        }
        return this.data;
      };
      this.setValue = (key, value) => {
        this.data[key] = value;
        this.triggerEvent(key, value);
      };
      this.triggerEvent = (key, value) => {
        if (this.triggers[key]) {
          let fn = (obj) => obj.onchange(value);
          this.triggers[key].forEach(fn);
        }
      };
      this.subscribeEvent = (key, onchange, refObject, refKey) => {
        if (key) {
          if (refObject && refKey && !this.triggers[key]) {
            Object.defineProperty(this.data, key, { get: () => {
              return refObject[refKey];
            }, set: (value) => {
              refObject[refKey] = value;
            }, enumerable: true, configurable: true });
          }
          if (!this.triggers[key]) {
            this.triggers[key] = [];
          }
          let l = this.triggers[key].length;
          this.triggers[key].push({ sub: l, onchange });
          return this.triggers[key].length - 1;
        } else
          return void 0;
      };
      this.unsubscribeEvent = (key, sub) => {
        let triggers = this.triggers[key];
        if (triggers) {
          if (!sub) {
            delete this.triggers[key];
            delete this.data[key];
          } else {
            let sub2 = void 0;
            let obj = triggers.find((o, i22) => {
              if (o.sub === sub2) {
                sub2 = i22;
                return true;
              }
            });
            if (obj)
              triggers.splice(sub2, 1);
            if (Object.keys(triggers).length === 0) {
              delete this.triggers[key];
              delete this.data[key];
            }
            if (this.onRemoved)
              this.onRemoved(obj);
            return true;
          }
        }
      };
      this.subscribeEventOnce = (key, onchange) => {
        let sub;
        let changed = (value) => {
          onchange(value);
          this.unsubscribeEvent(key, sub);
        };
        sub = this.subscribeEvent(key, changed);
      };
      this.getEvent = (key, sub) => {
        for (const s in this.triggers[key]) {
          if (this.triggers[key][s].sub === sub)
            return this.triggers[key][s];
        }
      };
      this.getSnapshot = () => {
        const snapshot = {};
        for (const key in this.data) {
          snapshot[key] = this.data[key];
        }
      };
      if (typeof data === "object")
        this.data = data;
    }
  };
  var state3 = new EventHandler5();
  var GraphNode4 = class {
    constructor(properties, parent, graph3) {
      this.__node = { tag: `node${Math.floor(Math.random() * 1e15)}`, unique: `${Math.floor(Math.random() * 1e15)}`, state: state3 };
      this.__setProperties = (properties2, parent2, graph22) => {
        let enforceProperties = () => {
          let orig = properties2;
          if (typeof properties2 === "function") {
            if (isNativeClass3(properties2)) {
              properties2 = new properties2();
            } else
              properties2 = { __operator: properties2, __node: { forward: true, tag: properties2.name } };
          } else if (typeof properties2 === "string") {
            if (graph22?.get(properties2)) {
              properties2 = graph22.get(properties2);
            }
          }
          if (!properties2.__node.initial)
            properties2.__node.initial = orig;
        };
        enforceProperties();
        if (typeof properties2 === "object") {
          let assignState = () => {
            if (properties2.__node?.state)
              this.__node.state = properties2.__node.state;
          };
          let setProps22 = () => {
            if (properties2.__props) {
              if (typeof properties2.__props === "function")
                properties2.__props = new properties2.__props();
              if (typeof properties2.__props === "object") {
                this.__proxyObject(properties2.__props);
              }
            }
          };
          let setTag = () => {
            if (!properties2.__node.tag) {
              if (properties2.__operator?.name)
                properties2.__node.tag = properties2.__operator.name;
              else
                properties2.__node.tag = `node${Math.floor(Math.random() * 1e15)}`;
            }
          };
          let setNode = () => {
            if (typeof properties2.__node === "string") {
              if (graph22?.get(properties2.__node.tag)) {
                properties2 = graph22.get(properties2.__node.tag);
              } else
                properties2.__node = {};
            } else if (!properties2.__node)
              properties2.__node = {};
            if (graph22) {
              properties2.__node.graph = graph22;
            }
            if (properties2 instanceof Graph4)
              properties2.__node.source = properties2;
          };
          let setParent = () => {
            if (!properties2.__parent && parent2)
              properties2.__parent = parent2;
            if (parent2?.__node && !(parent2 instanceof Graph4 || properties2 instanceof Graph4))
              properties2.__node.tag = parent2.__node.tag + "." + properties2.__node.tag;
            if (parent2 instanceof Graph4 && properties2 instanceof Graph4) {
              if (properties2.__node.loaders)
                Object.assign(parent2.__node.loaders ? parent2.__node.loaders : {}, properties2.__node.loaders);
              if (parent2.__node.mapGraphs) {
                properties2.__node.nodes.forEach((n) => {
                  parent2.set(properties2.__node.tag + "." + n.__node.tag, n);
                });
                let ondelete = () => {
                  properties2.__node.nodes.forEach((n) => {
                    parent2.__node.nodes.delete(properties2.__node.tag + "." + n.__node.tag);
                  });
                };
                this.__addOndisconnected(ondelete);
              }
            }
          };
          let setOp = () => {
            if (typeof properties2.default === "function" && !properties2.__operator) {
              properties2.__operator = properties2.default;
            }
            if (properties2.__operator) {
              if (typeof properties2.__operator === "string") {
                if (graph22) {
                  let n = graph22.get(properties2.__operator);
                  if (n)
                    properties2.__operator = n.__operator;
                  if (!properties2.__node.tag && properties2.__operator.name)
                    properties2.__node.tag = properties2.__operator.name;
                }
              }
              if (typeof properties2.__operator === "function")
                properties2.__operator = this.__setOperator(properties2.__operator);
              if (properties2.default)
                properties2.default = properties2.__operator;
            }
          };
          let assignProps = () => {
            properties2.__node = Object.assign(this.__node, properties2.__node);
            let keys22 = Object.getOwnPropertyNames(properties2);
            for (const key of keys22) {
              this[key] = properties2[key];
            }
          };
          let bindCallbacks = () => {
            if (this.__onconnected) {
              if (typeof this.__onconnected === "function") {
                this.__onconnected = this.__onconnected.bind(this);
              } else if (Array.isArray(this.__onconnected)) {
                this.__onconnected = this.__onconnected.map((f) => {
                  return f.bind(this);
                });
              }
              if (typeof this.__ondisconnected === "function") {
                this.__ondisconnected = this.__ondisconnected.bind(this);
              } else if (Array.isArray(this.__ondisconnected)) {
                this.__ondisconnected = this.__ondisconnected.map((f) => {
                  return f.bind(this);
                });
              }
            }
          };
          assignState();
          setTag();
          setProps22();
          setNode();
          setParent();
          assignProps();
          bindCallbacks();
          setOp();
        }
      };
      this.__subscribe = (callback, key, subInput, bound, target) => {
        const subscribeToFunction = (k, setTarget = (callback2, target2) => callback2, triggerCallback = callback) => {
          let sub = this.__node.state.subscribeEvent(k, triggerCallback, this, key);
          let trigger = this.__node.state.getEvent(k, sub);
          trigger.source = this.__node.tag;
          if (key)
            trigger.key = key;
          trigger.target = setTarget(callback);
          if (bound)
            trigger.bound = bound;
          return sub;
        };
        const subscribeToGraph = (callback2) => {
          let fn = this.__node.graph.get(callback2);
          if (!fn && callback2.includes(".")) {
            let n = this.__node.graph.get(callback2.substring(0, callback2.lastIndexOf(".")));
            let key2 = callback2.substring(callback2.lastIndexOf(".") + 1);
            if (n && typeof n[key2] === "function")
              callback2 = (...args) => {
                return n[key2](...args);
              };
          }
        };
        if (key) {
          if (!this.__node.localState || !this.__node.localState[key]) {
            this.__addLocalState(this, key);
          }
          if (typeof callback === "string") {
            if (target) {
              if (this.__node.graph?.get(target)) {
                let n = this.__node.graph?.get(target);
                if (typeof n[callback] === "function") {
                  let fn = n[callback];
                  callback = (...inp) => {
                    fn(...inp);
                  };
                } else {
                  let k2 = callback;
                  let setter = (inp) => {
                    n[k2] = inp;
                  };
                  callback = setter;
                }
              }
            } else if (typeof this[callback] === "function") {
              let fn = this[callback];
              callback = (...inp) => {
                fn(...inp);
              };
            } else if (this.__node.graph?.get(callback))
              subscribeToGraph(callback);
            if (typeof callback !== "function")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        } else {
          if (typeof callback === "string") {
            if (this.__node.graph.get(callback))
              callback = this.__node.graph.get(callback);
            if (typeof callback !== "object")
              return void 0;
          }
          let sub;
          let k = subInput ? this.__node.unique + "input" : this.__node.unique;
          if (typeof callback === "function")
            sub = subscribeToFunction(k);
          else if (callback?.__node)
            sub = subscribeToFunction(k, (callback2, target2) => target2 ? target2 : callback2.__node.unique, (...inp) => {
              if (callback.__operator)
                callback.__operator(...inp);
            });
          return sub;
        }
      };
      this.__unsubscribe = (sub, key, unsubInput) => {
        if (key)
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "." + key + "input" : this.__node.unique + "." + key, sub);
        else
          return this.__node.state.unsubscribeEvent(unsubInput ? this.__node.unique + "input" : this.__node.unique, sub);
      };
      this.__setOperator = (fn) => {
        fn = fn.bind(this);
        if (this.__args && this.__node.graph) {
          fn = wrapArgs3(fn, this.__args, this.__node.graph);
        }
        let inpstr = `${this.__node.unique}input`;
        this.__operator = (...args) => {
          if (this.__node.state.triggers[inpstr])
            this.__node.state.setValue(inpstr, args);
          let result = fn(...args);
          if (this.__node.state.triggers[this.__node.unique]) {
            if (typeof result?.then === "function") {
              result.then((res2) => {
                if (res2 !== void 0)
                  this.__node.state.setValue(this.__node.unique, res2);
              }).catch(console.error);
            } else if (result !== void 0)
              this.__node.state.setValue(this.__node.unique, result);
          }
          return result;
        };
        if (this.__parent instanceof GraphNode4 && !this.__subscribedToParent) {
          if (this.__parent.__operator) {
            let sub = this.__parent.__subscribe(this);
            let ondelete = () => {
              this.__parent?.__unsubscribe(sub);
              delete this.__subscribedToParent;
            };
            this.__addOndisconnected(ondelete);
            this.__subscribedToParent = true;
          }
        }
        return this.__operator;
      };
      this.__addLocalState = (props, key) => {
        if (!props)
          return;
        if (!this.__node.localState) {
          this.__node.localState = {};
        }
        const localState = this.__node.localState;
        const initState = (props2, k) => {
          let str22 = this.__node.unique + "." + k;
          let inpstr = `${str22}input`;
          if (typeof props2[k] === "function" && k !== "__operator") {
            let fn = props2[k].bind(this);
            props2[k] = (...args) => {
              if (this.__node.state.triggers[inpstr])
                this.__node.state.setValue(inpstr, args);
              let result = fn(...args);
              if (this.__node.state.triggers[str22]) {
                if (typeof result?.then === "function") {
                  result.then((res2) => {
                    this.__node.state.triggerEvent(str22, res2);
                  }).catch(console.error);
                } else
                  this.__node.state.triggerEvent(str22, result);
              }
              return result;
            };
          } else {
            let get, set;
            if (this.__props?.[k]) {
              get = () => {
                return this.__props[k];
              };
              set = (v2) => {
                this.__props[k] = v2;
                if (this.__node.state.triggers[str22])
                  this.__node.state.triggerEvent(str22, v2);
              };
            } else {
              localState[k] = props2[k];
              get = () => {
                return localState[k];
              };
              set = (v2) => {
                localState[k] = v2;
                if (this.__node.state.triggers[str22])
                  this.__node.state.triggerEvent(str22, v2);
              };
            }
            const descriptor = { get, set, enumerable: true, configurable: true };
            Object.defineProperty(props2, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        };
        if (key)
          initState(props, key);
        else {
          for (let k in props) {
            initState(props, k);
          }
        }
      };
      this.__proxyObject = (obj) => {
        const allProps = getAllProperties3(obj);
        for (const k of allProps) {
          if (typeof obj[k] === "function") {
            this[k] = (...args) => {
              return obj[k](...args);
            };
          } else {
            const descriptor = { get: () => {
              return obj[k];
            }, set: (value) => {
              obj[k] = value;
            }, enumerable: true, configurable: true };
            Object.defineProperty(this, k, descriptor);
            if (typeof this.__node.initial === "object") {
              let dec = Object.getOwnPropertyDescriptor(this.__node.initial, k);
              if (dec === void 0 || dec?.configurable) {
                Object.defineProperty(this.__node.initial, k, descriptor);
              }
            }
          }
        }
      };
      this.__setProperties(properties, parent, graph3);
    }
    __addOnconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__onconnected)) {
        this.__onconnected.push(callback);
      } else if (typeof this.__onconnected === "function") {
        this.__onconnected = [callback, this.__onconnected];
      } else
        this.__onconnected = callback;
    }
    __addOndisconnected(callback) {
      callback = callback.bind(this);
      if (Array.isArray(this.__ondisconnected)) {
        this.__ondisconnected.push(callback);
      } else if (typeof this.__ondisconnected === "function") {
        this.__ondisconnected = [callback, this.__ondisconnected];
      } else
        this.__ondisconnected = callback;
    }
    __callConnected(node = this) {
      if (typeof this.__onconnected === "function") {
        this.__onconnected(this);
      } else if (Array.isArray(this.__onconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__onconnected.forEach(fn);
      }
    }
    __callDisconnected(node = this) {
      if (typeof this.__ondisconnected === "function")
        this.__ondisconnected(this);
      else if (Array.isArray(this.__ondisconnected)) {
        let fn = (o) => {
          o(this);
        };
        this.__ondisconnected.forEach(fn);
      }
    }
  };
  var Graph4 = class {
    constructor(options) {
      this.__node = { tag: `graph${Math.floor(Math.random() * 1e15)}`, unique: `${Math.random()}`, nodes: /* @__PURE__ */ new Map(), state: state3, roots: {} };
      this.init = (options2) => {
        if (options2) {
          let cpy = Object.assign({}, options2);
          delete cpy.roots;
          recursivelyAssign4(this.__node, cpy);
          if (options2.roots)
            this.load(options2.roots);
        }
      };
      this.load = (roots) => {
        function recursivelyAssignChildren(target, obj, inChildren = true, top = true) {
          if (top) {
            if (target)
              Object.assign(target, obj);
            else
              target = Object.assign({}, obj);
            recursivelyAssignChildren(target, obj, true, false);
          }
          if (obj.__children && !inChildren) {
            if (obj.__children?.constructor.name === "Object") {
              if (target.__children?.constructor.name === "Object")
                recursivelyAssignChildren(target.__children, obj.__children, true, false);
              else
                target.__children = recursivelyAssignChildren({}, obj.__children, true, false);
            } else {
              target.__children = obj.__children;
            }
          } else if (inChildren) {
            for (const key in obj) {
              target[key] = Object.assign({}, obj[key]);
              if (obj[key].__children) {
                recursivelyAssignChildren({}, obj[key].__children, false, false);
              }
            }
          }
          return target;
        }
        this.__node.roots = recursivelyAssignChildren(this.__node.roots ? this.__node.roots : {}, roots);
        let cpy = Object.assign({}, roots);
        if (cpy.__node)
          delete cpy.__node;
        let listeners = this.recursiveSet(cpy, this, void 0, roots);
        if (roots.__node) {
          if (!roots.__node.tag)
            roots.__node._tag = `roots${Math.floor(Math.random() * 1e15)}`;
          else if (!this.get(roots.__node.tag)) {
            let node = new GraphNode4(roots, this, this);
            this.set(node.__node.tag, node);
            this.runLoaders(node, this, roots, roots.__node.tag);
            if (node.__listeners) {
              listeners[node.__node.tag] = node.__listeners;
            }
          }
        } else if (roots.__listeners) {
          this.setListeners(roots.__listeners);
        }
        this.setListeners(listeners);
        return cpy;
      };
      this.setLoaders = (loaders22, replace) => {
        if (replace)
          this.__node.loaders = loaders22;
        else
          Object.assign(this.__node.loaders, loaders22);
        return this.__node.loaders;
      };
      this.runLoaders = (node, parent, properties, key) => {
        for (const l in this.__node.loaders) {
          if (typeof this.__node.loaders[l] === "object") {
            if (this.__node.loaders[l].init)
              this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
            if (this.__node.loaders[l].connected)
              node.__addOnconnected(this.__node.loaders[l].connect);
            if (this.__node.loaders[l].disconnected)
              node.__addOndisconnected(this.__node.loaders[l].disconnect);
          } else if (typeof this.__node.loaders[l] === "function")
            this.__node.loaders[l](node, parent, this, this.__node.roots, properties, key);
        }
      };
      this.add = (properties, parent) => {
        let listeners = {};
        if (typeof parent === "string")
          parent = this.get(parent);
        let instanced;
        if (typeof properties === "function") {
          if (isNativeClass3(properties)) {
            if (properties.prototype instanceof GraphNode4) {
              properties = properties.prototype.constructor(properties, parent, this);
              instanced = true;
            } else
              properties = new properties();
          } else
            properties = { __operator: properties };
        } else if (typeof properties === "string") {
          properties = this.__node.roots[properties];
        }
        if (!properties)
          return;
        if (!instanced) {
          let keys22 = Object.getOwnPropertyNames(properties);
          let cpy = {};
          for (const key of keys22) {
            cpy[key] = properties[key];
          }
          properties = cpy;
        }
        if (!properties.__node)
          properties.__node = {};
        properties.__node.initial = properties;
        if (typeof properties === "object" && (!properties?.__node?.tag || !this.get(properties.__node.tag))) {
          let node;
          if (instanced)
            node = properties;
          else
            node = new GraphNode4(properties, parent, this);
          this.set(node.__node.tag, node);
          this.runLoaders(node, parent, properties, node.__node.tag);
          this.__node.roots[node.__node.tag] = properties;
          if (node.__children) {
            node.__children = Object.assign({}, node.__children);
            this.recursiveSet(node.__children, node, listeners, node.__children);
          }
          if (node.__listeners) {
            listeners[node.__node.tag] = Object.assign({}, node.__listeners);
            for (const key in node.__listeners) {
              let listener = node.__listeners[key];
              if (node[key]) {
                delete listeners[node.__node.tag][key];
                listeners[node.__node.tag][node.__node.tag + "." + key] = listener;
              }
              if (typeof listener === "string") {
                if (node.__children?.[listener]) {
                  listeners[node.__node.tag][key] = node.__node.tag + "." + listener;
                } else if (parent instanceof GraphNode4 && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                  listeners[node.__node.tag][key] = parent.__node.tag;
                }
              }
            }
          }
          this.setListeners(listeners);
          node.__callConnected();
          return node;
        }
        return;
      };
      this.recursiveSet = (t22, parent, listeners = {}, origin) => {
        let keys22 = Object.getOwnPropertyNames(origin);
        for (const key of keys22) {
          if (key.includes("__"))
            continue;
          let p2 = origin[key];
          if (Array.isArray(p2))
            continue;
          let instanced;
          if (typeof p2 === "function") {
            if (isNativeClass3(p2)) {
              p2 = new p2();
              if (p2 instanceof GraphNode4) {
                p2 = p2.prototype.constructor(p2, parent, this);
                instanced = true;
              }
            } else
              p2 = { __operator: p2 };
          } else if (typeof p2 === "string") {
            if (this.__node.nodes.get(p2))
              p2 = this.__node.nodes.get(p2);
            else
              p2 = this.__node.roots[p2];
          } else if (typeof p2 === "boolean") {
            if (this.__node.nodes.get(key))
              p2 = this.__node.nodes.get(key);
            else
              p2 = this.__node.roots[key];
          }
          if (typeof p2 === "object") {
            if (!instanced && !(p2 instanceof GraphNode4)) {
              let keys32 = Object.getOwnPropertyNames(p2);
              let cpy = {};
              for (const key2 of keys32) {
                cpy[key2] = p2[key2];
              }
              p2 = cpy;
            }
            if (!p2.__node)
              p2.__node = {};
            if (!p2.__node.tag)
              p2.__node.tag = key;
            if (!p2.__node.initial)
              p2.__node.initial = t22[key];
            if (this.get(p2.__node.tag) && !(!(parent instanceof Graph4) && parent?.__node) || parent?.__node && this.get(parent.__node.tag + "." + p2.__node.tag))
              continue;
            let node;
            let newnode = false;
            if (instanced || p2 instanceof GraphNode4) {
              node = p2;
            } else {
              node = new GraphNode4(p2, parent, this);
              newnode = true;
            }
            if (!newnode && p2 instanceof GraphNode4 && !instanced && parent instanceof GraphNode4) {
              let sub = this.subscribe(parent.__node.tag, node.__node.tag);
              let ondelete = (node2) => {
                this.unsubscribe(parent.__node.tag, sub);
              };
              node.__addOndisconnected(ondelete);
            } else {
              this.set(node.__node.tag, node);
              this.runLoaders(node, parent, t22[key], key);
              t22[key] = node;
              this.__node.roots[node.__node.tag] = p2;
              if (node.__children) {
                node.__children = Object.assign({}, node.__children);
                this.recursiveSet(node.__children, node, listeners, node.__children);
              }
              if (node.__listeners) {
                listeners[node.__node.tag] = Object.assign({}, node.__listeners);
                for (const key2 in node.__listeners) {
                  let listener = node.__listeners[key2];
                  let k = key2;
                  if (node[key2]) {
                    delete listeners[node.__node.tag][key2];
                    k = node.__node.tag + "." + key2;
                    listeners[node.__node.tag][k] = listener;
                  }
                  if (typeof listener === "string") {
                    if (node.__children?.[listener]) {
                      listeners[node.__node.tag][k] = node.__node.tag + "." + listener;
                    } else if (parent instanceof GraphNode4 && (parent.__node.tag === listener || parent.__node.tag.includes(".") && parent.__node.tag.split(".").pop() === listener)) {
                      listeners[node.__node.tag][k] = parent.__node.tag;
                    }
                  }
                }
              }
              node.__callConnected();
            }
          }
        }
        return listeners;
      };
      this.remove = (node, clearListeners = true) => {
        this.unsubscribe(node);
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode4) {
          this.delete(node.__node.tag);
          delete this.__node.roots[node.__node.tag];
          if (clearListeners) {
            this.clearListeners(node);
          }
          node.__callDisconnected();
          const recursiveRemove = (t22) => {
            for (const key in t22) {
              this.unsubscribe(t22[key]);
              this.delete(t22[key].__node.tag);
              delete this.__node.roots[t22[key].__node.tag];
              this.delete(key);
              delete this.__node.roots[key];
              t22[key].__node.tag = t22[key].__node.tag.substring(t22[key].__node.tag.lastIndexOf(".") + 1);
              if (clearListeners) {
                this.clearListeners(t22[key]);
              }
              console.log(key, t22[key].__listeners);
              t22[key].__callDisconnected();
              if (t22[key].__children) {
                recursiveRemove(t22[key].__children);
              }
            }
          };
          if (node.__children) {
            recursiveRemove(node.__children);
          }
        }
        if (node?.__node.tag && node?.__parent) {
          delete node?.__parent;
          node.__node.tag = node.__node.tag.substring(node.__node.tag.indexOf(".") + 1);
        }
        return node;
      };
      this.run = (node, ...args) => {
        if (typeof node === "string") {
          let nd = this.get(node);
          if (!nd && node.includes(".")) {
            nd = this.get(node.substring(0, node.lastIndexOf(".")));
            if (typeof nd?.[node.substring(node.lastIndexOf(".") + 1)] === "function")
              return nd[node.substring(node.lastIndexOf(".") + 1)](...args);
          } else if (nd?.__operator)
            return nd.__operator(...args);
        }
        if (node?.__operator) {
          return node?.__operator(...args);
        }
      };
      this.setListeners = (listeners) => {
        for (const key in listeners) {
          let node = this.get(key);
          if (typeof listeners[key] === "object") {
            for (const k in listeners[key]) {
              let n = this.get(k);
              let sub;
              if (typeof listeners[key][k] !== "object")
                listeners[key][k] = { __callback: listeners[key][k] };
              else if (!listeners[key][k].__callback) {
                for (const kk in listeners[key][k]) {
                  if (typeof listeners[key][k][kk] !== "object") {
                    listeners[key][k][kk] = { __callback: listeners[key][k][kk] };
                    if (listeners[key][k][kk].__callback === true || typeof listeners[key][k][kk].__callback === "undefined")
                      listeners[key][k][kk].__callback = node.__operator;
                  }
                  let nn = this.get(kk);
                  if (nn) {
                    if (!nn) {
                      let tag = k.substring(0, k.lastIndexOf("."));
                      nn = this.get(tag);
                      if (n) {
                        sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k][kk].__args, k.substring(k.lastIndexOf(".") + 1), listeners[key][k][kk].inputState, key, k);
                        if (typeof node.__listeners[k][kk] !== "object")
                          node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState };
                        node.__listeners[k][kk].sub = sub;
                      }
                    } else {
                      sub = this.subscribe(nn, listeners[key][k][kk].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                      if (typeof node.__listeners[k][kk] !== "object")
                        node.__listeners[k][kk] = { __callback: listeners[key][k][kk].__callback, inputState: listeners[key][k][kk]?.inputState };
                      node.__listeners[k][kk].sub = sub;
                    }
                  }
                }
              }
              if ("__callback" in listeners[key][k]) {
                if (listeners[key][k].__callback === true || typeof listeners[key][k].__callback === "undefined")
                  listeners[key][k].__callback = node.__operator;
                if (typeof listeners[key][k].__callback === "function")
                  listeners[key][k].__callback = listeners[key][k].__callback.bind(node);
                if (typeof node.__listeners !== "object")
                  node.__listeners = {};
                if (!n) {
                  let tag = k.substring(0, k.lastIndexOf("."));
                  n = this.get(tag);
                  if (n) {
                    sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, k.substring(k.lastIndexOf(".") + 1), listeners[key][k].inputState, key, k);
                    if (typeof node.__listeners[k] !== "object")
                      node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState };
                    node.__listeners[k].sub = sub;
                  }
                } else {
                  sub = this.subscribe(n, listeners[key][k].__callback, listeners[key][k].__args, void 0, listeners[key][k].inputState, key, k);
                  if (typeof node.__listeners[k] !== "object")
                    node.__listeners[k] = { __callback: listeners[key][k].__callback, inputState: listeners[key][k]?.inputState };
                  node.__listeners[k].sub = sub;
                }
              }
            }
          }
        }
      };
      this.clearListeners = (node, listener) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node?.__listeners) {
          for (const key in node.__listeners) {
            if (listener && key !== listener)
              continue;
            if (typeof node.__listeners[key]?.sub !== "number")
              continue;
            let n = this.get(key);
            if (!n) {
              n = this.get(key.substring(0, key.lastIndexOf(".")));
              if (n) {
                if (typeof node.__listeners[key] === "object" && !node.__listeners[key]?.__callback) {
                  for (const k in node.__listeners[key]) {
                    if (typeof node.__listeners[key][k]?.sub === "number") {
                      this.unsubscribe(n, node.__listeners[key][k].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key][k].inputState);
                      node.__listeners[key][k].sub = void 0;
                    }
                  }
                } else if (typeof node.__listeners[key]?.sub === "number") {
                  this.unsubscribe(n, node.__listeners[key].sub, key.substring(key.lastIndexOf(".") + 1), node.__listeners[key].inputState);
                  node.__listeners[key].sub = void 0;
                }
              }
            } else {
              if (typeof !node.__listeners[key]?.__callback === "number") {
                for (const k in node.__listeners[key]) {
                  if (node.__listeners[key][k]?.sub) {
                    this.unsubscribe(n, node.__listeners[key][k].sub, void 0, node.__listeners[key][k].inputState);
                    node.__listeners[key][k].sub = void 0;
                  }
                }
              } else if (typeof node.__listeners[key]?.sub === "number") {
                this.unsubscribe(n, node.__listeners[key].sub, void 0, node.__listeners[key].inputState);
                node.__listeners[key].sub = void 0;
              }
            }
          }
        }
      };
      this.get = (tag) => {
        return this.__node.nodes.get(tag);
      };
      this.set = (tag, node) => {
        return this.__node.nodes.set(tag, node);
      };
      this.delete = (tag) => {
        return this.__node.nodes.delete(tag);
      };
      this.getProps = (node, getInitial) => {
        if (typeof node === "string")
          node = this.get(node);
        if (node instanceof GraphNode4) {
          let cpy;
          if (getInitial)
            cpy = Object.assign({}, this.__node.roots[node.__node.tag]);
          else {
            cpy = Object.assign({}, node);
            for (const key in cpy) {
              if (key.includes("__"))
                delete cpy[key];
            }
          }
        }
      };
      this.subscribe = (nodeEvent, onEvent, args, key, subInput, target, bound) => {
        let nd = nodeEvent;
        if (typeof nodeEvent === "string") {
          nd = this.get(nodeEvent);
          if (!nd && nodeEvent.includes(".")) {
            nd = this.get(nodeEvent.substring(0, nodeEvent.lastIndexOf(".")));
            key = nodeEvent.substring(nodeEvent.lastIndexOf(".") + 1);
          }
        }
        let sub;
        if (target instanceof GraphNode4)
          target = target.__node.tag;
        if (typeof onEvent === "string") {
          let key2 = onEvent;
          let setOnEventFromString = (onEvent2) => {
            if (this.get(onEvent2)?.__operator) {
              let node = this.get(onEvent2);
              onEvent2 = function(...inp) {
                return node.__operator(...inp);
              };
            } else if (onEvent2.includes(".")) {
              let n = this.get(onEvent2.substring(0, onEvent2.lastIndexOf(".")));
              let key3 = onEvent2.substring(onEvent2.lastIndexOf(".") + 1);
              if (typeof n[key3] === "function") {
                if (n[key3] instanceof GraphNode4)
                  onEvent2 = n[key3];
                else
                  onEvent2 = function(...inp) {
                    return n[key3](...inp);
                  };
              } else {
                onEvent2 = function(inp) {
                  n[key3] = inp;
                  return n[key3];
                };
              }
            }
            return onEvent2;
          };
          if (target) {
            let node = this.get(target);
            if (typeof node?.[onEvent] === "function") {
              onEvent = function(...inp) {
                return node[key2](...inp);
              };
            } else if (node[key2]) {
              if (node[key2] instanceof GraphNode4)
                onEvent = node[key2];
              else
                onEvent = function(inp) {
                  node[key2] = inp;
                  return node[key2];
                };
            } else {
              onEvent = setOnEventFromString(onEvent);
            }
          } else {
            onEvent = setOnEventFromString(onEvent);
          }
        }
        if ((typeof onEvent === "function" || onEvent instanceof GraphNode4) && args) {
          if (onEvent instanceof GraphNode4 && onEvent.__operator)
            onEvent = function(inp) {
              return onEvent.__operator(inp);
            };
          onEvent = wrapArgs3(onEvent, args, this);
        }
        if (nd instanceof GraphNode4) {
          sub = nd.__subscribe(onEvent, key, subInput, target, bound);
          let ondelete = () => {
            nd.__unsubscribe(sub, key, subInput);
          };
          nd.__addOndisconnected(ondelete);
        } else if (typeof nodeEvent === "string") {
          if (this.get(nodeEvent)) {
            if (onEvent instanceof GraphNode4 && onEvent.__operator) {
              sub = this.get(nodeEvent).__subscribe(onEvent.__operator, key, subInput, target, bound);
              let ondelete = () => {
                this.get(nodeEvent).__unsubscribe(sub);
              };
              onEvent.__addOndisconnected(ondelete);
            } else if (typeof onEvent === "function" || typeof onEvent === "string") {
              sub = this.get(nodeEvent).__subscribe(onEvent, key, subInput, target, bound);
              this.__node.state.getEvent(this.get(nodeEvent).__node.unique, sub).source = nodeEvent;
            }
          } else {
            if (typeof onEvent === "string")
              onEvent = this.__node.nodes.get(onEvent).__operator;
            if (typeof onEvent === "function")
              sub = this.__node.state.subscribeEvent(nodeEvent, onEvent);
          }
        }
        return sub;
      };
      this.unsubscribe = (node, sub, key, subInput) => {
        if (node instanceof GraphNode4) {
          return node.__unsubscribe(sub, key, subInput);
        } else
          return this.get(node)?.__unsubscribe(sub, key, subInput);
      };
      this.setState = (update) => {
        this.__node.state.setState(update);
      };
      this.init(options);
    }
  };
  function recursivelyAssign4(target, obj) {
    for (const key in obj) {
      if (obj[key]?.constructor.name === "Object" && !Array.isArray(obj[key])) {
        if (target[key]?.constructor.name === "Object" && !Array.isArray(target[key]))
          recursivelyAssign4(target[key], obj[key]);
        else
          target[key] = recursivelyAssign4({}, obj[key]);
      } else {
        target[key] = obj[key];
      }
    }
    return target;
  }
  function getAllProperties3(obj) {
    var allProps = [], curr = obj;
    do {
      var props = Object.getOwnPropertyNames(curr);
      let fn = function(prop) {
        if (allProps.indexOf(prop) === -1)
          allProps.push(prop);
      };
      props.forEach(fn);
    } while (curr = Object.getPrototypeOf(curr));
    return allProps;
  }
  function isNativeClass3(thing) {
    return isFunction3(thing) === "class";
  }
  function isFunction3(x3) {
    const res2 = typeof x3 === "function" ? x3.prototype ? Object.getOwnPropertyDescriptor(x3, "prototype")?.writable ? "function" : "class" : x3.constructor.name === "AsyncFunction" ? "async" : "arrow" : "";
    return res2;
  }
  var wrapArgs3 = (callback, argOrder, graph3) => {
    let args = [];
    let getCallbackFromString = (a) => {
      if (graph3.get(a)?.__operator) {
        let node = graph3.get(a);
        return (...inp) => {
          node.__operator(...inp);
        };
      } else if (a.includes(".")) {
        let split = a.split(".");
        let popped = split.pop();
        let joined = split.join(".");
        let node = graph3.get(joined);
        if (typeof graph3.get(joined)?.[popped] === "function") {
          return (...inp) => {
            return node[popped](...inp);
          };
        } else
          return () => {
            return node[popped];
          };
      } else if (graph3.get(a)) {
        let node = graph3.get(a);
        return () => {
          return node;
        };
      } else {
        let arg = a;
        return () => {
          return arg;
        };
      }
    };
    let forArg = (a, i22) => {
      if (a === "__output") {
        args[i22] = (inp) => {
          return inp;
        };
      } else if (typeof a === "string") {
        args[i22] = getCallbackFromString(a);
      } else if (typeof a === "function") {
        let fn2 = a;
        args[i22] = (...inp) => {
          return fn2(...inp);
        };
      } else if (typeof a === "object" && a.__input) {
        let recursivelyCreateCallback = function(c) {
          let input = c.__input;
          if (typeof c.__input === "string") {
            input = getCallbackFromString(c.__input);
          }
          if (c.__args) {
            input = wrapArgs3(input, c.__args, graph3);
          }
          if (c.__output) {
            let output = c.__output;
            if (typeof c.__output === "string") {
              output = getCallbackFromString(output);
            } else if (typeof a.__output === "object") {
              output = recursivelyCreateCallback(output);
            }
            if (typeof output === "function") {
              let fn2 = input;
              input = (...inp) => {
                return output(fn2(...inp));
              };
            }
          }
          return input;
        };
        args[i22] = recursivelyCreateCallback(a);
      } else {
        let arg = a;
        args[i22] = () => {
          return arg;
        };
      }
    };
    argOrder.forEach(forArg);
    if (typeof callback === "string")
      callback = getCallbackFromString(callback);
    let fn = callback;
    callback = function(...inp) {
      let mapArg = (arg) => {
        return arg(...inp);
      };
      return fn(...args.map(mapArg));
    };
    return callback;
  };
  var backprop3 = (node, parent, graph3) => {
    if (node.__node.backward && parent instanceof GraphNode4) {
      graph3.setListeners({ [parent.__node.tag]: { [node.__node.tag]: parent } });
    }
  };
  var loop3 = (node, parent, graph3) => {
    if (node.__operator && !node.__node.looperSet) {
      if (typeof node.__node.delay === "number") {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            setTimeout(async () => {
              res2(await fn(...args));
            }, node.__node.delay);
          });
        });
      } else if (node.__node.frame === true) {
        let fn = node.__operator;
        node.__setOperator((...args) => {
          return new Promise((res2, rej) => {
            requestAnimationFrame(async () => {
              res2(await fn(...args));
            });
          });
        });
      }
      if (typeof node.__node.repeat === "number" || typeof node.__node.recursive === "number") {
        let fn = node.__operator;
        node.__setOperator(async (...args) => {
          let i22 = node.__node.repeat ? node.__node.repeat : node.__node.recursive;
          let result;
          let repeater = async (tick, ...inp) => {
            while (tick > 0) {
              if (node.__node.delay || node.__node.frame) {
                fn(...inp).then(async (res2) => {
                  if (node.__node.recursive) {
                    await repeater(tick, res2);
                  } else
                    await repeater(tick, ...inp);
                });
                break;
              } else
                result = await fn(...args);
              tick--;
            }
          };
          await repeater(i22, ...args);
          return result;
        });
      }
      if (node.__node.loop && typeof node.__node.loop === "number") {
        node.__node.looperSet = true;
        let fn = node.__operator;
        node.__setOperator((...args) => {
          if (!("looping" in node.__node))
            node.__node.looping = true;
          if (node.__node.looping) {
            fn(...args);
            setTimeout(() => {
              node.__operator(...args);
            }, node.__node.loop);
          }
        });
        if (node.__node.looping)
          node.__operator();
        let ondelete = (node2) => {
          if (node2.__node.looping)
            node2.__node.looping = false;
        };
        node.__addOndisconnected(ondelete);
      }
    }
  };
  var animate3 = (node, parent, graph3) => {
    if (node.__node.animate === true || node.__animation) {
      let fn = node.__operator;
      node.__setOperator((...args) => {
        if (!("animating" in node.__node))
          node.__node.animating = true;
        if (node.__node.animating) {
          if (typeof node.__animation === "function")
            node.__animation(...args);
          else
            fn(...args);
          requestAnimationFrame(() => {
            node.__operator(...args);
          });
        }
      });
      if (node.__node.animating || (!("animating" in node.__node) || node.__node.animating) && node.__animation)
        setTimeout(() => {
          requestAnimationFrame(node.__operator);
        }, 10);
      let ondelete = (node2) => {
        if (node2.__node.animating)
          node2.__node.animating = false;
      };
      node.__addOndisconnected(ondelete);
    }
  };
  var branching3 = (node, parent, graph3) => {
    if (typeof node.__branch === "object" && node.__operator && !node.__branchApplied) {
      let fn = node.__operator;
      node.__branchApplied = true;
      node.__operator = (...args) => {
        let result = fn(...args);
        for (const key in node.__branch) {
          let triggered = () => {
            if (typeof node.__branch[key].then === "function") {
              node.__branch[key].then(result);
            } else if (node.__branch[key].then instanceof GraphNode4 && node.__branch[key].then.__operator) {
              node.__branch[key].then.__operator(result);
            } else
              result = node.__branch[key].then;
          };
          if (typeof node.__branch[key].if === "function") {
            if (node.__branch[key].if(result) == true) {
              triggered();
            }
          } else if (node.__branch[key].if === result) {
            triggered();
          }
        }
        return result;
      };
    }
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].branch && !node.__listeners[key].branchApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].branchApplied = true;
            node.__listeners.callback = (ret) => {
              let triggered = () => {
                if (typeof node.__listeners[key].branch.then === "function") {
                  ret = node.__listeners[key].branch.then(ret);
                } else if (node.__listeners[key].branch.then instanceof GraphNode4 && node.__listeners[key].branch.then.__operator) {
                  ret = node.__listeners[key].branch.then.__operator(ret);
                } else
                  ret = node.__listeners[key].branch.then;
              };
              if (typeof node.__listeners[key].branch.if === "function") {
                if (node.__listeners[key].branch.if(ret)) {
                  triggered();
                }
              } else if (node.__listeners[key].branch.if === ret) {
                triggered();
              }
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var triggerListenerOncreate3 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (node.__listeners[key].oncreate) {
            node.__listeners[key].callback(node.__listeners[key].oncreate);
          }
        }
      }
    }
  };
  var bindListener3 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].binding === "object") {
            node.__listeners.callback = node.__listeners.callback.bind(node.__listeners[key].binding);
          }
        }
      }
    }
  };
  var transformListenerResult3 = (node, parent, graph3) => {
    if (node.__listeners) {
      for (const key in node.__listeners) {
        if (typeof node.__listeners[key] === "object") {
          if (typeof node.__listeners[key].transform === "function" && !node.__listeners[key].transformApplied) {
            let fn = node.__listeners[key].callback;
            node.__listeners[key].transformApplied = true;
            node.__listeners.callback = (ret) => {
              ret = node.__listeners[key].transform(ret);
              return fn(ret);
            };
          }
        }
      }
    }
  };
  var substitute__operator3 = (node, parent, graph3) => {
    if (node.post && !node.__operator) {
      node.__setOperator(node.post);
    } else if (!node.__operator && typeof node.get == "function") {
      node.__setOperator(node.get);
    }
    if (!node.get && node.__operator) {
      node.get = node.__operator;
    }
    if (node.aliases) {
      node.aliases.forEach((a) => {
        graph3.set(a, node);
        let ondelete = (node2) => {
          graph3.__node.nodes.delete(a);
        };
        node.__addOndisconnected(ondelete);
      });
    }
    if (typeof graph3.__node.roots?.[node.__node.tag] === "object" && node.get)
      graph3.__node.roots[node.__node.tag].get = node.get;
  };
  var loaders3 = { backprop: backprop3, loop: loop3, animate: animate3, branching: branching3, triggerListenerOncreate: triggerListenerOncreate3, bindListener: bindListener3, transformListenerResult: transformListenerResult3, substitute__operator: substitute__operator3 };
  var recursivelyStringifyFunctions = (obj) => {
    let cpy = {};
    for (const key in obj) {
      if (typeof obj[key] === "object") {
        cpy[key] = recursivelyStringifyFunctions(obj[key]);
      } else if (typeof obj[key] === "function") {
        cpy[key] = obj[key].toString();
      } else
        cpy[key] = obj[key];
    }
    return cpy;
  };
  function parseFunctionFromText2(method = "") {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf("=>") + 1;
      if (startindex <= 0) {
        startindex = methodString.indexOf("){");
      }
      if (startindex <= 0) {
        startindex = methodString.indexOf(") {");
      }
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    if (newFuncHead.includes("function")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else {
        try {
          newFunc = (0, eval)(method);
        } catch {
        }
      }
    }
    return newFunc;
  }
  var stringifyWithCircularRefs2 = function() {
    const refs = /* @__PURE__ */ new Map();
    const parents = [];
    const path = ["this"];
    function clear() {
      refs.clear();
      parents.length = 0;
      path.length = 1;
    }
    function updateParents(key, value) {
      var idx = parents.length - 1;
      var prev = parents[idx];
      if (typeof prev === "object") {
        if (prev[key] === value || idx === 0) {
          path.push(key);
          parents.push(value.pushed);
        } else {
          while (idx-- >= 0) {
            prev = parents[idx];
            if (typeof prev === "object") {
              if (prev[key] === value) {
                idx += 2;
                parents.length = idx;
                path.length = idx;
                --idx;
                parents[idx] = value;
                path[idx] = key;
                break;
              }
            }
            idx--;
          }
        }
      }
    }
    function checkCircular(key, value) {
      if (value != null) {
        if (typeof value === "object") {
          if (key) {
            updateParents(key, value);
          }
          let other = refs.get(value);
          if (other) {
            return "[Circular Reference]" + other;
          } else {
            refs.set(value, path.join("."));
          }
        }
      }
      return value;
    }
    return function stringifyWithCircularRefs22(obj, space) {
      try {
        parents.push(obj);
        return JSON.stringify(obj, checkCircular, space);
      } finally {
        clear();
      }
    };
  }();
  if (JSON.stringifyWithCircularRefs === void 0) {
    JSON.stringifyWithCircularRefs = stringifyWithCircularRefs2;
  }
  var stringifyFast2 = function() {
    const refs = /* @__PURE__ */ new Map();
    const parents = [];
    const path = ["this"];
    function clear() {
      refs.clear();
      parents.length = 0;
      path.length = 1;
    }
    function updateParents(key, value) {
      var idx = parents.length - 1;
      if (parents[idx]) {
        var prev = parents[idx];
        if (typeof prev === "object") {
          if (prev[key] === value || idx === 0) {
            path.push(key);
            parents.push(value.pushed);
          } else {
            while (idx-- >= 0) {
              prev = parents[idx];
              if (typeof prev === "object") {
                if (prev[key] === value) {
                  idx += 2;
                  parents.length = idx;
                  path.length = idx;
                  --idx;
                  parents[idx] = value;
                  path[idx] = key;
                  break;
                }
              }
              idx++;
            }
          }
        }
      }
    }
    function checkValues(key, value) {
      let val;
      if (value != null) {
        if (typeof value === "object") {
          let c = value.constructor.name;
          if (key && c === "Object") {
            updateParents(key, value);
          }
          let other = refs.get(value);
          if (other) {
            return "[Circular Reference]" + other;
          } else {
            refs.set(value, path.join("."));
          }
          if (c === "Array") {
            if (value.length > 20) {
              val = value.slice(value.length - 20);
            } else
              val = value;
          } else if (c.includes("Set")) {
            val = Array.from(value);
          } else if (c !== "Object" && c !== "Number" && c !== "String" && c !== "Boolean") {
            val = "instanceof_" + c;
          } else if (c === "Object") {
            let obj = {};
            for (const prop in value) {
              if (value[prop] == null) {
                obj[prop] = value[prop];
              } else if (Array.isArray(value[prop])) {
                if (value[prop].length > 20)
                  obj[prop] = value[prop].slice(value[prop].length - 20);
                else
                  obj[prop] = value[prop];
              } else if (value[prop].constructor.name === "Object") {
                obj[prop] = {};
                for (const p2 in value[prop]) {
                  if (Array.isArray(value[prop][p2])) {
                    if (value[prop][p2].length > 20)
                      obj[prop][p2] = value[prop][p2].slice(value[prop][p2].length - 20);
                    else
                      obj[prop][p2] = value[prop][p2];
                  } else {
                    if (value[prop][p2] != null) {
                      let con = value[prop][p2].constructor.name;
                      if (con.includes("Set")) {
                        obj[prop][p2] = Array.from(value[prop][p2]);
                      } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                        obj[prop][p2] = "instanceof_" + con;
                      } else {
                        obj[prop][p2] = value[prop][p2];
                      }
                    } else {
                      obj[prop][p2] = value[prop][p2];
                    }
                  }
                }
              } else {
                let con = value[prop].constructor.name;
                if (con.includes("Set")) {
                  obj[prop] = Array.from(value[prop]);
                } else if (con !== "Number" && con !== "String" && con !== "Boolean") {
                  obj[prop] = "instanceof_" + con;
                } else {
                  obj[prop] = value[prop];
                }
              }
            }
            val = obj;
          } else {
            val = value;
          }
        } else {
          val = value;
        }
      }
      return val;
    }
    return function stringifyFast22(obj, space) {
      parents.push(obj);
      let res2 = JSON.stringify(obj, checkValues, space);
      clear();
      return res2;
    };
  }();
  if (JSON.stringifyFast === void 0) {
    JSON.stringifyFast = stringifyFast2;
  }
  function methodstrings(node) {
    if (typeof node.__methods === "object") {
      for (const key in node.__methods) {
        let fstr = node.__methods[key];
        let fn = typeof fstr === "function" ? fstr : parseFunctionFromText2(fstr);
        if (key === "__operator") {
          node.__setOperator(fn);
        } else {
          node[key] = fn.bind(node);
        }
      }
    }
  }
  var Service3 = class extends Graph4 {
    constructor(options) {
      super({ ...options, loaders: options?.loaders ? Object.assign({ ...loaders3 }, options.loaders) : { ...loaders3 } });
      this.name = `service${Math.floor(Math.random() * 1e15)}`;
      this.addServices = (services) => {
        for (const s in services) {
          if (typeof services[s] === "function")
            services[s] = new services[s]();
          if (services[s]?.__node?.loaders)
            Object.assign(this.__node.loaders, services[s].__node.loaders);
          if (services[s]?.__node?.nodes) {
            services[s].__node.nodes.forEach((n, tag) => {
              if (!this.get(tag)) {
                this.set(tag, n);
              } else
                this.set(s + "." + tag, n);
            });
            this.__node.nodes.forEach((n, k) => {
              if (!services[s].__node.nodes.get(k))
                services[s].__node.nodes.set(k, n);
            });
            let set = this.set;
            this.set = (tag, node) => {
              services[s].set(tag, node);
              return set(tag, node);
            };
            let del = this.delete;
            this.delete = (tag) => {
              services[s].delete(tag);
              return del(tag);
            };
          } else if (typeof services[s] === "object") {
            this.load(services[s]);
          }
        }
      };
      this.handleMethod = (route, method, args) => {
        let m = method.toLowerCase();
        let src = this.__node.nodes.get(route);
        if (!src) {
          src = this.__node.roots[route];
        }
        if (src?.[m]) {
          if (typeof src[m] !== "function") {
            if (args) {
              if (Array.isArray(args) && args.length === 1)
                src[m] = args[0];
              else
                src[m] = args;
              return;
            }
            return src[m];
          } else {
            if (Array.isArray(args))
              return src[m](...args);
            else
              return src[m](args);
          }
        } else
          return this.handleServiceMessage({ route, args, method });
      };
      this.transmit = (...args) => {
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.receive = (...args) => {
        if (args[0]) {
          if (typeof args[0] === "string") {
            let substr = args[0].substring(0, 8);
            if (substr.includes("{") || substr.includes("[")) {
              if (substr.includes("\\"))
                args[0] = args[0].replace(/\\/g, "");
              if (args[0][0] === '"') {
                args[0] = args[0].substring(1, args[0].length - 1);
              }
              ;
              args[0] = JSON.parse(args[0]);
            }
          }
        }
        if (typeof args[0] === "object") {
          if (args[0].method) {
            return this.handleMethod(args[0].route, args[0].method, args[0].args);
          } else if (args[0].route) {
            return this.handleServiceMessage(args[0]);
          } else if (args[0].node) {
            return this.handleGraphNodeCall(args[0].node, args[0].args);
          } else if (this.__node.keepState) {
            if (args[0].route)
              this.setState({ [args[0].route]: args[0].args });
            if (args[0].node)
              this.setState({ [args[0].node]: args[0].args });
          }
          return args;
        } else
          return args;
      };
      this.pipe = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode4) {
          if (callback)
            return this.subscribe(source, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.subscribe(source, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.subscribe(source, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.pipeOnce = (source, destination, endpoint, method, callback) => {
        if (source instanceof GraphNode4) {
          if (callback)
            return source.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              let mod = callback(res2);
              if (mod !== void 0)
                this.transmit({ route: destination, args: mod, method });
              else
                this.transmit({ route: destination, args: res2, method }, endpoint);
            });
          else
            return this.__node.state.subscribeEventOnce(source.__node.unique, (res2) => {
              this.transmit({ route: destination, args: res2, method }, endpoint);
            });
        } else if (typeof source === "string")
          return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique, (res2) => {
            this.transmit({ route: destination, args: res2, method }, endpoint);
          });
      };
      this.terminate = (...args) => {
      };
      this.isTypedArray = isTypedArray3;
      this.recursivelyAssign = recursivelyAssign23;
      this.spliceTypedArray = spliceTypedArray3;
      this.ping = () => {
        console.log("pinged!");
        return "pong";
      };
      this.echo = (...args) => {
        this.transmit(...args);
        return args;
      };
      if (options?.services)
        this.addServices(options.services);
      this.load(this);
    }
    handleServiceMessage(message) {
      let call;
      if (typeof message === "object") {
        if (message.route)
          call = message.route;
        else if (message.node)
          call = message.node;
      }
      if (call) {
        if (Array.isArray(message.args))
          return this.run(call, ...message.args);
        else
          return this.run(call, message.args);
      } else
        return message;
    }
    handleGraphNodeCall(route, args) {
      if (!route)
        return args;
      if (args?.args) {
        this.handleServiceMessage(args);
      } else if (Array.isArray(args))
        return this.run(route, ...args);
      else
        return this.run(route, args);
    }
  };
  function isTypedArray3(x3) {
    return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
  }
  var recursivelyAssign23 = (target, obj) => {
    for (const key in obj) {
      if (obj[key].constructor.name === "Object" && !Array.isArray(obj[key])) {
        if (obj[key].constructor.name === "Object" && !Array.isArray(target[key]))
          recursivelyAssign23(target[key], obj[key]);
        else
          target[key] = recursivelyAssign23({}, obj[key]);
      } else
        target[key] = obj[key];
    }
    return target;
  };
  function spliceTypedArray3(arr, start, end) {
    let s = arr.subarray(0, start);
    let e;
    if (end) {
      e = arr.subarray(end + 1);
    }
    let ta;
    if (s.length > 0 || e?.length > 0)
      ta = new arr.constructor(s.length + e.length);
    if (ta) {
      if (s.length > 0)
        ta.set(s);
      if (e && e.length > 0)
        ta.set(e, s.length);
    }
    return ta;
  }
  var nodeTemplates = {};
  var remoteGraphRoutes = { transferNode: (properties, connection, name2) => {
    let str22;
    if (typeof properties === "object") {
      if (!properties.__node) {
        properties.__node = {};
      }
      if (name2)
        properties.__node.tag = name2;
      for (const key in properties) {
        if (typeof properties[key] === "function") {
          if (!properties.__methods)
            properties.__methods = {};
          properties.__methods[key] = properties[key].toString();
        }
      }
      str22 = recursivelyStringifyFunctions(properties);
    } else if (typeof properties === "function")
      str22 = properties.toString();
    else if (typeof properties === "string")
      str22 = properties;
    if (str22) {
      if (connection.run)
        return connection.run("setNode", [str22]);
      else if (connection.postMessage) {
        connection.postMessage({ route: "setNode", args: str22 }, void 0);
        return new Promise((r) => r(name2));
      } else if (connection.send) {
        connection.send(JSON.stringify({ route: "setNode", args: str22 }));
        return new Promise((r) => r(name2));
      }
    }
  }, setNode: function(properties) {
    if (typeof properties === "object") {
      if (properties.__methods) {
        if (!this.__node.graph.__node.loaders.methodstrings) {
          this.__node.graph.__node.loaders.methodstrings = methodstrings;
        }
      }
    }
    if (typeof properties === "string") {
      let f = parseFunctionFromText2(properties);
      if (typeof f === "function")
        properties = { __operator: f, __node: { tag: f.name } };
      else {
        f = JSON.parse(properties);
        if (typeof f === "object")
          properties = f;
      }
    }
    if (typeof properties === "object" || typeof properties === "function") {
      let template = Object.assign({}, properties);
      let node = this.__node.graph.add(properties);
      nodeTemplates[node.__node.tag] = template;
      return node.__node.tag;
    } else
      return false;
  }, proxyRemoteNode: function(name2, connection) {
    return new Promise((res2, rej) => {
      connection.run("getNodeProperties", name2).then((props) => {
        let proxy = {};
        if (typeof props === "object") {
          for (const key in props) {
            if (props[key] === "function") {
              proxy[key] = (...args) => {
                return new Promise((r) => {
                  connection.run(name2, args, key).then(r);
                });
              };
            } else {
              Object.defineProperty(proxy, key, { get: () => {
                return new Promise((r) => {
                  connection.run(name2, void 0, key).then(r);
                });
              }, set: (value) => {
                connection.post(name2, value, key);
              }, configurable: true, enumerable: true });
            }
          }
        }
        res2(proxy);
      });
    });
  }, makeNodeTransferrable: function(properties, name2) {
    if (!properties.__node) {
      properties.__node = {};
    }
    if (name2)
      properties.__node.tag = name2;
    for (const key in properties) {
      if (typeof properties[key] === "function") {
        if (!properties.__methods)
          properties.__methods = {};
        properties.__methods[key] = properties[key].toString();
      }
    }
    const str22 = recursivelyStringifyFunctions(properties);
    return str22;
  }, setTemplate: function(properties, name2) {
    if (typeof properties === "object") {
      if (properties.__methods) {
        if (!this.__node.graph.__node.loaders.methodstrings) {
          this.__node.graph.__node.loaders.methodstrings = methodstrings;
        }
      }
    }
    if (typeof properties === "string") {
      let f = parseFunctionFromText2(properties);
      if (typeof f === "function") {
        if (!name2)
          name2 = f.name;
        properties = { __operator: f, __node: { tag: name2 } };
      } else {
        f = JSON.parse(properties);
        if (typeof f === "object") {
          properties = f;
          if (!name2 && f.__node?.tag)
            name2 = f.__node.tag;
        }
      }
    }
    if (!name2)
      name2 = `node${Math.floor(Math.random() * 1e15)}`;
    if (typeof properties === "object" || typeof properties === "function") {
      nodeTemplates[name2] = properties;
      return name2;
    } else
      return false;
  }, loadFromTemplate: function(templateName, name2, properties) {
    if (nodeTemplates[templateName]) {
      let cpy = recursivelyAssign23({}, nodeTemplates[templateName]);
      if (name2) {
        if (!cpy.__node)
          cpy.__node = {};
        cpy.__node.tag = name2;
      }
      if (properties)
        Object.assign(cpy, properties);
      let node = this.__node.graph.add(cpy);
      return node.__node.tag;
    }
  }, setMethod: function(route, fn, methodKey) {
    if (typeof fn === "string") {
      let f = parseFunctionFromText2(fn);
      if (typeof f === "function")
        fn = f;
    }
    if (!methodKey && typeof fn === "function")
      methodKey = fn.name;
    if (this.__node.graph.get(route)) {
      this.__node.graph.get(route)[methodKey] = fn;
    } else
      this.__node.graph.add({ __node: { tag: methodKey, [methodKey]: fn } });
    return true;
  }, assignNode: function(nodeTag, source) {
    if (this.__node.graph.get(nodeTag) && typeof source === "object") {
      Object.assign(this.__node.graph.get(nodeTag), source);
    }
  }, getNodeProperties: function(nodeTag) {
    let node = this.__node.graph.get(nodeTag);
    if (node) {
      let properties = Object.getOwnPropertyNames(node);
      let result = {};
      for (const key in properties) {
        result[key] = typeof node[key];
      }
      return result;
    }
    return void 0;
  }, transferClass: (classObj, connection, className) => {
    if (typeof classObj === "object") {
      let str22 = classObj.toString();
      let message = { route: "receiveClass", args: [str22, className] };
      if (connection.run)
        return connection.run("receiveClass", [str22, className]);
      else if (connection.postMessage) {
        connection.postMessage({ route: "receiveClass", args: [str22, className] }, void 0);
        return new Promise((r) => r(name));
      } else if (connection.send) {
        connection.send(JSON.stringify({ route: "receiveClass", args: [str22, className] }));
        return new Promise((r) => r(name));
      }
      return message;
    }
    return false;
  }, receiveClass: function(stringified, className) {
    if (typeof stringified === "string") {
      if (stringified.indexOf("class") === 0) {
        let cls = (0, eval)("(" + stringified + ")");
        let name2 = className;
        if (!name2)
          name2 = cls.name;
        this.__node.graph[name2] = cls;
        return true;
      }
    }
    return false;
  }, transferFunction: (fn, connection, fnName) => {
    if (!fnName)
      fnName = fn.name;
    let str22 = fn.toString();
    let message = { route: "receiveClass", args: [str22, fnName] };
    if (connection.run)
      return connection.run("setFunction", [str22, fnName]);
    else if (connection.postMessage) {
      connection.postMessage({ route: "setFunction", args: [str22, fnName] }, void 0);
      return new Promise((r) => r(name));
    } else if (connection.send) {
      connection.send(JSON.stringify({ route: "setFunction", args: [str22, fnName] }));
      return new Promise((r) => r(name));
    }
    return message;
  }, setGlobal: (key, value) => {
    globalThis[key] = value;
    return true;
  }, assignGlobalObject: (target, source) => {
    if (!globalThis[target])
      return false;
    if (typeof source === "object")
      Object.assign(globalThis[target], source);
    return true;
  }, setValue: function(key, value) {
    this.__node.graph[key] = value;
    return true;
  }, assignObject: function(target, source) {
    if (!this.__node.graph[target])
      return false;
    if (typeof source === "object")
      Object.assign(this.__node.graph[target], source);
    return true;
  }, setGlobalFunction: (fn, fnName) => {
    if (typeof fn === "string")
      fn = parseFunctionFromText2(fn);
    if (typeof fn === "function") {
      if (!fnName)
        fnName = fn.name;
      globalThis[fnName] = fn;
      return true;
    }
    return false;
  }, setGraphFunction: function(fn, fnName) {
    if (typeof fn === "string")
      fn = parseFunctionFromText2(fn);
    if (typeof fn === "function") {
      if (!fnName)
        fnName = fn.name;
      this.__node.graph[fnName] = fn;
      return true;
    }
    return false;
  } };
  var sjcl2 = { cipher: {}, hash: {}, keyexchange: {}, mode: {}, misc: {}, codec: {}, exception: { corrupt: function(a) {
    this.toString = function() {
      return "CORRUPT: " + this.message;
    };
    this.message = a;
  }, invalid: function(a) {
    this.toString = function() {
      return "INVALID: " + this.message;
    };
    this.message = a;
  }, bug: function(a) {
    this.toString = function() {
      return "BUG: " + this.message;
    };
    this.message = a;
  }, notReady: function(a) {
    this.toString = function() {
      return "NOT READY: " + this.message;
    };
    this.message = a;
  } } };
  sjcl2.cipher.aes = function(a) {
    this.s[0][0][0] || this.O();
    var b, c, d2, e, f = this.s[0][4], g2 = this.s[1];
    b = a.length;
    var h = 1;
    if (4 !== b && 6 !== b && 8 !== b)
      throw new sjcl2.exception.invalid("invalid aes key size");
    this.b = [d2 = a.slice(0), e = []];
    for (a = b; a < 4 * b + 28; a++) {
      c = d2[a - 1];
      if (0 === a % b || 8 === b && 4 === a % b)
        c = f[c >>> 24] << 24 ^ f[c >> 16 & 255] << 16 ^ f[c >> 8 & 255] << 8 ^ f[c & 255], 0 === a % b && (c = c << 8 ^ c >>> 24 ^ h << 24, h = h << 1 ^ 283 * (h >> 7));
      d2[a] = d2[a - b] ^ c;
    }
    for (b = 0; a; b++, a--)
      c = d2[b & 3 ? a : a - 4], e[b] = 4 >= a || 4 > b ? c : g2[0][f[c >>> 24]] ^ g2[1][f[c >> 16 & 255]] ^ g2[2][f[c >> 8 & 255]] ^ g2[3][f[c & 255]];
  };
  sjcl2.cipher.aes.prototype = { encrypt: function(a) {
    return t2(this, a, 0);
  }, decrypt: function(a) {
    return t2(this, a, 1);
  }, s: [[[], [], [], [], []], [[], [], [], [], []]], O: function() {
    var a = this.s[0], b = this.s[1], c = a[4], d2 = b[4], e, f, g2, h = [], k = [], l, n, m, p2;
    for (e = 0; 256 > e; e++)
      k[(h[e] = e << 1 ^ 283 * (e >> 7)) ^ e] = e;
    for (f = g2 = 0; !c[f]; f ^= l || 1, g2 = k[g2] || 1)
      for (m = g2 ^ g2 << 1 ^ g2 << 2 ^ g2 << 3 ^ g2 << 4, m = m >> 8 ^ m & 255 ^ 99, c[f] = m, d2[m] = f, n = h[e = h[l = h[f]]], p2 = 16843009 * n ^ 65537 * e ^ 257 * l ^ 16843008 * f, n = 257 * h[m] ^ 16843008 * m, e = 0; 4 > e; e++)
        a[e][f] = n = n << 24 ^ n >>> 8, b[e][m] = p2 = p2 << 24 ^ p2 >>> 8;
    for (e = 0; 5 > e; e++)
      a[e] = a[e].slice(0), b[e] = b[e].slice(0);
  } };
  function t2(a, b, c) {
    if (4 !== b.length)
      throw new sjcl2.exception.invalid("invalid aes block size");
    var d2 = a.b[c], e = b[0] ^ d2[0], f = b[c ? 3 : 1] ^ d2[1], g2 = b[2] ^ d2[2];
    b = b[c ? 1 : 3] ^ d2[3];
    var h, k, l, n = d2.length / 4 - 2, m, p2 = 4, r = [0, 0, 0, 0];
    h = a.s[c];
    a = h[0];
    var q = h[1], v2 = h[2], w = h[3], x3 = h[4];
    for (m = 0; m < n; m++)
      h = a[e >>> 24] ^ q[f >> 16 & 255] ^ v2[g2 >> 8 & 255] ^ w[b & 255] ^ d2[p2], k = a[f >>> 24] ^ q[g2 >> 16 & 255] ^ v2[b >> 8 & 255] ^ w[e & 255] ^ d2[p2 + 1], l = a[g2 >>> 24] ^ q[b >> 16 & 255] ^ v2[e >> 8 & 255] ^ w[f & 255] ^ d2[p2 + 2], b = a[b >>> 24] ^ q[e >> 16 & 255] ^ v2[f >> 8 & 255] ^ w[g2 & 255] ^ d2[p2 + 3], p2 += 4, e = h, f = k, g2 = l;
    for (m = 0; 4 > m; m++)
      r[c ? 3 & -m : m] = x3[e >>> 24] << 24 ^ x3[f >> 16 & 255] << 16 ^ x3[g2 >> 8 & 255] << 8 ^ x3[b & 255] ^ d2[p2++], h = e, e = f, f = g2, g2 = b, b = h;
    return r;
  }
  sjcl2.bitArray = { bitSlice: function(a, b, c) {
    a = sjcl2.bitArray.$(a.slice(b / 32), 32 - (b & 31)).slice(1);
    return void 0 === c ? a : sjcl2.bitArray.clamp(a, c - b);
  }, extract: function(a, b, c) {
    var d2 = Math.floor(-b - c & 31);
    return ((b + c - 1 ^ b) & -32 ? a[b / 32 | 0] << 32 - d2 ^ a[b / 32 + 1 | 0] >>> d2 : a[b / 32 | 0] >>> d2) & (1 << c) - 1;
  }, concat: function(a, b) {
    if (0 === a.length || 0 === b.length)
      return a.concat(b);
    var c = a[a.length - 1], d2 = sjcl2.bitArray.getPartial(c);
    return 32 === d2 ? a.concat(b) : sjcl2.bitArray.$(b, d2, c | 0, a.slice(0, a.length - 1));
  }, bitLength: function(a) {
    var b = a.length;
    return 0 === b ? 0 : 32 * (b - 1) + sjcl2.bitArray.getPartial(a[b - 1]);
  }, clamp: function(a, b) {
    if (32 * a.length < b)
      return a;
    a = a.slice(0, Math.ceil(b / 32));
    var c = a.length;
    b = b & 31;
    0 < c && b && (a[c - 1] = sjcl2.bitArray.partial(b, a[c - 1] & 2147483648 >> b - 1, 1));
    return a;
  }, partial: function(a, b, c) {
    return 32 === a ? b : (c ? b | 0 : b << 32 - a) + 1099511627776 * a;
  }, getPartial: function(a) {
    return Math.round(a / 1099511627776) || 32;
  }, equal: function(a, b) {
    if (sjcl2.bitArray.bitLength(a) !== sjcl2.bitArray.bitLength(b))
      return false;
    var c = 0, d2;
    for (d2 = 0; d2 < a.length; d2++)
      c |= a[d2] ^ b[d2];
    return 0 === c;
  }, $: function(a, b, c, d2) {
    var e;
    e = 0;
    for (void 0 === d2 && (d2 = []); 32 <= b; b -= 32)
      d2.push(c), c = 0;
    if (0 === b)
      return d2.concat(a);
    for (e = 0; e < a.length; e++)
      d2.push(c | a[e] >>> b), c = a[e] << 32 - b;
    e = a.length ? a[a.length - 1] : 0;
    a = sjcl2.bitArray.getPartial(e);
    d2.push(sjcl2.bitArray.partial(b + a & 31, 32 < b + a ? c : d2.pop(), 1));
    return d2;
  }, i: function(a, b) {
    return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]];
  }, byteswapM: function(a) {
    var b, c;
    for (b = 0; b < a.length; ++b)
      c = a[b], a[b] = c >>> 24 | c >>> 8 & 65280 | (c & 65280) << 8 | c << 24;
    return a;
  } };
  sjcl2.codec.utf8String = { fromBits: function(a) {
    var b = "", c = sjcl2.bitArray.bitLength(a), d2, e;
    for (d2 = 0; d2 < c / 8; d2++)
      0 === (d2 & 3) && (e = a[d2 / 4]), b += String.fromCharCode(e >>> 8 >>> 8 >>> 8), e <<= 8;
    return decodeURIComponent(escape(b));
  }, toBits: function(a) {
    a = unescape(encodeURIComponent(a));
    var b = [], c, d2 = 0;
    for (c = 0; c < a.length; c++)
      d2 = d2 << 8 | a.charCodeAt(c), 3 === (c & 3) && (b.push(d2), d2 = 0);
    c & 3 && b.push(sjcl2.bitArray.partial(8 * (c & 3), d2));
    return b;
  } };
  sjcl2.codec.hex = { fromBits: function(a) {
    var b = "", c;
    for (c = 0; c < a.length; c++)
      b += ((a[c] | 0) + 263882790666240).toString(16).substr(4);
    return b.substr(0, sjcl2.bitArray.bitLength(a) / 4);
  }, toBits: function(a) {
    var b, c = [], d2;
    a = a.replace(/\s|0x/g, "");
    d2 = a.length;
    a = a + "00000000";
    for (b = 0; b < a.length; b += 8)
      c.push(parseInt(a.substr(b, 8), 16) ^ 0);
    return sjcl2.bitArray.clamp(c, 4 * d2);
  } };
  sjcl2.codec.base32 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", X: "0123456789ABCDEFGHIJKLMNOPQRSTUV", BITS: 32, BASE: 5, REMAINING: 27, fromBits: function(a, b, c) {
    var d2 = sjcl2.codec.base32.BASE, e = sjcl2.codec.base32.REMAINING, f = "", g2 = 0, h = sjcl2.codec.base32.B, k = 0, l = sjcl2.bitArray.bitLength(a);
    c && (h = sjcl2.codec.base32.X);
    for (c = 0; f.length * d2 < l; )
      f += h.charAt((k ^ a[c] >>> g2) >>> e), g2 < d2 ? (k = a[c] << d2 - g2, g2 += e, c++) : (k <<= d2, g2 -= d2);
    for (; f.length & 7 && !b; )
      f += "=";
    return f;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "").toUpperCase();
    var c = sjcl2.codec.base32.BITS, d2 = sjcl2.codec.base32.BASE, e = sjcl2.codec.base32.REMAINING, f = [], g2, h = 0, k = sjcl2.codec.base32.B, l = 0, n, m = "base32";
    b && (k = sjcl2.codec.base32.X, m = "base32hex");
    for (g2 = 0; g2 < a.length; g2++) {
      n = k.indexOf(a.charAt(g2));
      if (0 > n) {
        if (!b)
          try {
            return sjcl2.codec.base32hex.toBits(a);
          } catch (p2) {
          }
        throw new sjcl2.exception.invalid("this isn't " + m + "!");
      }
      h > e ? (h -= e, f.push(l ^ n >>> h), l = n << c - h) : (h += d2, l ^= n << c - h);
    }
    h & 56 && f.push(sjcl2.bitArray.partial(h & 56, l, 1));
    return f;
  } };
  sjcl2.codec.base32hex = { fromBits: function(a, b) {
    return sjcl2.codec.base32.fromBits(a, b, 1);
  }, toBits: function(a) {
    return sjcl2.codec.base32.toBits(a, 1);
  } };
  sjcl2.codec.base64 = { B: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", fromBits: function(a, b, c) {
    var d2 = "", e = 0, f = sjcl2.codec.base64.B, g2 = 0, h = sjcl2.bitArray.bitLength(a);
    c && (f = f.substr(0, 62) + "-_");
    for (c = 0; 6 * d2.length < h; )
      d2 += f.charAt((g2 ^ a[c] >>> e) >>> 26), 6 > e ? (g2 = a[c] << 6 - e, e += 26, c++) : (g2 <<= 6, e -= 6);
    for (; d2.length & 3 && !b; )
      d2 += "=";
    return d2;
  }, toBits: function(a, b) {
    a = a.replace(/\s|=/g, "");
    var c = [], d2, e = 0, f = sjcl2.codec.base64.B, g2 = 0, h;
    b && (f = f.substr(0, 62) + "-_");
    for (d2 = 0; d2 < a.length; d2++) {
      h = f.indexOf(a.charAt(d2));
      if (0 > h)
        throw new sjcl2.exception.invalid("this isn't base64!");
      26 < e ? (e -= 26, c.push(g2 ^ h >>> e), g2 = h << 32 - e) : (e += 6, g2 ^= h << 32 - e);
    }
    e & 56 && c.push(sjcl2.bitArray.partial(e & 56, g2, 1));
    return c;
  } };
  sjcl2.codec.base64url = { fromBits: function(a) {
    return sjcl2.codec.base64.fromBits(a, 1, 1);
  }, toBits: function(a) {
    return sjcl2.codec.base64.toBits(a, 1);
  } };
  sjcl2.hash.sha256 = function(a) {
    this.b[0] || this.O();
    a ? (this.F = a.F.slice(0), this.A = a.A.slice(0), this.l = a.l) : this.reset();
  };
  sjcl2.hash.sha256.hash = function(a) {
    return new sjcl2.hash.sha256().update(a).finalize();
  };
  sjcl2.hash.sha256.prototype = { blockSize: 512, reset: function() {
    this.F = this.Y.slice(0);
    this.A = [];
    this.l = 0;
    return this;
  }, update: function(a) {
    "string" === typeof a && (a = sjcl2.codec.utf8String.toBits(a));
    var b, c = this.A = sjcl2.bitArray.concat(this.A, a);
    b = this.l;
    a = this.l = b + sjcl2.bitArray.bitLength(a);
    if (9007199254740991 < a)
      throw new sjcl2.exception.invalid("Cannot hash more than 2^53 - 1 bits");
    if ("undefined" !== typeof Uint32Array) {
      var d2 = new Uint32Array(c), e = 0;
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u2(this, d2.subarray(16 * e, 16 * (e + 1))), e += 1;
      c.splice(0, 16 * e);
    } else
      for (b = 512 + b - (512 + b & 511); b <= a; b += 512)
        u2(this, c.splice(0, 16));
    return this;
  }, finalize: function() {
    var a, b = this.A, c = this.F, b = sjcl2.bitArray.concat(b, [sjcl2.bitArray.partial(1, 1)]);
    for (a = b.length + 2; a & 15; a++)
      b.push(0);
    b.push(Math.floor(this.l / 4294967296));
    for (b.push(this.l | 0); b.length; )
      u2(this, b.splice(0, 16));
    this.reset();
    return c;
  }, Y: [], b: [], O: function() {
    function a(a2) {
      return 4294967296 * (a2 - Math.floor(a2)) | 0;
    }
    for (var b = 0, c = 2, d2, e; 64 > b; c++) {
      e = true;
      for (d2 = 2; d2 * d2 <= c; d2++)
        if (0 === c % d2) {
          e = false;
          break;
        }
      e && (8 > b && (this.Y[b] = a(Math.pow(c, 0.5))), this.b[b] = a(Math.pow(c, 1 / 3)), b++);
    }
  } };
  function u2(a, b) {
    var c, d2, e, f = a.F, g2 = a.b, h = f[0], k = f[1], l = f[2], n = f[3], m = f[4], p2 = f[5], r = f[6], q = f[7];
    for (c = 0; 64 > c; c++)
      16 > c ? d2 = b[c] : (d2 = b[c + 1 & 15], e = b[c + 14 & 15], d2 = b[c & 15] = (d2 >>> 7 ^ d2 >>> 18 ^ d2 >>> 3 ^ d2 << 25 ^ d2 << 14) + (e >>> 17 ^ e >>> 19 ^ e >>> 10 ^ e << 15 ^ e << 13) + b[c & 15] + b[c + 9 & 15] | 0), d2 = d2 + q + (m >>> 6 ^ m >>> 11 ^ m >>> 25 ^ m << 26 ^ m << 21 ^ m << 7) + (r ^ m & (p2 ^ r)) + g2[c], q = r, r = p2, p2 = m, m = n + d2 | 0, n = l, l = k, k = h, h = d2 + (k & l ^ n & (k ^ l)) + (k >>> 2 ^ k >>> 13 ^ k >>> 22 ^ k << 30 ^ k << 19 ^ k << 10) | 0;
    f[0] = f[0] + h | 0;
    f[1] = f[1] + k | 0;
    f[2] = f[2] + l | 0;
    f[3] = f[3] + n | 0;
    f[4] = f[4] + m | 0;
    f[5] = f[5] + p2 | 0;
    f[6] = f[6] + r | 0;
    f[7] = f[7] + q | 0;
  }
  sjcl2.mode.ccm = { name: "ccm", G: [], listenProgress: function(a) {
    sjcl2.mode.ccm.G.push(a);
  }, unListenProgress: function(a) {
    a = sjcl2.mode.ccm.G.indexOf(a);
    -1 < a && sjcl2.mode.ccm.G.splice(a, 1);
  }, fa: function(a) {
    var b = sjcl2.mode.ccm.G.slice(), c;
    for (c = 0; c < b.length; c += 1)
      b[c](a);
  }, encrypt: function(a, b, c, d2, e) {
    var f, g2 = b.slice(0), h = sjcl2.bitArray, k = h.bitLength(c) / 8, l = h.bitLength(g2) / 8;
    e = e || 64;
    d2 = d2 || [];
    if (7 > k)
      throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");
    for (f = 2; 4 > f && l >>> 8 * f; f++)
      ;
    f < 15 - k && (f = 15 - k);
    c = h.clamp(c, 8 * (15 - f));
    b = sjcl2.mode.ccm.V(a, b, c, d2, e, f);
    g2 = sjcl2.mode.ccm.C(a, g2, c, b, e, f);
    return h.concat(g2.data, g2.tag);
  }, decrypt: function(a, b, c, d2, e) {
    e = e || 64;
    d2 = d2 || [];
    var f = sjcl2.bitArray, g2 = f.bitLength(c) / 8, h = f.bitLength(b), k = f.clamp(b, h - e), l = f.bitSlice(b, h - e), h = (h - e) / 8;
    if (7 > g2)
      throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");
    for (b = 2; 4 > b && h >>> 8 * b; b++)
      ;
    b < 15 - g2 && (b = 15 - g2);
    c = f.clamp(c, 8 * (15 - b));
    k = sjcl2.mode.ccm.C(a, k, c, l, e, b);
    a = sjcl2.mode.ccm.V(a, k.data, c, d2, e, b);
    if (!f.equal(k.tag, a))
      throw new sjcl2.exception.corrupt("ccm: tag doesn't match");
    return k.data;
  }, na: function(a, b, c, d2, e, f) {
    var g2 = [], h = sjcl2.bitArray, k = h.i;
    d2 = [h.partial(8, (b.length ? 64 : 0) | d2 - 2 << 2 | f - 1)];
    d2 = h.concat(d2, c);
    d2[3] |= e;
    d2 = a.encrypt(d2);
    if (b.length)
      for (c = h.bitLength(b) / 8, 65279 >= c ? g2 = [h.partial(16, c)] : 4294967295 >= c && (g2 = h.concat([h.partial(16, 65534)], [c])), g2 = h.concat(g2, b), b = 0; b < g2.length; b += 4)
        d2 = a.encrypt(k(d2, g2.slice(b, b + 4).concat([0, 0, 0])));
    return d2;
  }, V: function(a, b, c, d2, e, f) {
    var g2 = sjcl2.bitArray, h = g2.i;
    e /= 8;
    if (e % 2 || 4 > e || 16 < e)
      throw new sjcl2.exception.invalid("ccm: invalid tag length");
    if (4294967295 < d2.length || 4294967295 < b.length)
      throw new sjcl2.exception.bug("ccm: can't deal with 4GiB or more data");
    c = sjcl2.mode.ccm.na(a, d2, c, e, g2.bitLength(b) / 8, f);
    for (d2 = 0; d2 < b.length; d2 += 4)
      c = a.encrypt(h(c, b.slice(d2, d2 + 4).concat([0, 0, 0])));
    return g2.clamp(c, 8 * e);
  }, C: function(a, b, c, d2, e, f) {
    var g2, h = sjcl2.bitArray;
    g2 = h.i;
    var k = b.length, l = h.bitLength(b), n = k / 50, m = n;
    c = h.concat([h.partial(8, f - 1)], c).concat([0, 0, 0]).slice(0, 4);
    d2 = h.bitSlice(g2(d2, a.encrypt(c)), 0, e);
    if (!k)
      return { tag: d2, data: [] };
    for (g2 = 0; g2 < k; g2 += 4)
      g2 > n && (sjcl2.mode.ccm.fa(g2 / k), n += m), c[3]++, e = a.encrypt(c), b[g2] ^= e[0], b[g2 + 1] ^= e[1], b[g2 + 2] ^= e[2], b[g2 + 3] ^= e[3];
    return { tag: d2, data: h.clamp(b, l) };
  } };
  sjcl2.mode.ocb2 = { name: "ocb2", encrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl2.bitArray.bitLength(c))
      throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
    var g2, h = sjcl2.mode.ocb2.S, k = sjcl2.bitArray, l = k.i, n = [0, 0, 0, 0];
    c = h(a.encrypt(c));
    var m, p2 = [];
    d2 = d2 || [];
    e = e || 64;
    for (g2 = 0; g2 + 4 < b.length; g2 += 4)
      m = b.slice(g2, g2 + 4), n = l(n, m), p2 = p2.concat(l(c, a.encrypt(l(c, m)))), c = h(c);
    m = b.slice(g2);
    b = k.bitLength(m);
    g2 = a.encrypt(l(c, [0, 0, 0, b]));
    m = k.clamp(l(m.concat([0, 0, 0]), g2), b);
    n = l(n, l(m.concat([0, 0, 0]), g2));
    n = a.encrypt(l(n, l(c, h(c))));
    d2.length && (n = l(n, f ? d2 : sjcl2.mode.ocb2.pmac(a, d2)));
    return p2.concat(k.concat(m, k.clamp(n, e)));
  }, decrypt: function(a, b, c, d2, e, f) {
    if (128 !== sjcl2.bitArray.bitLength(c))
      throw new sjcl2.exception.invalid("ocb iv must be 128 bits");
    e = e || 64;
    var g2 = sjcl2.mode.ocb2.S, h = sjcl2.bitArray, k = h.i, l = [0, 0, 0, 0], n = g2(a.encrypt(c)), m, p2, r = sjcl2.bitArray.bitLength(b) - e, q = [];
    d2 = d2 || [];
    for (c = 0; c + 4 < r / 32; c += 4)
      m = k(n, a.decrypt(k(n, b.slice(c, c + 4)))), l = k(l, m), q = q.concat(m), n = g2(n);
    p2 = r - 32 * c;
    m = a.encrypt(k(n, [0, 0, 0, p2]));
    m = k(m, h.clamp(b.slice(c), p2).concat([0, 0, 0]));
    l = k(l, m);
    l = a.encrypt(k(l, k(n, g2(n))));
    d2.length && (l = k(l, f ? d2 : sjcl2.mode.ocb2.pmac(a, d2)));
    if (!h.equal(h.clamp(l, e), h.bitSlice(b, r)))
      throw new sjcl2.exception.corrupt("ocb: tag doesn't match");
    return q.concat(h.clamp(m, p2));
  }, pmac: function(a, b) {
    var c, d2 = sjcl2.mode.ocb2.S, e = sjcl2.bitArray, f = e.i, g2 = [0, 0, 0, 0], h = a.encrypt([0, 0, 0, 0]), h = f(h, d2(d2(h)));
    for (c = 0; c + 4 < b.length; c += 4)
      h = d2(h), g2 = f(g2, a.encrypt(f(h, b.slice(c, c + 4))));
    c = b.slice(c);
    128 > e.bitLength(c) && (h = f(h, d2(h)), c = e.concat(c, [-2147483648, 0, 0, 0]));
    g2 = f(g2, c);
    return a.encrypt(f(d2(f(h, d2(h))), g2));
  }, S: function(a) {
    return [a[0] << 1 ^ a[1] >>> 31, a[1] << 1 ^ a[2] >>> 31, a[2] << 1 ^ a[3] >>> 31, a[3] << 1 ^ 135 * (a[0] >>> 31)];
  } };
  sjcl2.mode.gcm = { name: "gcm", encrypt: function(a, b, c, d2, e) {
    var f = b.slice(0);
    b = sjcl2.bitArray;
    d2 = d2 || [];
    a = sjcl2.mode.gcm.C(true, a, f, d2, c, e || 128);
    return b.concat(a.data, a.tag);
  }, decrypt: function(a, b, c, d2, e) {
    var f = b.slice(0), g2 = sjcl2.bitArray, h = g2.bitLength(f);
    e = e || 128;
    d2 = d2 || [];
    e <= h ? (b = g2.bitSlice(f, h - e), f = g2.bitSlice(f, 0, h - e)) : (b = f, f = []);
    a = sjcl2.mode.gcm.C(false, a, f, d2, c, e);
    if (!g2.equal(a.tag, b))
      throw new sjcl2.exception.corrupt("gcm: tag doesn't match");
    return a.data;
  }, ka: function(a, b) {
    var c, d2, e, f, g2, h = sjcl2.bitArray.i;
    e = [0, 0, 0, 0];
    f = b.slice(0);
    for (c = 0; 128 > c; c++) {
      (d2 = 0 !== (a[Math.floor(c / 32)] & 1 << 31 - c % 32)) && (e = h(e, f));
      g2 = 0 !== (f[3] & 1);
      for (d2 = 3; 0 < d2; d2--)
        f[d2] = f[d2] >>> 1 | (f[d2 - 1] & 1) << 31;
      f[0] >>>= 1;
      g2 && (f[0] ^= -520093696);
    }
    return e;
  }, j: function(a, b, c) {
    var d2, e = c.length;
    b = b.slice(0);
    for (d2 = 0; d2 < e; d2 += 4)
      b[0] ^= 4294967295 & c[d2], b[1] ^= 4294967295 & c[d2 + 1], b[2] ^= 4294967295 & c[d2 + 2], b[3] ^= 4294967295 & c[d2 + 3], b = sjcl2.mode.gcm.ka(b, a);
    return b;
  }, C: function(a, b, c, d2, e, f) {
    var g2, h, k, l, n, m, p2, r, q = sjcl2.bitArray;
    m = c.length;
    p2 = q.bitLength(c);
    r = q.bitLength(d2);
    h = q.bitLength(e);
    g2 = b.encrypt([0, 0, 0, 0]);
    96 === h ? (e = e.slice(0), e = q.concat(e, [1])) : (e = sjcl2.mode.gcm.j(g2, [0, 0, 0, 0], e), e = sjcl2.mode.gcm.j(g2, e, [0, 0, Math.floor(h / 4294967296), h & 4294967295]));
    h = sjcl2.mode.gcm.j(g2, [0, 0, 0, 0], d2);
    n = e.slice(0);
    d2 = h.slice(0);
    a || (d2 = sjcl2.mode.gcm.j(g2, h, c));
    for (l = 0; l < m; l += 4)
      n[3]++, k = b.encrypt(n), c[l] ^= k[0], c[l + 1] ^= k[1], c[l + 2] ^= k[2], c[l + 3] ^= k[3];
    c = q.clamp(c, p2);
    a && (d2 = sjcl2.mode.gcm.j(g2, h, c));
    a = [Math.floor(r / 4294967296), r & 4294967295, Math.floor(p2 / 4294967296), p2 & 4294967295];
    d2 = sjcl2.mode.gcm.j(g2, d2, a);
    k = b.encrypt(e);
    d2[0] ^= k[0];
    d2[1] ^= k[1];
    d2[2] ^= k[2];
    d2[3] ^= k[3];
    return { tag: q.bitSlice(d2, 0, f), data: c };
  } };
  sjcl2.misc.hmac = function(a, b) {
    this.W = b = b || sjcl2.hash.sha256;
    var c = [[], []], d2, e = b.prototype.blockSize / 32;
    this.w = [new b(), new b()];
    a.length > e && (a = b.hash(a));
    for (d2 = 0; d2 < e; d2++)
      c[0][d2] = a[d2] ^ 909522486, c[1][d2] = a[d2] ^ 1549556828;
    this.w[0].update(c[0]);
    this.w[1].update(c[1]);
    this.R = new b(this.w[0]);
  };
  sjcl2.misc.hmac.prototype.encrypt = sjcl2.misc.hmac.prototype.mac = function(a) {
    if (this.aa)
      throw new sjcl2.exception.invalid("encrypt on already updated hmac called!");
    this.update(a);
    return this.digest(a);
  };
  sjcl2.misc.hmac.prototype.reset = function() {
    this.R = new this.W(this.w[0]);
    this.aa = false;
  };
  sjcl2.misc.hmac.prototype.update = function(a) {
    this.aa = true;
    this.R.update(a);
  };
  sjcl2.misc.hmac.prototype.digest = function() {
    var a = this.R.finalize(), a = new this.W(this.w[1]).update(a).finalize();
    this.reset();
    return a;
  };
  sjcl2.misc.pbkdf2 = function(a, b, c, d2, e) {
    c = c || 1e4;
    if (0 > d2 || 0 > c)
      throw new sjcl2.exception.invalid("invalid params to pbkdf2");
    "string" === typeof a && (a = sjcl2.codec.utf8String.toBits(a));
    "string" === typeof b && (b = sjcl2.codec.utf8String.toBits(b));
    e = e || sjcl2.misc.hmac;
    a = new e(a);
    var f, g2, h, k, l = [], n = sjcl2.bitArray;
    for (k = 1; 32 * l.length < (d2 || 1); k++) {
      e = f = a.encrypt(n.concat(b, [k]));
      for (g2 = 1; g2 < c; g2++)
        for (f = a.encrypt(f), h = 0; h < f.length; h++)
          e[h] ^= f[h];
      l = l.concat(e);
    }
    d2 && (l = n.clamp(l, d2));
    return l;
  };
  sjcl2.prng = function(a) {
    this.c = [new sjcl2.hash.sha256()];
    this.m = [0];
    this.P = 0;
    this.H = {};
    this.N = 0;
    this.U = {};
    this.Z = this.f = this.o = this.ha = 0;
    this.b = [0, 0, 0, 0, 0, 0, 0, 0];
    this.h = [0, 0, 0, 0];
    this.L = void 0;
    this.M = a;
    this.D = false;
    this.K = { progress: {}, seeded: {} };
    this.u = this.ga = 0;
    this.I = 1;
    this.J = 2;
    this.ca = 65536;
    this.T = [0, 48, 64, 96, 128, 192, 256, 384, 512, 768, 1024];
    this.da = 3e4;
    this.ba = 80;
  };
  sjcl2.prng.prototype = { randomWords: function(a, b) {
    var c = [], d2;
    d2 = this.isReady(b);
    var e;
    if (d2 === this.u)
      throw new sjcl2.exception.notReady("generator isn't seeded");
    if (d2 & this.J) {
      d2 = !(d2 & this.I);
      e = [];
      var f = 0, g2;
      this.Z = e[0] = (/* @__PURE__ */ new Date()).valueOf() + this.da;
      for (g2 = 0; 16 > g2; g2++)
        e.push(4294967296 * Math.random() | 0);
      for (g2 = 0; g2 < this.c.length && (e = e.concat(this.c[g2].finalize()), f += this.m[g2], this.m[g2] = 0, d2 || !(this.P & 1 << g2)); g2++)
        ;
      this.P >= 1 << this.c.length && (this.c.push(new sjcl2.hash.sha256()), this.m.push(0));
      this.f -= f;
      f > this.o && (this.o = f);
      this.P++;
      this.b = sjcl2.hash.sha256.hash(this.b.concat(e));
      this.L = new sjcl2.cipher.aes(this.b);
      for (d2 = 0; 4 > d2 && (this.h[d2] = this.h[d2] + 1 | 0, !this.h[d2]); d2++)
        ;
    }
    for (d2 = 0; d2 < a; d2 += 4)
      0 === (d2 + 1) % this.ca && y3(this), e = z2(this), c.push(e[0], e[1], e[2], e[3]);
    y3(this);
    return c.slice(0, a);
  }, setDefaultParanoia: function(a, b) {
    if (0 === a && "Setting paranoia=0 will ruin your security; use it only for testing" !== b)
      throw new sjcl2.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");
    this.M = a;
  }, addEntropy: function(a, b, c) {
    c = c || "user";
    var d2, e, f = (/* @__PURE__ */ new Date()).valueOf(), g2 = this.H[c], h = this.isReady(), k = 0;
    d2 = this.U[c];
    void 0 === d2 && (d2 = this.U[c] = this.ha++);
    void 0 === g2 && (g2 = this.H[c] = 0);
    this.H[c] = (this.H[c] + 1) % this.c.length;
    switch (typeof a) {
      case "number":
        void 0 === b && (b = 1);
        this.c[g2].update([d2, this.N++, 1, b, f, 1, a | 0]);
        break;
      case "object":
        c = Object.prototype.toString.call(a);
        if ("[object Uint32Array]" === c) {
          e = [];
          for (c = 0; c < a.length; c++)
            e.push(a[c]);
          a = e;
        } else
          for ("[object Array]" !== c && (k = 1), c = 0; c < a.length && !k; c++)
            "number" !== typeof a[c] && (k = 1);
        if (!k) {
          if (void 0 === b)
            for (c = b = 0; c < a.length; c++)
              for (e = a[c]; 0 < e; )
                b++, e = e >>> 1;
          this.c[g2].update([d2, this.N++, 2, b, f, a.length].concat(a));
        }
        break;
      case "string":
        void 0 === b && (b = a.length);
        this.c[g2].update([d2, this.N++, 3, b, f, a.length]);
        this.c[g2].update(a);
        break;
      default:
        k = 1;
    }
    if (k)
      throw new sjcl2.exception.bug("random: addEntropy only supports number, array of numbers or string");
    this.m[g2] += b;
    this.f += b;
    h === this.u && (this.isReady() !== this.u && A3("seeded", Math.max(this.o, this.f)), A3("progress", this.getProgress()));
  }, isReady: function(a) {
    a = this.T[void 0 !== a ? a : this.M];
    return this.o && this.o >= a ? this.m[0] > this.ba && (/* @__PURE__ */ new Date()).valueOf() > this.Z ? this.J | this.I : this.I : this.f >= a ? this.J | this.u : this.u;
  }, getProgress: function(a) {
    a = this.T[a ? a : this.M];
    return this.o >= a ? 1 : this.f > a ? 1 : this.f / a;
  }, startCollectors: function() {
    if (!this.D) {
      this.a = { loadTimeCollector: B2(this, this.ma), mouseCollector: B2(this, this.oa), keyboardCollector: B2(this, this.la), accelerometerCollector: B2(this, this.ea), touchCollector: B2(this, this.qa) };
      if (window.addEventListener)
        window.addEventListener("load", this.a.loadTimeCollector, false), window.addEventListener("mousemove", this.a.mouseCollector, false), window.addEventListener("keypress", this.a.keyboardCollector, false), window.addEventListener("devicemotion", this.a.accelerometerCollector, false), window.addEventListener("touchmove", this.a.touchCollector, false);
      else if (document.attachEvent)
        document.attachEvent("onload", this.a.loadTimeCollector), document.attachEvent("onmousemove", this.a.mouseCollector), document.attachEvent("keypress", this.a.keyboardCollector);
      else
        throw new sjcl2.exception.bug("can't attach event");
      this.D = true;
    }
  }, stopCollectors: function() {
    this.D && (window.removeEventListener ? (window.removeEventListener("load", this.a.loadTimeCollector, false), window.removeEventListener("mousemove", this.a.mouseCollector, false), window.removeEventListener("keypress", this.a.keyboardCollector, false), window.removeEventListener("devicemotion", this.a.accelerometerCollector, false), window.removeEventListener("touchmove", this.a.touchCollector, false)) : document.detachEvent && (document.detachEvent("onload", this.a.loadTimeCollector), document.detachEvent("onmousemove", this.a.mouseCollector), document.detachEvent("keypress", this.a.keyboardCollector)), this.D = false);
  }, addEventListener: function(a, b) {
    this.K[a][this.ga++] = b;
  }, removeEventListener: function(a, b) {
    var c, d2, e = this.K[a], f = [];
    for (d2 in e)
      e.hasOwnProperty(d2) && e[d2] === b && f.push(d2);
    for (c = 0; c < f.length; c++)
      d2 = f[c], delete e[d2];
  }, la: function() {
    C3(this, 1);
  }, oa: function(a) {
    var b, c;
    try {
      b = a.x || a.clientX || a.offsetX || 0, c = a.y || a.clientY || a.offsetY || 0;
    } catch (d2) {
      c = b = 0;
    }
    0 != b && 0 != c && this.addEntropy([b, c], 2, "mouse");
    C3(this, 0);
  }, qa: function(a) {
    a = a.touches[0] || a.changedTouches[0];
    this.addEntropy([a.pageX || a.clientX, a.pageY || a.clientY], 1, "touch");
    C3(this, 0);
  }, ma: function() {
    C3(this, 2);
  }, ea: function(a) {
    a = a.accelerationIncludingGravity.x || a.accelerationIncludingGravity.y || a.accelerationIncludingGravity.z;
    if (window.orientation) {
      var b = window.orientation;
      "number" === typeof b && this.addEntropy(b, 1, "accelerometer");
    }
    a && this.addEntropy(a, 2, "accelerometer");
    C3(this, 0);
  } };
  function A3(a, b) {
    var c, d2 = sjcl2.random.K[a], e = [];
    for (c in d2)
      d2.hasOwnProperty(c) && e.push(d2[c]);
    for (c = 0; c < e.length; c++)
      e[c](b);
  }
  function C3(a, b) {
    "undefined" !== typeof window && window.performance && "function" === typeof window.performance.now ? a.addEntropy(window.performance.now(), b, "loadtime") : a.addEntropy((/* @__PURE__ */ new Date()).valueOf(), b, "loadtime");
  }
  function y3(a) {
    a.b = z2(a).concat(z2(a));
    a.L = new sjcl2.cipher.aes(a.b);
  }
  function z2(a) {
    for (var b = 0; 4 > b && (a.h[b] = a.h[b] + 1 | 0, !a.h[b]); b++)
      ;
    return a.L.encrypt(a.h);
  }
  function B2(a, b) {
    return function() {
      b.apply(a, arguments);
    };
  }
  sjcl2.random = new sjcl2.prng(6);
  a:
    try {
      if (G2 = "undefined" !== typeof module && module.exports) {
        try {
          H2 = __require22("crypto");
        } catch (a) {
          H2 = null;
        }
        G2 = E2 = H2;
      }
      if (G2 && E2.randomBytes)
        D2 = E2.randomBytes(128), D2 = new Uint32Array(new Uint8Array(D2).buffer), sjcl2.random.addEntropy(D2, 1024, "crypto['randomBytes']");
      else if ("undefined" !== typeof window && "undefined" !== typeof Uint32Array) {
        F3 = new Uint32Array(32);
        if (window.crypto && window.crypto.getRandomValues)
          window.crypto.getRandomValues(F3);
        else if (window.msCrypto && window.msCrypto.getRandomValues)
          window.msCrypto.getRandomValues(F3);
        else
          break a;
        sjcl2.random.addEntropy(F3, 1024, "crypto['getRandomValues']");
      }
    } catch (a) {
      "undefined" !== typeof window && window.console && (console.log("There was an error collecting entropy from the browser:"), console.log(a));
    }
  var D2;
  var E2;
  var F3;
  var G2;
  var H2;
  sjcl2.json = { defaults: { v: 1, iter: 1e4, ks: 128, ts: 64, mode: "ccm", adata: "", cipher: "aes" }, ja: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl2.json, f = e.g({ iv: sjcl2.random.randomWords(4, 0) }, e.defaults), g2;
    e.g(f, c);
    c = f.adata;
    "string" === typeof f.salt && (f.salt = sjcl2.codec.base64.toBits(f.salt));
    "string" === typeof f.iv && (f.iv = sjcl2.codec.base64.toBits(f.iv));
    if (!sjcl2.mode[f.mode] || !sjcl2.cipher[f.cipher] || "string" === typeof a && 100 >= f.iter || 64 !== f.ts && 96 !== f.ts && 128 !== f.ts || 128 !== f.ks && 192 !== f.ks && 256 !== f.ks || 2 > f.iv.length || 4 < f.iv.length)
      throw new sjcl2.exception.invalid("json encrypt: invalid parameters");
    "string" === typeof a ? (g2 = sjcl2.misc.cachedPbkdf2(a, f), a = g2.key.slice(0, f.ks / 32), f.salt = g2.salt) : sjcl2.ecc && a instanceof sjcl2.ecc.elGamal.publicKey && (g2 = a.kem(), f.kemtag = g2.tag, a = g2.key.slice(0, f.ks / 32));
    "string" === typeof b && (b = sjcl2.codec.utf8String.toBits(b));
    "string" === typeof c && (f.adata = c = sjcl2.codec.utf8String.toBits(c));
    g2 = new sjcl2.cipher[f.cipher](a);
    e.g(d2, f);
    d2.key = a;
    f.ct = "ccm" === f.mode && sjcl2.arrayBuffer && sjcl2.arrayBuffer.ccm && b instanceof ArrayBuffer ? sjcl2.arrayBuffer.ccm.encrypt(g2, b, f.iv, c, f.ts) : sjcl2.mode[f.mode].encrypt(g2, b, f.iv, c, f.ts);
    return f;
  }, encrypt: function(a, b, c, d2) {
    var e = sjcl2.json, f = e.ja.apply(e, arguments);
    return e.encode(f);
  }, ia: function(a, b, c, d2) {
    c = c || {};
    d2 = d2 || {};
    var e = sjcl2.json;
    b = e.g(e.g(e.g({}, e.defaults), b), c, true);
    var f, g2;
    f = b.adata;
    "string" === typeof b.salt && (b.salt = sjcl2.codec.base64.toBits(b.salt));
    "string" === typeof b.iv && (b.iv = sjcl2.codec.base64.toBits(b.iv));
    if (!sjcl2.mode[b.mode] || !sjcl2.cipher[b.cipher] || "string" === typeof a && 100 >= b.iter || 64 !== b.ts && 96 !== b.ts && 128 !== b.ts || 128 !== b.ks && 192 !== b.ks && 256 !== b.ks || !b.iv || 2 > b.iv.length || 4 < b.iv.length)
      throw new sjcl2.exception.invalid("json decrypt: invalid parameters");
    "string" === typeof a ? (g2 = sjcl2.misc.cachedPbkdf2(a, b), a = g2.key.slice(0, b.ks / 32), b.salt = g2.salt) : sjcl2.ecc && a instanceof sjcl2.ecc.elGamal.secretKey && (a = a.unkem(sjcl2.codec.base64.toBits(b.kemtag)).slice(0, b.ks / 32));
    "string" === typeof f && (f = sjcl2.codec.utf8String.toBits(f));
    g2 = new sjcl2.cipher[b.cipher](a);
    f = "ccm" === b.mode && sjcl2.arrayBuffer && sjcl2.arrayBuffer.ccm && b.ct instanceof ArrayBuffer ? sjcl2.arrayBuffer.ccm.decrypt(g2, b.ct, b.iv, b.tag, f, b.ts) : sjcl2.mode[b.mode].decrypt(g2, b.ct, b.iv, f, b.ts);
    e.g(d2, b);
    d2.key = a;
    return 1 === c.raw ? f : sjcl2.codec.utf8String.fromBits(f);
  }, decrypt: function(a, b, c, d2) {
    var e = sjcl2.json;
    return e.ia(a, e.decode(b), c, d2);
  }, encode: function(a) {
    var b, c = "{", d2 = "";
    for (b in a)
      if (a.hasOwnProperty(b)) {
        if (!b.match(/^[a-z0-9]+$/i))
          throw new sjcl2.exception.invalid("json encode: invalid property name");
        c += d2 + '"' + b + '":';
        d2 = ",";
        switch (typeof a[b]) {
          case "number":
          case "boolean":
            c += a[b];
            break;
          case "string":
            c += '"' + escape(a[b]) + '"';
            break;
          case "object":
            c += '"' + sjcl2.codec.base64.fromBits(a[b], 0) + '"';
            break;
          default:
            throw new sjcl2.exception.bug("json encode: unsupported type");
        }
      }
    return c + "}";
  }, decode: function(a) {
    a = a.replace(/\s/g, "");
    if (!a.match(/^\{.*\}$/))
      throw new sjcl2.exception.invalid("json decode: this isn't json!");
    a = a.replace(/^\{|\}$/g, "").split(/,/);
    var b = {}, c, d2;
    for (c = 0; c < a.length; c++) {
      if (!(d2 = a[c].match(/^\s*(?:(["']?)([a-z][a-z0-9]*)\1)\s*:\s*(?:(-?\d+)|"([a-z0-9+\/%*_.@=\-]*)"|(true|false))$/i)))
        throw new sjcl2.exception.invalid("json decode: this isn't json!");
      null != d2[3] ? b[d2[2]] = parseInt(d2[3], 10) : null != d2[4] ? b[d2[2]] = d2[2].match(/^(ct|adata|salt|iv)$/) ? sjcl2.codec.base64.toBits(d2[4]) : unescape(d2[4]) : null != d2[5] && (b[d2[2]] = "true" === d2[5]);
    }
    return b;
  }, g: function(a, b, c) {
    void 0 === a && (a = {});
    if (void 0 === b)
      return a;
    for (var d2 in b)
      if (b.hasOwnProperty(d2)) {
        if (c && void 0 !== a[d2] && a[d2] !== b[d2])
          throw new sjcl2.exception.invalid("required parameter overridden");
        a[d2] = b[d2];
      }
    return a;
  }, sa: function(a, b) {
    var c = {}, d2;
    for (d2 in a)
      a.hasOwnProperty(d2) && a[d2] !== b[d2] && (c[d2] = a[d2]);
    return c;
  }, ra: function(a, b) {
    var c = {}, d2;
    for (d2 = 0; d2 < b.length; d2++)
      void 0 !== a[b[d2]] && (c[b[d2]] = a[b[d2]]);
    return c;
  } };
  sjcl2.encrypt = sjcl2.json.encrypt;
  sjcl2.decrypt = sjcl2.json.decrypt;
  sjcl2.misc.pa = {};
  sjcl2.misc.cachedPbkdf2 = function(a, b) {
    var c = sjcl2.misc.pa, d2;
    b = b || {};
    d2 = b.iter || 1e3;
    c = c[a] = c[a] || {};
    d2 = c[d2] = c[d2] || { firstSalt: b.salt && b.salt.length ? b.salt.slice(0) : sjcl2.random.randomWords(2, 0) };
    c = void 0 === b.salt ? d2.firstSalt : b.salt;
    d2[c] = d2[c] || sjcl2.misc.pbkdf2(a, c, b.iter);
    return { key: d2[c].slice(0), salt: c.slice(0) };
  };
  var _HTTPfrontend2 = class extends Service3 {
    constructor(options, path, fetched) {
      super(options);
      this.name = "http";
      this.fetchProxied = false;
      this.listening = {};
      this.GET = (url22 = "http://localhost:8080/ping", type = "", mimeType) => {
        if (type === "json")
          mimeType = "application/json";
        return new Promise((resolve, reject) => {
          let xhr = _HTTPfrontend2.request({ method: "GET", url: url22, responseType: type, mimeType, onload: (ev2) => {
            let data;
            if (xhr.responseType === "" || xhr.responseType === "text")
              data = xhr.responseText;
            else
              data = xhr.response;
            if (url22 instanceof URL)
              url22 = url22.toString();
            this.setState({ [url22]: data });
            resolve(data);
          }, onabort: (er) => {
            reject(er);
          } });
        }).catch(console.error);
      };
      this.POST = (message, url22 = "http://localhost:8080/echo", type = "", mimeType) => {
        if (typeof message === "object" && (type === "json" || type === "text" || !type)) {
          message = JSON.stringify(message);
        }
        if (type === "json")
          mimeType = "application/json";
        return new Promise((resolve, reject) => {
          let xhr = _HTTPfrontend2.request({ method: "POST", url: url22, data: message, responseType: type, mimeType, onload: (ev2) => {
            let data;
            if (xhr.responseType === "" || xhr.responseType === "text")
              data = xhr.responseText;
            else
              data = xhr.response;
            if (url22 instanceof URL)
              url22 = url22.toString();
            this.setState({ [url22]: data });
            resolve(data);
          }, onabort: (er) => {
            reject(er);
          } });
        }).catch(console.error);
      };
      this.transmit = (message, url22) => {
        let obj = message;
        if (typeof obj === "object") {
          message = JSON.stringify(obj);
        }
        if (obj?.method?.toLowerCase() == "get" || message?.toLowerCase() === "get")
          return this.GET(url22);
        return this.POST(message, url22);
      };
      this.transponder = (url22, message, type = "", mimeType) => {
        if (typeof message === "object")
          message = JSON.stringify(message);
        let method = "GET";
        if (message) {
          method = "POST";
        }
        if (type === "json")
          mimeType = "application/json";
        else
          return new Promise((resolve, reject) => {
            let xhr = _HTTPfrontend2.request({ method, url: url22, data: message, responseType: type, onload: (ev2) => {
              let body = xhr.response;
              if (typeof body === "string") {
                let substr = body.substring(0, 8);
                if (substr.includes("{") || substr.includes("[")) {
                  if (substr.includes("\\"))
                    body = body.replace(/\\/g, "");
                  if (body[0] === '"') {
                    body = body.substring(1, body.length - 1);
                  }
                  ;
                  body = JSON.parse(body);
                }
              }
              if (typeof body?.method === "string") {
                return resolve(this.handleMethod(body.route, body.method, body.args));
              } else if (typeof body?.route === "string") {
                return resolve(this.handleServiceMessage(body));
              } else if (typeof body?.node === "string" || body.node instanceof GraphNode4) {
                return resolve(this.handleGraphNodeCall(body.node, body.args));
              } else
                return resolve(body);
            }, onabort: (er) => {
              reject(er);
            } });
          }).catch(console.error);
      };
      this.listen = (path2 = "0", fetched2 = async (clone, args, response) => {
        const result = await clone.text();
        const returned = this.receive(result);
        this.setState({ [response.url]: returned });
      }) => {
        this.listening[path2] = {};
        let listenerId = `${path2}${Math.floor(Math.random() * 1e15)}`;
        this.listening[path2][listenerId] = fetched2;
        if (!this.fetchProxied) {
          globalThis.fetch = new Proxy(globalThis.fetch, { apply(fetch2, that, args) {
            const result = fetch2.apply(that, args);
            result.then((response) => {
              if (!response.ok)
                return;
              if (this.listening["0"]) {
                for (const key in this.listeners) {
                  const clone = response.clone();
                  this.listening["0"][key](clone, args, response);
                }
              } else {
                for (const key in this.listening) {
                  if (response.url.includes(key)) {
                    for (const key2 in this.listening[path2]) {
                      const clone = response.clone();
                      this.listening[path2][key2](clone, args, response);
                    }
                    break;
                  }
                }
              }
            }).catch((er) => {
              console.error(er);
            });
            return result;
          } });
          this.fetchProxied = true;
        }
        return listenerId;
      };
      this.stopListening = (path2, listener) => {
        if (!path2 && path2 !== 0) {
          for (const key in this.listening)
            delete this.listening[key];
        } else {
          if (!listener)
            delete this.listening[path2];
          else
            delete this.listening[listener];
        }
      };
      this.load(this);
      this.listen(path, fetched);
    }
  };
  var HTTPfrontend2 = _HTTPfrontend2;
  HTTPfrontend2.request = (options) => {
    const xhr = new XMLHttpRequest();
    if (options.responseType)
      xhr.responseType = options.responseType;
    else
      options.responseType = "json";
    if (options.mimeType) {
      xhr.overrideMimeType(options.mimeType);
    }
    if (options.onload)
      xhr.addEventListener("load", options.onload, false);
    if (options.onprogress)
      xhr.addEventListener("progress", options.onprogress, false);
    if (options.onabort)
      xhr.addEventListener("abort", options.onabort, false);
    if (options.onloadend)
      xhr.addEventListener("loadend", options.onloadend, false);
    if (options.onerror)
      xhr.addEventListener("error", options.onerror, false);
    xhr.open(options.method, options.url, true, options.user, options.pass);
    if (!options.onerror)
      xhr.onerror = function() {
        xhr.abort();
      };
    xhr.send(options.data);
    return xhr;
  };
  var import_web_worker2 = __toESM22(require_browser2());
  var WorkerService2 = class extends Service3 {
    constructor(options) {
      super();
      this.name = "worker";
      this.workers = {};
      this.threadRot = 0;
      this.loadWorkerRoute = (rt, routeKey) => {
        if (rt.workerUrl)
          rt.url = rt.workerUrl;
        if (rt.workerId)
          rt.__node.tag = rt.workerId;
        if (!rt.__node.tag)
          rt.__node.tag = routeKey;
        rt._id = rt.__node.tag;
        let worker;
        if (this.workers[rt._id])
          worker = this.workers[rt._id];
        else if (rt.worker)
          worker = rt.worker;
        if (!worker) {
          worker = this.addWorker(rt);
        }
        rt.worker = worker;
        if (!rt.worker.__ondisconnected) {
          let ondelete = (rt2) => {
            rt2.worker?.terminate();
          };
          rt.__addOndisconnected(ondelete);
        }
        if (rt.transferFunctions) {
          for (const prop in rt.transferFunctions) {
            this.transferFunction(worker, rt.transferFunctions[prop], prop);
          }
        }
        if (rt.transferClasses) {
          for (const prop in rt.transferClasses) {
            this.transferClass(worker, rt.transferClasses[prop], prop);
          }
        }
        if (worker) {
          if (!rt.__operator) {
            rt.__operator = (...args) => {
              if (rt.callback) {
                if (!this.__node.nodes.get(rt.__node.tag)?.__children)
                  worker.post(rt.callback, args);
                else
                  return worker.run(rt.callback, args);
              } else {
                if (!this.__node.nodes.get(rt.__node.tag)?.__children)
                  worker.send(args);
                else
                  return worker.request(args);
              }
            };
          }
          if (rt.init) {
            worker.run(rt.init, rt.initArgs, void 0, rt.initTransfer);
          }
          return worker;
        }
      };
      this.workerloader = { "workers": (node, parent, graph3, roots) => {
        let rt = node;
        if (!node.parentRoute && (parent?.callback && parent?.worker))
          node.parentRoute = parent?.callback;
        if (rt?.worker || rt?.workerId || rt?.workerUrl) {
          let worker = this.loadWorkerRoute(rt, rt.__node.tag);
          if (worker) {
            if (!rt.parentRoute && rt.__parent?.callback)
              rt.parentRoute = rt.__parent.callback;
            if (rt.__parent && !rt.portId) {
              if (typeof rt.__parent === "string") {
                if (rt.__node.tag !== rt.__parent && worker._id !== rt.__parent)
                  rt.portId = this.establishMessageChannel(worker, rt.__parent);
              } else if (rt.__node.tag !== rt.__parent?.__node?.tag && worker._id !== rt.__parent?.tag) {
                rt.portId = this.establishMessageChannel(worker, rt.__parent.worker);
              }
            }
            ;
            if (rt.parentRoute) {
              if (!rt.stopped) {
                if (typeof rt.__parent === "string" && rt.__parent === worker._id) {
                  worker.run("subscribe", [rt.parentRoute, void 0, void 0, rt.callback]);
                } else if (rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag) {
                  worker.run("subscribe", [rt.parentRoute, void 0, void 0, rt.callback]);
                } else
                  worker.run("subscribeToWorker", [rt.parentRoute, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                    worker.workerSubs[rt.parentRoute + rt.portId].sub = sub;
                  });
              }
              if (!(typeof rt.__parent === "string" && rt.__parent === worker._id) && !(rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag))
                worker.workerSubs[rt.parentRoute + rt.portId] = { sub: null, route: rt.parentRoute, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
            } else if (rt.__parent) {
              if (typeof rt.__parent === "string") {
                if (!rt.stopped) {
                  if (rt.__parent === worker._id) {
                    worker.run("subscribe", [rt.__parent, void 0, rt.callback]);
                  } else
                    worker.run("subscribeToWorker", [rt.__parent, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                      worker.workerSubs[rt.__parent + rt.portId].sub = sub;
                    });
                }
                if (!(typeof rt.__parent === "string" && rt.__parent === worker._id))
                  worker.workerSubs[rt.__parent + rt.portId] = { sub: null, route: worker._id, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
              } else if (rt.__parent?.__node?.tag && rt.__parent?.worker) {
                if (!rt.stopped) {
                  if (rt.__node.tag === rt.__parent.__node.tag || worker._id === rt.__parent.__node.tag) {
                    worker.run("subscribe", [rt.__parent.__node.tag, void 0, void 0, rt.callback]);
                  } else
                    worker.run("subscribeToWorker", [rt.__parent.__node.tag, rt.portId, void 0, rt.callback, void 0, void 0, rt.blocking]).then((sub) => {
                      worker.workerSubs[rt.__parent.__node.tag + rt.portId].sub = sub;
                    });
                }
                if (!(rt.__node.tag === rt.__parent?.__node?.tag || worker._id === rt.__parent?.__node?.tag))
                  worker.workerSubs[rt.__parent.__node.tag + rt.portId] = { sub: null, route: rt.__parent.__node.tag, portId: rt.portId, callback: rt.callback, blocking: rt.blocking };
              }
            }
          }
        } else if (rt.__parent && rt.parentRoute) {
          if (typeof rt.__parent === "string" && roots[rt.__parent]?.worker) {
            roots[rt.__parent].worker.subscribe(rt.parentRoute, rt.__operator, void 0, void 0, void 0, rt.blocking);
          } else if (rt.__parent?.worker) {
            rt.__parent.worker.subscribe(rt.parentRoute, rt.__operator, void 0, void 0, void 0, rt.blocking);
          }
        }
        return rt;
      } };
      this.addDefaultMessageListener = () => {
        globalThis.onmessage = (ev2) => {
          let result = this.receive(ev2.data);
          if (this.__node.keepState)
            this.setState({ [this.name]: result });
        };
      };
      this.postMessage = (message, target, transfer) => {
        if (this.workers[target]) {
          this.workers[target].send(message, transfer);
        } else {
          globalThis.postMessage(message, target, transfer);
        }
      };
      this.addWorker = (options2) => {
        let worker;
        if (!options2._id)
          options2._id = `worker${Math.floor(Math.random() * 1e15)}`;
        if (options2.url)
          worker = new import_web_worker2.default(options2.url);
        else if (options2.port) {
          worker = options2.port;
        } else if (this.workers[options2._id]) {
          if (this.workers[options2._id].port)
            worker = this.workers[options2._id].port;
          else
            worker = this.workers[options2._id].worker;
        }
        if (!worker)
          return;
        let send = (message, transfer) => {
          return this.transmit(message, worker, transfer);
        };
        let post = (route, args, method, transfer) => {
          let message = { route, args };
          if (method)
            message.method = method;
          return this.transmit(message, worker, transfer);
        };
        let run = (route, args, method, transfer) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [{ route, args }, options2._id, callbackId] };
            if (method)
              req.args[0].method = method;
            let onmessage = (ev2) => {
              if (typeof ev2.data === "object") {
                if (ev2.data.callbackId === callbackId) {
                  worker.removeEventListener("message", onmessage);
                  res2(ev2.data.args);
                }
              }
            };
            worker.addEventListener("message", onmessage);
            this.transmit(req, worker, transfer);
          });
        };
        let request = (message, method, transfer) => {
          return new Promise((res2, rej) => {
            let callbackId = Math.random();
            let req = { route: "runRequest", args: [message, options2._id, callbackId] };
            if (method)
              req.method = method;
            let onmessage = (ev2) => {
              if (typeof ev2.data === "object") {
                if (ev2.data.callbackId === callbackId) {
                  worker.removeEventListener("message", onmessage);
                  res2(ev2.data.args);
                }
              }
            };
            worker.addEventListener("message", onmessage);
            this.transmit(req, worker, transfer);
          });
        };
        let workerSubs = {};
        let subscribe = (route, callback, args, key, subInput, blocking) => {
          return this.subscribeToWorker(route, options2._id, callback, args, key, subInput, blocking);
        };
        let unsubscribe = (route, sub) => {
          return run("unsubscribe", [route, sub]);
        };
        let start = async (route, portId, callback, blocking) => {
          if (route)
            await run("subscribeToWorker", [route, portId, void 0, callback, blocking]).then((sub) => {
              if (sub)
                workerSubs[route + portId] = { sub, route, portId, callback, blocking };
            });
          else
            for (const key in workerSubs) {
              if (typeof workerSubs[key].sub !== "number")
                await run("subscribeToWorker", [workerSubs[key].route, workerSubs[key].portId, void 0, workerSubs[key].callback, void 0, workerSubs[key].blocking]).then((sub) => {
                  workerSubs[key].sub = sub;
                });
              console.log(JSON.stringify(workerSubs));
            }
          return true;
        };
        let stop = async (route, portId) => {
          if (route && portId && workerSubs[route + portId]) {
            await run("unsubscribe", [route, workerSubs[route + portId].sub]);
            workerSubs[route + portId].sub = false;
          } else {
            for (const key in workerSubs) {
              if (typeof workerSubs[key].sub === "number") {
                await run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]).then(console.log);
              }
              workerSubs[key].sub = false;
            }
          }
          return true;
        };
        let terminate = () => {
          for (const key in workerSubs) {
            if (typeof workerSubs[key].sub === "number") {
              run("unpipeWorkers", [workerSubs[key].route, workerSubs[key].portId, workerSubs[key].sub]);
            }
            workerSubs[key].sub = false;
          }
          return this.terminate(options2._id);
        };
        if (!options2.onmessage)
          options2.onmessage = (ev2) => {
            this.receive(ev2.data);
            this.setState({ [options2._id]: ev2.data });
          };
        if (!options2.onerror) {
          options2.onerror = (ev2) => {
            console.error(ev2.data);
          };
        }
        worker.onmessage = options2.onmessage;
        worker.onerror = options2.onerror;
        this.workers[options2._id] = { worker, send, post, run, request, subscribe, unsubscribe, terminate, start, stop, postMessage: worker.postMessage, workerSubs, graph: this, ...options2 };
        return this.workers[options2._id];
      };
      this.open = this.addWorker;
      this.toObjectURL = (scriptTemplate) => {
        let blob = new Blob([scriptTemplate], { type: "text/javascript" });
        return URL.createObjectURL(blob);
      };
      this.transmit = (message, worker, transfer) => {
        if (!transfer) {
          transfer = this.getTransferable(message);
        }
        if (worker instanceof import_web_worker2.default || worker instanceof MessagePort) {
          worker.postMessage(message, transfer);
        } else if (typeof worker === "string") {
          if (this.workers[worker]) {
            if (this.workers[worker].port)
              this.workers[worker].port.postMessage(message, transfer);
            else if (this.workers[worker].worker)
              this.workers[worker].worker.postMessage(message, transfer);
          }
        } else {
          let keys22 = Object.keys(this.workers);
          this.workers[keys22[this.threadRot]].worker.postMessage(message, transfer);
          this.threadRot++;
          if (this.threadRot === keys22.length)
            this.threadRot = 0;
        }
        return message;
      };
      this.terminate = (worker) => {
        let onclose;
        if (typeof worker === "string") {
          let obj = this.workers[worker];
          if (obj) {
            delete this.workers[worker];
            worker = obj.worker;
            if (obj.onclose)
              onclose = obj.onclose;
          }
        } else if (typeof worker === "object") {
          if (worker?._id) {
            worker = worker.worker;
            delete this.workers[worker?._id];
          }
        }
        if (worker instanceof import_web_worker2.default) {
          worker.terminate();
          if (onclose)
            onclose(worker);
          return true;
        }
        if (worker instanceof MessagePort) {
          worker.close();
          if (onclose)
            onclose(worker);
          return true;
        }
        return false;
      };
      this.establishMessageChannel = (worker, worker2) => {
        let workerId;
        if (typeof worker === "string") {
          workerId = worker;
          if (this.workers[worker]) {
            if (this.workers[worker].port)
              worker = this.workers[worker].port;
            else
              worker2 = this.workers[worker].worker;
          }
        } else if (worker?.worker) {
          worker = worker.worker;
        }
        if (typeof worker2 === "string") {
          if (this.workers[worker2]) {
            if (this.workers[worker2].port)
              worker2 = this.workers[worker2].port;
            else
              worker2 = this.workers[worker2].worker;
          }
        } else if (worker2?.worker) {
          worker2 = worker2.worker;
        }
        if (worker instanceof import_web_worker2.default || worker instanceof MessagePort) {
          let channel = new MessageChannel();
          let portId = `port${Math.floor(Math.random() * 1e15)}`;
          worker.postMessage({ route: "addWorker", args: { port: channel.port1, _id: portId } }, [channel.port1]);
          if (worker2 instanceof import_web_worker2.default || worker2 instanceof MessagePort) {
            worker2.postMessage({ route: "addWorker", args: { port: channel.port2, _id: portId } }, [channel.port2]);
          } else if (workerId && this.workers[workerId]) {
            channel.port2.onmessage = this.workers[workerId].onmessage;
            this.workers[workerId].port = channel.port2;
          }
          return portId;
        }
        return false;
      };
      this.request = (message, workerId, transfer, method) => {
        let worker = this.workers[workerId].worker;
        return new Promise((res2, rej) => {
          let callbackId = Math.random();
          let req = { route: "runRequest", args: [message, callbackId] };
          if (method)
            req.method = method;
          let onmessage = (ev2) => {
            if (typeof ev2.data === "object") {
              if (ev2.data.callbackId === callbackId) {
                worker.removeEventListener("message", onmessage);
                res2(ev2.data.args);
              }
            }
          };
          worker.addEventListener("message", onmessage);
          this.transmit(req, worker, transfer);
        });
      };
      this.runRequest = (message, worker, callbackId) => {
        let res2 = this.receive(message);
        if (typeof worker === "string" && this.workers[worker]) {
          if (this.workers[worker].port)
            worker = this.workers[worker].port;
          else
            worker = this.workers[worker].worker;
        }
        if (res2 instanceof Promise) {
          res2.then((r) => {
            if (worker instanceof import_web_worker2.default || worker instanceof MessagePort)
              worker.postMessage({ args: r, callbackId });
            else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
              globalThis.postMessage({ args: r, callbackId });
          });
        } else {
          if (worker instanceof import_web_worker2.default || worker instanceof MessagePort)
            worker.postMessage({ args: res2, callbackId });
          else if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
            globalThis.postMessage({ args: res2, callbackId });
        }
        return res2;
      };
      this.subscribeWorker = (route, worker, args, key, subInput, blocking) => {
        let callback;
        if (blocking) {
          let blocked = false;
          callback = (res2) => {
            if (!blocked) {
              blocked = true;
              if (res2 instanceof Promise) {
                res2.then((r) => {
                  if (worker?.run)
                    worker.run("triggerSubscription", [route, worker._id, r]).then((ret) => {
                      blocked = false;
                    });
                });
              } else {
                if (worker?.run)
                  worker.run("triggerSubscription", [route, worker._id, res2]).then((ret) => {
                    blocked = false;
                  });
              }
            }
          };
        } else {
          callback = (res2) => {
            if (res2 instanceof Promise) {
              res2.then((r) => {
                if (worker?.postMessage)
                  worker.postMessage({ args: r, callbackId: route });
                else if (globalThis.postMessage)
                  globalThis.postMessage({ args: r, callbackId: route });
              });
            } else {
              if (worker?.postMessage)
                worker.postMessage({ args: res2, callbackId: route });
              else if (globalThis.postMessage)
                globalThis.postMessage({ args: res2, callbackId: route });
            }
          };
        }
        if (!blocking && worker?.port) {
          worker = worker.port;
        } else if (!blocking && worker?.worker) {
          worker = worker.worker;
        } else if (typeof worker === "string" && this.workers[worker]) {
          if (blocking)
            worker = this.workers[worker];
          else if (this.workers[worker].port)
            worker = this.workers[worker].port;
          else
            worker = this.workers[worker].worker;
        }
        return this.subscribe(route, callback, args, key, subInput);
      };
      this.subscribeToWorker = (route, workerId, callback, args, key, subInput, blocking) => {
        if (typeof workerId === "string" && this.workers[workerId]) {
          this.__node.state.subscribeEvent(workerId, (res2) => {
            if (res2?.callbackId === route) {
              if (!callback)
                this.setState({ [workerId]: res2.args });
              else if (typeof callback === "string") {
                this.run(callback, res2.args);
              } else
                callback(res2.args);
            }
          });
          return this.workers[workerId].run("subscribeWorker", [route, workerId, args, key, subInput, blocking]);
        }
      };
      this.triggerSubscription = async (route, workerId, result) => {
        if (this.__node.state.triggers[workerId])
          for (let i22 = 0; i22 < this.__node.state.triggers[workerId].length; i22++) {
            await this.__node.state.triggers[workerId][i22].onchange({ args: result, callbackId: route });
          }
        return true;
      };
      this.pipeWorkers = (sourceWorker, listenerWorker, sourceRoute, listenerRoute, portId, args, key, subInput, blocking) => {
        if (typeof sourceWorker === "string")
          sourceWorker = this.workers[sourceWorker];
        if (typeof listenerWorker === "string")
          listenerWorker = this.workers[listenerWorker];
        if (!portId) {
          portId = this.establishMessageChannel(sourceWorker.worker, listenerWorker.worker);
        }
        return listenerWorker.run("subscribeToWorker", [sourceRoute, portId, listenerRoute, args, key, subInput, blocking]);
      };
      this.unpipeWorkers = (sourceRoute, sourceWorker, sub) => {
        if (typeof sourceWorker === "string")
          sourceWorker = this.workers[sourceWorker];
        if (typeof sourceWorker === "object") {
          return sourceWorker.run("unsubscribe", [sourceRoute, sub]);
        }
      };
      this.connections = { workers: this.workers };
      if (options?.services)
        this.addServices(options.services);
      this.load(this);
      this.setLoaders(this.workerloader);
      if (options)
        this.init(options);
      if (typeof WorkerGlobalScope !== "undefined" && globalThis instanceof WorkerGlobalScope) {
        this.addDefaultMessageListener();
      }
    }
    getTransferable(message) {
      let transfer;
      if (typeof message === "object") {
        if (message.args) {
          if (message.args?.constructor?.name === "Object") {
            for (const key in message.args) {
              if (ArrayBuffer.isView(message.args[key])) {
                if (!transfer)
                  transfer = [message.args[key].buffer];
                else
                  transfer.push(message.args[key].buffer);
              } else if (message.args[key]?.constructor?.name === "ArrayBuffer") {
                if (!transfer)
                  transfer = [message.args[key]];
                else
                  transfer.push(message.args[key]);
              }
            }
          } else if (Array.isArray(message.args) && message.args.length < 11) {
            message.args.forEach((arg) => {
              if (ArrayBuffer.isView(arg)) {
                transfer = [arg.buffer];
              } else if (arg?.constructor?.name === "ArrayBuffer")
                transfer = [arg];
            });
          } else if (ArrayBuffer.isView(message.args)) {
            transfer = [message.args.buffer];
          } else if (message.args?.constructor?.name === "ArrayBuffer") {
            transfer = [message];
          }
        } else if (message?.constructor?.name === "Object") {
          for (const key in message) {
            if (ArrayBuffer.isView(message[key])) {
              if (!transfer)
                transfer = [message[key].buffer];
              else
                transfer.push(message[key].buffer);
            } else if (message[key]?.constructor?.name === "ArrayBuffer") {
              if (!transfer)
                transfer = [message[key]];
              else
                transfer.push(message[key]);
            }
          }
        } else if (Array.isArray(message) && message.length < 11) {
          message.forEach((arg) => {
            if (ArrayBuffer.isView(arg)) {
              transfer = [arg.buffer];
            } else if (arg.constructor?.name === "ArrayBuffer")
              transfer = [arg];
          });
        } else if (ArrayBuffer.isView(message)) {
          transfer = [message.buffer];
        } else if (message.constructor?.name === "ArrayBuffer") {
          transfer = [message];
        }
      }
      return transfer;
    }
  };
  var mouseEventHandler3 = makeSendPropertiesHandler3(["ctrlKey", "metaKey", "shiftKey", "button", "pointerType", "clientX", "clientY", "pageX", "pageY", "movementX", "movementY", "x", "y", "timeStamp"]);
  var wheelEventHandlerImpl3 = makeSendPropertiesHandler3(["deltaX", "deltaY"]);
  var keydownEventHandler3 = makeSendPropertiesHandler3(["ctrlKey", "metaKey", "shiftKey", "altKey", "isComposing", "keyCode", "key", "code", "repeat", "timeStamp"]);
  function focusEventHandler3(event, sendFn) {
    const data = { type: event.type };
    data.isTrusted = event.isTrusted;
    data.bubbles = event.bubbles;
    data.cancelBubble = event.cancelBubble;
    data.cancelable = event.cancelable;
    data.composed = event.composed;
    data.defaultPrevent = event.defaultPrevented;
    data.eventPhase = event.eventPhase;
    data.returnValue = event.returnValue;
    data.currentTarget = event.currentTarget.id ? event.currentTarget.id : event.currentTarget.constructor.name;
    data.target = data.currentTarget;
    data.srcElement = data.currentTarget;
    sendFn(data);
  }
  function wheelEventHandler3(event, sendFn) {
    event.preventDefault();
    wheelEventHandlerImpl3(event, sendFn);
  }
  function preventDefaultHandler3(event) {
    event.preventDefault();
  }
  function copyProperties3(src, properties, dst) {
    for (const name2 of properties) {
      dst[name2] = src[name2];
    }
  }
  function makeSendPropertiesHandler3(properties) {
    return function sendProperties(event, sendFn) {
      const data = { type: event.type };
      copyProperties3(event, properties, data);
      sendFn(data);
    };
  }
  function touchEventHandler3(event, sendFn) {
    const touches = [];
    const data = { type: event.type, touches };
    for (let i22 = 0; i22 < event.touches.length; ++i22) {
      const touch = event.touches[i22];
      touches.push({ pageX: touch.pageX, pageY: touch.pageY });
    }
    sendFn(data);
  }
  var i3 = 1;
  var keys3 = {};
  while (i3 < 222) {
    keys3[i3] = true;
    i3++;
  }
  function filteredKeydownEventHandler3(event, sendFn) {
    let { keyCode } = event;
    if (keys3[keyCode]) {
      if (event.preventDefault && (keyCode < 110 || keyCode > 123))
        event.preventDefault();
      keydownEventHandler3(event, sendFn);
    }
  }
  var eventHandlers3 = { contextmenu: preventDefaultHandler3, mousedown: mouseEventHandler3, mousemove: mouseEventHandler3, mouseup: mouseEventHandler3, pointerdown: mouseEventHandler3, pointermove: mouseEventHandler3, pointerup: mouseEventHandler3, pointerlockchange: mouseEventHandler3, webkitpointerlockchange: mouseEventHandler3, focus: focusEventHandler3, blur: focusEventHandler3, pointerout: mouseEventHandler3, touchstart: touchEventHandler3, touchmove: touchEventHandler3, touchend: touchEventHandler3, wheel: wheelEventHandler3, keydown: filteredKeydownEventHandler3, keyup: filteredKeydownEventHandler3 };
  function initProxyElement3(element, worker, id) {
    if (!id)
      id = "proxy" + Math.floor(Math.random() * 1e15);
    const sendEvent = (data) => {
      if (!worker) {
        handleProxyEvent3(data, id);
      } else
        worker.postMessage({ route: "handleProxyEvent", args: [data, id] });
    };
    let entries = Object.entries(eventHandlers3);
    for (const [eventName, handler] of entries) {
      element.addEventListener(eventName, function(event) {
        handler(event, sendEvent);
      });
    }
    if (eventHandlers3.keydown) {
      globalThis.addEventListener("keydown", function(ev2) {
        eventHandlers3.keydown(ev2, sendEvent);
      });
    }
    if (eventHandlers3.keyup) {
      globalThis.addEventListener("keyup", function(ev2) {
        eventHandlers3.keyup(ev2, sendEvent);
      });
    }
    const sendSize = () => {
      const rect = element.getBoundingClientRect();
      sendEvent({ type: "resize", left: rect.left, top: rect.top, width: element.clientWidth, height: element.clientHeight });
    };
    sendSize();
    globalThis.addEventListener("resize", sendSize);
    return id;
  }
  var EventDispatcher3 = class {
    addEventListener(type, listener) {
      if (this.__listeners === void 0)
        this.__listeners = {};
      const listeners = this.__listeners;
      if (listeners[type] === void 0) {
        listeners[type] = [];
      }
      if (listeners[type].indexOf(listener) === -1) {
        listeners[type].push(listener);
      }
    }
    hasEventListener(type, listener) {
      if (this.__listeners === void 0)
        return false;
      const listeners = this.__listeners;
      return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
    }
    removeEventListener(type, listener) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[type];
      if (listenerArray !== void 0) {
        const index = listenerArray.indexOf(listener);
        if (index !== -1) {
          listenerArray.splice(index, 1);
        }
      }
    }
    dispatchEvent(event, target) {
      if (this.__listeners === void 0)
        return;
      const listeners = this.__listeners;
      const listenerArray = listeners[event.type];
      if (listenerArray !== void 0) {
        if (!target)
          event.target = this;
        else
          event.target = target;
        const array = listenerArray.slice(0);
        for (let i22 = 0, l = array.length; i22 < l; i22++) {
          array[i22].call(this, event);
        }
      }
    }
  };
  function noop3() {
  }
  var ElementProxyReceiver3 = class extends EventDispatcher3 {
    constructor() {
      super();
      this.__listeners = {};
      this.style = {};
      this.setPointerCapture = () => {
      };
      this.releasePointerCapture = () => {
      };
      this.getBoundingClientRect = () => {
        return { left: this.left, top: this.top, width: this.width, height: this.height, right: this.left + this.width, bottom: this.top + this.height };
      };
      this.handleEvent = (data) => {
        if (data.type === "resize") {
          this.left = data.left;
          this.top = data.top;
          this.width = data.width;
          this.height = data.height;
          if (typeof this.proxied === "object") {
            this.proxied.style.width = this.width + "px";
            this.proxied.style.height = this.height + "px";
            this.proxied.clientWidth = this.width;
            this.proxied.clientHeight = this.height;
          }
        }
        data.preventDefault = noop3;
        data.stopPropagation = noop3;
        this.dispatchEvent(data, this.proxied);
      };
      this.style = {};
    }
    get clientWidth() {
      return this.width;
    }
    get clientHeight() {
      return this.height;
    }
    focus() {
    }
    blur() {
    }
  };
  var ProxyManager3 = class {
    constructor() {
      this.targets = {};
      this.makeProxy = (id, addTo = void 0) => {
        if (!id)
          id = `proxyReceiver${Math.floor(Math.random() * 1e15)}`;
        let proxy;
        if (this.targets[id])
          proxy = this.targets[id];
        else {
          proxy = new ElementProxyReceiver3();
          this.targets[id] = proxy;
        }
        if (typeof addTo === "object") {
          addTo.proxy = proxy;
          proxy.proxied = addTo;
          if (typeof WorkerGlobalScope !== "undefined")
            addTo.style = proxy.style;
          if (proxy.width) {
            addTo.style.width = proxy.width + "px";
            addTo.clientWidth = proxy.width;
          }
          if (proxy.height) {
            addTo.style.height = proxy.height + "px";
            addTo.clientHeight = proxy.height;
          }
          addTo.setPointerCapture = proxy.setPointerCapture.bind(proxy);
          addTo.releasePointerCapture = proxy.releasePointerCapture.bind(proxy);
          addTo.getBoundingClientRect = proxy.getBoundingClientRect.bind(proxy);
          addTo.addEventListener = proxy.addEventListener.bind(proxy);
          addTo.removeEventListener = proxy.removeEventListener.bind(proxy);
          addTo.handleEvent = proxy.handleEvent.bind(proxy);
          addTo.dispatchEvent = proxy.dispatchEvent.bind(proxy);
          addTo.focus = proxy.focus.bind(proxy);
          addTo.blur = proxy.blur.bind(proxy);
        }
      };
      this.getProxy = (id) => {
        return this.targets[id];
      };
      this.handleEvent = (data, id) => {
        if (!this.targets[id])
          this.makeProxy(id);
        if (this.targets[id]) {
          this.targets[id].handleEvent(data);
          return true;
        }
        return void 0;
      };
      if (!globalThis.document)
        globalThis.document = { elementFromPoint: (...args) => {
          return this.targets[Object.keys(this.targets)[0]].proxied;
        } };
    }
  };
  function makeProxy3(id, elm) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager3();
      this.__node.graph.ProxyManager.makeProxy(id, elm);
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager3();
      globalThis.ProxyManager.makeProxy(id, elm);
    }
    return id;
  }
  function handleProxyEvent3(data, id) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.ProxyManager)
        this.__node.graph.ProxyManager = new ProxyManager3();
      if (this.__node.graph.ProxyManager.handleEvent(data, id))
        return data;
    } else {
      if (!globalThis.ProxyManager)
        globalThis.ProxyManager = new ProxyManager3();
      if (globalThis.ProxyManager.handleEvent(data, id))
        return data;
    }
  }
  var proxyElementWorkerRoutes3 = { initProxyElement: initProxyElement3, makeProxy: makeProxy3, handleProxyEvent: handleProxyEvent3 };
  function Renderer3(options) {
    if (options.worker) {
      let worker = options.worker;
      let route = options.route;
      if (worker instanceof Blob || typeof worker === "string") {
        worker = new Worker(worker);
      }
      delete options.worker;
      delete options.route;
      return transferCanvas3(worker, options, route);
    } else {
      initProxyElement3(options.canvas, void 0, options._id);
      return setupCanvas3(options);
    }
  }
  function transferCanvas3(worker, options, route) {
    console.log(options);
    if (!options)
      return void 0;
    if (!options._id)
      options._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    let offscreen = options.canvas.transferControlToOffscreen();
    if (!options.width)
      options.width = options.canvas.clientWidth;
    if (!options.height)
      options.height = options.canvas.clientHeight;
    let message = { route: route ? route : "setupCanvas", args: { ...options, canvas: offscreen } };
    if (this?.__node?.graph)
      this.__node.graph.run("initProxyElement", options.canvas, worker, options._id);
    else
      initProxyElement3(options.canvas, worker, options._id);
    if (options.draw) {
      if (typeof options.draw === "function")
        message.args.draw = options.draw.toString();
      else
        message.args.draw = options.draw;
    }
    if (options.update) {
      if (typeof options.update === "function")
        message.args.update = options.update.toString();
      else
        message.args.update = options.update;
    }
    if (options.init) {
      if (typeof options.init === "function")
        message.args.init = options.init.toString();
      else
        message.args.init = options.init;
    }
    if (options.clear) {
      if (typeof options.clear === "function")
        message.args.clear = options.clear.toString();
      else
        message.args.clear = options.clear;
    }
    let tr = [offscreen];
    if (options.transfer) {
      tr.push(...options.transfer);
      delete options.transfer;
    }
    worker.postMessage(message, tr);
    const canvascontrols = { _id: options._id, width: options.width, height: options.height, worker, draw: (props, transfer) => {
      worker.postMessage({ route: "drawFrame", args: [props, options._id] }, transfer);
    }, update: (props, transfer) => {
      worker.postMessage({ route: "updateCanvas", args: [props, options._id] }, transfer);
    }, clear: () => {
      worker.postMessage({ route: "clearCanvas", args: options._id });
    }, init: () => {
      worker.postMessage({ route: "initCanvas", args: options._id });
    }, stop: () => {
      worker.postMessage({ route: "stopAnim", args: options._id });
    }, start: () => {
      worker.postMessage({ route: "startAnim", args: options._id });
    }, set: (newDrawProps, transfer) => {
      worker.postMessage({ route: "setDraw", args: [newDrawProps, options._id] }, transfer);
    }, terminate: () => {
      worker.terminate();
    } };
    return canvascontrols;
  }
  function setDraw3(settings2, _id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (_id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = this.__node.graph.CANVASES?.[settings2._id];
      else
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
    } else {
      if (_id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else if (settings2._id)
        canvasopts = globalThis.CANVASES?.[settings2._id];
      else
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
    }
    if (canvasopts) {
      if (settings2.canvas) {
        canvasopts.canvas = settings2.canvas;
        if (this?.__node?.graph)
          this.__node.graph.run("makeProxy", canvasopts._id, canvasopts.canvas);
        else
          proxyElementWorkerRoutes3.makeProxy(canvasopts._id, canvasopts.canvas);
      }
      if (typeof settings2.context === "string")
        canvasopts.context = canvasopts.canvas.getContext(settings2.context);
      else if (settings2.context)
        canvasopts.context = settings2.context;
      if (settings2.width)
        canvasopts.canvas.width = settings2.width;
      if (settings2.height)
        canvasopts.canvas.height = settings2.height;
      if (typeof settings2.draw === "string")
        settings2.draw = parseFunctionFromText32(settings2.draw);
      if (typeof settings2.draw === "function") {
        canvasopts.draw = settings2.draw.bind(settings2);
      }
      if (typeof settings2.update === "string")
        settings2.update = parseFunctionFromText32(settings2.update);
      if (typeof settings2.update === "function") {
        canvasopts.update = settings2.update.bind(settings2);
      }
      if (typeof settings2.init === "string")
        settings2.init = parseFunctionFromText32(settings2.init);
      if (typeof settings2.init === "function") {
        canvasopts.init = settings2.init.bind(settings2);
      }
      if (typeof settings2.clear === "string")
        settings2.clear = parseFunctionFromText32(settings2.clear);
      if (typeof settings2.clear === "function") {
        canvasopts.clear = settings2.clear.bind(settings2);
      }
      return settings2._id;
    }
    return void 0;
  }
  function setupCanvas3(options) {
    if (this?.__node?.graph) {
      if (!this.__node.graph.CANVASES)
        this.__node.graph.CANVASES = {};
    } else if (!globalThis.CANVASES)
      globalThis.CANVASES = {};
    let canvasOptions = options;
    options._id ? canvasOptions._id = options._id : canvasOptions._id = `canvas${Math.floor(Math.random() * 1e15)}`;
    typeof options.context === "string" ? canvasOptions.context = options.canvas.getContext(options.context) : canvasOptions.context = options.context;
    "animating" in options ? canvasOptions.animating = options.animating : canvasOptions.animating = true;
    if (this?.__node?.graph?.CANVASES[canvasOptions._id]) {
      this.__node.graph.run("setDraw", canvasOptions);
    } else if (globalThis.CANVASES?.[canvasOptions._id]) {
      setDraw3(canvasOptions);
    } else {
      if (this?.__node?.graph) {
        canvasOptions.graph = this.__node.graph;
        if (!canvasOptions.__node) {
          canvasOptions.__node = {};
        }
        if (!canvasOptions.__node.tag)
          canvasOptions.__node.tag = canvasOptions._id;
        canvasOptions = this.__node.graph.add(canvasOptions);
        canvasOptions.__addOndisconnected = () => {
          canvasOptions.stop();
          delete this.__node.graph.CANVASES[canvasOptions._id];
        };
      }
      if (this?.__node?.graph)
        this.__node.graph.CANVASES[canvasOptions._id] = canvasOptions;
      else
        globalThis.CANVASES[canvasOptions._id] = canvasOptions;
      if (this?.__node?.graph)
        this.__node.graph.run("makeProxy", canvasOptions._id, canvasOptions.canvas);
      else
        proxyElementWorkerRoutes3.makeProxy(canvasOptions._id, canvasOptions.canvas);
      if (options.width)
        canvasOptions.canvas.width = options.width;
      if (options.height)
        canvasOptions.canvas.height = options.height;
      if (typeof canvasOptions.draw === "string") {
        canvasOptions.draw = parseFunctionFromText32(canvasOptions.draw);
      } else if (typeof canvasOptions.draw === "function") {
        canvasOptions.draw = canvasOptions.draw.bind(canvasOptions);
      }
      if (typeof canvasOptions.update === "string") {
        canvasOptions.update = parseFunctionFromText32(canvasOptions.update);
      } else if (typeof canvasOptions.update === "function") {
        canvasOptions.update = canvasOptions.update.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "string") {
        canvasOptions.init = parseFunctionFromText32(canvasOptions.init);
      } else if (typeof canvasOptions.init === "function") {
        canvasOptions.init = canvasOptions.init.bind(canvasOptions);
      }
      if (typeof canvasOptions.clear === "string") {
        canvasOptions.clear = parseFunctionFromText32(canvasOptions.clear);
      } else if (typeof canvasOptions.clear === "function") {
        canvasOptions.clear = canvasOptions.clear.bind(canvasOptions);
      }
      if (typeof canvasOptions.init === "function")
        canvasOptions.init(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      canvasOptions.stop = () => {
        stopAnim3(canvasOptions._id);
      };
      canvasOptions.start = (draw) => {
        startAnim3(canvasOptions._id, draw);
      };
      canvasOptions.set = (settings2) => {
        setDraw3(settings2, canvasOptions._id);
      };
      if (typeof canvasOptions.draw === "function" && canvasOptions.animating) {
        let draw = (s, canvas, context) => {
          if (s.animating) {
            s.draw(s, canvas, context);
            requestAnimationFrame(() => {
              draw(s, canvas, context);
            });
          }
        };
        draw(canvasOptions, canvasOptions.canvas, canvasOptions.context);
      }
    }
    if (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope)
      return canvasOptions._id;
    else {
      const canvascontrols = { _id: options._id, width: options.width, height: options.height, draw: (props) => {
        drawFrame3(props, options._id);
      }, update: (props) => {
        updateCanvas3(props, options._id);
      }, clear: () => {
        clearCanvas3(options._id);
      }, init: () => {
        initCanvas3(options._id);
      }, stop: () => {
        stopAnim3(options._id);
      }, start: () => {
        startAnim3(options._id);
      }, set: (newDrawProps) => {
        setDraw3(newDrawProps, options._id);
      }, terminate: () => {
        if (this.__node?.graph)
          this.__node.graph.remove(options._id);
        else {
          stopAnim3(options._id);
          if (this?.__node?.graph)
            delete this.__node.graph.CANVASES[canvasOptions._id];
          else
            delete globalThis.CANVASES[canvasOptions._id];
        }
      } };
      return canvascontrols;
    }
  }
  function drawFrame3(props, _id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts) {
      if (props)
        Object.assign(canvasopts, props);
      if (canvasopts.draw) {
        canvasopts.draw(canvasopts, canvasopts.canvas, canvasopts.context);
        return _id;
      }
    }
    return void 0;
  }
  function clearCanvas3(_id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts?.clear) {
      canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function initCanvas3(_id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts?.init) {
      canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function updateCanvas3(input, _id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts?.update) {
      canvasopts.update(canvasopts, canvasopts.canvas, canvasopts.context, input);
      return _id;
    }
    return void 0;
  }
  function setProps3(props, _id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts) {
      Object.assign(canvasopts, props);
      if (props.width)
        canvasopts.canvas.width = props.width;
      if (props.height)
        canvasopts.canvas.height = props.height;
      return _id;
    }
    return void 0;
  }
  function startAnim3(_id, draw) {
    let canvasopts = getCanvas3.call(this, _id);
    canvasopts.animating = true;
    if (canvasopts && draw) {
      if (typeof draw === "string")
        draw = parseFunctionFromText32(draw);
      if (typeof draw === "function") {
        canvasopts.draw = draw;
      }
      return _id;
    }
    if (typeof canvasopts?.draw === "function") {
      let draw2 = (s, canvas, context) => {
        if (s.animating) {
          s.draw(s, canvas, context);
          requestAnimationFrame(() => {
            draw2(s, canvas, context);
          });
        }
      };
      if (typeof canvasopts.clear === "function")
        canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context);
      if (typeof canvasopts.init === "function")
        canvasopts.init(canvasopts, canvasopts.canvas, canvasopts.context);
      draw2(canvasopts, canvasopts.canvas, canvasopts.context);
      return _id;
    }
    return void 0;
  }
  function stopAnim3(_id) {
    let canvasopts = getCanvas3.call(this, _id);
    if (canvasopts) {
      canvasopts.animating = false;
      if (typeof canvasopts.clear === "function")
        requestAnimationFrame(canvasopts.clear(canvasopts, canvasopts.canvas, canvasopts.context));
      return _id;
    }
    return void 0;
  }
  function getCanvas3(_id) {
    let canvasopts;
    if (this?.__node?.graph) {
      if (!_id)
        canvasopts = this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];
      else
        canvasopts = this.__node.graph.CANVASES?.[_id];
    } else {
      if (!_id)
        canvasopts = globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];
      else
        canvasopts = globalThis.CANVASES?.[_id];
    }
    return canvasopts;
  }
  var workerCanvasRoutes3 = { ...proxyElementWorkerRoutes3, Renderer: Renderer3, transferCanvas: transferCanvas3, setupCanvas: setupCanvas3, setDraw: setDraw3, drawFrame: drawFrame3, clearCanvas: clearCanvas3, initCanvas: initCanvas3, updateCanvas: updateCanvas3, setProps: setProps3, startAnim: startAnim3, stopAnim: stopAnim3, getCanvas: getCanvas3 };
  function parseFunctionFromText32(method = "") {
    let getFunctionBody = (methodString) => {
      return methodString.replace(/^\W*(function[^{]+\{([\s\S]*)\}|[^=]+=>[^{]*\{([\s\S]*)\}|[^=]+=>(.+))/i, "$2$3$4");
    };
    let getFunctionHead = (methodString) => {
      let startindex = methodString.indexOf("=>") + 1;
      if (startindex <= 0) {
        startindex = methodString.indexOf("){");
      }
      if (startindex <= 0) {
        startindex = methodString.indexOf(") {");
      }
      return methodString.slice(0, methodString.indexOf("{", startindex) + 1);
    };
    let newFuncHead = getFunctionHead(method);
    let newFuncBody = getFunctionBody(method);
    let newFunc;
    if (newFuncHead.includes("function")) {
      let varName = newFuncHead.split("(")[1].split(")")[0];
      newFunc = new Function(varName, newFuncBody);
    } else {
      if (newFuncHead.substring(0, 6) === newFuncBody.substring(0, 6)) {
        let varName = newFuncHead.split("(")[1].split(")")[0];
        newFunc = new Function(varName, newFuncBody.substring(newFuncBody.indexOf("{") + 1, newFuncBody.length - 1));
      } else {
        try {
          newFunc = (0, eval)(newFuncHead + newFuncBody + "}");
        } catch {
        }
      }
    }
    return newFunc;
  }
  var url2 = URL.createObjectURL(new Blob([String('(()=>{var __require=(x=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof require!=="undefined"?require:a)[b]}):x)(function(x){if(typeof require!=="undefined")return require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x+\'" is not supported\')});var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __require2=(x=>typeof __require!=="undefined"?__require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof __require!=="undefined"?__require:a)[b]}):x)(function(x){if(typeof __require!=="undefined")return __require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x+\'" is not supported\')});var __commonJS=(cb,mod)=>function __require22(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:true}):target,mod));var require_browser=__commonJS({"node_modules/web-worker/cjs/browser.js"(exports,module2){module2.exports=Worker}});var EventHandler=class{constructor(data){this.pushToState={};this.data={};this.triggers={};this.setState=updateObj=>{Object.assign(this.data,updateObj);let props=Object.getOwnPropertyNames(updateObj);for(const prop of props){this.triggerEvent(prop,this.data[prop])}return this.data};this.setValue=(key,value)=>{this.data[key]=value;this.triggerEvent(key,value)};this.triggerEvent=(key,value)=>{if(this.triggers[key]){let fn=obj=>obj.onchange(value);this.triggers[key].forEach(fn)}};this.subscribeEvent=(key,onchange,refObject,refKey)=>{if(key){if(refObject&&refKey&&!this.triggers[key]){Object.defineProperty(this.data,key,{get:()=>{return refObject[refKey]},set:value=>{refObject[refKey]=value},enumerable:true,configurable:true})}if(!this.triggers[key]){this.triggers[key]=[]}let l=this.triggers[key].length;this.triggers[key].push({sub:l,onchange});return this.triggers[key].length-1}else return void 0};this.unsubscribeEvent=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(!sub){delete this.triggers[key];delete this.data[key]}else{let sub2=void 0;let obj=triggers.find((o,i2)=>{if(o.sub===sub2){sub2=i2;return true}});if(obj)triggers.splice(sub2,1);if(Object.keys(triggers).length===0){delete this.triggers[key];delete this.data[key]}if(this.onRemoved)this.onRemoved(obj);return true}}};this.subscribeEventOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeEvent(key,sub)};sub=this.subscribeEvent(key,changed)};this.getEvent=(key,sub)=>{for(const s in this.triggers[key]){if(this.triggers[key][s].sub===sub)return this.triggers[key][s]}};this.getSnapshot=()=>{const snapshot={};for(const key in this.data){snapshot[key]=this.data[key]}};if(typeof data==="object")this.data=data}};var state=new EventHandler;var GraphNode=class{constructor(properties,parent,graph){this.__node={tag:`node${Math.floor(Math.random()*1e15)}`,unique:`${Math.floor(Math.random()*1e15)}`,state};this.__setProperties=(properties2,parent2,graph2)=>{let enforceProperties=()=>{let orig=properties2;if(typeof properties2==="function"){if(isNativeClass(properties2)){properties2=new properties2}else properties2={__operator:properties2,__node:{forward:true,tag:properties2.name}}}else if(typeof properties2==="string"){if(graph2?.get(properties2)){properties2=graph2.get(properties2)}}if(!properties2.__node.initial)properties2.__node.initial=orig};enforceProperties();if(typeof properties2==="object"){let assignState=()=>{if(properties2.__node?.state)this.__node.state=properties2.__node.state};let setProps2=()=>{if(properties2.__props){if(typeof properties2.__props==="function")properties2.__props=new properties2.__props;if(typeof properties2.__props==="object"){this.__proxyObject(properties2.__props)}}};let setTag=()=>{if(!properties2.__node.tag){if(properties2.__operator?.name)properties2.__node.tag=properties2.__operator.name;else properties2.__node.tag=`node${Math.floor(Math.random()*1e15)}`}};let setNode=()=>{if(typeof properties2.__node==="string"){if(graph2?.get(properties2.__node.tag)){properties2=graph2.get(properties2.__node.tag)}else properties2.__node={}}else if(!properties2.__node)properties2.__node={};if(graph2){properties2.__node.graph=graph2}if(properties2 instanceof Graph)properties2.__node.source=properties2};let setParent=()=>{if(!properties2.__parent&&parent2)properties2.__parent=parent2;if(parent2?.__node&&!(parent2 instanceof Graph||properties2 instanceof Graph))properties2.__node.tag=parent2.__node.tag+"."+properties2.__node.tag;if(parent2 instanceof Graph&&properties2 instanceof Graph){if(properties2.__node.loaders)Object.assign(parent2.__node.loaders?parent2.__node.loaders:{},properties2.__node.loaders);if(parent2.__node.mapGraphs){properties2.__node.nodes.forEach(n=>{parent2.set(properties2.__node.tag+"."+n.__node.tag,n)});let ondelete=()=>{properties2.__node.nodes.forEach(n=>{parent2.__node.nodes.delete(properties2.__node.tag+"."+n.__node.tag)})};this.__addOndisconnected(ondelete)}}};let setOp=()=>{if(typeof properties2.default==="function"&&!properties2.__operator){properties2.__operator=properties2.default}if(properties2.__operator){if(typeof properties2.__operator==="string"){if(graph2){let n=graph2.get(properties2.__operator);if(n)properties2.__operator=n.__operator;if(!properties2.__node.tag&&properties2.__operator.name)properties2.__node.tag=properties2.__operator.name}}if(typeof properties2.__operator==="function")properties2.__operator=this.__setOperator(properties2.__operator);if(properties2.default)properties2.default=properties2.__operator}};let assignProps=()=>{properties2.__node=Object.assign(this.__node,properties2.__node);let keys2=Object.getOwnPropertyNames(properties2);for(const key of keys2){this[key]=properties2[key]}};let bindCallbacks=()=>{if(this.__onconnected){if(typeof this.__onconnected==="function"){this.__onconnected=this.__onconnected.bind(this)}else if(Array.isArray(this.__onconnected)){this.__onconnected=this.__onconnected.map(f=>{return f.bind(this)})}if(typeof this.__ondisconnected==="function"){this.__ondisconnected=this.__ondisconnected.bind(this)}else if(Array.isArray(this.__ondisconnected)){this.__ondisconnected=this.__ondisconnected.map(f=>{return f.bind(this)})}}};assignState();setTag();setProps2();setNode();setParent();assignProps();bindCallbacks();setOp()}};this.__subscribe=(callback,key,subInput,bound,target)=>{const subscribeToFunction=(k,setTarget=(callback2,target2)=>callback2,triggerCallback=callback)=>{let sub=this.__node.state.subscribeEvent(k,triggerCallback,this,key);let trigger=this.__node.state.getEvent(k,sub);trigger.source=this.__node.tag;if(key)trigger.key=key;trigger.target=setTarget(callback);if(bound)trigger.bound=bound;return sub};const subscribeToGraph=callback2=>{let fn=this.__node.graph.get(callback2);if(!fn&&callback2.includes(".")){let n=this.__node.graph.get(callback2.substring(0,callback2.lastIndexOf(".")));let key2=callback2.substring(callback2.lastIndexOf(".")+1);if(n&&typeof n[key2]==="function")callback2=(...args)=>{return n[key2](...args)}}};if(key){if(!this.__node.localState||!this.__node.localState[key]){this.__addLocalState(this,key)}if(typeof callback==="string"){if(target){if(this.__node.graph?.get(target)){let n=this.__node.graph?.get(target);if(typeof n[callback]==="function"){let fn=n[callback];callback=(...inp)=>{fn(...inp)}}else{let k2=callback;let setter=inp=>{n[k2]=inp};callback=setter}}}else if(typeof this[callback]==="function"){let fn=this[callback];callback=(...inp)=>{fn(...inp)}}else if(this.__node.graph?.get(callback))subscribeToGraph(callback);if(typeof callback!=="function")return void 0}let sub;let k=subInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}else{if(typeof callback==="string"){if(this.__node.graph.get(callback))callback=this.__node.graph.get(callback);if(typeof callback!=="object")return void 0}let sub;let k=subInput?this.__node.unique+"input":this.__node.unique;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}};this.__unsubscribe=(sub,key,unsubInput)=>{if(key)return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key,sub);else return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"input":this.__node.unique,sub)};this.__setOperator=fn=>{fn=fn.bind(this);if(this.__args&&this.__node.graph){fn=wrapArgs(fn,this.__args,this.__node.graph)}let inpstr=`${this.__node.unique}input`;this.__operator=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[this.__node.unique]){if(typeof result?.then==="function"){result.then(res=>{if(res!==void 0)this.__node.state.setValue(this.__node.unique,res)}).catch(console.error)}else if(result!==void 0)this.__node.state.setValue(this.__node.unique,result)}return result};if(this.__parent instanceof GraphNode&&!this.__subscribedToParent){if(this.__parent.__operator){let sub=this.__parent.__subscribe(this);let ondelete=()=>{this.__parent?.__unsubscribe(sub);delete this.__subscribedToParent};this.__addOndisconnected(ondelete);this.__subscribedToParent=true}}return this.__operator};this.__addLocalState=(props,key)=>{if(!props)return;if(!this.__node.localState){this.__node.localState={}}const localState=this.__node.localState;const initState=(props2,k)=>{let str2=this.__node.unique+"."+k;let inpstr=`${str2}input`;if(typeof props2[k]==="function"&&k!=="__operator"){let fn=props2[k].bind(this);props2[k]=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[str2]){if(typeof result?.then==="function"){result.then(res=>{this.__node.state.triggerEvent(str2,res)}).catch(console.error)}else this.__node.state.triggerEvent(str2,result)}return result}}else{let get,set;if(this.__props?.[k]){get=()=>{return this.__props[k]};set=v=>{this.__props[k]=v;if(this.__node.state.triggers[str2])this.__node.state.triggerEvent(str2,v)}}else{localState[k]=props2[k];get=()=>{return localState[k]};set=v=>{localState[k]=v;if(this.__node.state.triggers[str2])this.__node.state.triggerEvent(str2,v)}}const descriptor={get,set,enumerable:true,configurable:true};Object.defineProperty(props2,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}};if(key)initState(props,key);else{for(let k in props){initState(props,k)}}};this.__proxyObject=obj=>{const allProps=getAllProperties(obj);for(const k of allProps){if(typeof obj[k]==="function"){this[k]=(...args)=>{return obj[k](...args)}}else{const descriptor={get:()=>{return obj[k]},set:value=>{obj[k]=value},enumerable:true,configurable:true};Object.defineProperty(this,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}}};this.__setProperties(properties,parent,graph)}__addOnconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__onconnected)){this.__onconnected.push(callback)}else if(typeof this.__onconnected==="function"){this.__onconnected=[callback,this.__onconnected]}else this.__onconnected=callback}__addOndisconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__ondisconnected)){this.__ondisconnected.push(callback)}else if(typeof this.__ondisconnected==="function"){this.__ondisconnected=[callback,this.__ondisconnected]}else this.__ondisconnected=callback}__callConnected(node=this){if(typeof this.__onconnected==="function"){this.__onconnected(this)}else if(Array.isArray(this.__onconnected)){let fn=o=>{o(this)};this.__onconnected.forEach(fn)}}__callDisconnected(node=this){if(typeof this.__ondisconnected==="function")this.__ondisconnected(this);else if(Array.isArray(this.__ondisconnected)){let fn=o=>{o(this)};this.__ondisconnected.forEach(fn)}}};var Graph=class{constructor(options){this.__node={tag:`graph${Math.floor(Math.random()*1e15)}`,unique:`${Math.random()}`,nodes:new Map,state,roots:{}};this.init=options2=>{if(options2){let cpy=Object.assign({},options2);delete cpy.roots;recursivelyAssign(this.__node,cpy);if(options2.roots)this.load(options2.roots)}};this.load=roots=>{function recursivelyAssignChildren(target,obj,inChildren=true,top=true){if(top){if(target)Object.assign(target,obj);else target=Object.assign({},obj);recursivelyAssignChildren(target,obj,true,false)}if(obj.__children&&!inChildren){if(obj.__children?.constructor.name==="Object"){if(target.__children?.constructor.name==="Object")recursivelyAssignChildren(target.__children,obj.__children,true,false);else target.__children=recursivelyAssignChildren({},obj.__children,true,false)}else{target.__children=obj.__children}}else if(inChildren){for(const key in obj){target[key]=Object.assign({},obj[key]);if(obj[key].__children){recursivelyAssignChildren({},obj[key].__children,false,false)}}}return target}this.__node.roots=recursivelyAssignChildren(this.__node.roots?this.__node.roots:{},roots);let cpy=Object.assign({},roots);if(cpy.__node)delete cpy.__node;let listeners=this.recursiveSet(cpy,this,void 0,roots);if(roots.__node){if(!roots.__node.tag)roots.__node._tag=`roots${Math.floor(Math.random()*1e15)}`;else if(!this.get(roots.__node.tag)){let node=new GraphNode(roots,this,this);this.set(node.__node.tag,node);this.runLoaders(node,this,roots,roots.__node.tag);if(node.__listeners){listeners[node.__node.tag]=node.__listeners}}}else if(roots.__listeners){this.setListeners(roots.__listeners)}this.setListeners(listeners);return cpy};this.setLoaders=(loaders2,replace)=>{if(replace)this.__node.loaders=loaders2;else Object.assign(this.__node.loaders,loaders2);return this.__node.loaders};this.runLoaders=(node,parent,properties,key)=>{for(const l in this.__node.loaders){if(typeof this.__node.loaders[l]==="object"){if(this.__node.loaders[l].init)this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key);if(this.__node.loaders[l].connected)node.__addOnconnected(this.__node.loaders[l].connect);if(this.__node.loaders[l].disconnected)node.__addOndisconnected(this.__node.loaders[l].disconnect)}else if(typeof this.__node.loaders[l]==="function")this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key)}};this.add=(properties,parent)=>{let listeners={};if(typeof parent==="string")parent=this.get(parent);let instanced;if(typeof properties==="function"){if(isNativeClass(properties)){if(properties.prototype instanceof GraphNode){properties=properties.prototype.constructor(properties,parent,this);instanced=true}else properties=new properties}else properties={__operator:properties}}else if(typeof properties==="string"){properties=this.__node.roots[properties]}if(!properties)return;if(!instanced){let keys2=Object.getOwnPropertyNames(properties);let cpy={};for(const key of keys2){cpy[key]=properties[key]}properties=cpy}if(!properties.__node)properties.__node={};properties.__node.initial=properties;if(typeof properties==="object"&&(!properties?.__node?.tag||!this.get(properties.__node.tag))){let node;if(instanced)node=properties;else node=new GraphNode(properties,parent,this);this.set(node.__node.tag,node);this.runLoaders(node,parent,properties,node.__node.tag);this.__node.roots[node.__node.tag]=properties;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key in node.__listeners){let listener=node.__listeners[key];if(node[key]){delete listeners[node.__node.tag][key];listeners[node.__node.tag][node.__node.tag+"."+key]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][key]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][key]=parent.__node.tag}}}}this.setListeners(listeners);node.__callConnected();return node}return};this.recursiveSet=(t2,parent,listeners={},origin)=>{let keys2=Object.getOwnPropertyNames(origin);for(const key of keys2){if(key.includes("__"))continue;let p=origin[key];if(Array.isArray(p))continue;let instanced;if(typeof p==="function"){if(isNativeClass(p)){p=new p;if(p instanceof GraphNode){p=p.prototype.constructor(p,parent,this);instanced=true}}else p={__operator:p}}else if(typeof p==="string"){if(this.__node.nodes.get(p))p=this.__node.nodes.get(p);else p=this.__node.roots[p]}else if(typeof p==="boolean"){if(this.__node.nodes.get(key))p=this.__node.nodes.get(key);else p=this.__node.roots[key]}if(typeof p==="object"){if(!instanced&&!(p instanceof GraphNode)){let keys3=Object.getOwnPropertyNames(p);let cpy={};for(const key2 of keys3){cpy[key2]=p[key2]}p=cpy}if(!p.__node)p.__node={};if(!p.__node.tag)p.__node.tag=key;if(!p.__node.initial)p.__node.initial=t2[key];if(this.get(p.__node.tag)&&!(!(parent instanceof Graph)&&parent?.__node)||parent?.__node&&this.get(parent.__node.tag+"."+p.__node.tag))continue;let node;let newnode=false;if(instanced||p instanceof GraphNode){node=p}else{node=new GraphNode(p,parent,this);newnode=true}if(!newnode&&p instanceof GraphNode&&!instanced&&parent instanceof GraphNode){let sub=this.subscribe(parent.__node.tag,node.__node.tag);let ondelete=node2=>{this.unsubscribe(parent.__node.tag,sub)};node.__addOndisconnected(ondelete)}else{this.set(node.__node.tag,node);this.runLoaders(node,parent,t2[key],key);t2[key]=node;this.__node.roots[node.__node.tag]=p;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key2 in node.__listeners){let listener=node.__listeners[key2];let k=key2;if(node[key2]){delete listeners[node.__node.tag][key2];k=node.__node.tag+"."+key2;listeners[node.__node.tag][k]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][k]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][k]=parent.__node.tag}}}}node.__callConnected()}}}return listeners};this.remove=(node,clearListeners=true)=>{this.unsubscribe(node);if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){this.delete(node.__node.tag);delete this.__node.roots[node.__node.tag];if(clearListeners){this.clearListeners(node)}node.__callDisconnected();const recursiveRemove=t2=>{for(const key in t2){this.unsubscribe(t2[key]);this.delete(t2[key].__node.tag);delete this.__node.roots[t2[key].__node.tag];this.delete(key);delete this.__node.roots[key];t2[key].__node.tag=t2[key].__node.tag.substring(t2[key].__node.tag.lastIndexOf(".")+1);if(clearListeners){this.clearListeners(t2[key])}console.log(key,t2[key].__listeners);t2[key].__callDisconnected();if(t2[key].__children){recursiveRemove(t2[key].__children)}}};if(node.__children){recursiveRemove(node.__children)}}if(node?.__node.tag&&node?.__parent){delete node?.__parent;node.__node.tag=node.__node.tag.substring(node.__node.tag.indexOf(".")+1)}return node};this.run=(node,...args)=>{if(typeof node==="string"){let nd=this.get(node);if(!nd&&node.includes(".")){nd=this.get(node.substring(0,node.lastIndexOf(".")));if(typeof nd?.[node.substring(node.lastIndexOf(".")+1)]==="function")return nd[node.substring(node.lastIndexOf(".")+1)](...args)}else if(nd?.__operator)return nd.__operator(...args)}if(node?.__operator){return node?.__operator(...args)}};this.setListeners=listeners=>{for(const key in listeners){let node=this.get(key);if(typeof listeners[key]==="object"){for(const k in listeners[key]){let n=this.get(k);let sub;if(typeof listeners[key][k]!=="object")listeners[key][k]={__callback:listeners[key][k]};else if(!listeners[key][k].__callback){for(const kk in listeners[key][k]){if(typeof listeners[key][k][kk]!=="object"){listeners[key][k][kk]={__callback:listeners[key][k][kk]};if(listeners[key][k][kk].__callback===true||typeof listeners[key][k][kk].__callback==="undefined")listeners[key][k][kk].__callback=node.__operator}let nn=this.get(kk);if(nn){if(!nn){let tag=k.substring(0,k.lastIndexOf("."));nn=this.get(tag);if(n){sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k][kk].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k][kk].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}else{sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}}}if("__callback"in listeners[key][k]){if(listeners[key][k].__callback===true||typeof listeners[key][k].__callback==="undefined")listeners[key][k].__callback=node.__operator;if(typeof listeners[key][k].__callback==="function")listeners[key][k].__callback=listeners[key][k].__callback.bind(node);if(typeof node.__listeners!=="object")node.__listeners={};if(!n){let tag=k.substring(0,k.lastIndexOf("."));n=this.get(tag);if(n){sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}else{sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}}}}};this.clearListeners=(node,listener)=>{if(typeof node==="string")node=this.get(node);if(node?.__listeners){for(const key in node.__listeners){if(listener&&key!==listener)continue;if(typeof node.__listeners[key]?.sub!=="number")continue;let n=this.get(key);if(!n){n=this.get(key.substring(0,key.lastIndexOf(".")));if(n){if(typeof node.__listeners[key]==="object"&&!node.__listeners[key]?.__callback){for(const k in node.__listeners[key]){if(typeof node.__listeners[key][k]?.sub==="number"){this.unsubscribe(n,node.__listeners[key][k].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}else{if(typeof!node.__listeners[key]?.__callback==="number"){for(const k in node.__listeners[key]){if(node.__listeners[key][k]?.sub){this.unsubscribe(n,node.__listeners[key][k].sub,void 0,node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,void 0,node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}}};this.get=tag=>{return this.__node.nodes.get(tag)};this.set=(tag,node)=>{return this.__node.nodes.set(tag,node)};this.delete=tag=>{return this.__node.nodes.delete(tag)};this.getProps=(node,getInitial)=>{if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){let cpy;if(getInitial)cpy=Object.assign({},this.__node.roots[node.__node.tag]);else{cpy=Object.assign({},node);for(const key in cpy){if(key.includes("__"))delete cpy[key]}}}};this.subscribe=(nodeEvent,onEvent,args,key,subInput,target,bound)=>{let nd=nodeEvent;if(typeof nodeEvent==="string"){nd=this.get(nodeEvent);if(!nd&&nodeEvent.includes(".")){nd=this.get(nodeEvent.substring(0,nodeEvent.lastIndexOf(".")));key=nodeEvent.substring(nodeEvent.lastIndexOf(".")+1)}}let sub;if(target instanceof GraphNode)target=target.__node.tag;if(typeof onEvent==="string"){let key2=onEvent;let setOnEventFromString=onEvent2=>{if(this.get(onEvent2)?.__operator){let node=this.get(onEvent2);onEvent2=function(...inp){return node.__operator(...inp)}}else if(onEvent2.includes(".")){let n=this.get(onEvent2.substring(0,onEvent2.lastIndexOf(".")));let key3=onEvent2.substring(onEvent2.lastIndexOf(".")+1);if(typeof n[key3]==="function"){if(n[key3]instanceof GraphNode)onEvent2=n[key3];else onEvent2=function(...inp){return n[key3](...inp)}}else{onEvent2=function(inp){n[key3]=inp;return n[key3]}}}return onEvent2};if(target){let node=this.get(target);if(typeof node?.[onEvent]==="function"){onEvent=function(...inp){return node[key2](...inp)}}else if(node[key2]){if(node[key2]instanceof GraphNode)onEvent=node[key2];else onEvent=function(inp){node[key2]=inp;return node[key2]}}else{onEvent=setOnEventFromString(onEvent)}}else{onEvent=setOnEventFromString(onEvent)}}if((typeof onEvent==="function"||onEvent instanceof GraphNode)&&args){if(onEvent instanceof GraphNode&&onEvent.__operator)onEvent=function(inp){return onEvent.__operator(inp)};onEvent=wrapArgs(onEvent,args,this)}if(nd instanceof GraphNode){sub=nd.__subscribe(onEvent,key,subInput,target,bound);let ondelete=()=>{nd.__unsubscribe(sub,key,subInput)};nd.__addOndisconnected(ondelete)}else if(typeof nodeEvent==="string"){if(this.get(nodeEvent)){if(onEvent instanceof GraphNode&&onEvent.__operator){sub=this.get(nodeEvent).__subscribe(onEvent.__operator,key,subInput,target,bound);let ondelete=()=>{this.get(nodeEvent).__unsubscribe(sub)};onEvent.__addOndisconnected(ondelete)}else if(typeof onEvent==="function"||typeof onEvent==="string"){sub=this.get(nodeEvent).__subscribe(onEvent,key,subInput,target,bound);this.__node.state.getEvent(this.get(nodeEvent).__node.unique,sub).source=nodeEvent}}else{if(typeof onEvent==="string")onEvent=this.__node.nodes.get(onEvent).__operator;if(typeof onEvent==="function")sub=this.__node.state.subscribeEvent(nodeEvent,onEvent)}}return sub};this.unsubscribe=(node,sub,key,subInput)=>{if(node instanceof GraphNode){return node.__unsubscribe(sub,key,subInput)}else return this.get(node)?.__unsubscribe(sub,key,subInput)};this.setState=update=>{this.__node.state.setState(update)};this.init(options)}};function recursivelyAssign(target,obj){for(const key in obj){if(obj[key]?.constructor.name==="Object"&&!Array.isArray(obj[key])){if(target[key]?.constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign(target[key],obj[key]);else target[key]=recursivelyAssign({},obj[key])}else{target[key]=obj[key]}}return target}function getAllProperties(obj){var allProps=[],curr=obj;do{var props=Object.getOwnPropertyNames(curr);let fn=function(prop){if(allProps.indexOf(prop)===-1)allProps.push(prop)};props.forEach(fn)}while(curr=Object.getPrototypeOf(curr));return allProps}function isNativeClass(thing){return isFunction(thing)==="class"}function isFunction(x){const res=typeof x==="function"?x.prototype?Object.getOwnPropertyDescriptor(x,"prototype")?.writable?"function":"class":x.constructor.name==="AsyncFunction"?"async":"arrow":"";return res}var wrapArgs=(callback,argOrder,graph)=>{let args=[];let getCallbackFromString=a=>{if(graph.get(a)?.__operator){let node=graph.get(a);return(...inp)=>{node.__operator(...inp)}}else if(a.includes(".")){let split=a.split(".");let popped=split.pop();let joined=split.join(".");let node=graph.get(joined);if(typeof graph.get(joined)?.[popped]==="function"){return(...inp)=>{return node[popped](...inp)}}else return()=>{return node[popped]}}else if(graph.get(a)){let node=graph.get(a);return()=>{return node}}else{let arg=a;return()=>{return arg}}};let forArg=(a,i2)=>{if(a==="__output"){args[i2]=inp=>{return inp}}else if(typeof a==="string"){args[i2]=getCallbackFromString(a)}else if(typeof a==="function"){let fn2=a;args[i2]=(...inp)=>{return fn2(...inp)}}else if(typeof a==="object"&&a.__input){let recursivelyCreateCallback=function(c){let input=c.__input;if(typeof c.__input==="string"){input=getCallbackFromString(c.__input)}if(c.__args){input=wrapArgs(input,c.__args,graph)}if(c.__output){let output=c.__output;if(typeof c.__output==="string"){output=getCallbackFromString(output)}else if(typeof a.__output==="object"){output=recursivelyCreateCallback(output)}if(typeof output==="function"){let fn2=input;input=(...inp)=>{return output(fn2(...inp))}}}return input};args[i2]=recursivelyCreateCallback(a)}else{let arg=a;args[i2]=()=>{return arg}}};argOrder.forEach(forArg);if(typeof callback==="string")callback=getCallbackFromString(callback);let fn=callback;callback=function(...inp){let mapArg=arg=>{return arg(...inp)};return fn(...args.map(mapArg))};return callback};var backprop=(node,parent,graph)=>{if(node.__node.backward&&parent instanceof GraphNode){graph.setListeners({[parent.__node.tag]:{[node.__node.tag]:parent}})}};var loop=(node,parent,graph)=>{if(node.__operator&&!node.__node.looperSet){if(typeof node.__node.delay==="number"){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{setTimeout(async()=>{res(await fn(...args))},node.__node.delay)})})}else if(node.__node.frame===true){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{requestAnimationFrame(async()=>{res(await fn(...args))})})})}if(typeof node.__node.repeat==="number"||typeof node.__node.recursive==="number"){let fn=node.__operator;node.__setOperator(async(...args)=>{let i2=node.__node.repeat?node.__node.repeat:node.__node.recursive;let result;let repeater=async(tick,...inp)=>{while(tick>0){if(node.__node.delay||node.__node.frame){fn(...inp).then(async res=>{if(node.__node.recursive){await repeater(tick,res)}else await repeater(tick,...inp)});break}else result=await fn(...args);tick--}};await repeater(i2,...args);return result})}if(node.__node.loop&&typeof node.__node.loop==="number"){node.__node.looperSet=true;let fn=node.__operator;node.__setOperator((...args)=>{if(!("looping"in node.__node))node.__node.looping=true;if(node.__node.looping){fn(...args);setTimeout(()=>{node.__operator(...args)},node.__node.loop)}});if(node.__node.looping)node.__operator();let ondelete=node2=>{if(node2.__node.looping)node2.__node.looping=false};node.__addOndisconnected(ondelete)}}};var animate=(node,parent,graph)=>{if(node.__node.animate===true||node.__animation){let fn=node.__operator;node.__setOperator((...args)=>{if(!("animating"in node.__node))node.__node.animating=true;if(node.__node.animating){if(typeof node.__animation==="function")node.__animation(...args);else fn(...args);requestAnimationFrame(()=>{node.__operator(...args)})}});if(node.__node.animating||(!("animating"in node.__node)||node.__node.animating)&&node.__animation)setTimeout(()=>{requestAnimationFrame(node.__operator)},10);let ondelete=node2=>{if(node2.__node.animating)node2.__node.animating=false};node.__addOndisconnected(ondelete)}};var branching=(node,parent,graph)=>{if(typeof node.__branch==="object"&&node.__operator&&!node.__branchApplied){let fn=node.__operator;node.__branchApplied=true;node.__operator=(...args)=>{let result=fn(...args);for(const key in node.__branch){let triggered=()=>{if(typeof node.__branch[key].then==="function"){node.__branch[key].then(result)}else if(node.__branch[key].then instanceof GraphNode&&node.__branch[key].then.__operator){node.__branch[key].then.__operator(result)}else result=node.__branch[key].then};if(typeof node.__branch[key].if==="function"){if(node.__branch[key].if(result)==true){triggered()}}else if(node.__branch[key].if===result){triggered()}}return result}}if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].branch&&!node.__listeners[key].branchApplied){let fn=node.__listeners[key].callback;node.__listeners[key].branchApplied=true;node.__listeners.callback=ret=>{let triggered=()=>{if(typeof node.__listeners[key].branch.then==="function"){ret=node.__listeners[key].branch.then(ret)}else if(node.__listeners[key].branch.then instanceof GraphNode&&node.__listeners[key].branch.then.__operator){ret=node.__listeners[key].branch.then.__operator(ret)}else ret=node.__listeners[key].branch.then};if(typeof node.__listeners[key].branch.if==="function"){if(node.__listeners[key].branch.if(ret)){triggered()}}else if(node.__listeners[key].branch.if===ret){triggered()}return fn(ret)}}}}}};var triggerListenerOncreate=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].oncreate){node.__listeners[key].callback(node.__listeners[key].oncreate)}}}}};var bindListener=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].binding==="object"){node.__listeners.callback=node.__listeners.callback.bind(node.__listeners[key].binding)}}}}};var transformListenerResult=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].transform==="function"&&!node.__listeners[key].transformApplied){let fn=node.__listeners[key].callback;node.__listeners[key].transformApplied=true;node.__listeners.callback=ret=>{ret=node.__listeners[key].transform(ret);return fn(ret)}}}}}};var substitute__operator=(node,parent,graph)=>{if(node.post&&!node.__operator){node.__setOperator(node.post)}else if(!node.__operator&&typeof node.get=="function"){node.__setOperator(node.get)}if(!node.get&&node.__operator){node.get=node.__operator}if(node.aliases){node.aliases.forEach(a=>{graph.set(a,node);let ondelete=node2=>{graph.__node.nodes.delete(a)};node.__addOndisconnected(ondelete)})}if(typeof graph.__node.roots?.[node.__node.tag]==="object"&&node.get)graph.__node.roots[node.__node.tag].get=node.get};var loaders={backprop,loop,animate,branching,triggerListenerOncreate,bindListener,transformListenerResult,substitute__operator};var recursivelyStringifyFunctions=obj=>{let cpy={};for(const key in obj){if(typeof obj[key]==="object"){cpy[key]=recursivelyStringifyFunctions(obj[key])}else if(typeof obj[key]==="function"){cpy[key]=obj[key].toString()}else cpy[key]=obj[key]}return cpy};function parseFunctionFromText(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs22(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs}var stringifyFast=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p in value[prop]){if(Array.isArray(value[prop][p])){if(value[prop][p].length>20)obj[prop][p]=value[prop][p].slice(value[prop][p].length-20);else obj[prop][p]=value[prop][p]}else{if(value[prop][p]!=null){let con=value[prop][p].constructor.name;if(con.includes("Set")){obj[prop][p]=Array.from(value[prop][p])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p]="instanceof_"+con}else{obj[prop][p]=value[prop][p]}}else{obj[prop][p]=value[prop][p]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast22(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast}function methodstrings(node){if(typeof node.__methods==="object"){for(const key in node.__methods){let fstr=node.__methods[key];let fn=typeof fstr==="function"?fstr:parseFunctionFromText(fstr);if(key==="__operator"){node.__setOperator(fn)}else{node[key]=fn.bind(node)}}}}var Service=class extends Graph{constructor(options){super({...options,loaders:options?.loaders?Object.assign({...loaders},options.loaders):{...loaders}});this.name=`service${Math.floor(Math.random()*1e15)}`;this.addServices=services=>{for(const s in services){if(typeof services[s]==="function")services[s]=new services[s];if(services[s]?.__node?.loaders)Object.assign(this.__node.loaders,services[s].__node.loaders);if(services[s]?.__node?.nodes){services[s].__node.nodes.forEach((n,tag)=>{if(!this.get(tag)){this.set(tag,n)}else this.set(s+"."+tag,n)});this.__node.nodes.forEach((n,k)=>{if(!services[s].__node.nodes.get(k))services[s].__node.nodes.set(k,n)});let set=this.set;this.set=(tag,node)=>{services[s].set(tag,node);return set(tag,node)};let del=this.delete;this.delete=tag=>{services[s].delete(tag);return del(tag)}}else if(typeof services[s]==="object"){this.load(services[s])}}};this.handleMethod=(route,method,args)=>{let m=method.toLowerCase();let src=this.__node.nodes.get(route);if(!src){src=this.__node.roots[route]}if(src?.[m]){if(typeof src[m]!=="function"){if(args){if(Array.isArray(args)&&args.length===1)src[m]=args[0];else src[m]=args;return}return src[m]}else{if(Array.isArray(args))return src[m](...args);else return src[m](args)}}else return this.handleServiceMessage({route,args,method})};this.transmit=(...args)=>{if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.receive=(...args)=>{if(args[0]){if(typeof args[0]==="string"){let substr=args[0].substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))args[0]=args[0].replace(/\\\\/g,"");if(args[0][0]===\'"\'){args[0]=args[0].substring(1,args[0].length-1)};args[0]=JSON.parse(args[0])}}}if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.pipe=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return this.subscribe(source,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.pipeOnce=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return source.__node.state.subscribeEventOnce(source.__node.unique,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.__node.state.subscribeEventOnce(source.__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.terminate=(...args)=>{};this.isTypedArray=isTypedArray;this.recursivelyAssign=recursivelyAssign2;this.spliceTypedArray=spliceTypedArray;this.ping=()=>{console.log("pinged!");return"pong"};this.echo=(...args)=>{this.transmit(...args);return args};if(options?.services)this.addServices(options.services);this.load(this)}handleServiceMessage(message){let call;if(typeof message==="object"){if(message.route)call=message.route;else if(message.node)call=message.node}if(call){if(Array.isArray(message.args))return this.run(call,...message.args);else return this.run(call,message.args)}else return message}handleGraphNodeCall(route,args){if(!route)return args;if(args?.args){this.handleServiceMessage(args)}else if(Array.isArray(args))return this.run(route,...args);else return this.run(route,args)}};function isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}var recursivelyAssign2=(target,obj)=>{for(const key in obj){if(obj[key].constructor.name==="Object"&&!Array.isArray(obj[key])){if(obj[key].constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign2(target[key],obj[key]);else target[key]=recursivelyAssign2({},obj[key])}else target[key]=obj[key]}return target};function spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let ta;if(s.length>0||e?.length>0)ta=new arr.constructor(s.length+e.length);if(ta){if(s.length>0)ta.set(s);if(e&&e.length>0)ta.set(e,s.length)}return ta}var nodeTemplates={};var remoteGraphRoutes={transferNode:(properties,connection,name2)=>{let str2;if(typeof properties==="object"){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}str2=recursivelyStringifyFunctions(properties)}else if(typeof properties==="function")str2=properties.toString();else if(typeof properties==="string")str2=properties;if(str2){if(connection.run)return connection.run("setNode",[str2]);else if(connection.postMessage){connection.postMessage({route:"setNode",args:str2},void 0);return new Promise(r=>r(name2))}else if(connection.send){connection.send(JSON.stringify({route:"setNode",args:str2}));return new Promise(r=>r(name2))}}},setNode:function(properties){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function")properties={__operator:f,__node:{tag:f.name}};else{f=JSON.parse(properties);if(typeof f==="object")properties=f}}if(typeof properties==="object"||typeof properties==="function"){let template=Object.assign({},properties);let node=this.__node.graph.add(properties);nodeTemplates[node.__node.tag]=template;return node.__node.tag}else return false},proxyRemoteNode:function(name2,connection){return new Promise((res,rej)=>{connection.run("getNodeProperties",name2).then(props=>{let proxy={};if(typeof props==="object"){for(const key in props){if(props[key]==="function"){proxy[key]=(...args)=>{return new Promise(r=>{connection.run(name2,args,key).then(r)})}}else{Object.defineProperty(proxy,key,{get:()=>{return new Promise(r=>{connection.run(name2,void 0,key).then(r)})},set:value=>{connection.post(name2,value,key)},configurable:true,enumerable:true})}}}res(proxy)})})},makeNodeTransferrable:function(properties,name2){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}const str2=recursivelyStringifyFunctions(properties);return str2},setTemplate:function(properties,name2){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function"){if(!name2)name2=f.name;properties={__operator:f,__node:{tag:name2}}}else{f=JSON.parse(properties);if(typeof f==="object"){properties=f;if(!name2&&f.__node?.tag)name2=f.__node.tag}}}if(!name2)name2=`node${Math.floor(Math.random()*1e15)}`;if(typeof properties==="object"||typeof properties==="function"){nodeTemplates[name2]=properties;return name2}else return false},loadFromTemplate:function(templateName,name2,properties){if(nodeTemplates[templateName]){let cpy=recursivelyAssign2({},nodeTemplates[templateName]);if(name2){if(!cpy.__node)cpy.__node={};cpy.__node.tag=name2}if(properties)Object.assign(cpy,properties);let node=this.__node.graph.add(cpy);return node.__node.tag}},setMethod:function(route,fn,methodKey){if(typeof fn==="string"){let f=parseFunctionFromText(fn);if(typeof f==="function")fn=f}if(!methodKey&&typeof fn==="function")methodKey=fn.name;if(this.__node.graph.get(route)){this.__node.graph.get(route)[methodKey]=fn}else this.__node.graph.add({__node:{tag:methodKey,[methodKey]:fn}});return true},assignNode:function(nodeTag,source){if(this.__node.graph.get(nodeTag)&&typeof source==="object"){Object.assign(this.__node.graph.get(nodeTag),source)}},getNodeProperties:function(nodeTag){let node=this.__node.graph.get(nodeTag);if(node){let properties=Object.getOwnPropertyNames(node);let result={};for(const key in properties){result[key]=typeof node[key]}return result}return void 0},transferClass:(classObj,connection,className)=>{if(typeof classObj==="object"){let str2=classObj.toString();let message={route:"receiveClass",args:[str2,className]};if(connection.run)return connection.run("receiveClass",[str2,className]);else if(connection.postMessage){connection.postMessage({route:"receiveClass",args:[str2,className]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"receiveClass",args:[str2,className]}));return new Promise(r=>r(name))}return message}return false},receiveClass:function(stringified,className){if(typeof stringified==="string"){if(stringified.indexOf("class")===0){let cls=(0,eval)("("+stringified+")");let name2=className;if(!name2)name2=cls.name;this.__node.graph[name2]=cls;return true}}return false},transferFunction:(fn,connection,fnName)=>{if(!fnName)fnName=fn.name;let str2=fn.toString();let message={route:"receiveClass",args:[str2,fnName]};if(connection.run)return connection.run("setFunction",[str2,fnName]);else if(connection.postMessage){connection.postMessage({route:"setFunction",args:[str2,fnName]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"setFunction",args:[str2,fnName]}));return new Promise(r=>r(name))}return message},setGlobal:(key,value)=>{globalThis[key]=value;return true},assignGlobalObject:(target,source)=>{if(!globalThis[target])return false;if(typeof source==="object")Object.assign(globalThis[target],source);return true},setValue:function(key,value){this.__node.graph[key]=value;return true},assignObject:function(target,source){if(!this.__node.graph[target])return false;if(typeof source==="object")Object.assign(this.__node.graph[target],source);return true},setGlobalFunction:(fn,fnName)=>{if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;globalThis[fnName]=fn;return true}return false},setGraphFunction:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.__node.graph[fnName]=fn;return true}return false}};var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};sjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid("invalid aes key size");this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]]};sjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;256>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d[m]=f,n=h[e=h[l=h[f]]],p=16843009*n^65537*e^257*l^16843008*f,n=257*h[m]^16843008*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};function t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid("invalid aes block size");var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,k,l,n=d.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v=h[2],w=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v[g>>8&255]^w[b&255]^d[p],k=a[f>>>24]^q[g>>16&255]^v[b>>8&255]^w[e&255]^d[p+1],l=a[g>>>24]^q[b>>16&255]^v[e>>8&255]^w[f&255]^d[p+2],b=a[b>>>24]^q[e>>16&255]^v[f>>8&255]^w[g&255]^d[p+3],p+=4,e=h,f=k,g=l;for(m=0;4>m;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return r}sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.$(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===b?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+1099511627776*a},getPartial:function(a){return Math.round(a/1099511627776)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return false;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===c},$:function(a,b,c,d){var e;e=0;for(void 0===d&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&65280|(c&65280)<<8|c<<24;return a}};sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\\s|0x/g,"");d=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};sjcl.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f="",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d?(k=a[c]<<d-g,g+=e,c++):(k<<=d,g-=d);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,"").toUpperCase();var c=sjcl.codec.base32.BITS,d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p){}throw new sjcl.exception.invalid("this isn\'t "+m+"!")}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};sjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};sjcl.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d="",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+="=";return d},toBits:function(a,b){a=a.replace(/\\s|=/g,"");var c=[],d,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d=0;d<a.length;d++){h=f.indexOf(a.charAt(d));if(0>h)throw new sjcl.exception.invalid("this isn\'t base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return new sjcl.hash.sha256().update(a).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(9007199254740991<a)throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d=new Uint32Array(c),e=0;for(b=512+b-(512+b&511);b<=a;b+=512)u(this,d.subarray(16*e,16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&511);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/4294967296));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a2){return 4294967296*(a2-Math.floor(a2))|0}for(var b=0,c=2,d,e;64>b;c++){e=true;for(d=2;d*d<=c;d++)if(0===c%d){e=false;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};function u(a,b){var c,d,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d=b[c]:(d=b[c+1&15],e=b[c+14&15],d=b[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d=d+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q=r,r=p,p=m,m=n+d|0,n=l,l=k,k=h,h=d+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=f[7]+q|0}sjcl.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d=d||[];if(7>k)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt("ccm: tag doesn\'t match");return k.data},na:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,k=h.i;d=[h.partial(8,(b.length?64:0)|d-2<<2|f-1)];d=h.concat(d,c);d[3]|=e;d=a.encrypt(d);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:4294967295>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d=a.encrypt(k(d,g.slice(b,b+4).concat([0,0,0])));return d},V:function(a,b,c,d,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid("ccm: invalid tag length");if(4294967295<d.length||4294967295<b.length)throw new sjcl.exception.bug("ccm: can\'t deal with 4GiB or more data");c=sjcl.mode.ccm.na(a,d,c,e,g.bitLength(b)/8,f);for(d=0;d<b.length;d+=4)c=a.encrypt(h(c,b.slice(d,d+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!k)return{tag:d,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,l)}}};sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));d.length&&(n=l(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl.bitArray.bitLength(b)-e,q=[];d=d||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d.length&&(l=k(l,f?d:sjcl.mode.ocb2.pmac(a,d)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt("ocb: tag doesn\'t match");return q.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d(f(h,d(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.C(true,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(false,a,f,d,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt("gcm: tag doesn\'t match");return a.data},ka:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.i;e=[0,0,0,0];f=b.slice(0);for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-520093696)}return e},j:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=4294967295&c[d],b[1]^=4294967295&c[d+1],b[2]^=4294967295&c[d+2],b[3]^=4294967295&c[d+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d,e,f){var g,h,k,l,n,m,p,r,q=sjcl.bitArray;m=c.length;p=q.bitLength(c);r=q.bitLength(d);h=q.bitLength(e);g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p);a&&(d=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/4294967296),r&4294967295,Math.floor(p/4294967296),p&4294967295];d=sjcl.mode.gcm.j(g,d,a);k=b.encrypt(e);d[0]^=k[0];d[1]^=k[1];d[2]^=k[2];d[3]^=k[3];return{tag:q.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=false};sjcl.misc.hmac.prototype.update=function(a){this.aa=true;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=new this.W(this.w[1]).update(a).finalize();this.reset();return a};sjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1e4;if(0>d||0>c)throw new sjcl.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d&&(l=n.clamp(l,d));return l};sjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=false;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=65536;this.T=[0,48,64,96,128,192,256,384,512,768,1024];this.da=3e4;this.ba=80};sjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;if(d===this.u)throw new sjcl.exception.notReady("generator isn\'t seeded");if(d&this.J){d=!(d&this.I);e=[];var f=0,g;this.Z=e[0]=new Date().valueOf()+this.da;for(g=0;16>g;g++)e.push(4294967296*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d=0;4>d&&(this.h[d]=this.h[d]+1|0,!this.h[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,b,c){c=c||"user";var d,e,f=new Date().valueOf(),g=this.H[c],h=this.isReady(),k=0;d=this.U[c];void 0===d&&(d=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case"number":void 0===b&&(b=1);this.c[g].update([d,this.N++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d,this.N++,2,b,f,a.length].concat(a))}break;case"string":void 0===b&&(b=a.length);this.c[g].update([d,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A("seeded",Math.max(this.o,this.f)),A("progress",this.getProgress()))},isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&new Date().valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,false),window.addEventListener("mousemove",this.a.mouseCollector,false),window.addEventListener("keypress",this.a.keyboardCollector,false),window.addEventListener("devicemotion",this.a.accelerometerCollector,false),window.addEventListener("touchmove",this.a.touchCollector,false);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl.exception.bug("can\'t attach event");this.D=true}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,false),window.removeEventListener("mousemove",this.a.mouseCollector,false),window.removeEventListener("keypress",this.a.keyboardCollector,false),window.removeEventListener("devicemotion",this.a.accelerometerCollector,false),window.removeEventListener("touchmove",this.a.touchCollector,false)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=false)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d,e=this.K[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C(this,0)},qa:function(a){a=a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C(this,0)}};function A(a,b){var c,d=sjcl.random.K[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy(new Date().valueOf(),b,"loadtime")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}function B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);a:try{if(G="undefined"!==typeof module&&module.exports){try{H=__require2("crypto")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array(new Uint8Array(D).buffer),sjcl.random.addEntropy(D,1024,"crypto[\'randomBytes\']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);else break a;sjcl.random.addEntropy(F,1024,"crypto[\'getRandomValues\']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}var D;var E;var F;var G;var H;sjcl.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&256!==f.ks||2>f.iv.length||4<f.iv.length)throw new sjcl.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d,f);d.key=a;f.ct="ccm"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,true);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&256!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f="ccm"===b.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d){var e=sjcl.json;return e.ia(a,e.decode(b),c,d)},encode:function(a){var b,c="{",d="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid("json encode: invalid property name");c+=d+\'"\'+b+\'":\';d=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+=\'"\'+escape(a[b])+\'"\';break;case"object":c+=\'"\'+sjcl.codec.base64.fromBits(a[b],0)+\'"\';break;default:throw new sjcl.exception.bug("json encode: unsupported type")}}return c+"}"},decode:function(a){a=a.replace(/\\s/g,"");if(!a.match(/^\\{.*\\}$/))throw new sjcl.exception.invalid("json decode: this isn\'t json!");a=a.replace(/^\\{|\\}$/g,"").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^\\s*(?:(["\']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i)))throw new sjcl.exception.invalid("json decode: this isn\'t json!");null!=d[3]?b[d[2]]=parseInt(d[3],10):null!=d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):null!=d[5]&&(b[d[2]]="true"===d[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d in b)if(b.hasOwnProperty(d)){if(c&&void 0!==a[d]&&a[d]!==b[d])throw new sjcl.exception.invalid("required parameter overridden");a[d]=b[d]}return a},sa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ra:function(a,b){var c={},d;for(d=0;d<b.length;d++)void 0!==a[b[d]]&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d;b=b||{};d=b.iter||1e3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};var _HTTPfrontend=class extends Service{constructor(options,path,fetched){super(options);this.name="http";this.fetchProxied=false;this.listening={};this.GET=(url="http://localhost:8080/ping",type="",mimeType)=>{if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"GET",url,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.POST=(message,url="http://localhost:8080/echo",type="",mimeType)=>{if(typeof message==="object"&&(type==="json"||type==="text"||!type)){message=JSON.stringify(message)}if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"POST",url,data:message,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.transmit=(message,url)=>{let obj=message;if(typeof obj==="object"){message=JSON.stringify(obj)}if(obj?.method?.toLowerCase()=="get"||message?.toLowerCase()==="get")return this.GET(url);return this.POST(message,url)};this.transponder=(url,message,type="",mimeType)=>{if(typeof message==="object")message=JSON.stringify(message);let method="GET";if(message){method="POST"}if(type==="json")mimeType="application/json";else return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method,url,data:message,responseType:type,onload:ev=>{let body=xhr.response;if(typeof body==="string"){let substr=body.substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))body=body.replace(/\\\\/g,"");if(body[0]===\'"\'){body=body.substring(1,body.length-1)};body=JSON.parse(body)}}if(typeof body?.method==="string"){return resolve(this.handleMethod(body.route,body.method,body.args))}else if(typeof body?.route==="string"){return resolve(this.handleServiceMessage(body))}else if(typeof body?.node==="string"||body.node instanceof GraphNode){return resolve(this.handleGraphNodeCall(body.node,body.args))}else return resolve(body)},onabort:er=>{reject(er)}})}).catch(console.error)};this.listen=(path2="0",fetched2=async(clone,args,response)=>{const result=await clone.text();const returned=this.receive(result);this.setState({[response.url]:returned})})=>{this.listening[path2]={};let listenerId=`${path2}${Math.floor(Math.random()*1e15)}`;this.listening[path2][listenerId]=fetched2;if(!this.fetchProxied){globalThis.fetch=new Proxy(globalThis.fetch,{apply(fetch,that,args){const result=fetch.apply(that,args);result.then(response=>{if(!response.ok)return;if(this.listening["0"]){for(const key in this.listeners){const clone=response.clone();this.listening["0"][key](clone,args,response)}}else{for(const key in this.listening){if(response.url.includes(key)){for(const key2 in this.listening[path2]){const clone=response.clone();this.listening[path2][key2](clone,args,response)}break}}}}).catch(er=>{console.error(er)});return result}});this.fetchProxied=true}return listenerId};this.stopListening=(path2,listener)=>{if(!path2&&path2!==0){for(const key in this.listening)delete this.listening[key]}else{if(!listener)delete this.listening[path2];else delete this.listening[listener]}};this.load(this);this.listen(path,fetched)}};var HTTPfrontend=_HTTPfrontend;HTTPfrontend.request=options=>{const xhr=new XMLHttpRequest;if(options.responseType)xhr.responseType=options.responseType;else options.responseType="json";if(options.mimeType){xhr.overrideMimeType(options.mimeType)}if(options.onload)xhr.addEventListener("load",options.onload,false);if(options.onprogress)xhr.addEventListener("progress",options.onprogress,false);if(options.onabort)xhr.addEventListener("abort",options.onabort,false);if(options.onloadend)xhr.addEventListener("loadend",options.onloadend,false);if(options.onerror)xhr.addEventListener("error",options.onerror,false);xhr.open(options.method,options.url,true,options.user,options.pass);if(!options.onerror)xhr.onerror=function(){xhr.abort()};xhr.send(options.data);return xhr};var import_web_worker=__toESM(require_browser());var WorkerService=class extends Service{constructor(options){super();this.name="worker";this.workers={};this.threadRot=0;this.loadWorkerRoute=(rt,routeKey)=>{if(rt.workerUrl)rt.url=rt.workerUrl;if(rt.workerId)rt.__node.tag=rt.workerId;if(!rt.__node.tag)rt.__node.tag=routeKey;rt._id=rt.__node.tag;let worker;if(this.workers[rt._id])worker=this.workers[rt._id];else if(rt.worker)worker=rt.worker;if(!worker){worker=this.addWorker(rt)}rt.worker=worker;if(!rt.worker.__ondisconnected){let ondelete=rt2=>{rt2.worker?.terminate()};rt.__addOndisconnected(ondelete)}if(rt.transferFunctions){for(const prop in rt.transferFunctions){this.transferFunction(worker,rt.transferFunctions[prop],prop)}}if(rt.transferClasses){for(const prop in rt.transferClasses){this.transferClass(worker,rt.transferClasses[prop],prop)}}if(worker){if(!rt.__operator){rt.__operator=(...args)=>{if(rt.callback){if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.post(rt.callback,args);else return worker.run(rt.callback,args)}else{if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.send(args);else return worker.request(args)}}}if(rt.init){worker.run(rt.init,rt.initArgs,void 0,rt.initTransfer)}return worker}};this.workerloader={"workers":(node,parent,graph,roots)=>{let rt=node;if(!node.parentRoute&&(parent?.callback&&parent?.worker))node.parentRoute=parent?.callback;if(rt?.worker||rt?.workerId||rt?.workerUrl){let worker=this.loadWorkerRoute(rt,rt.__node.tag);if(worker){if(!rt.parentRoute&&rt.__parent?.callback)rt.parentRoute=rt.__parent.callback;if(rt.__parent&&!rt.portId){if(typeof rt.__parent==="string"){if(rt.__node.tag!==rt.__parent&&worker._id!==rt.__parent)rt.portId=this.establishMessageChannel(worker,rt.__parent)}else if(rt.__node.tag!==rt.__parent?.__node?.tag&&worker._id!==rt.__parent?.tag){rt.portId=this.establishMessageChannel(worker,rt.__parent.worker)}};if(rt.parentRoute){if(!rt.stopped){if(typeof rt.__parent==="string"&&rt.__parent===worker._id){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else if(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.parentRoute,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id)&&!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent){if(typeof rt.__parent==="string"){if(!rt.stopped){if(rt.__parent===worker._id){worker.run("subscribe",[rt.__parent,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id))worker.workerSubs[rt.__parent+rt.portId]={sub:null,route:worker._id,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent?.__node?.tag&&rt.__parent?.worker){if(!rt.stopped){if(rt.__node.tag===rt.__parent.__node.tag||worker._id===rt.__parent.__node.tag){worker.run("subscribe",[rt.__parent.__node.tag,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent.__node.tag,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent.__node.tag+rt.portId].sub=sub})}if(!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.__parent.__node.tag+rt.portId]={sub:null,route:rt.__parent.__node.tag,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}}}}else if(rt.__parent&&rt.parentRoute){if(typeof rt.__parent==="string"&&roots[rt.__parent]?.worker){roots[rt.__parent].worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}else if(rt.__parent?.worker){rt.__parent.worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}}return rt}};this.addDefaultMessageListener=()=>{globalThis.onmessage=ev=>{let result=this.receive(ev.data);if(this.__node.keepState)this.setState({[this.name]:result})}};this.postMessage=(message,target,transfer)=>{if(this.workers[target]){this.workers[target].send(message,transfer)}else{globalThis.postMessage(message,target,transfer)}};this.addWorker=options2=>{let worker;if(!options2._id)options2._id=`worker${Math.floor(Math.random()*1e15)}`;if(options2.url)worker=new import_web_worker.default(options2.url);else if(options2.port){worker=options2.port}else if(this.workers[options2._id]){if(this.workers[options2._id].port)worker=this.workers[options2._id].port;else worker=this.workers[options2._id].worker}if(!worker)return;let send=(message,transfer)=>{return this.transmit(message,worker,transfer)};let post=(route,args,method,transfer)=>{let message={route,args};if(method)message.method=method;return this.transmit(message,worker,transfer)};let run=(route,args,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[{route,args},options2._id,callbackId]};if(method)req.args[0].method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let request=(message,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,options2._id,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let workerSubs={};let subscribe=(route,callback,args,key,subInput,blocking)=>{return this.subscribeToWorker(route,options2._id,callback,args,key,subInput,blocking)};let unsubscribe=(route,sub)=>{return run("unsubscribe",[route,sub])};let start=async(route,portId,callback,blocking)=>{if(route)await run("subscribeToWorker",[route,portId,void 0,callback,blocking]).then(sub=>{if(sub)workerSubs[route+portId]={sub,route,portId,callback,blocking}});else for(const key in workerSubs){if(typeof workerSubs[key].sub!=="number")await run("subscribeToWorker",[workerSubs[key].route,workerSubs[key].portId,void 0,workerSubs[key].callback,void 0,workerSubs[key].blocking]).then(sub=>{workerSubs[key].sub=sub});console.log(JSON.stringify(workerSubs))}return true};let stop=async(route,portId)=>{if(route&&portId&&workerSubs[route+portId]){await run("unsubscribe",[route,workerSubs[route+portId].sub]);workerSubs[route+portId].sub=false}else{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){await run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub]).then(console.log)}workerSubs[key].sub=false}}return true};let terminate=()=>{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}return this.terminate(options2._id)};if(!options2.onmessage)options2.onmessage=ev=>{this.receive(ev.data);this.setState({[options2._id]:ev.data})};if(!options2.onerror){options2.onerror=ev=>{console.error(ev.data)}}worker.onmessage=options2.onmessage;worker.onerror=options2.onerror;this.workers[options2._id]={worker,send,post,run,request,subscribe,unsubscribe,terminate,start,stop,postMessage:worker.postMessage,workerSubs,graph:this,...options2};return this.workers[options2._id]};this.open=this.addWorker;this.toObjectURL=scriptTemplate=>{let blob=new Blob([scriptTemplate],{type:"text/javascript"});return URL.createObjectURL(blob)};this.transmit=(message,worker,transfer)=>{if(!transfer){transfer=this.getTransferable(message)}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){worker.postMessage(message,transfer)}else if(typeof worker==="string"){if(this.workers[worker]){if(this.workers[worker].port)this.workers[worker].port.postMessage(message,transfer);else if(this.workers[worker].worker)this.workers[worker].worker.postMessage(message,transfer)}}else{let keys2=Object.keys(this.workers);this.workers[keys2[this.threadRot]].worker.postMessage(message,transfer);this.threadRot++;if(this.threadRot===keys2.length)this.threadRot=0}return message};this.terminate=worker=>{let onclose;if(typeof worker==="string"){let obj=this.workers[worker];if(obj){delete this.workers[worker];worker=obj.worker;if(obj.onclose)onclose=obj.onclose}}else if(typeof worker==="object"){if(worker?._id){worker=worker.worker;delete this.workers[worker?._id]}}if(worker instanceof import_web_worker.default){worker.terminate();if(onclose)onclose(worker);return true}if(worker instanceof MessagePort){worker.close();if(onclose)onclose(worker);return true}return false};this.establishMessageChannel=(worker,worker2)=>{let workerId;if(typeof worker==="string"){workerId=worker;if(this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker2=this.workers[worker].worker}}else if(worker?.worker){worker=worker.worker}if(typeof worker2==="string"){if(this.workers[worker2]){if(this.workers[worker2].port)worker2=this.workers[worker2].port;else worker2=this.workers[worker2].worker}}else if(worker2?.worker){worker2=worker2.worker}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){let channel=new MessageChannel;let portId=`port${Math.floor(Math.random()*1e15)}`;worker.postMessage({route:"addWorker",args:{port:channel.port1,_id:portId}},[channel.port1]);if(worker2 instanceof import_web_worker.default||worker2 instanceof MessagePort){worker2.postMessage({route:"addWorker",args:{port:channel.port2,_id:portId}},[channel.port2])}else if(workerId&&this.workers[workerId]){channel.port2.onmessage=this.workers[workerId].onmessage;this.workers[workerId].port=channel.port2}return portId}return false};this.request=(message,workerId,transfer,method)=>{let worker=this.workers[workerId].worker;return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};this.runRequest=(message,worker,callbackId)=>{let res=this.receive(message);if(typeof worker==="string"&&this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}if(res instanceof Promise){res.then(r=>{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:r,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:r,callbackId})})}else{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:res,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:res,callbackId})}return res};this.subscribeWorker=(route,worker,args,key,subInput,blocking)=>{let callback;if(blocking){let blocked=false;callback=res=>{if(!blocked){blocked=true;if(res instanceof Promise){res.then(r=>{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,r]).then(ret=>{blocked=false})})}else{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,res]).then(ret=>{blocked=false})}}}}else{callback=res=>{if(res instanceof Promise){res.then(r=>{if(worker?.postMessage)worker.postMessage({args:r,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:r,callbackId:route})})}else{if(worker?.postMessage)worker.postMessage({args:res,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:res,callbackId:route})}}}if(!blocking&&worker?.port){worker=worker.port}else if(!blocking&&worker?.worker){worker=worker.worker}else if(typeof worker==="string"&&this.workers[worker]){if(blocking)worker=this.workers[worker];else if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}return this.subscribe(route,callback,args,key,subInput)};this.subscribeToWorker=(route,workerId,callback,args,key,subInput,blocking)=>{if(typeof workerId==="string"&&this.workers[workerId]){this.__node.state.subscribeEvent(workerId,res=>{if(res?.callbackId===route){if(!callback)this.setState({[workerId]:res.args});else if(typeof callback==="string"){this.run(callback,res.args)}else callback(res.args)}});return this.workers[workerId].run("subscribeWorker",[route,workerId,args,key,subInput,blocking])}};this.triggerSubscription=async(route,workerId,result)=>{if(this.__node.state.triggers[workerId])for(let i2=0;i2<this.__node.state.triggers[workerId].length;i2++){await this.__node.state.triggers[workerId][i2].onchange({args:result,callbackId:route})}return true};this.pipeWorkers=(sourceWorker,listenerWorker,sourceRoute,listenerRoute,portId,args,key,subInput,blocking)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof listenerWorker==="string")listenerWorker=this.workers[listenerWorker];if(!portId){portId=this.establishMessageChannel(sourceWorker.worker,listenerWorker.worker)}return listenerWorker.run("subscribeToWorker",[sourceRoute,portId,listenerRoute,args,key,subInput,blocking])};this.unpipeWorkers=(sourceRoute,sourceWorker,sub)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof sourceWorker==="object"){return sourceWorker.run("unsubscribe",[sourceRoute,sub])}};this.connections={workers:this.workers};if(options?.services)this.addServices(options.services);this.load(this);this.setLoaders(this.workerloader);if(options)this.init(options);if(typeof WorkerGlobalScope!=="undefined"&&globalThis instanceof WorkerGlobalScope){this.addDefaultMessageListener()}}getTransferable(message){let transfer;if(typeof message==="object"){if(message.args){if(message.args?.constructor?.name==="Object"){for(const key in message.args){if(ArrayBuffer.isView(message.args[key])){if(!transfer)transfer=[message.args[key].buffer];else transfer.push(message.args[key].buffer)}else if(message.args[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message.args[key]];else transfer.push(message.args[key])}}}else if(Array.isArray(message.args)&&message.args.length<11){message.args.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg?.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message.args)){transfer=[message.args.buffer]}else if(message.args?.constructor?.name==="ArrayBuffer"){transfer=[message]}}else if(message?.constructor?.name==="Object"){for(const key in message){if(ArrayBuffer.isView(message[key])){if(!transfer)transfer=[message[key].buffer];else transfer.push(message[key].buffer)}else if(message[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message[key]];else transfer.push(message[key])}}}else if(Array.isArray(message)&&message.length<11){message.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message)){transfer=[message.buffer]}else if(message.constructor?.name==="ArrayBuffer"){transfer=[message]}}return transfer}};var mouseEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","button","pointerType","clientX","clientY","pageX","pageY","movementX","movementY","x","y","timeStamp"]);var wheelEventHandlerImpl=makeSendPropertiesHandler(["deltaX","deltaY"]);var keydownEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","altKey","isComposing","keyCode","key","code","repeat","timeStamp"]);function focusEventHandler(event,sendFn){const data={type:event.type};data.isTrusted=event.isTrusted;data.bubbles=event.bubbles;data.cancelBubble=event.cancelBubble;data.cancelable=event.cancelable;data.composed=event.composed;data.defaultPrevent=event.defaultPrevented;data.eventPhase=event.eventPhase;data.returnValue=event.returnValue;data.currentTarget=event.currentTarget.id?event.currentTarget.id:event.currentTarget.constructor.name;data.target=data.currentTarget;data.srcElement=data.currentTarget;sendFn(data)}function wheelEventHandler(event,sendFn){event.preventDefault();wheelEventHandlerImpl(event,sendFn)}function preventDefaultHandler(event){event.preventDefault()}function copyProperties(src,properties,dst){for(const name2 of properties){dst[name2]=src[name2]}}function makeSendPropertiesHandler(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties(event,properties,data);sendFn(data)}}function touchEventHandler(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i2=0;i2<event.touches.length;++i2){const touch=event.touches[i2];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var i=1;var keys={};while(i<222){keys[i]=true;i++}function filteredKeydownEventHandler(event,sendFn){let{keyCode}=event;if(keys[keyCode]){if(event.preventDefault&&(keyCode<110||keyCode>123))event.preventDefault();keydownEventHandler(event,sendFn)}}var eventHandlers={contextmenu:preventDefaultHandler,mousedown:mouseEventHandler,mousemove:mouseEventHandler,mouseup:mouseEventHandler,pointerdown:mouseEventHandler,pointermove:mouseEventHandler,pointerup:mouseEventHandler,pointerlockchange:mouseEventHandler,webkitpointerlockchange:mouseEventHandler,focus:focusEventHandler,blur:focusEventHandler,pointerout:mouseEventHandler,touchstart:touchEventHandler,touchmove:touchEventHandler,touchend:touchEventHandler,wheel:wheelEventHandler,keydown:filteredKeydownEventHandler,keyup:filteredKeydownEventHandler};function initProxyElement(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{if(!worker){handleProxyEvent(data,id)}else worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}if(eventHandlers.keydown){globalThis.addEventListener("keydown",function(ev){eventHandlers.keydown(ev,sendEvent)})}if(eventHandlers.keyup){globalThis.addEventListener("keyup",function(ev){eventHandlers.keyup(ev,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher=class{addEventListener(type,listener){if(this.__listeners===void 0)this.__listeners={};const listeners=this.__listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this.__listeners===void 0)return false;const listeners=this.__listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i2=0,l=array.length;i2<l;i2++){array[i2].call(this,event)}}}};function noop(){}var ElementProxyReceiver=class extends EventDispatcher{constructor(){super();this.__listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.style.width=this.width+"px";this.proxied.style.height=this.height+"px";this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop;data.stopPropagation=noop;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}blur(){}};var ProxyManager=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;if(typeof WorkerGlobalScope!=="undefined")addTo.style=proxy.style;if(proxy.width){addTo.style.width=proxy.width+"px";addTo.clientWidth=proxy.width}if(proxy.height){addTo.style.height=proxy.height+"px";addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy);addTo.blur=proxy.blur.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={elementFromPoint:(...args)=>{return this.targets[Object.keys(this.targets)[0]].proxied}}}};function makeProxy(id,elm){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;this.__node.graph.ProxyManager.makeProxy(id,elm)}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;globalThis.ProxyManager.makeProxy(id,elm)}return id}function handleProxyEvent(data,id){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;if(this.__node.graph.ProxyManager.handleEvent(data,id))return data}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;if(globalThis.ProxyManager.handleEvent(data,id))return data}}var proxyElementWorkerRoutes={initProxyElement,makeProxy,handleProxyEvent};function Renderer(options){if(options.worker){let worker=options.worker;let route=options.route;if(worker instanceof Blob||typeof worker==="string"){worker=new Worker(worker)}delete options.worker;delete options.route;return transferCanvas(worker,options,route)}else{initProxyElement(options.canvas,void 0,options._id);return setupCanvas(options)}}function transferCanvas(worker,options,route){console.log(options);if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();if(!options.width)options.width=options.canvas.clientWidth;if(!options.height)options.height=options.canvas.clientHeight;let message={route:route?route:"setupCanvas",args:{...options,canvas:offscreen}};if(this?.__node?.graph)this.__node.graph.run("initProxyElement",options.canvas,worker,options._id);else initProxyElement(options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let tr=[offscreen];if(options.transfer){tr.push(...options.transfer);delete options.transfer}worker.postMessage(message,tr);const canvascontrols={_id:options._id,width:options.width,height:options.height,worker,draw:(props,transfer)=>{worker.postMessage({route:"drawFrame",args:[props,options._id]},transfer)},update:(props,transfer)=>{worker.postMessage({route:"updateCanvas",args:[props,options._id]},transfer)},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:(newDrawProps,transfer)=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]},transfer)},terminate:()=>{worker.terminate()}};return canvascontrols}function setDraw(settings,_id){let canvasopts;if(this?.__node?.graph){if(_id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]]}else{if(_id)canvasopts=globalThis.CANVASES?.[settings._id];else if(settings._id)canvasopts=globalThis.CANVASES?.[settings._id];else canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]]}if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasopts._id,canvasopts.canvas);else proxyElementWorkerRoutes.makeProxy(canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText3(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw.bind(settings)}if(typeof settings.update==="string")settings.update=parseFunctionFromText3(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update.bind(settings)}if(typeof settings.init==="string")settings.init=parseFunctionFromText3(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init.bind(settings)}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText3(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear.bind(settings)}return settings._id}return void 0}function setupCanvas(options){if(this?.__node?.graph){if(!this.__node.graph.CANVASES)this.__node.graph.CANVASES={}}else if(!globalThis.CANVASES)globalThis.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this?.__node?.graph?.CANVASES[canvasOptions._id]){this.__node.graph.run("setDraw",canvasOptions)}else if(globalThis.CANVASES?.[canvasOptions._id]){setDraw(canvasOptions)}else{if(this?.__node?.graph){canvasOptions.graph=this.__node.graph;if(!canvasOptions.__node){canvasOptions.__node={}}if(!canvasOptions.__node.tag)canvasOptions.__node.tag=canvasOptions._id;canvasOptions=this.__node.graph.add(canvasOptions);canvasOptions.__addOndisconnected=()=>{canvasOptions.stop();delete this.__node.graph.CANVASES[canvasOptions._id]}}if(this?.__node?.graph)this.__node.graph.CANVASES[canvasOptions._id]=canvasOptions;else globalThis.CANVASES[canvasOptions._id]=canvasOptions;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);else proxyElementWorkerRoutes.makeProxy(canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText3(canvasOptions.draw)}else if(typeof canvasOptions.draw==="function"){canvasOptions.draw=canvasOptions.draw.bind(canvasOptions)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText3(canvasOptions.update)}else if(typeof canvasOptions.update==="function"){canvasOptions.update=canvasOptions.update.bind(canvasOptions)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText3(canvasOptions.init)}else if(typeof canvasOptions.init==="function"){canvasOptions.init=canvasOptions.init.bind(canvasOptions)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText3(canvasOptions.clear)}else if(typeof canvasOptions.clear==="function"){canvasOptions.clear=canvasOptions.clear.bind(canvasOptions)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);canvasOptions.stop=()=>{stopAnim(canvasOptions._id)};canvasOptions.start=draw=>{startAnim(canvasOptions._id,draw)};canvasOptions.set=settings=>{setDraw(settings,canvasOptions._id)};if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)return canvasOptions._id;else{const canvascontrols={_id:options._id,width:options.width,height:options.height,draw:props=>{drawFrame(props,options._id)},update:props=>{updateCanvas(props,options._id)},clear:()=>{clearCanvas(options._id)},init:()=>{initCanvas(options._id)},stop:()=>{stopAnim(options._id)},start:()=>{startAnim(options._id)},set:newDrawProps=>{setDraw(newDrawProps,options._id)},terminate:()=>{if(this.__node?.graph)this.__node.graph.remove(options._id);else{stopAnim(options._id);if(this?.__node?.graph)delete this.__node.graph.CANVASES[canvasOptions._id];else delete globalThis.CANVASES[canvasOptions._id]}}};return canvascontrols}}function drawFrame(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0}function clearCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function initCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function updateCanvas(input,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0}function setProps(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0}function startAnim(_id,draw){let canvasopts=getCanvas.call(this,_id);canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText3(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function stopAnim(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")requestAnimationFrame(canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context));return _id}return void 0}function getCanvas(_id){let canvasopts;if(this?.__node?.graph){if(!_id)canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];else canvasopts=this.__node.graph.CANVASES?.[_id]}else{if(!_id)canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];else canvasopts=globalThis.CANVASES?.[_id]}return canvasopts}var workerCanvasRoutes={...proxyElementWorkerRoutes,Renderer,transferCanvas,setupCanvas,setDraw,drawFrame,clearCanvas,initCanvas,updateCanvas,setProps,startAnim,stopAnim,getCanvas};function parseFunctionFromText3(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var _ArrayManip=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y2=>{if(clamp){if(y2<min)y2=min;if(y2>max)y2=max}return y2*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y2=>{if(clamp){if(y2<min)y2=min;if(y2>max)y2=max}return 2*((y2-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps9){let now=Date.now();let toInterp=[now-ct*1e3/sps9,now];return _ArrayManip.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i2=incr;i2<array.length;i2+=incr){let rounded=Math.round(i2);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i2=1;i2<fitCount-1;i2++){var tmp=i2*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i2]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x;b=0}else if(60<=h&&h<120){r=x;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x}else if(180<=h&&h<240){r=0;g=x;b=c}else if(240<=h&&h<300){r=x;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d={};data.forEach((arr,i2)=>{d[i2]=arr});data=d;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\r\\n")){let lines=data.split("\\r\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}if(Array.isArray(split)){split.forEach((val,i2)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl=parseFloat(v);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i2]=[fl];else return void 0}})}})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(Array.isArray(split)){split.forEach((val,i2)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl=parseFloat(v);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i2]=[fl];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_,i2)=>lastValue+slopeIncr*(i2+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip=_ArrayManip;ArrayManip.bufferValues=(objects,property,keys2,buffer)=>{if(!Array.isArray(keys2)&&typeof keys2==="object")keys2=Object.keys(keys2);if(!buffer){let object_keys=Object.keys(objects);if(keys2)buffer=new Float32Array(object_keys.length*keys2.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys2=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys2.length)}else buffer=new Float32Array(object_keys.length)}}let i2=0;for(const key in objects){if(objects[key][property]){if(keys2){for(let j=0;j<keys2.length;j++){buffer[i2]=objects[key][property][keys2[j]];i2++}}else{buffer[i2]=objects[key][property];i2++}}}return buffer};var rechk=/^([<>])?(([1-9]\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt=/([1-9]\\d*)?([xcbB?hHiIfdsp])/g;var str=(v,o,c)=>String.fromCharCode(...new Uint8Array(v.buffer,v.byteOffset+o,c));var rts=(v,o,c,s)=>new Uint8Array(v.buffer,v.byteOffset+o,c).set(s.split("").map(str2=>str2.charCodeAt(0)));var pst=(v,o,c)=>str(v,o+1,Math.min(v.getUint8(o),c-1));var tsp=(v,o,c,s)=>{v.setUint8(o,s.length);rts(v,o+1,c-1,s)};var lut=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v=>str(v,o,1),p:(v,c2)=>rts(v,o,1,c2)})],"?":c=>[c,1,o=>({u:v=>Boolean(v.getUint8(o)),p:(v,B2)=>v.setUint8(o,B2)})],b:c=>[c,1,o=>({u:v=>v.getInt8(o),p:(v,b)=>v.setInt8(o,b)})],B:c=>[c,1,o=>({u:v=>v.getUint8(o),p:(v,B2)=>v.setUint8(o,B2)})],h:c=>[c,2,o=>({u:v=>v.getInt16(o,le),p:(v,h)=>v.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v=>v.getUint16(o,le),p:(v,H2)=>v.setUint16(o,H2,le)})],i:c=>[c,4,o=>({u:v=>v.getInt32(o,le),p:(v,i2)=>v.setInt32(o,i2,le)})],I:c=>[c,4,o=>({u:v=>v.getUint32(o,le),p:(v,I)=>v.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v=>v.getFloat32(o,le),p:(v,f)=>v.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v=>v.getFloat64(o,le),p:(v,d)=>v.setFloat64(o,d,le)})],s:c=>[1,c,o=>({u:v=>str(v,o,c),p:(v,s)=>rts(v,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v=>pst(v,o,c),p:(v,s)=>tsp(v,o,c,s.slice(0,c-1))})]});var errbuf=new RangeError("Structure larger than remaining buffer");var errval=new RangeError("Not enough values for structure");var _ByteParser=class extends ArrayManip{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i2=search(haystack);i2!==-1;i2=search(haystack,i2+skip)){indices.push(i2);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y2){return[y2&255,y2>>8&255]}static bytesToInt24(x0,x1,x2){let int24=(255&x0)<<16|(255&x1)<<8|255&x2;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x2){return x0*65536+x1*256+x2}static Uint24ToBytes(y2){return[y2&255,y2>>8&255,y2>>16&255]}static bytesToInt32(x0,x1,x2,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x2)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x2,x3){return x0*16777216+x1*65536+x2*256+x3}static Uint32ToBytes(y2){return[y2&255,y2>>8&255,y2>>16&255,y2>>24&255]}static get2sCompliment(val,nbits3){if(val>4294967296)return null;return val<<32-nbits3>>32-nbits3}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i2=0;i2<input.length;i2++){var c=input.charCodeAt(i2);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i2]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser.asUint8Array(patternBuffer);var M=pattern.length;if(M===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R=256;var rightmost_positions=new Int32Array(R);for(var c=0;c<R;c++){rightmost_positions[c]=-1}for(var j=0;j<M;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i2=start;i2<=lastIndex;i2+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i2+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i2}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk.exec(format);if(!m){throw new RangeError("Invalid format string")}const t2=lut("<"===m[1]),lu=(n,c)=>t2[c](n?parseInt(n,10):1);while(m=refmt.exec(format)){((r,s,f)=>{for(let i2=0;i2<r;++i2,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf}let v=new DataView(arrb,offs|0);return fns.map(f=>f.u(v))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval}if(arrb.byteLength<offs+size){throw errbuf}const v=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i2)=>f.p(v,values[i2]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser=_ByteParser;ByteParser.codes={"\\\\n":10,"\\\\r":13,"\\\\t":9,"\\\\s":32,"\\\\b":8,"\\\\f":12,"\\\\":92};var WebSerial=class extends ByteParser{constructor(){super(...arguments);this.streams={};this.createStream=options=>{let stream={_id:options._id?options._id:`stream${Math.floor(Math.random()*1e15)}`,info:options.port.getInfo(),running:false,...options};if(options.port?.readable){if(options.transforms){stream.reader=WebSerial.setStreamTransforms(options.port.readable,options.transforms).getReader()}else{stream.reader=options.port.readable.getReader()}}this.streams[stream._id]=stream;return stream}}getPorts(){return navigator.serial.getPorts()}requestPort(usbVendorId,usbProductId){let options={};if(usbVendorId){options.usbVendorId=usbVendorId}if(usbProductId){options.usbProductId=usbProductId}if(options.usbVendorId)return navigator.serial.requestPort({filters:[options]});else return navigator.serial.requestPort()}openPort(port,options){if(options)options=Object.assign({},options);if(options?.ondisconnect){port.ondisconnect=options.ondisconnect;delete options.ondisconnect}return port.open(options).then(()=>{if(options?.onconnect)options.onconnect(port)})}async readWithTimeout(port,timeout){const reader=port.readable.getReader();const timer=setTimeout(()=>{reader.releaseLock()},timeout);const result=await reader.read();clearTimeout(timer);reader.releaseLock();return result}async writePort(port,message){const writer=port.writable.getWriter();await writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}getSignals(port){return port.getSignals()}setSignals(port,signals){return port.setSignals(signals)}readStream(stream){if(stream.reader&&!stream.running){let reader=stream.reader;if(stream.buffering){if(typeof stream.buffering!=="object")stream.buffering={};if(!stream.buffering.buffer){stream.buffering.buffer=[]}if(!stream.buffering.searchBytes)stream.buffering.searchBytes=new Uint8Array([13,10])}let readLoop=()=>{if(stream.port.readable&&stream.running){reader.read().then(result=>{if(result.done)reader.releaseLock();else{if(stream.buffering){stream.buffering.buffer.push(...result.value);const needle=stream.buffering.searchBytes;const haystack=stream.buffering.buffer;const search=WebSerial.boyerMoore(needle);const skip=search.byteLength;let nextIndex=-1;let used=stream.buffering.lockIdx??0;for(var i2=search(haystack);i2!==-1;i2=search(haystack,i2+skip)){if(!stream.buffering.locked&&!("lockIdx"in stream.buffering))used=stream.buffering.lockIdx=i2;else{nextIndex=i2;if(nextIndex>=0){const len=nextIndex-used;if(!stream.buffering.locked){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(data);stream.buffering.locked=true}else if(len>0){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(new Uint8Array(data))}used=nextIndex}}}}else stream.ondata(result.value);setTimeout(()=>{readLoop()},stream.frequency)}}).catch(er=>{console.error(stream._id," Read error:",er);if(er.message.includes("overrun")||er.message.includes("framing")){delete stream.reader;this.reconnect(stream)}})}else if(!stream.running&&stream.port.readable){try{reader.releaseLock()}catch(er){console.error(er)}}};stream.running=true;readLoop();return stream}return void 0}writeStream(stream,message){if(typeof stream==="string")stream=this.streams[stream];if(stream.port.writable){let writer=stream.port.writable.getWriter();writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}return void 0}closeStream(stream,onclose){if(typeof stream==="string")stream=this.streams[stream];stream.running=false;return new Promise((res,rej)=>{if(stream.settings.beforedisconnect){stream.settings.beforedisconnect(this,stream.port)}setTimeout(async()=>{if(stream.port.readable&&stream.reader){try{stream.reader.releaseLock()}catch(er){console.error(er)}if(stream.transforms)try{await stream.reader.cancel()}catch(err){console.error(err)}}try{await stream.port.close().then(()=>{if(onclose)onclose(this.streams[stream._id])});delete this.streams[stream._id];res(true)}catch(er){rej(er)}},300)})}reconnect(stream,options){if(typeof stream==="string")stream=this.streams[stream];return new Promise((res,rej)=>{if(typeof stream!=="object"){rej(void 0);return}let info=stream.port.getInfo();this.closeStream(stream._id).then(closed=>{setTimeout(()=>{this.getPorts().then(ports=>{for(let i2=0;i2<ports.length;i2++){if(ports[i2].getInfo().usbVendorId===info.usbVendorId&&ports[i2].getInfo().usbProductId===info.usbProductId){if(!options)options=stream;else options._id=stream._id;delete options.port;this.openPort(ports[i2],options.settings).then(()=>{const stream2=this.createStream({...options,port:ports[i2]});this.readStream(stream2);res(stream2)}).catch(rej)}}}).catch(rej)},100)})})}static setStreamTransforms(stream,transforms){let transform=[];Object.keys(transforms).forEach(t2=>{let opt=transforms[t2];if(opt instanceof TransformStream){transform.push(opt)}else{if(!opt.start)opt.start=function start(){};if(!opt.flush)opt.flush=function flush(){};let transformer=new TransformStream({start:opt.start,transform:opt.transform,flush:opt.flush},opt.writableStrategy,opt.readableStrategy);transform.push(transformer)}});let str2=stream;transform.forEach(transform2=>{str2=str2.pipeThrough(transform2)});return str2}};function ads131m08codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array(9),1:new Array(9),2:new Array(9),3:new Array(9),4:new Array(9),5:new Array(9),6:new Array(9),7:new Array(9),timestamp:Date.now()};for(let i2=0;i2<9;i2++){let j=i2*25;output[0][i2]=ByteParser.bytesToInt24(arr[j],arr[j+1],arr[j+2]);output[1][i2]=ByteParser.bytesToInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i2]=ByteParser.bytesToInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i2]=ByteParser.bytesToInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i2]=ByteParser.bytesToInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i2]=ByteParser.bytesToInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i2]=ByteParser.bytesToInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i2]=ByteParser.bytesToInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var decoder=new TextDecoder;function ads131m08_arduinocodec(data){const parsed=decoder.decode(data);let split;if(parsed.includes("|"))split=parsed.split("|");else if(split.includes(","))split=parsed.split(",");else split=parsed.split("	");return{"0":parseInt(split[0]),"1":parseInt(split[1]),"2":parseInt(split[2]),"3":parseInt(split[3]),"4":parseInt(split[4]),"5":parseInt(split[5]),"6":parseInt(split[6]),"7":parseInt(split[7]),timestamp:Date.now()}}var sps=250;var defaultChartSetting={nSec:10,sps,units:"mV"};var ads131m08ChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting)),"1":JSON.parse(JSON.stringify(defaultChartSetting)),"2":JSON.parse(JSON.stringify(defaultChartSetting)),"3":JSON.parse(JSON.stringify(defaultChartSetting)),"4":JSON.parse(JSON.stringify(defaultChartSetting)),"5":JSON.parse(JSON.stringify(defaultChartSetting)),"6":JSON.parse(JSON.stringify(defaultChartSetting)),"7":JSON.parse(JSON.stringify(defaultChartSetting))}};var gain=32;var nbits=24;var vref=1.2;var defaultsetting={sps,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref/(gain*(Math.pow(2,nbits)-1))};var ads131m08FilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting)),"1":JSON.parse(JSON.stringify(defaultsetting)),"2":JSON.parse(JSON.stringify(defaultsetting)),"3":JSON.parse(JSON.stringify(defaultsetting)),"4":JSON.parse(JSON.stringify(defaultsetting)),"5":JSON.parse(JSON.stringify(defaultsetting)),"6":JSON.parse(JSON.stringify(defaultsetting)),"7":JSON.parse(JSON.stringify(defaultsetting))};var accScale=.002/Math.pow(2,4);var getAcc=(arr,output,channels=8)=>{const accIdx=channels*3+1;const sum=(a,b)=>a+b;const accSum=arr.slice(accIdx).reduce(sum,0);if(accSum!==0){output.ax=accScale*ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output.ay=accScale*ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output.az=accScale*ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5])}};function cytoncodec(data){let arr;if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<8;i2++){let idx=1+3*i2;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);output.timestamp=Date.now();return output}function daisycytoncodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<8;i2++){let idx=1+3*i2;if(arr[0]%2===0)output[i2+7]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2]);else output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);return output}var sps2=250;var cytonSerialSettings={deviceType:"USB",deviceName:"cyton",baudRate:115200,codec:cytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var daisycytonSerialSettings={deviceType:"USB",deviceName:"cyton_daisy",baudRate:115200,codec:daisycytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var defaultChartSetting2={nSec:10,sps:sps2,units:"mV"};var defaultChartSetting22={nSec:10,sps:sps2};var cytonChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting2)),"1":JSON.parse(JSON.stringify(defaultChartSetting2)),"2":JSON.parse(JSON.stringify(defaultChartSetting2)),"3":JSON.parse(JSON.stringify(defaultChartSetting2)),"4":JSON.parse(JSON.stringify(defaultChartSetting2)),"5":JSON.parse(JSON.stringify(defaultChartSetting2)),"6":JSON.parse(JSON.stringify(defaultChartSetting2)),"7":JSON.parse(JSON.stringify(defaultChartSetting2)),"ax":JSON.parse(JSON.stringify(defaultChartSetting22)),"ay":JSON.parse(JSON.stringify(defaultChartSetting22)),"az":JSON.parse(JSON.stringify(defaultChartSetting22))},generateNewLines:true};var defaultsetting2={sps:sps2,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*4.5/(24*(Math.pow(2,23)-1))};var cytonFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting2)),"1":JSON.parse(JSON.stringify(defaultsetting2)),"2":JSON.parse(JSON.stringify(defaultsetting2)),"3":JSON.parse(JSON.stringify(defaultsetting2)),"4":JSON.parse(JSON.stringify(defaultsetting2)),"5":JSON.parse(JSON.stringify(defaultsetting2)),"6":JSON.parse(JSON.stringify(defaultsetting2)),"7":JSON.parse(JSON.stringify(defaultsetting2)),"8":JSON.parse(JSON.stringify(defaultsetting2)),"9":JSON.parse(JSON.stringify(defaultsetting2)),"10":JSON.parse(JSON.stringify(defaultsetting2)),"11":JSON.parse(JSON.stringify(defaultsetting2)),"12":JSON.parse(JSON.stringify(defaultsetting2)),"13":JSON.parse(JSON.stringify(defaultsetting2)),"14":JSON.parse(JSON.stringify(defaultsetting2)),"15":JSON.parse(JSON.stringify(defaultsetting2))};function freeeeg128codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<128;i2++){let idx=i2*3+1;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=385;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps3=250;var freeeeg128SerialSettings={deviceType:"USB",deviceName:"freeeeg128",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg128codec,sps:sps3,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg128ChartSettings={lines:{"ax":{nSec:10,sps:sps3},"ay":{nSec:10,sps:sps3},"az":{nSec:10,sps:sps3},"gx":{nSec:10,sps:sps3},"gy":{nSec:10,sps:sps3},"gz":{nSec:10,sps:sps3}}};var freeeeg128FilterSettings={};for(let i2=0;i2<128;i2++){freeeeg128ChartSettings.lines[i2]={sps:sps3,nSec:10,units:"mV"};freeeeg128FilterSettings[i2]={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,scalar:1e3*2.5/(32*(Math.pow(2,24)-1))}}function freeeeg32codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<32;i2++){let idx=i2*3+1;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=97;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps4=512;var freeeeg32SerialSettings={deviceType:"USB",deviceName:"freeeeg32",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg32_optical_SerialSettings={deviceType:"USB",deviceName:"freeeeg32_optical",baudRate:1e6,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var defaultChartSetting3={nSec:10,sps:sps4};var freeeeg32ChartSettings={lines:{"ax":JSON.parse(JSON.stringify(defaultChartSetting3)),"ay":JSON.parse(JSON.stringify(defaultChartSetting3)),"az":JSON.parse(JSON.stringify(defaultChartSetting3)),"gx":JSON.parse(JSON.stringify(defaultChartSetting3)),"gy":JSON.parse(JSON.stringify(defaultChartSetting3)),"gz":JSON.parse(JSON.stringify(defaultChartSetting3))}};var freeeeg32FilterSettings={};for(let i2=0;i2<32;i2++){freeeeg32ChartSettings.lines[i2]={sps:sps4,nSec:10,units:"mV"};freeeeg32FilterSettings[i2]={sps:sps4,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*2.5/(8*(Math.pow(2,24)-1))}}var textdecoder=new TextDecoder;function hegduinocodec(value){let output={timestamp:0,red:0,infrared:0,heg:0,ambient:0,temperature:0};let txt=textdecoder.decode(value);let line=txt.split("|");if(line.length===3){output.timestamp=Date.now();output.red=parseInt(line[0]);output.infrared=parseInt(line[1]);output.heg=parseFloat(line[2])}else if(line.length>=2){output.timestamp=Date.now();output.red=parseInt(line[1]);output.infrared=parseInt(line[2]);output.heg=parseFloat(line[3]);if(line[4])output.ambient=parseFloat(line[4]);if(line[5])output.temperature=parseFloat(line[5]);return output}else return txt}var sps5=40;var hegduinoSerialSettings={deviceType:"USB",deviceName:"hegduino",baudRate:115200,write:"t\\n",codec:hegduinocodec,sps:sps5};var hegduinoV1SerialSettings=Object.assign({},hegduinoSerialSettings);hegduinoV1SerialSettings.sps=19;var hegduinoBLESettings={deviceType:"BLE",deviceName:"hegduino",sps:sps5,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:hegduinocodec,sps:sps5}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};var hegduinoV1BLESettings=Object.assign({},hegduinoSerialSettings);hegduinoV1BLESettings.sps=19;function max3010xcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let pktCt=32;const output={"red":new Array(pktCt),"ir":new Array(pktCt),"max_dietemp":ByteParser.get2sCompliment(arr[193],8)+.0625*arr[194],"timestamp":Date.now()};let i2=0;while(i2<pktCt){let idx=i2*6;if(i2%2===0){output["ir"][i2]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["ir"][i2+1]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}else{output["red"][i2-1]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["red"][i2]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}i2++}return output}function mpu6050codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={"ax":new Array(20),"ay":new Array(20),"az":new Array(20),"gx":new Array(20),"gy":new Array(20),"gz":new Array(20),"mpu_dietemp":(ByteParser.bytesToInt16(arr[241],arr[242])+521)/340+35,timestamp:Date.now()};for(let i2=0;i2<20;i2++){let idx=i2*12;output.ax[i2]=ByteParser.bytesToInt16(arr[idx+1],arr[idx+2]);output.ay[i2]=ByteParser.bytesToInt16(arr[idx+3],arr[idx+4]);output.az[i2]=ByteParser.bytesToInt16(arr[idx+5],arr[idx+6]);output.gx[i2]=ByteParser.bytesToInt16(arr[idx+7],arr[idx+8]);output.gy[i2]=ByteParser.bytesToInt16(arr[idx+9],arr[idx+10]);output.gz[i2]=ByteParser.bytesToInt16(arr[idx+11],arr[idx+12])}return output}function cognixionONE_EEG_codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array,1:new Array,2:new Array,3:new Array,4:new Array,5:new Array,6:new Array,7:new Array,timestamp:Date.now()};for(let i2=0;i2<7;i2++){let j=i2*26+1;if(!arr[j+23])break;output[0][i2]=ByteParser.bytesToUInt24(arr[j],arr[j+1],arr[j+2]);output[1][i2]=ByteParser.bytesToUInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i2]=ByteParser.bytesToUInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i2]=ByteParser.bytesToUInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i2]=ByteParser.bytesToUInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i2]=ByteParser.bytesToUInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i2]=ByteParser.bytesToUInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i2]=ByteParser.bytesToUInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var sps6=250;var cognixionONEBLESettings={deviceType:"BLE",deviceName:"cognixionONE",services:{["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{notify:true,notifyCallback:void 0,codec:cognixionONE_EEG_codec,sps:sps6}},["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{write:void 0},["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{read:true}}},sps:sps6};var cognixionONESerialSettings=Object.assign({},cytonSerialSettings);cognixionONESerialSettings.sps=sps6;cognixionONESerialSettings.deviceName="cognixionONE";var defaultChartSetting4={nSec:10,sps:sps6,units:"mV"};var cognixionONEChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting4)),"1":JSON.parse(JSON.stringify(defaultChartSetting4)),"2":JSON.parse(JSON.stringify(defaultChartSetting4)),"3":JSON.parse(JSON.stringify(defaultChartSetting4)),"4":JSON.parse(JSON.stringify(defaultChartSetting4)),"5":JSON.parse(JSON.stringify(defaultChartSetting4)),"6":JSON.parse(JSON.stringify(defaultChartSetting4)),"7":JSON.parse(JSON.stringify(defaultChartSetting4))}};var PeanutCodes={2:{type:"POOR_SIGNAL",format:"<B",byteLength:1},144:{type:"heg",format:"<i",byteLength:4},145:{type:"filteredHEG",format:"<i",byteLength:4},147:{type:"rawdata4",format:"<iiii",byteLength:4*4},148:{type:"rawdata6",format:"<iiiiii",byteLength:4*6},160:{type:"sampleNumber",format:"<i",byteLength:4},176:{type:"debug0",format:"<i",byteLength:4},177:{type:"debug1",format:"<i",byteLength:4},178:{type:"debug2",format:"<i",byteLength:4},179:{type:"debug3",format:"<i",byteLength:4},180:{type:"debug4",format:"<iiiiii",byteLength:4*6},181:{type:"debug4",format:"<iiiiii",byteLength:4*6},182:{type:"rawdata27",format:"<B"+"i".repeat(26),byteLength:1+4*26}};function peanutcodec(data){let result={};let i2=0;while(i2<data.length){if(PeanutCodes[data[i2]]&&i2+1+PeanutCodes[data[i2]].byteLength<=data.length){let slice=data.slice(i2+1,i2+1+PeanutCodes[data[i2]].byteLength).buffer;let unpacked=ByteParser.struct(PeanutCodes[data[i2]].format).unpack(slice);let code=PeanutCodes[data[i2]].type;if(code==="unfilteredHEG"||code==="heg")unpacked=unpacked[0]/256;else if(code==="POOR_SIGNAL"||code==="sampleNumber"||code==="debug0"||code==="debug1"||code==="debug2"||code==="debug3")unpacked=unpacked[0];if(!result[PeanutCodes[data[i2]].type]){if(Array.isArray(unpacked))result[PeanutCodes[data[i2]].type]=unpacked;else result[PeanutCodes[data[i2]].type]=[unpacked]}else{if(Array.isArray(unpacked))result[PeanutCodes[data[i2]].type].push(...unpacked);else result[PeanutCodes[data[i2]].type].push(unpacked)}i2+=PeanutCodes[data[i2]].byteLength+1}else i2++}result.timestamp=Date.now();return result}var peanutSerialSettings={deviceType:"USB",deviceName:"peanut",baudRate:38400,bufferSize:400,write:"protocol 3\\n",buffering:{searchBytes:new Uint8Array([170,170])},codec:peanutcodec,sps:10.101};var sealevel_hpa=1013.25;var bme280codec=data=>{let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={timestamp:Date.now(),temp:[],pressure:[],altitude:[]};let mode=0;if(arr[0].length===74)mode=1;if(!mode){for(let j=0;j<3;j++){let i2=j*16+2;let tint=ByteParser.bytesToInt32(arr[3+i2],arr[2+i2],arr[1+i2],arr[0+i2]);let tfrac=ByteParser.bytesToInt32(arr[7+i2],arr[6+i2],arr[5+i2],arr[4+i2]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser.bytesToInt32(arr[11+i2],arr[10+i2],arr[9+i2],arr[8+i2]);let pfrac=ByteParser.bytesToInt32(arr[15+i2],arr[14+i2],arr[13+i2],arr[12+i2]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}else{output.humidity=[];for(let j=0;j<3;j++){let i2=j*24+2;let tint=ByteParser.bytesToInt32(arr[3+i2],arr[2+i2],arr[1+i2],arr[0+i2]);let tfrac=ByteParser.bytesToInt32(arr[7+i2],arr[6+i2],arr[5+i2],arr[4+i2]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser.bytesToInt32(arr[11+i2],arr[10+i2],arr[9+i2],arr[8+i2]);let pfrac=ByteParser.bytesToInt32(arr[15+i2],arr[14+i2],arr[13+i2],arr[12+i2]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));let hint=ByteParser.bytesToInt32(arr[19+i2],arr[18+i2],arr[17+i2],arr[16+i2]);let hfrac=ByteParser.bytesToInt32(arr[23+i2],arr[22+i2],arr[21+i2],arr[20+i2]);output.humidity.push(hint+hfrac/Math.pow(10,Math.ceil(Math.log10(hfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}return output};function altitude(pressure,temperature){return 44330*(1-Math.pow(pressure/sealevel_hpa,.1903))}function nrf5x_usbcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={};if(arr[0]===2){Object.assign(output,ads131m08codec(arr.subarray(2)))}else if(arr[0]===3){let result=ads131m08codec(arr.subarray(2));Object.keys(result).forEach((key,i2)=>{output[i2+8]=result[key]})}else if(arr[0]===4){Object.assign(output,mpu6050codec(arr.subarray(2)))}else if(arr[0]===5){Object.assign(output,max3010xcodec(arr.subarray(2)))}else if(arr[0]===6){Object.assign(output,bme280codec(arr.subarray(2)))}else{Object.assign(output,ads131m08codec(arr))}return output}var nrf5xSerialSettings={deviceType:"USB",deviceName:"nrf5x",baudRate:115200,buffering:{searchBytes:new Uint8Array([240,240])},codec:nrf5x_usbcodec,sps:250};var nrf5xBLESettings={deviceType:"BLE",deviceName:"nrf5x",sps:250,services:{"0000cafe-b0ba-8bad-f00d-deadbeef0000":{"0001cafe-b0ba-8bad-f00d-deadbeef0000":{write:void 0},"0002cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0003cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:max3010xcodec,sps:100},"0004cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:mpu6050codec,sps:100},"0005cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0006cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:bme280codec,sps:3.33}}}};var defaultChartSetting5={nSec:10,sps:250,units:"mV"};var nrf5x_usbChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting5)),"1":JSON.parse(JSON.stringify(defaultChartSetting5)),"2":JSON.parse(JSON.stringify(defaultChartSetting5)),"3":JSON.parse(JSON.stringify(defaultChartSetting5)),"4":JSON.parse(JSON.stringify(defaultChartSetting5)),"5":JSON.parse(JSON.stringify(defaultChartSetting5)),"6":JSON.parse(JSON.stringify(defaultChartSetting5)),"7":JSON.parse(JSON.stringify(defaultChartSetting5))},generateNewLines:true,cleanGeneration:false};var gain2=32;var nbits2=24;var vref2=1.2;var defaultsetting3={sps:250,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref2/(gain2*(Math.pow(2,nbits2)-1))};var nrf5x_usbFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting3)),"1":JSON.parse(JSON.stringify(defaultsetting3)),"2":JSON.parse(JSON.stringify(defaultsetting3)),"3":JSON.parse(JSON.stringify(defaultsetting3)),"4":JSON.parse(JSON.stringify(defaultsetting3)),"5":JSON.parse(JSON.stringify(defaultsetting3)),"6":JSON.parse(JSON.stringify(defaultsetting3)),"7":JSON.parse(JSON.stringify(defaultsetting3)),"8":JSON.parse(JSON.stringify(defaultsetting3)),"9":JSON.parse(JSON.stringify(defaultsetting3)),"10":JSON.parse(JSON.stringify(defaultsetting3)),"11":JSON.parse(JSON.stringify(defaultsetting3)),"12":JSON.parse(JSON.stringify(defaultsetting3)),"13":JSON.parse(JSON.stringify(defaultsetting3)),"14":JSON.parse(JSON.stringify(defaultsetting3)),"15":JSON.parse(JSON.stringify(defaultsetting3))};var textdecoder2=new TextDecoder;function statechangercodec(value){let output={timestamp:0,left_red:0,left_infrared:0,left_heg:0,center_red:0,center_infrared:0,center_heg:0,right_red:0,right_infrared:0,right_heg:0};let txt=textdecoder2.decode(value);let line=txt.split("|");if(line.length>=5){output.timestamp=Date.now();output.left_red=parseInt(line[1]);output.left_infrared=parseInt(line[2]);output.left_heg=parseFloat(line[3]);output.center_red=parseInt(line[4]);output.center_infrared=parseInt(line[5]);output.center_heg=parseFloat(line[6]);output.right_red=parseInt(line[7]);output.right_infrared=parseInt(line[8]);output.right_heg=parseFloat(line[9]);return output}else return txt}var statechangerSerialSettings={deviceType:"USB",deviceName:"statechanger",baudRate:115200,codec:statechangercodec,sps:20};var statechangerBLESettings={deviceType:"BLE",deviceName:"statechanger",sps:20,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:statechangercodec}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};function blueberrycodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.red/(.5*(output.ir+output.ir2));return output}var sps7=40;var blueberryBLESettings={deviceType:"BLE",deviceName:"blueberry",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"3f3e3d3c-3b3a-3938-3736-353433323130":{notify:true,notifyCallback:void 0,codec:blueberrycodec,sps:sps7}}},sps:sps7};function blueberryshortcodec(value){let output={sred:value.getInt32(2),sir:value.getInt32(6),sir2:value.getInt32(10),timestamp:Date.now()};output.sheg=output.sred/(.5*(output.sir+output.sir2));return output}function blueberrylongcodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.sred/(.5*(output.ir+output.ir2));return output}var sps8=40;var blueberry2BLESettings={deviceType:"BLE",deviceName:"blueberry2",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"4f4e4d4c-4b6a-6968-6766-656463426160":{notify:true,notifyCallback:void 0,codec:blueberrylongcodec,sps:sps8},"4f4e4d4c-4b5a-5958-5756-555453425150":{notify:true,notifyCallback:void 0,codec:blueberryshortcodec,sps:sps8}}},sps:sps8};var defaultsetting1={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var ganglionFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting1)),"1":JSON.parse(JSON.stringify(defaultsetting1)),"2":JSON.parse(JSON.stringify(defaultsetting1)),"3":JSON.parse(JSON.stringify(defaultsetting1))};var defaultChartSetting6={nSec:10,sps:250,units:"mV"};var ganglionChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting6)),"1":JSON.parse(JSON.stringify(defaultChartSetting6)),"2":JSON.parse(JSON.stringify(defaultChartSetting6)),"3":JSON.parse(JSON.stringify(defaultChartSetting6)),"ax":{nSec:10,sps:250,units:"mg"},"ay":{nSec:10,sps:250,units:"mg"},"az":{nSec:10,sps:250,units:"mg"}},generateNewLines:true};var defaultsetting4={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var museFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting4)),"1":JSON.parse(JSON.stringify(defaultsetting4)),"2":JSON.parse(JSON.stringify(defaultsetting4)),"3":JSON.parse(JSON.stringify(defaultsetting4)),"4":JSON.parse(JSON.stringify(defaultsetting4))};function hrcodec(data){return{hr:data.getInt8(1),timestamp:Date.now()}}var heartRateBLESettings={deviceType:"BLE",deviceName:"heartrate",services:{"heart_rate":{"heart_rate_measurement":{notify:true,notifyCallback:void 0,codec:hrcodec}}}};var simulatorSettings={sps:250,deviceType:"CUSTOM",deviceName:"simulator",simulate:{"0":{sps:250,freq:1,amplitude:1,offset:0},"1":{sps:250,freq:10,amplitude:1,offset:0},"2":{sps:250,freq:100,amplitude:.5,offset:.5},"3":{sps:250,freq:25,amplitude:1,offset:0}},connect:(settings={})=>{return new Promise(async(res,rej)=>{let _id=`simulated${Math.floor(Math.random()*1e15)}`;let info={_id,settings:Object.assign(Object.assign({},simulatorSettings),settings)};info.settings.looping=true;let loopTime=50;let lastTime=Date.now();let loop2=()=>{if(info.settings.looping){let newData={};let now=Date.now();let frame=now-lastTime;for(const key in info.settings.simulate){let newPoints=Math.floor(info.settings.simulate[key].sps*frame/1e3);newData[key]=new Array(newPoints).fill(0);newData[key]=newData[key].map((v,i2)=>{return Math.sin(2*Math.PI*info.settings.simulate[key].freq*.001*(lastTime+frame*(i2+1)/newPoints))*info.settings.simulate[key].amplitude+info.settings.simulate[key].offset})}lastTime=now;newData.timestamp=lastTime;info.settings.ondata(newData);setTimeout(()=>{loop2()},loopTime)}};loop2();if(info.settings.onconnect)info.settings.onconnect(info);res(info)})},codec:reading=>{return reading},disconnect:info=>{console.log(info);info.settings.looping=false;info.settings.ondisconnect(info)},onconnect:info=>{console.log("simulator connected!",info)},ondisconnect:info=>{console.log("simulator disconnected!",info)},ondata:data=>{}};var Devices={BLE:{"nrf5x":nrf5xBLESettings,"hegduino":hegduinoBLESettings,"hegduinoV1":hegduinoV1BLESettings,"cognixionONE":cognixionONEBLESettings,"statechanger":statechangerBLESettings,"blueberry":blueberryBLESettings,"blueberry2":blueberry2BLESettings,"heart_rate":heartRateBLESettings},USB:{"nrf5x":nrf5xSerialSettings,"freeEEG32":freeeeg32SerialSettings,"freeEEG32_optical":freeeeg32_optical_SerialSettings,"freeEEG128":freeeeg128SerialSettings,"hegduino":hegduinoSerialSettings,"hegduinoV1":hegduinoV1SerialSettings,"cyton":cytonSerialSettings,"cyton_daisy":daisycytonSerialSettings,"peanut":peanutSerialSettings,"statechanger":statechangerSerialSettings,"cognixionONE":cytonSerialSettings},BLE_CUSTOM:{},USB_CUSTOM:{},CUSTOM:{"simulator":simulatorSettings}};var textdecoder3=new TextDecoder;var decoders={"raw":data=>{if(data?.buffer)return Array.from(new Uint8Array(data));else return data},"utf8":data=>{return textdecoder3.decode(data)},"console-f12":data=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(data);return data},"debug":(data,debugmessage)=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(debugmessage,data);return data},"ads131m08":ads131m08codec,"arduino_ads131m08":ads131m08_arduinocodec,"max3010x":max3010xcodec,"mpu6050":mpu6050codec,"bme280":bme280codec,"freeeeg32":freeeeg32codec,"freeeeg128":freeeeg128codec,"cyton":cytoncodec,"cognixionONE_BLE":cognixionONE_EEG_codec,"hegduino":hegduinocodec,"nrf5x":nrf5x_usbcodec,"peanut":peanutcodec,"statechanger":statechangercodec,"blueberry":blueberrycodec,"heart_rate":hrcodec};var BiquadChannelFilterer=class{constructor(options={sps:512,useSMA4:false,useNotch50:true,useNotch60:true,useLowpass:false,lowpassHz:100,useBandpass:false,bandpassLower:3,bandpassUpper:45,useDCBlock:true,DCBresonance:.995,trimOutliers:false,outlierTolerance:.2,useScaling:false,scalar:1}){this.idx=0;this.sps=options.sps;this.bandpassLower=options.bandpassLower?options.bandpassLower:3;this.bandpassUpper=options.bandpassUpper?options.bandpassUpper:45;this.useSMA4=options.useSMA4;this.last4=[];this.useNotch50=options.useNotch50;this.useNotch60=options.useNotch60;this.useLowpass=options.useLowpass;this.lowpassHz=options.lowpassHz?options.lowpassHz:100;this.useBandpass=options.useBandpass;this.useDCBlock=options.useDCBlock;this.DCBresonance=options.DCBresonance?options.DCBresonance:.995;this.useScaling=options.useScaling;this.scalar=options.scalar;this.trimOutliers=options.trimOutliers;this.outlierTolerance=options.outlierTolerance;let sps9=this.sps;this.notch50=[makeNotchFilter(50,sps9,2),makeNotchFilter(100,sps9,2)];this.notch60=[makeNotchFilter(60,sps9,2),makeNotchFilter(120,sps9,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1)];this.dcb=new DCBlocker(options.DCBresonance?options.DCBresonance:.995)}reset(sps9=this.sps){this.notch50=[makeNotchFilter(50,sps9,2),makeNotchFilter(100,sps9,2)];this.notch60=[makeNotchFilter(60,sps9,2),makeNotchFilter(120,sps9,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1)];this.dcb=new DCBlocker(this.DCBresonance)}setBandpass(bandpassLower=this.bandpassLower,bandpassUpper=this.bandpassUpper,sps9=this.sps){this.bandpassLower=bandpassLower;this.bandpassUpper=bandpassUpper;this.bp1=[makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9)]}apply(latestData=0){let out=latestData;if(this.useScaling===true){out*=this.scalar}if(this.filtered&&this.trimOutliers&&this.outlierTolerance){if(Math.abs(out-this.filtered)>this.outlierTolerance){out=this.filtered}}if(this.useDCBlock===true){out=this.dcb.applyFilter(out)}if(this.useSMA4===true){if(this.last4.length<4){this.last4.push(out)}else{out=this.last4.reduce((accumulator,currentValue)=>accumulator+currentValue)/this.last4.length;this.last4.shift();this.last4.push(out)}}if(this.useNotch50===true){this.notch50.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useNotch60===true){this.notch60.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useLowpass===true){this.lp1.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useBandpass===true){this.bp1.forEach((f,i2)=>{out=f.applyFilter(out)})}this.filtered=out;this.idx++;return out}};var Biquad=class{constructor(type,freq,sps9,Q=1/Math.sqrt(2),dbGain=0){this.a0=0;this.a1=0;this.a2=0;this.b0=0;this.b1=0;this.b2=0;this.x1=0;this.x2=0;this.y1=0;this.y2=0;let types=["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"];if(types.indexOf(type)<0){console.error("Valid types: \'lowpass\',\'highpass\',\'bandpass\',\'notch\',\'peak\',\'lowshelf\',\'highshelf\'");return}this.type=type;this.freq=freq;this.sps=sps9;this.Q=Q;this.dbGain=dbGain;let A2=Math.pow(10,dbGain/40);let omega=2*Math.PI*freq/sps9;let sn=Math.sin(omega);let cs=Math.cos(omega);let alpha=sn/(2*Q);let beta=Math.sqrt(A2+A2);this[type](A2,sn,cs,alpha,beta);this.b0/=this.a0;this.b1/=this.a0;this.b2/=this.a0;this.a1/=this.a0;this.a2/=this.a0}lowpass(A2,sn,cs,alpha,beta){this.b0=(1-cs)*.5;this.b1=1-cs;this.b2=(1-cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}highpass(A2,sn,cs,alpha,beta){this.b0=(1+cs)*.5;this.b1=-(1+cs);this.b2=(1+cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}bandpass(A2,sn,cs,alpha,beta){this.b0=alpha;this.b1=0;this.b2=-alpha;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}notch(A2,sn,cs,alpha,beta){this.b0=1;this.b1=-2*cs;this.b2=1;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}peak(A2,sn,cs,alpha,beta){this.b0=1+alpha*A2;this.b1=-2*cs;this.b2=1-alpha*A2;this.a0=1+alpha/A2;this.a1=-2*cs;this.a2=1-alpha/A2}lowshelf(A2,sn,cs,alpha,beta){this.b0=A2*(A2+1-(A2-1)*cs+beta*sn);this.b1=2*A2*(A2-1-(A2+1)*cs);this.b2=A2*(A2+1-(A2-1)*cs-beta*sn);this.a0=A2+1+(A2+1)*cs+beta*sn;this.a1=2*(A2-1+(A2+1)*cs);this.a2=A2+1+(A2-1)*cs-beta*sn}highshelf(A2,sn,cs,alpha,beta){this.b0=A2*(A2+1+(A2-1)*cs+beta*sn);this.b1=2*A2*(A2-1+(A2+1)*cs);this.b2=A2*(A2+1-(A2-1)*cs-beta*sn);this.a0=A2+1-(A2+1)*cs-beta*sn;this.a1=2*(A2-1-(A2+1)*cs);this.a2=A2+1-(A2-1)*cs-beta*sn}applyFilter(signal_step){let y2=this.b0*signal_step+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;this.x2=this.x1;this.x1=signal_step;this.y2=this.y1;this.y1=y2;return y2}zResult(freq){try{let phi=Math.pow(Math.sin(Math.PI*freq*2/(2*this.sps)),2);let result=(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*phi+16*this.b0*this.b2*phi*phi)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*phi+16*this.a2*phi*phi);return result}catch(err){return-200}}static calcCenterFrequency(freqStart,freqEnd){return(freqStart+freqEnd)/2}static calcBandwidth(freqStart,freqEnd){return freqEnd-this.calcCenterFrequency(freqStart,freqEnd)}static calcBandpassQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*Math.sqrt((frequency-bandwidth)*(frequency+bandwidth))/(2*bandwidth);return Q}static calcNotchQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*frequency*bandwidth/Math.sqrt((frequency-bandwidth)*(frequency+bandwidth));return Q}};var DCBlocker=class{constructor(r=.995){this.r=r;this.y1=this.y2=this.x1=this.x2=0}applyFilter(signal_step){this.x2=this.x1;this.x1=signal_step;let y2=this.x1-this.x2+this.r*this.y1;this.y2=this.y1;this.y1=y2;return y2}};var makeNotchFilter=(frequency,sps9,bandwidth)=>{return new Biquad("notch",frequency,sps9,Biquad.calcNotchQ(frequency,bandwidth),0)};var makeBandpassFilter=(freqStart,freqEnd,sps9,resonance=Math.pow(10,Math.floor(Math.log10(Biquad.calcCenterFrequency(freqStart,freqEnd)))))=>{return new Biquad("bandpass",Biquad.calcCenterFrequency(freqStart,freqEnd),sps9,Biquad.calcBandpassQ(Biquad.calcCenterFrequency(freqStart,freqEnd),Biquad.calcBandwidth(freqStart,freqEnd),resonance),0)};function parseFunctionFromText2(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs3(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs2}var stringifyFast2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p in value[prop]){if(Array.isArray(value[prop][p])){if(value[prop][p].length>20)obj[prop][p]=value[prop][p].slice(value[prop][p].length-20);else obj[prop][p]=value[prop][p]}else{if(value[prop][p]!=null){let con=value[prop][p].constructor.name;if(con.includes("Set")){obj[prop][p]=Array.from(value[prop][p])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p]="instanceof_"+con}else{obj[prop][p]=value[prop][p]}}else{obj[prop][p]=value[prop][p]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast3(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast2}function loadStreamWorkerGlobals(){globalThis.Devices=Devices;globalThis.WebSerial=WebSerial;globalThis.decoders=decoders;globalThis.decoder="raw";globalThis.ByteParser=ByteParser;globalThis.filtering=true;globalThis.filters={};globalThis.BiquadChannelFilterer=BiquadChannelFilterer;globalThis.ArrayManip=ArrayManip}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){loadStreamWorkerGlobals()}var streamWorkerRoutes={"transferDevice":function transferDevice(device,worker){let cpy=Object.assign({},device);for(const key in cpy){if(typeof cpy[key]==="function")cpy[key]=cpy[key].toString()}worker.send({route:"receiveDevice",args:cpy})},"receiveDevice":function receiveDevice(device){for(const key in device){if(typeof device[key]==="string"){let fn=parseFunctionFromText2(device[key]);if(typeof fn==="function"){device[key]=fn}}}if(!globalThis.Devices[device.deviceType])globalThis.Devices[device.deviceType]={};globalThis.Devices[device.deviceType][device.deviceName]=device},"receiveDecoder":function receiveDecoder(decoder2,decoderName){globalThis.decoders[decoderName]=(0,eval)("("+decoder2+")")},"receiveCodec":function receiveDeviceCodec(decoder2,deviceType,device,service,characteristic){let codec=parseFunctionFromText2(decoder2);if(codec){if(deviceType==="BLE"&&service&&characteristic){if(globalThis.Devices[deviceType][device]){if(globalThis.Devices[deviceType][device][service]){if(globalThis.Devices[deviceType][device][characteristic]){globalThis.Devices[deviceType][device][characteristic].codec=codec}else{globalThis.Devices[deviceType][device][characteristic]={codec}}}else{globalThis.Devices[deviceType][device]={[characteristic]:{codec}}}}}else if(globalThis.Devices[deviceType][device]?.codec){if(globalThis.Devices[deviceType][device])globalThis.Devices[deviceType][device].codec=codec;else{globalThis.Devices[deviceType][device]={codec}}}}},"decode":function decode(data){return globalThis.decoder(data)},"decodeAndParse":function decodeAndParse(data){let decoded=this.__node.graph.run("decode",data);if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}}}}return parsed}}return decoded},"setActiveDecoder":function setActiveDecoder(deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device]?.codec;else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device][service][characteristic].codec;return true},"decodeDevice":function decodeDevice(data,deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)return globalThis.Devices[deviceType][device].codec(data);else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)return globalThis.Devices[deviceType][device][service][characteristic].codec(data)},"decodeAndParseDevice":function decodeAndParseDevice(data,deviceType,deviceName,service,characteristic){let decoded;if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][deviceName]?.services[service]?.[characteristic]?.codec)decoded=globalThis.Devices[deviceType][deviceName].services[service][characteristic].codec(data);else if(globalThis.Devices[deviceType][deviceName]?.codec)decoded=globalThis.Devices[deviceType][deviceName].codec(data);else decoded=data;if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}else if(typeof parsed[prop]==="number"){parsed[prop]=filter.apply(parsed[prop])}}}}return parsed}}return decoded},"toggleAnim":function toggleAnim(){globalThis.runningAnim=!globalThis.runningAnim;return globalThis.runningAnim},"setFilters":function setFilters(filters,clearFilters=false){if(!globalThis.filters||clearFilters)globalThis.filters={};for(const key in filters){globalThis.filters[key]=new BiquadChannelFilterer(filters[key])}return true},"getFilterSettings":function getFilterSettings(){if(globalThis.filters){let filters={};for(const key in globalThis.filters){filters[key]={sps:globalThis.filters[key].sps,useScaling:globalThis.filters[key].useScaling,scalar:globalThis.filters[key].scalar,useNotch50:globalThis.filters[key].useNotch50,useNotch60:globalThis.filters[key].useNotch60,useDCBlock:globalThis.filters[key].useDCBlock,useLowpass:globalThis.filters[key].useLowpass,lowpassHz:globalThis.filters[key].lowpassHz,useBandpass:globalThis.filters[key].useBandpass,bandpassLower:globalThis.filters[key].bandpassLower,bandpassUpper:globalThis.filters[key].bandpassUpper}}return filters}return void 0},"setupSerial":function setupSerial(){globalThis.Serial=new globalThis.WebSerial;globalThis.decoder="raw";console.log("worker: Setting up Serial",globalThis.Serial);return true},"openPort":function openPort(settings){const WorkerService2=this.__node.graph;if(!globalThis.Serial)WorkerService2.run("setupSerial");return new Promise((res,rej)=>{globalThis.Serial.getPorts().then(ports=>{const Serial=globalThis.Serial;let port=ports.find(port2=>{return port2.getInfo().usbVendorId===settings.usbVendorId&&port2.getInfo().usbProductId===settings.usbProductId});if(port){let options=Object.assign({},settings);if(typeof settings.pipeTo==="object"&&settings.pipeTo.extraArgs&&globalThis.Devices?.[settings.pipeTo.extraArgs[0]]?.[settings.pipeTo.extraArgs[1]]){options.onconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].onconnect;options.ondisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].ondisconnect;options.beforedisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].beforedisconnect}Serial.openPort(port,options).then(()=>{const stream=Serial.createStream({port,settings:options,frequency:settings.frequency?settings.frequency:10,buffering:settings.buffering,ondata:value=>{if(stream.settings.pipeTo){if(typeof stream.settings.pipeTo==="string")WorkerService2.transmit(value,stream.settings.pipeTo,[value.buffer]);else if(stream.settings.pipeTo?.route){let args=value;if(stream.settings.pipeTo.extraArgs)args=[value,...stream.settings.pipeTo.extraArgs];WorkerService2.transmit({route:stream.settings.pipeTo.route,args},stream.settings.pipeTo._id,[value.buffer])}}else{WorkerService2.transmit(value,void 0,[value.buffer])}}});Serial.readStream(stream);port.ondisconnect=()=>{postMessage(`${stream._id} disconnected`)};res({_id:stream._id,settings,info:stream.info})}).catch(()=>{postMessage(`disconnected`)});;}else{rej(false)}})})},"closeStream":function closeStream(streamId){return new Promise((res,rej)=>{const Serial=globalThis.Serial;let ondisconnect;if(Serial.streams[streamId].port?.ondisconnect)ondisconnect=Serial.streams[streamId].port.ondisconnect;Serial.closeStream(Serial.streams[streamId]).then(resolved=>{if(ondisconnect)ondisconnect(void 0);res(resolved)}).catch(rej)})},"writeStream":function writeStream(streamId,message){globalThis.Serial.writeStream(globalThis.Serial.streams[streamId],message);return true},"updateStreamSettings":function updateStreamSettings(streamId,settings){if(globalThis.Serial?.streams[streamId]){for(const key in settings){if(typeof settings[key]==="object"){Object.assign(globalThis.Serial.streams[streamId].settings[key],settings[key])}else globalThis.Serial.streams[streamId][key]=settings[key]}}}};if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){globalThis.Devices=Devices;const worker=new WorkerService({roots:{...workerCanvasRoutes,...remoteGraphRoutes,...streamWorkerRoutes}})}var stream_worker_default=self;})();\n')], { type: "text/javascript" }));
  var stream_worker_default = url2;
  var _ArrayManip3 = class {
    constructor() {
      this.recursivelyAssign = (target, obj) => {
        for (const key in obj) {
          if (typeof obj[key] === "object") {
            if (typeof target[key] === "object")
              this.recursivelyAssign(target[key], obj[key]);
            else
              target[key] = this.recursivelyAssign({}, obj[key]);
          } else
            target[key] = obj[key];
        }
        return target;
      };
    }
    static autoscale(array, lineIdx = 0, nLines = 1, centerZero = false, ymin, ymax, clamp) {
      if (array?.length === 0)
        return array;
      let max = ymax ? ymax : Math.max(...array);
      let min = ymin ? ymin : Math.min(...array);
      let _lines = 1 / nLines;
      let scalar = 1;
      if (centerZero) {
        let absmax = Math.max(Math.abs(min), Math.abs(max));
        if (absmax !== 0)
          scalar = _lines / absmax;
        return array.map((y22) => {
          if (clamp) {
            if (y22 < min)
              y22 = min;
            if (y22 > max)
              y22 = max;
          }
          return y22 * scalar + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      } else {
        if (max === min) {
          if (max !== 0) {
            scalar = _lines / max;
          } else if (min !== 0) {
            scalar = _lines / Math.abs(min);
          }
        } else
          scalar = _lines / (max - min);
        return array.map((y22) => {
          if (clamp) {
            if (y22 < min)
              y22 = min;
            if (y22 > max)
              y22 = max;
          }
          return 2 * ((y22 - min) * scalar - 1 / (2 * nLines)) + (_lines * (lineIdx + 1) * 2 - 1 - _lines);
        });
      }
    }
    static genTimestamps(ct, sps10) {
      let now = Date.now();
      let toInterp = [now - ct * 1e3 / sps10, now];
      return _ArrayManip3.upsample(toInterp, ct);
    }
    static absmax(array) {
      return Math.max(Math.abs(Math.min(...array)), Math.max(...array));
    }
    static downsample(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        let output = new Array(fitCount);
        let incr = array.length / fitCount;
        let lastIdx = array.length - 1;
        let last = 0;
        let counter = 0;
        for (let i22 = incr; i22 < array.length; i22 += incr) {
          let rounded = Math.round(i22);
          if (rounded > lastIdx)
            rounded = lastIdx;
          for (let j = last; j < rounded; j++) {
            output[counter] += array[j];
          }
          output[counter] /= (rounded - last) * scalar;
          counter++;
          last = rounded;
        }
        return output;
      } else
        return array;
    }
    static upsample(array, fitCount, scalar = 1) {
      var linearInterpolate = function(before2, after2, atPoint2) {
        return (before2 + (after2 - before2) * atPoint2) * scalar;
      };
      var newData = new Array(fitCount);
      var springFactor = (array.length - 1) / (fitCount - 1);
      newData[0] = array[0];
      for (var i22 = 1; i22 < fitCount - 1; i22++) {
        var tmp = i22 * springFactor;
        var before = Math.floor(tmp);
        var after = Math.ceil(tmp);
        var atPoint = tmp - before;
        newData[i22] = linearInterpolate(array[before], array[after], atPoint);
      }
      newData[fitCount - 1] = array[array.length - 1];
      return newData;
    }
    static interpolate(array, fitCount, scalar = 1) {
      if (array.length > fitCount) {
        return _ArrayManip3.downsample(array, fitCount, scalar);
      } else if (array.length < fitCount) {
        return _ArrayManip3.upsample(array, fitCount, scalar);
      }
      return array;
    }
    static HSLToRGB(h, s, l, scalar = 255) {
      s /= 100;
      l /= 100;
      let c = (1 - Math.abs(2 * l - 1)) * s, x3 = c * (1 - Math.abs(h / 60 % 2 - 1)), m = l - c / 2, r = 0, g2 = 0, b = 0;
      if (0 <= h && h < 60) {
        r = c;
        g2 = x3;
        b = 0;
      } else if (60 <= h && h < 120) {
        r = x3;
        g2 = c;
        b = 0;
      } else if (120 <= h && h < 180) {
        r = 0;
        g2 = c;
        b = x3;
      } else if (180 <= h && h < 240) {
        r = 0;
        g2 = x3;
        b = c;
      } else if (240 <= h && h < 300) {
        r = x3;
        g2 = 0;
        b = c;
      } else if (300 <= h && h < 360) {
        r = c;
        g2 = 0;
        b = x3;
      }
      r = (r + m) * scalar;
      g2 = (g2 + m) * scalar;
      b = (b + m) * scalar;
      return [r, g2, b];
    }
    static circularBuffer(arr, newEntries) {
      if (newEntries.length < arr.length) {
        let slice = arr.slice(newEntries.length);
        let len = arr.length;
        arr.splice(0, len, ...slice, ...newEntries);
      } else if (newEntries.length > arr.length) {
        let len = arr.length;
        arr.splice(0, len, newEntries.slice(len - newEntries.length));
      } else {
        arr.splice(0, arr.length, ...newEntries);
      }
      return arr;
    }
    static reformatData(data, key) {
      if (Array.isArray(data)) {
        if (Array.isArray(data[0])) {
          let d2 = {};
          data.forEach((arr, i22) => {
            d2[i22] = arr;
          });
          data = d2;
          if (isNaN(data[0][0]))
            return void 0;
        } else if (key) {
          data = { [key]: data };
          if (isNaN(data[key][0]))
            return void 0;
        } else {
          data = { 0: data };
          if (isNaN(data[0][0]))
            return void 0;
        }
      } else if (typeof data === "object") {
        for (const key2 in data) {
          if (typeof data[key2] === "number")
            data[key2] = [data[key2]];
          else if (data[key2]?.values) {
            if (typeof data[key2].values === "number")
              data[key2].values = [data[key2].values];
          }
          if (isNaN(data[key2][0]))
            return void 0;
        }
      } else if (typeof data === "string") {
        let split;
        if (data.includes("\r\n")) {
          let lines = data.split("\r\n");
          data = {};
          lines.forEach((l, j) => {
            if (l.includes("	")) {
              split = l.split("	");
            } else if (l.includes(",")) {
              split = l.split(",");
            } else if (l.includes("|")) {
              split = l.split("|");
            }
            if (Array.isArray(split)) {
              split.forEach((val, i22) => {
                if (val.includes(":")) {
                  let [key2, v2] = val.split(":");
                  let fl = parseFloat(v2);
                  if (fl)
                    data[key2] = [fl];
                  else
                    return void 0;
                } else {
                  let fl = parseFloat(val);
                  if (fl)
                    data[i22] = [fl];
                  else
                    return void 0;
                }
              });
            }
          });
        } else if (data.includes("	")) {
          split = data.split("	");
        } else if (data.includes(",")) {
          split = data.split(",");
        } else if (data.includes("|")) {
          split = data.split("|");
        }
        data = {};
        if (Array.isArray(split)) {
          split.forEach((val, i22) => {
            if (val.includes(":")) {
              let [key2, v2] = val.split(":");
              let fl = parseFloat(v2);
              if (fl)
                data[key2] = [fl];
              else
                return void 0;
            } else {
              let fl = parseFloat(val);
              if (fl)
                data[i22] = [fl];
              else
                return void 0;
            }
          });
        }
      } else if (typeof data === "number") {
        if (key)
          data = { [key]: [data] };
        else
          data = { 0: [data] };
      }
      return data;
    }
    static padTime(data, lastValue, time, targetFit) {
      let slopeIncr = (data[0] - lastValue) / time / targetFit;
      let padded = [...new Array(targetFit - data.length).map((_, i22) => lastValue + slopeIncr * (i22 + 1)), ...data];
      return padded;
    }
    static interpolateForTime(data, time, targetSPS) {
      return _ArrayManip3.interpolate(data, Math.ceil(targetSPS * time));
    }
    isTypedArray(x3) {
      return ArrayBuffer.isView(x3) && Object.prototype.toString.call(x3) !== "[object DataView]";
    }
    spliceTypedArray(arr, start, end) {
      let s = arr.subarray(0, start);
      let e;
      if (end) {
        e = arr.subarray(end + 1);
      }
      let n;
      if (s.length > 0 || e?.length > 0)
        n = new arr.constructor(s.length + e.length);
      if (s.length > 0)
        n.set(s);
      if (e && e.length > 0)
        n.set(e, s.length);
      return n;
    }
  };
  var ArrayManip3 = _ArrayManip3;
  ArrayManip3.bufferValues = (objects, property, keys22, buffer2) => {
    if (!Array.isArray(keys22) && typeof keys22 === "object")
      keys22 = Object.keys(keys22);
    if (!buffer2) {
      let object_keys = Object.keys(objects);
      if (keys22)
        buffer2 = new Float32Array(object_keys.length * keys22.length);
      else {
        if (typeof objects[object_keys[0]][property] === "object") {
          keys22 = Object.keys(objects[object_keys[0]][property]);
          buffer2 = new Float32Array(object_keys.length * keys22.length);
        } else
          buffer2 = new Float32Array(object_keys.length);
      }
    }
    let i22 = 0;
    for (const key in objects) {
      if (objects[key][property]) {
        if (keys22) {
          for (let j = 0; j < keys22.length; j++) {
            buffer2[i22] = objects[key][property][keys22[j]];
            i22++;
          }
        } else {
          buffer2[i22] = objects[key][property];
          i22++;
        }
      }
    }
    return buffer2;
  };
  var rechk3 = /^([<>])?(([1-9]\d*)?([xcbB?hHiIfdsp]))*$/;
  var refmt3 = /([1-9]\d*)?([xcbB?hHiIfdsp])/g;
  var str4 = (v2, o, c) => String.fromCharCode(...new Uint8Array(v2.buffer, v2.byteOffset + o, c));
  var rts3 = (v2, o, c, s) => new Uint8Array(v2.buffer, v2.byteOffset + o, c).set(s.split("").map((str22) => str22.charCodeAt(0)));
  var pst3 = (v2, o, c) => str4(v2, o + 1, Math.min(v2.getUint8(o), c - 1));
  var tsp3 = (v2, o, c, s) => {
    v2.setUint8(o, s.length);
    rts3(v2, o + 1, c - 1, s);
  };
  var lut3 = (le) => ({ x: (c) => [1, c, 0], c: (c) => [c, 1, (o) => ({ u: (v2) => str4(v2, o, 1), p: (v2, c2) => rts3(v2, o, 1, c2) })], "?": (c) => [c, 1, (o) => ({ u: (v2) => Boolean(v2.getUint8(o)), p: (v2, B22) => v2.setUint8(o, B22) })], b: (c) => [c, 1, (o) => ({ u: (v2) => v2.getInt8(o), p: (v2, b) => v2.setInt8(o, b) })], B: (c) => [c, 1, (o) => ({ u: (v2) => v2.getUint8(o), p: (v2, B22) => v2.setUint8(o, B22) })], h: (c) => [c, 2, (o) => ({ u: (v2) => v2.getInt16(o, le), p: (v2, h) => v2.setInt16(o, h, le) })], H: (c) => [c, 2, (o) => ({ u: (v2) => v2.getUint16(o, le), p: (v2, H22) => v2.setUint16(o, H22, le) })], i: (c) => [c, 4, (o) => ({ u: (v2) => v2.getInt32(o, le), p: (v2, i22) => v2.setInt32(o, i22, le) })], I: (c) => [c, 4, (o) => ({ u: (v2) => v2.getUint32(o, le), p: (v2, I) => v2.setUint32(o, I, le) })], f: (c) => [c, 4, (o) => ({ u: (v2) => v2.getFloat32(o, le), p: (v2, f) => v2.setFloat32(o, f, le) })], d: (c) => [c, 8, (o) => ({ u: (v2) => v2.getFloat64(o, le), p: (v2, d2) => v2.setFloat64(o, d2, le) })], s: (c) => [1, c, (o) => ({ u: (v2) => str4(v2, o, c), p: (v2, s) => rts3(v2, o, c, s.slice(0, c)) })], p: (c) => [1, c, (o) => ({ u: (v2) => pst3(v2, o, c), p: (v2, s) => tsp3(v2, o, c, s.slice(0, c - 1)) })] });
  var errbuf3 = new RangeError("Structure larger than remaining buffer");
  var errval3 = new RangeError("Not enough values for structure");
  var _ByteParser3 = class extends ArrayManip3 {
    static toDataView(value) {
      if (!(value instanceof DataView)) {
        if (typeof value === "string" && parseInt(value))
          value = parseInt(value);
        if (typeof value === "string") {
          let enc = new TextEncoder();
          let hascodes = {};
          for (const code2 in _ByteParser3.codes) {
            while (value.indexOf(code2) > -1) {
              let idx = value.indexOf(code2);
              value = value.replace(code2, "");
              hascodes[idx] = code2;
            }
          }
          let encoded = Array.from(enc.encode(value));
          for (const key in hascodes) {
            encoded.splice(parseInt(key), 0, _ByteParser3.codes[hascodes[key]]);
          }
          value = new DataView(new Uint8Array(encoded).buffer);
        } else if (typeof value === "number") {
          let tmp = value;
          if (value < 256) {
            value = new DataView(new ArrayBuffer(1));
            value.setUint8(0, tmp);
          } else if (value < 65536) {
            value = new DataView(new ArrayBuffer(2));
            value.setInt16(0, tmp);
          } else {
            value = new DataView(new ArrayBuffer(4));
            value.setUint32(0, tmp);
          }
        } else if (value instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && value instanceof SharedArrayBuffer) {
          value = new DataView(value);
        } else if (Array.isArray(value)) {
          value = new DataView(Uint8Array.from(value).buffer);
        } else if (typeof value === "object") {
          value = new TextEncoder().encode(JSON.stringify(value));
        }
      }
      return value;
    }
    static searchBuffer(buffer2, searchString, limit) {
      var needle = searchString;
      var haystack = buffer2;
      var search = _ByteParser3.boyerMoore(needle);
      var skip = search.byteLength;
      var indices = [];
      for (var i22 = search(haystack); i22 !== -1; i22 = search(haystack, i22 + skip)) {
        indices.push(i22);
        if (limit) {
          if (indices.length >= limit)
            break;
        }
      }
      return indices;
    }
    static bytesToInt16(x0, x1) {
      let int16 = (255 & x0) << 8 | 255 & x1;
      if ((int16 & 32768) > 0) {
        int16 |= 4294901760;
      } else {
        int16 &= 65535;
      }
      return int16;
    }
    static bytesToUInt16(x0, x1) {
      return x0 * 256 + x1;
    }
    static Uint16ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255];
    }
    static bytesToInt24(x0, x1, x22) {
      let int24 = (255 & x0) << 16 | (255 & x1) << 8 | 255 & x22;
      if ((int24 & 8388608) > 0) {
        int24 |= 4278190080;
      } else {
        int24 &= 16777215;
      }
      return int24;
    }
    static bytesToUInt24(x0, x1, x22) {
      return x0 * 65536 + x1 * 256 + x22;
    }
    static Uint24ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255, y22 >> 16 & 255];
    }
    static bytesToInt32(x0, x1, x22, x3) {
      let int32 = (255 & x0) << 24 | (255 & x1) << 16 | (255 & x22) << 8 | 255 & x3;
      if ((int32 & 2147483648) > 0) {
        int32 |= 0;
      } else {
        int32 &= 4294967295;
      }
      return int32;
    }
    static bytesToUInt32(x0, x1, x22, x3) {
      return x0 * 16777216 + x1 * 65536 + x22 * 256 + x3;
    }
    static Uint32ToBytes(y22) {
      return [y22 & 255, y22 >> 8 & 255, y22 >> 16 & 255, y22 >> 24 & 255];
    }
    static get2sCompliment(val, nbits3) {
      if (val > 4294967296)
        return null;
      return val << 32 - nbits3 >> 32 - nbits3;
    }
    static getSignedInt(...args) {
      let pos = 0;
      function getInt(size) {
        var value = 0;
        var first = true;
        while (size--) {
          if (first) {
            let byte = args[pos++];
            value += byte & 127;
            if (byte & 128) {
              value -= 128;
            }
            first = false;
          } else {
            value *= 256;
            value += args[pos++];
          }
        }
        return value;
      }
      return getInt(args.length);
    }
    static asUint8Array(input) {
      if (input instanceof Uint8Array) {
        return input;
      } else if (typeof input === "string") {
        var arr = new Uint8Array(input.length);
        for (var i22 = 0; i22 < input.length; i22++) {
          var c = input.charCodeAt(i22);
          if (c > 127) {
            throw new TypeError("Only ASCII patterns are supported");
          }
          arr[i22] = c;
        }
        return arr;
      } else {
        return new Uint8Array(input);
      }
    }
    static boyerMoore(patternBuffer) {
      var pattern = _ByteParser3.asUint8Array(patternBuffer);
      var M2 = pattern.length;
      if (M2 === 0) {
        throw new TypeError("patternBuffer must be at least 1 byte long");
      }
      var R2 = 256;
      var rightmost_positions = new Int32Array(R2);
      for (var c = 0; c < R2; c++) {
        rightmost_positions[c] = -1;
      }
      for (var j = 0; j < M2; j++) {
        rightmost_positions[pattern[j]] = j;
      }
      var boyerMooreSearch = (txtBuffer, start, end) => {
        var txt = _ByteParser3.asUint8Array(txtBuffer);
        if (start === void 0)
          start = 0;
        if (end === void 0)
          end = txt.length;
        var pat = pattern;
        var right = rightmost_positions;
        var lastIndex = end - pat.length;
        var lastPatIndex = pat.length - 1;
        var skip;
        for (var i22 = start; i22 <= lastIndex; i22 += skip) {
          skip = 0;
          for (var j2 = lastPatIndex; j2 >= 0; j2--) {
            var c2 = txt[i22 + j2];
            if (pat[j2] !== c2) {
              skip = Math.max(1, j2 - right[c2]);
              break;
            }
          }
          if (skip === 0) {
            return i22;
          }
        }
        return -1;
      };
      boyerMooreSearch.byteLength = pattern.byteLength;
      return boyerMooreSearch;
    }
    static struct(format) {
      let fns = [], size = 0, m = rechk3.exec(format);
      if (!m) {
        throw new RangeError("Invalid format string");
      }
      const t22 = lut3("<" === m[1]), lu = (n, c) => t22[c](n ? parseInt(n, 10) : 1);
      while (m = refmt3.exec(format)) {
        ((r, s, f) => {
          for (let i22 = 0; i22 < r; ++i22, size += s) {
            if (f) {
              fns.push(f(size));
            }
          }
        })(...lu(...m.slice(1)));
      }
      const unpack_from = (arrb, offs) => {
        if (arrb.byteLength < (offs | 0) + size) {
          throw errbuf3;
        }
        let v2 = new DataView(arrb, offs | 0);
        return fns.map((f) => f.u(v2));
      };
      const pack_into = (arrb, offs, ...values) => {
        if (values.length < fns.length) {
          throw errval3;
        }
        if (arrb.byteLength < offs + size) {
          throw errbuf3;
        }
        const v2 = new DataView(arrb, offs);
        new Uint8Array(arrb, offs, size).fill(0);
        fns.forEach((f, i22) => f.p(v2, values[i22]));
      };
      const pack = (...values) => {
        let b = new ArrayBuffer(size);
        pack_into(b, 0, ...values);
        return b;
      };
      const unpack = (arrb) => unpack_from(arrb, 0);
      function* iter_unpack(arrb) {
        for (let offs = 0; offs + size <= arrb.byteLength; offs += size) {
          yield unpack_from(arrb, offs);
        }
      }
      return Object.freeze({ unpack, pack, unpack_from, pack_into, iter_unpack, format, size });
    }
  };
  var ByteParser3 = _ByteParser3;
  ByteParser3.codes = { "\\n": 10, "\\r": 13, "\\t": 9, "\\s": 32, "\\b": 8, "\\f": 12, "\\": 92 };
  var ScanMode;
  (function(ScanMode2) {
    ScanMode2[ScanMode2["SCAN_MODE_LOW_POWER"] = 0] = "SCAN_MODE_LOW_POWER";
    ScanMode2[ScanMode2["SCAN_MODE_BALANCED"] = 1] = "SCAN_MODE_BALANCED";
    ScanMode2[ScanMode2["SCAN_MODE_LOW_LATENCY"] = 2] = "SCAN_MODE_LOW_LATENCY";
  })(ScanMode || (ScanMode = {}));
  init_dist();
  init_conversion();
  init_dist();
  var BluetoothLe = registerPlugin("BluetoothLe", { web: () => Promise.resolve().then(() => (init_web(), web_exports)).then((m) => new m.BluetoothLeWeb()) });
  var import_throat = __toESM4(require_throat());
  function getQueue(enabled) {
    if (enabled) {
      return (0, import_throat.default)(1);
    } else {
      return (fn) => fn();
    }
  }
  function validateUUID(uuid) {
    if (typeof uuid !== "string") {
      throw new Error(`Invalid UUID type ${typeof uuid}. Expected string.`);
    }
    uuid = uuid.toLowerCase();
    const is128BitUuid = uuid.search(/^[0-9a-f]{8}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{4}\b-[0-9a-f]{12}$/) >= 0;
    if (!is128BitUuid) {
      throw new Error(`Invalid UUID format ${uuid}. Expected 128 bit string (e.g. "0000180d-0000-1000-8000-00805f9b34fb").`);
    }
    return uuid;
  }
  var BleClientClass = class {
    constructor() {
      this.scanListener = null;
      this.eventListeners = /* @__PURE__ */ new Map();
      this.queue = getQueue(true);
    }
    enableQueue() {
      this.queue = getQueue(true);
    }
    disableQueue() {
      this.queue = getQueue(false);
    }
    async initialize(options) {
      await this.queue(async () => {
        await BluetoothLe.initialize(options);
      });
    }
    async getEnabled() {
      return this.isEnabled();
    }
    async isEnabled() {
      const enabled = await this.queue(async () => {
        const result = await BluetoothLe.isEnabled();
        return result.value;
      });
      return enabled;
    }
    async enable() {
      await this.queue(async () => {
        await BluetoothLe.enable();
      });
    }
    async disable() {
      await this.queue(async () => {
        await BluetoothLe.disable();
      });
    }
    async startEnabledNotifications(callback) {
      await this.queue(async () => {
        var _a;
        const key = `onEnabledChanged`;
        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
        const listener = await BluetoothLe.addListener(key, (result) => {
          callback(result.value);
        });
        this.eventListeners.set(key, listener);
        await BluetoothLe.startEnabledNotifications();
      });
    }
    async stopEnabledNotifications() {
      await this.queue(async () => {
        var _a;
        const key = `onEnabledChanged`;
        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
        this.eventListeners.delete(key);
        await BluetoothLe.stopEnabledNotifications();
      });
    }
    async isLocationEnabled() {
      const enabled = await this.queue(async () => {
        const result = await BluetoothLe.isLocationEnabled();
        return result.value;
      });
      return enabled;
    }
    async openLocationSettings() {
      await this.queue(async () => {
        await BluetoothLe.openLocationSettings();
      });
    }
    async openBluetoothSettings() {
      await this.queue(async () => {
        await BluetoothLe.openBluetoothSettings();
      });
    }
    async openAppSettings() {
      await this.queue(async () => {
        await BluetoothLe.openAppSettings();
      });
    }
    async setDisplayStrings(displayStrings) {
      await this.queue(async () => {
        await BluetoothLe.setDisplayStrings(displayStrings);
      });
    }
    async requestDevice(options) {
      options = options ? this.validateRequestBleDeviceOptions(options) : void 0;
      const result = await this.queue(async () => {
        const device2 = await BluetoothLe.requestDevice(options);
        return device2;
      });
      return result;
    }
    async requestLEScan(options, callback) {
      options = this.validateRequestBleDeviceOptions(options);
      await this.queue(async () => {
        var _a;
        await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());
        this.scanListener = await BluetoothLe.addListener("onScanResult", (resultInternal) => {
          const result = Object.assign(Object.assign({}, resultInternal), { manufacturerData: this.convertObject(resultInternal.manufacturerData), serviceData: this.convertObject(resultInternal.serviceData), rawAdvertisement: resultInternal.rawAdvertisement ? this.convertValue(resultInternal.rawAdvertisement) : void 0 });
          callback(result);
        });
        await BluetoothLe.requestLEScan(options);
      });
    }
    async stopLEScan() {
      await this.queue(async () => {
        var _a;
        await ((_a = this.scanListener) === null || _a === void 0 ? void 0 : _a.remove());
        this.scanListener = null;
        await BluetoothLe.stopLEScan();
      });
    }
    async getDevices(deviceIds) {
      return this.queue(async () => {
        const result = await BluetoothLe.getDevices({ deviceIds });
        return result.devices;
      });
    }
    async getConnectedDevices(services) {
      return this.queue(async () => {
        const result = await BluetoothLe.getConnectedDevices({ services });
        return result.devices;
      });
    }
    async connect(deviceId, onDisconnect, options) {
      await this.queue(async () => {
        var _a;
        if (onDisconnect) {
          const key = `disconnected|${deviceId}`;
          await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
          const listener = await BluetoothLe.addListener(key, () => {
            onDisconnect(deviceId);
          });
          this.eventListeners.set(key, listener);
        }
        await BluetoothLe.connect(Object.assign({ deviceId }, options));
      });
    }
    async createBond(deviceId) {
      await this.queue(async () => {
        await BluetoothLe.createBond({ deviceId });
      });
    }
    async isBonded(deviceId) {
      const isBonded = await this.queue(async () => {
        const result = await BluetoothLe.isBonded({ deviceId });
        return result.value;
      });
      return isBonded;
    }
    async disconnect(deviceId) {
      await this.queue(async () => {
        await BluetoothLe.disconnect({ deviceId });
      });
    }
    async getServices(deviceId) {
      const services = await this.queue(async () => {
        const result = await BluetoothLe.getServices({ deviceId });
        return result.services;
      });
      return services;
    }
    async discoverServices(deviceId) {
      await this.queue(async () => {
        await BluetoothLe.discoverServices({ deviceId });
      });
    }
    async readRssi(deviceId) {
      const value = await this.queue(async () => {
        const result = await BluetoothLe.readRssi({ deviceId });
        return parseFloat(result.value);
      });
      return value;
    }
    async read(deviceId, service, characteristic, options) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      const value = await this.queue(async () => {
        const result = await BluetoothLe.read(Object.assign({ deviceId, service, characteristic }, options));
        return this.convertValue(result.value);
      });
      return value;
    }
    async write(deviceId, service, characteristic, value, options) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      return this.queue(async () => {
        if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
          throw new Error("Invalid data.");
        }
        let writeValue = value;
        if (Capacitor.getPlatform() !== "web") {
          writeValue = dataViewToHexString(value);
        }
        await BluetoothLe.write(Object.assign({ deviceId, service, characteristic, value: writeValue }, options));
      });
    }
    async writeWithoutResponse(deviceId, service, characteristic, value, options) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      await this.queue(async () => {
        if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
          throw new Error("Invalid data.");
        }
        let writeValue = value;
        if (Capacitor.getPlatform() !== "web") {
          writeValue = dataViewToHexString(value);
        }
        await BluetoothLe.writeWithoutResponse(Object.assign({ deviceId, service, characteristic, value: writeValue }, options));
      });
    }
    async readDescriptor(deviceId, service, characteristic, descriptor, options) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      descriptor = validateUUID(descriptor);
      const value = await this.queue(async () => {
        const result = await BluetoothLe.readDescriptor(Object.assign({ deviceId, service, characteristic, descriptor }, options));
        return this.convertValue(result.value);
      });
      return value;
    }
    async writeDescriptor(deviceId, service, characteristic, descriptor, value, options) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      descriptor = validateUUID(descriptor);
      return this.queue(async () => {
        if (!(value === null || value === void 0 ? void 0 : value.buffer)) {
          throw new Error("Invalid data.");
        }
        let writeValue = value;
        if (Capacitor.getPlatform() !== "web") {
          writeValue = dataViewToHexString(value);
        }
        await BluetoothLe.writeDescriptor(Object.assign({ deviceId, service, characteristic, descriptor, value: writeValue }, options));
      });
    }
    async startNotifications(deviceId, service, characteristic, callback) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      await this.queue(async () => {
        var _a;
        const key = `notification|${deviceId}|${service}|${characteristic}`;
        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
        const listener = await BluetoothLe.addListener(key, (event) => {
          callback(this.convertValue(event === null || event === void 0 ? void 0 : event.value));
        });
        this.eventListeners.set(key, listener);
        await BluetoothLe.startNotifications({ deviceId, service, characteristic });
      });
    }
    async stopNotifications(deviceId, service, characteristic) {
      service = validateUUID(service);
      characteristic = validateUUID(characteristic);
      await this.queue(async () => {
        var _a;
        const key = `notification|${deviceId}|${service}|${characteristic}`;
        await ((_a = this.eventListeners.get(key)) === null || _a === void 0 ? void 0 : _a.remove());
        this.eventListeners.delete(key);
        await BluetoothLe.stopNotifications({ deviceId, service, characteristic });
      });
    }
    validateRequestBleDeviceOptions(options) {
      if (options.services) {
        options.services = options.services.map(validateUUID);
      }
      if (options.optionalServices) {
        options.optionalServices = options.optionalServices.map(validateUUID);
      }
      return options;
    }
    convertValue(value) {
      if (typeof value === "string") {
        return hexStringToDataView(value);
      } else if (value === void 0) {
        return new DataView(new ArrayBuffer(0));
      }
      return value;
    }
    convertObject(obj) {
      if (obj === void 0) {
        return void 0;
      }
      const result = {};
      for (const key of Object.keys(obj)) {
        result[key] = this.convertValue(obj[key]);
      }
      return result;
    }
  };
  var BleClient = new BleClientClass();
  init_conversion();
  var BLEClient = class extends ByteParser3 {
    constructor(options, location2) {
      super();
      this.client = BleClient;
      this.devices = {};
      this.location = false;
      this.initialized = false;
      this.setupDevice = (device2, options2) => {
        return new Promise(async (res2, rej) => {
          this.devices[device2.deviceId] = { device: device2, deviceId: device2.deviceId, ...options2 };
          this.client.connect(device2.deviceId, (deviceId) => {
            if (this.devices[device2.deviceId]?.ondisconnect)
              this.devices[device2.deviceId].ondisconnect(deviceId);
          }, options2?.connectOptions).then(async () => {
            let services = await this.getServices(device2.deviceId);
            for (const service in options2?.services) {
              let svc = services.find((o) => {
                if (o.uuid === service)
                  return true;
              });
              if (svc)
                for (const characteristic in options2.services[service]) {
                  if (!svc.characteristics.find((o) => {
                    if (o.uuid === characteristic)
                      return true;
                  }))
                    continue;
                  let opt = options2.services[service][characteristic];
                  if (opt.write) {
                    await this.write(device2, service, characteristic, opt.write, opt.writeCallback, opt.writeOptions);
                  }
                  if (opt.read) {
                    await this.read(device2, service, characteristic, opt.readCallback, opt.readOptions);
                  }
                  if (opt.notify && opt.notifyCallback) {
                    await this.subscribe(device2, service, characteristic, opt.notifyCallback);
                    opt.notifying = true;
                  }
                }
            }
          }).catch(rej);
          res2(this.devices[device2.deviceId]);
        });
      };
      this.triangulate = (device2, duration = 1500, sampleRate = 60) => {
        return new Promise((res2, rej) => {
          if ("Accelerometer" in globalThis) {
            if (typeof globalThis.Accelerometer === "function") {
              let acl = new globalThis.Accelerometer({ frequency: sampleRate });
              let start = performance.now();
              let now = start;
              let result = { samples: [], vector: {} };
              let onread = () => {
                if (now - start < duration) {
                  this.readRssi(device2).then((rssi) => {
                    let x3 = acl.x;
                    let y22 = acl.y;
                    let z22 = acl.z;
                    now = performance.now();
                    result.samples.push({ x: x3, y: y22, z: z22, rssi, timestamp: now });
                  });
                } else {
                  let vector = { x: 0, y: 0, z: 0, rssiAvg: 0 };
                  result.samples.forEach((s) => {
                  });
                  acl.removeEventListener("reading", onread);
                }
              };
              acl.addEventListener("reading", onread);
            }
          } else
            rej(new Error("No Accelerometer API detected"));
        });
      };
      if (location2)
        this.location = location2;
      if (options) {
        this.setup(options);
      }
    }
    setup(options, location2 = this.location) {
      let services = [];
      if (options) {
        for (const serviceuuid in options.services) {
          services.push(serviceuuid);
        }
      }
      let opts = {};
      if (!location2)
        opts.androidNeverForLocation = false;
      return new Promise(async (res2, rej) => {
        if (!this.initialized) {
          await this.client.initialize(opts);
          this.initialized = true;
        }
        if (options?.deviceId) {
          res2(await this.reconnect(options.deviceId));
        } else {
          if (options) {
            let services2 = Array.from(Object.keys(options.services));
            let deviceRequest = {};
            if (!this.isMobile()) {
              deviceRequest.optionalServices = services2;
            }
            if (options.name)
              deviceRequest.name = options.name;
            if (options.namePrefix)
              deviceRequest.namePrefix = options.namePrefix;
            this.client.requestDevice(deviceRequest).then((device2) => {
              res2(this.setupDevice(device2, options));
            }).catch(rej);
          } else {
            this.client.requestDevice().then((device2) => {
              res2(this.setupDevice(device2, options));
            }).catch(rej);
          }
        }
      });
    }
    initialize(options) {
      return new Promise((res2, rej) => {
        this.client.initialize(options).then(() => {
          res2(true);
        }).catch(rej);
      });
    }
    requestDevice(request, options) {
      return new Promise((res2, rej) => {
        this.client.requestDevice(request).then((device2) => {
          this.devices[device2.deviceId] = { device: device2, deviceId: device2.deviceId, ...options };
          res2(device2);
        }).catch(rej);
      });
    }
    getServices(deviceId) {
      return this.client.getServices(deviceId);
    }
    connect(device2, options) {
      return new Promise((res2, rej) => {
        this.client.connect(device2.deviceId, (deviceId) => {
          if (options?.ondisconnect)
            options.ondisconnect(deviceId);
        }, options?.connectOptions).then((connected) => {
          res2(device2);
        }).catch(rej);
      });
    }
    reconnect(deviceId, options) {
      return new Promise((res2, rej) => {
        let android = this.isAndroid();
        let mobile = this.isMobile();
        console.log(deviceId);
        let opts = options;
        if (this.devices[deviceId])
          opts = Object.assign(Object.assign({}, this.devices[deviceId]), opts);
        if (opts?.deviceId)
          delete opts.deviceId;
        if (!mobile && !navigator.bluetooth?.getDevices) {
          this.setup(opts).then((device2) => {
            res2(device2);
          });
        }
        if (android) {
          this.client.getDevices([deviceId]).then((devices) => {
            this.setupDevice(devices[0], opts).then((device2) => {
              res2(device2);
            });
          }).catch(rej);
        }
      });
    }
    disconnect(device2) {
      if (typeof device2 === "object") {
        if (device2?.deviceId) {
          device2 = device2.deviceId;
        }
        ;
      }
      if (typeof device2 === "string") {
        let info = this.devices[device2];
        if (info.beforedisconnect)
          info.beforedisconnect(this, info);
        delete this.devices[device2];
        return this.client.disconnect(device2);
      }
    }
    write(device2, service, characteristic, value, callback, options) {
      if (typeof device2 === "object")
        device2 = device2.deviceId;
      if (callback) {
        return this.client.write(device2, service, characteristic, BLEClient.toDataView(value)).then(callback);
      } else
        return this.client.writeWithoutResponse(device2, service, characteristic, BLEClient.toDataView(value), options);
    }
    read(device2, service, characteristic, ondata, options) {
      if (typeof device2 === "object")
        device2 = device2.deviceId;
      if (ondata)
        return this.client.read(device2, service, characteristic, options).then(ondata);
      else
        return this.client.read(device2, service, characteristic, options);
    }
    subscribe(device2, service, characteristic, ondata) {
      if (typeof device2 === "object")
        device2 = device2.deviceId;
      return this.client.startNotifications(device2, service, characteristic, ondata);
    }
    unsubscribe(device2, service, characteristic) {
      if (typeof device2 === "object")
        device2 = device2.deviceId;
      return this.client.stopNotifications(device2, service, characteristic);
    }
    scan(options, callback) {
      return this.client.requestLEScan(options, callback);
    }
    stopScanning() {
      return this.client.stopLEScan();
    }
    readDescriptor(device2, service, characteristic, descriptor, options) {
      return this.client.readDescriptor(device2.deviceId, service, characteristic, descriptor, options);
    }
    writeDescriptor(device2, service, characteristic, descriptor, value, options) {
      return this.client.writeDescriptor(device2.deviceId, service, characteristic, descriptor, BLEClient.toDataView(value), options);
    }
    readRssi(device2) {
      return this.client.readRssi(device2.deviceId);
    }
    isMobile() {
      let check2 = false;
      (function(a) {
        if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
          check2 = true;
      })(navigator.userAgent || navigator.vendor || window.opera);
      return check2;
    }
    isAndroid() {
      const device2 = navigator.userAgent.toLowerCase();
      return device2.indexOf("android") > -1;
    }
    async distance(device2, txPower, x3, exp, c) {
      let rssi = await this.readRssi(device2);
      if (rssi == 0)
        return void 0;
      let ratio = rssi / txPower;
      if (ratio < 1) {
        return Math.pow(ratio, 10);
      } else {
        return x3 * Math.pow(ratio, exp) + c;
      }
    }
    async distanceFromPhone(device2, txPower, model) {
      let x3, exp, c;
      if (model) {
        if (model === "nexus5") {
          x3 = 0.42093;
          exp = 6.9476;
          c = 0.54992;
        } else if (model === "motoX") {
          x3 = 0.9401940951;
          exp = 6.170094565;
          c = 0;
        } else if (model === "iphone5") {
          x3 = 0.89976;
          exp = 7.7095;
          c = 0.111;
        }
      }
      return await this.distance(device2, txPower, x3, exp, c);
    }
  };
  var WebSerial = class extends ByteParser3 {
    constructor() {
      super(...arguments);
      this.streams = {};
      this.createStream = (options) => {
        let stream = { _id: options._id ? options._id : `stream${Math.floor(Math.random() * 1e15)}`, info: options.port.getInfo(), running: false, ...options };
        if (options.port?.readable) {
          if (options.transforms) {
            stream.reader = WebSerial.setStreamTransforms(options.port.readable, options.transforms).getReader();
          } else {
            stream.reader = options.port.readable.getReader();
          }
        }
        this.streams[stream._id] = stream;
        return stream;
      };
    }
    getPorts() {
      return navigator.serial.getPorts();
    }
    requestPort(usbVendorId, usbProductId) {
      let options = {};
      if (usbVendorId) {
        options.usbVendorId = usbVendorId;
      }
      if (usbProductId) {
        options.usbProductId = usbProductId;
      }
      if (options.usbVendorId)
        return navigator.serial.requestPort({ filters: [options] });
      else
        return navigator.serial.requestPort();
    }
    openPort(port, options) {
      if (options)
        options = Object.assign({}, options);
      if (options?.ondisconnect) {
        port.ondisconnect = options.ondisconnect;
        delete options.ondisconnect;
      }
      return port.open(options).then(() => {
        if (options?.onconnect)
          options.onconnect(port);
      });
    }
    async readWithTimeout(port, timeout) {
      const reader = port.readable.getReader();
      const timer = setTimeout(() => {
        reader.releaseLock();
      }, timeout);
      const result = await reader.read();
      clearTimeout(timer);
      reader.releaseLock();
      return result;
    }
    async writePort(port, message) {
      const writer = port.writable.getWriter();
      await writer.write(WebSerial.toDataView(message));
      writer.releaseLock();
      return true;
    }
    getSignals(port) {
      return port.getSignals();
    }
    setSignals(port, signals) {
      return port.setSignals(signals);
    }
    readStream(stream) {
      if (stream.reader && !stream.running) {
        let reader = stream.reader;
        if (stream.buffering) {
          if (typeof stream.buffering !== "object")
            stream.buffering = {};
          if (!stream.buffering.buffer) {
            stream.buffering.buffer = [];
          }
          if (!stream.buffering.searchBytes)
            stream.buffering.searchBytes = new Uint8Array([13, 10]);
        }
        let readLoop = () => {
          if (stream.port.readable && stream.running) {
            reader.read().then((result) => {
              if (result.done)
                reader.releaseLock();
              else {
                if (stream.buffering) {
                  stream.buffering.buffer.push(...result.value);
                  const needle = stream.buffering.searchBytes;
                  const haystack = stream.buffering.buffer;
                  const search = WebSerial.boyerMoore(needle);
                  const skip = search.byteLength;
                  let nextIndex = -1;
                  let used = stream.buffering.lockIdx ?? 0;
                  for (var i22 = search(haystack); i22 !== -1; i22 = search(haystack, i22 + skip)) {
                    if (!stream.buffering.locked && !("lockIdx" in stream.buffering))
                      used = stream.buffering.lockIdx = i22;
                    else {
                      nextIndex = i22;
                      if (nextIndex >= 0) {
                        const len = nextIndex - used;
                        if (!stream.buffering.locked) {
                          const line = stream.buffering.buffer.splice(stream.buffering.lockIdx, len);
                          const data = new Uint8Array(line.slice(stream.buffering.searchBytes.length));
                          stream.ondata(data);
                          stream.buffering.locked = true;
                        } else if (len > 0) {
                          const line = stream.buffering.buffer.splice(stream.buffering.lockIdx, len);
                          const data = new Uint8Array(line.slice(stream.buffering.searchBytes.length));
                          stream.ondata(new Uint8Array(data));
                        }
                        used = nextIndex;
                      }
                    }
                  }
                } else
                  stream.ondata(result.value);
                setTimeout(() => {
                  readLoop();
                }, stream.frequency);
              }
            }).catch((er) => {
              console.error(stream._id, " Read error:", er);
              if (er.message.includes("overrun") || er.message.includes("framing")) {
                delete stream.reader;
                this.reconnect(stream);
              }
            });
          } else if (!stream.running && stream.port.readable) {
            try {
              reader.releaseLock();
            } catch (er) {
              console.error(er);
            }
          }
        };
        stream.running = true;
        readLoop();
        return stream;
      }
      return void 0;
    }
    writeStream(stream, message) {
      if (typeof stream === "string")
        stream = this.streams[stream];
      if (stream.port.writable) {
        let writer = stream.port.writable.getWriter();
        writer.write(WebSerial.toDataView(message));
        writer.releaseLock();
        return true;
      }
      return void 0;
    }
    closeStream(stream, onclose) {
      if (typeof stream === "string")
        stream = this.streams[stream];
      stream.running = false;
      return new Promise((res2, rej) => {
        if (stream.settings.beforedisconnect) {
          stream.settings.beforedisconnect(this, stream.port);
        }
        setTimeout(async () => {
          if (stream.port.readable && stream.reader) {
            try {
              stream.reader.releaseLock();
            } catch (er) {
              console.error(er);
            }
            if (stream.transforms)
              try {
                await stream.reader.cancel();
              } catch (err) {
                console.error(err);
              }
          }
          try {
            await stream.port.close().then(() => {
              if (onclose)
                onclose(this.streams[stream._id]);
            });
            delete this.streams[stream._id];
            res2(true);
          } catch (er) {
            rej(er);
          }
        }, 300);
      });
    }
    reconnect(stream, options) {
      if (typeof stream === "string")
        stream = this.streams[stream];
      return new Promise((res2, rej) => {
        if (typeof stream !== "object") {
          rej(void 0);
          return;
        }
        let info = stream.port.getInfo();
        this.closeStream(stream._id).then((closed) => {
          setTimeout(() => {
            this.getPorts().then((ports) => {
              for (let i22 = 0; i22 < ports.length; i22++) {
                if (ports[i22].getInfo().usbVendorId === info.usbVendorId && ports[i22].getInfo().usbProductId === info.usbProductId) {
                  if (!options)
                    options = stream;
                  else
                    options._id = stream._id;
                  delete options.port;
                  this.openPort(ports[i22], options.settings).then(() => {
                    const stream2 = this.createStream({ ...options, port: ports[i22] });
                    this.readStream(stream2);
                    res2(stream2);
                  }).catch(rej);
                }
              }
            }).catch(rej);
          }, 100);
        });
      });
    }
    static setStreamTransforms(stream, transforms) {
      let transform = [];
      Object.keys(transforms).forEach((t22) => {
        let opt = transforms[t22];
        if (opt instanceof TransformStream) {
          transform.push(opt);
        } else {
          if (!opt.start)
            opt.start = function start() {
            };
          if (!opt.flush)
            opt.flush = function flush() {
            };
          let transformer = new TransformStream({ start: opt.start, transform: opt.transform, flush: opt.flush }, opt.writableStrategy, opt.readableStrategy);
          transform.push(transformer);
        }
      });
      let str22 = stream;
      transform.forEach((transform2) => {
        str22 = str22.pipeThrough(transform2);
      });
      return str22;
    }
  };
  function ads131m08codec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = { 0: new Array(9), 1: new Array(9), 2: new Array(9), 3: new Array(9), 4: new Array(9), 5: new Array(9), 6: new Array(9), 7: new Array(9), timestamp: Date.now() };
    for (let i22 = 0; i22 < 9; i22++) {
      let j = i22 * 25;
      output[0][i22] = ByteParser3.bytesToInt24(arr[j], arr[j + 1], arr[j + 2]);
      output[1][i22] = ByteParser3.bytesToInt24(arr[j + 3], arr[j + 4], arr[j + 5]);
      output[2][i22] = ByteParser3.bytesToInt24(arr[j + 6], arr[j + 7], arr[j + 8]);
      output[3][i22] = ByteParser3.bytesToInt24(arr[j + 9], arr[j + 10], arr[j + 11]);
      output[4][i22] = ByteParser3.bytesToInt24(arr[j + 12], arr[j + 13], arr[j + 14]);
      output[5][i22] = ByteParser3.bytesToInt24(arr[j + 15], arr[j + 16], arr[j + 17]);
      output[6][i22] = ByteParser3.bytesToInt24(arr[j + 18], arr[j + 19], arr[j + 20]);
      output[7][i22] = ByteParser3.bytesToInt24(arr[j + 21], arr[j + 22], arr[j + 23]);
    }
    return output;
  }
  var decoder2 = new TextDecoder();
  var sps3 = 250;
  var defaultChartSetting2 = { nSec: 10, sps: sps3, units: "mV" };
  var ads131m08ChartSettings2 = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting2)), "1": JSON.parse(JSON.stringify(defaultChartSetting2)), "2": JSON.parse(JSON.stringify(defaultChartSetting2)), "3": JSON.parse(JSON.stringify(defaultChartSetting2)), "4": JSON.parse(JSON.stringify(defaultChartSetting2)), "5": JSON.parse(JSON.stringify(defaultChartSetting2)), "6": JSON.parse(JSON.stringify(defaultChartSetting2)), "7": JSON.parse(JSON.stringify(defaultChartSetting2)) } };
  var gain2 = 32;
  var nbits2 = 24;
  var vref2 = 1.2;
  var defaultsetting2 = { sps: sps3, useDCBlock: false, useBandpass: false, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 0.96 * 1e3 * vref2 / (gain2 * (Math.pow(2, nbits2) - 1)) };
  var ads131m08FilterSettings2 = { "0": JSON.parse(JSON.stringify(defaultsetting2)), "1": JSON.parse(JSON.stringify(defaultsetting2)), "2": JSON.parse(JSON.stringify(defaultsetting2)), "3": JSON.parse(JSON.stringify(defaultsetting2)), "4": JSON.parse(JSON.stringify(defaultsetting2)), "5": JSON.parse(JSON.stringify(defaultsetting2)), "6": JSON.parse(JSON.stringify(defaultsetting2)), "7": JSON.parse(JSON.stringify(defaultsetting2)) };
  var accScale = 2e-3 / Math.pow(2, 4);
  var getAcc = (arr, output, channels = 8) => {
    const accIdx = channels * 3 + 1;
    const sum = (a, b) => a + b;
    const accSum = arr.slice(accIdx).reduce(sum, 0);
    if (accSum !== 0) {
      output.ax = accScale * ByteParser3.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
      output.ay = accScale * ByteParser3.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
      output.az = accScale * ByteParser3.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
    }
  };
  function cytoncodec(data) {
    let arr;
    if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = {};
    for (let i22 = 0; i22 < 8; i22++) {
      let idx = 1 + 3 * i22;
      output[i22] = ByteParser3.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
    }
    getAcc(arr, output);
    output.timestamp = Date.now();
    return output;
  }
  function daisycytoncodec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = {};
    for (let i22 = 0; i22 < 8; i22++) {
      let idx = 1 + 3 * i22;
      if (arr[0] % 2 === 0)
        output[i22 + 7] = ByteParser3.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
      else
        output[i22] = ByteParser3.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
    }
    getAcc(arr, output);
    return output;
  }
  var sps22 = 250;
  var cytonSerialSettings = { deviceType: "USB", deviceName: "cyton", baudRate: 115200, codec: cytoncodec, write: "b", beforedisconnect: (client2, port) => {
    client2.writePort(port, "s");
  }, buffering: { searchBytes: new Uint8Array([192, 160]) }, sps: sps22 };
  var daisycytonSerialSettings = { deviceType: "USB", deviceName: "cyton_daisy", baudRate: 115200, codec: daisycytoncodec, write: "b", beforedisconnect: (client2, port) => {
    client2.writePort(port, "s");
  }, buffering: { searchBytes: new Uint8Array([192, 160]) }, sps: sps22 };
  var defaultChartSetting22 = { nSec: 10, sps: sps22, units: "mV" };
  var defaultChartSetting222 = { nSec: 10, sps: sps22 };
  var cytonChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting22)), "1": JSON.parse(JSON.stringify(defaultChartSetting22)), "2": JSON.parse(JSON.stringify(defaultChartSetting22)), "3": JSON.parse(JSON.stringify(defaultChartSetting22)), "4": JSON.parse(JSON.stringify(defaultChartSetting22)), "5": JSON.parse(JSON.stringify(defaultChartSetting22)), "6": JSON.parse(JSON.stringify(defaultChartSetting22)), "7": JSON.parse(JSON.stringify(defaultChartSetting22)), "ax": JSON.parse(JSON.stringify(defaultChartSetting222)), "ay": JSON.parse(JSON.stringify(defaultChartSetting222)), "az": JSON.parse(JSON.stringify(defaultChartSetting222)) }, generateNewLines: true };
  var defaultsetting22 = { sps: sps22, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 1e3 * 4.5 / (24 * (Math.pow(2, 23) - 1)) };
  var cytonFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting22)), "1": JSON.parse(JSON.stringify(defaultsetting22)), "2": JSON.parse(JSON.stringify(defaultsetting22)), "3": JSON.parse(JSON.stringify(defaultsetting22)), "4": JSON.parse(JSON.stringify(defaultsetting22)), "5": JSON.parse(JSON.stringify(defaultsetting22)), "6": JSON.parse(JSON.stringify(defaultsetting22)), "7": JSON.parse(JSON.stringify(defaultsetting22)), "8": JSON.parse(JSON.stringify(defaultsetting22)), "9": JSON.parse(JSON.stringify(defaultsetting22)), "10": JSON.parse(JSON.stringify(defaultsetting22)), "11": JSON.parse(JSON.stringify(defaultsetting22)), "12": JSON.parse(JSON.stringify(defaultsetting22)), "13": JSON.parse(JSON.stringify(defaultsetting22)), "14": JSON.parse(JSON.stringify(defaultsetting22)), "15": JSON.parse(JSON.stringify(defaultsetting22)) };
  function freeeeg128codec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = {};
    for (let i22 = 0; i22 < 128; i22++) {
      let idx = i22 * 3 + 1;
      output[i22] = ByteParser3.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
    }
    let accIdx = 385;
    output["ax"] = ByteParser3.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
    output["ay"] = ByteParser3.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
    output["az"] = ByteParser3.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
    output["gx"] = ByteParser3.bytesToInt16(arr[accIdx + 6], arr[accIdx + 7]);
    output["gy"] = ByteParser3.bytesToInt16(arr[accIdx + 8], arr[accIdx + 9]);
    output["gz"] = ByteParser3.bytesToInt16(arr[accIdx + 10], arr[accIdx + 11]);
    output.timestamp = Date.now();
    return output;
  }
  var sps32 = 250;
  var freeeeg128SerialSettings = { deviceType: "USB", deviceName: "freeeeg128", baudRate: 921600, bufferSize: 2e3, frequency: 1.9, codec: freeeeg128codec, sps: sps32, buffering: { searchBytes: new Uint8Array([192, 160]) } };
  var freeeeg128ChartSettings = { lines: { "ax": { nSec: 10, sps: sps32 }, "ay": { nSec: 10, sps: sps32 }, "az": { nSec: 10, sps: sps32 }, "gx": { nSec: 10, sps: sps32 }, "gy": { nSec: 10, sps: sps32 }, "gz": { nSec: 10, sps: sps32 } } };
  var freeeeg128FilterSettings = {};
  for (let i22 = 0; i22 < 128; i22++) {
    freeeeg128ChartSettings.lines[i22] = { sps: sps32, nSec: 10, units: "mV" };
    freeeeg128FilterSettings[i22] = { sps: 250, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, scalar: 1e3 * 2.5 / (32 * (Math.pow(2, 24) - 1)) };
  }
  function freeeeg32codec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = {};
    for (let i22 = 0; i22 < 32; i22++) {
      let idx = i22 * 3 + 1;
      output[i22] = ByteParser3.bytesToInt24(arr[idx], arr[idx + 1], arr[idx + 2]);
    }
    let accIdx = 97;
    output["ax"] = ByteParser3.bytesToInt16(arr[accIdx], arr[accIdx + 1]);
    output["ay"] = ByteParser3.bytesToInt16(arr[accIdx + 2], arr[accIdx + 3]);
    output["az"] = ByteParser3.bytesToInt16(arr[accIdx + 4], arr[accIdx + 5]);
    output["gx"] = ByteParser3.bytesToInt16(arr[accIdx + 6], arr[accIdx + 7]);
    output["gy"] = ByteParser3.bytesToInt16(arr[accIdx + 8], arr[accIdx + 9]);
    output["gz"] = ByteParser3.bytesToInt16(arr[accIdx + 10], arr[accIdx + 11]);
    output.timestamp = Date.now();
    return output;
  }
  var sps4 = 512;
  var freeeeg32SerialSettings = { deviceType: "USB", deviceName: "freeeeg32", baudRate: 921600, bufferSize: 2e3, frequency: 1.9, codec: freeeeg32codec, sps: sps4, buffering: { searchBytes: new Uint8Array([192, 160]) } };
  var freeeeg32_optical_SerialSettings = { deviceType: "USB", deviceName: "freeeeg32_optical", baudRate: 1e6, bufferSize: 2e3, frequency: 1.9, codec: freeeeg32codec, sps: sps4, buffering: { searchBytes: new Uint8Array([192, 160]) } };
  var defaultChartSetting3 = { nSec: 10, sps: sps4 };
  var freeeeg32ChartSettings = { lines: { "ax": JSON.parse(JSON.stringify(defaultChartSetting3)), "ay": JSON.parse(JSON.stringify(defaultChartSetting3)), "az": JSON.parse(JSON.stringify(defaultChartSetting3)), "gx": JSON.parse(JSON.stringify(defaultChartSetting3)), "gy": JSON.parse(JSON.stringify(defaultChartSetting3)), "gz": JSON.parse(JSON.stringify(defaultChartSetting3)) } };
  var freeeeg32FilterSettings = {};
  for (let i22 = 0; i22 < 32; i22++) {
    freeeeg32ChartSettings.lines[i22] = { sps: sps4, nSec: 10, units: "mV" };
    freeeeg32FilterSettings[i22] = { sps: sps4, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 1e3 * 2.5 / (8 * (Math.pow(2, 24) - 1)) };
  }
  var textdecoder = new TextDecoder();
  function hegduinocodec(value) {
    let output = { timestamp: 0, red: 0, infrared: 0, heg: 0, ambient: 0, temperature: 0 };
    let txt = textdecoder.decode(value);
    let line = txt.split("|");
    if (line.length === 3) {
      output.timestamp = Date.now();
      output.red = parseInt(line[0]);
      output.infrared = parseInt(line[1]);
      output.heg = parseFloat(line[2]);
    } else if (line.length >= 2) {
      output.timestamp = Date.now();
      output.red = parseInt(line[1]);
      output.infrared = parseInt(line[2]);
      output.heg = parseFloat(line[3]);
      if (line[4])
        output.ambient = parseFloat(line[4]);
      if (line[5])
        output.temperature = parseFloat(line[5]);
      return output;
    } else
      return txt;
  }
  var sps5 = 40;
  var hegduinoSerialSettings = { deviceType: "USB", deviceName: "hegduino", baudRate: 115200, write: "t\n", codec: hegduinocodec, sps: sps5 };
  var hegduinoV1SerialSettings = Object.assign({}, hegduinoSerialSettings);
  hegduinoV1SerialSettings.sps = 19;
  var hegduinoBLESettings = { deviceType: "BLE", deviceName: "hegduino", sps: sps5, services: { ["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { "6e400002-b5a3-f393-e0a9-e50e24dcca9e": { write: "t" }, "6e400003-b5a3-f393-e0a9-e50e24dcca9e": { notify: true, notifyCallback: void 0, codec: hegduinocodec, sps: sps5 } }, ["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { ["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true }, ["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { write: void 0, notify: true, notifyCallback: void 0 }, ["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true } } }, androidWebBLE: "o" };
  var hegduinoV1BLESettings = Object.assign({}, hegduinoSerialSettings);
  hegduinoV1BLESettings.sps = 19;
  function max3010xcodec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let pktCt = 32;
    const output = { "red": new Array(pktCt), "ir": new Array(pktCt), "max_dietemp": ByteParser3.get2sCompliment(arr[193], 8) + 0.0625 * arr[194], "timestamp": Date.now() };
    let i22 = 0;
    while (i22 < pktCt) {
      let idx = i22 * 6;
      if (i22 % 2 === 0) {
        output["ir"][i22] = (arr[idx + 1] << 16 | arr[idx + 2] << 8 | arr[idx + 3]) & 524287;
        output["ir"][i22 + 1] = (arr[idx + 4] << 16 | arr[idx + 5] << 8 | arr[idx + 6]) & 524287;
      } else {
        output["red"][i22 - 1] = (arr[idx + 1] << 16 | arr[idx + 2] << 8 | arr[idx + 3]) & 524287;
        output["red"][i22] = (arr[idx + 4] << 16 | arr[idx + 5] << 8 | arr[idx + 6]) & 524287;
      }
      i22++;
    }
    return output;
  }
  function mpu6050codec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = { "ax": new Array(20), "ay": new Array(20), "az": new Array(20), "gx": new Array(20), "gy": new Array(20), "gz": new Array(20), "mpu_dietemp": (ByteParser3.bytesToInt16(arr[241], arr[242]) + 521) / 340 + 35, timestamp: Date.now() };
    for (let i22 = 0; i22 < 20; i22++) {
      let idx = i22 * 12;
      output.ax[i22] = ByteParser3.bytesToInt16(arr[idx + 1], arr[idx + 2]);
      output.ay[i22] = ByteParser3.bytesToInt16(arr[idx + 3], arr[idx + 4]);
      output.az[i22] = ByteParser3.bytesToInt16(arr[idx + 5], arr[idx + 6]);
      output.gx[i22] = ByteParser3.bytesToInt16(arr[idx + 7], arr[idx + 8]);
      output.gy[i22] = ByteParser3.bytesToInt16(arr[idx + 9], arr[idx + 10]);
      output.gz[i22] = ByteParser3.bytesToInt16(arr[idx + 11], arr[idx + 12]);
    }
    return output;
  }
  function cognixionONE_EEG_codec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = { 0: new Array(), 1: new Array(), 2: new Array(), 3: new Array(), 4: new Array(), 5: new Array(), 6: new Array(), 7: new Array(), timestamp: Date.now() };
    for (let i22 = 0; i22 < 7; i22++) {
      let j = i22 * 26 + 1;
      if (!arr[j + 23])
        break;
      output[0][i22] = ByteParser3.bytesToUInt24(arr[j], arr[j + 1], arr[j + 2]);
      output[1][i22] = ByteParser3.bytesToUInt24(arr[j + 3], arr[j + 4], arr[j + 5]);
      output[2][i22] = ByteParser3.bytesToUInt24(arr[j + 6], arr[j + 7], arr[j + 8]);
      output[3][i22] = ByteParser3.bytesToUInt24(arr[j + 9], arr[j + 10], arr[j + 11]);
      output[4][i22] = ByteParser3.bytesToUInt24(arr[j + 12], arr[j + 13], arr[j + 14]);
      output[5][i22] = ByteParser3.bytesToUInt24(arr[j + 15], arr[j + 16], arr[j + 17]);
      output[6][i22] = ByteParser3.bytesToUInt24(arr[j + 18], arr[j + 19], arr[j + 20]);
      output[7][i22] = ByteParser3.bytesToUInt24(arr[j + 21], arr[j + 22], arr[j + 23]);
    }
    return output;
  }
  var sps7 = 250;
  var cognixionONEBLESettings = { deviceType: "BLE", deviceName: "cognixionONE", services: { ["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]: { ["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]: { notify: true, notifyCallback: void 0, codec: cognixionONE_EEG_codec, sps: sps7 } }, ["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { ["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { write: void 0 }, ["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]: { read: true } } }, sps: sps7 };
  var cognixionONESerialSettings = Object.assign({}, cytonSerialSettings);
  cognixionONESerialSettings.sps = sps7;
  cognixionONESerialSettings.deviceName = "cognixionONE";
  var defaultChartSetting4 = { nSec: 10, sps: sps7, units: "mV" };
  var cognixionONEChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting4)), "1": JSON.parse(JSON.stringify(defaultChartSetting4)), "2": JSON.parse(JSON.stringify(defaultChartSetting4)), "3": JSON.parse(JSON.stringify(defaultChartSetting4)), "4": JSON.parse(JSON.stringify(defaultChartSetting4)), "5": JSON.parse(JSON.stringify(defaultChartSetting4)), "6": JSON.parse(JSON.stringify(defaultChartSetting4)), "7": JSON.parse(JSON.stringify(defaultChartSetting4)) } };
  var PeanutCodes = { 2: { type: "POOR_SIGNAL", format: "<B", byteLength: 1 }, 144: { type: "heg", format: "<i", byteLength: 4 }, 145: { type: "filteredHEG", format: "<i", byteLength: 4 }, 147: { type: "rawdata4", format: "<iiii", byteLength: 4 * 4 }, 148: { type: "rawdata6", format: "<iiiiii", byteLength: 4 * 6 }, 160: { type: "sampleNumber", format: "<i", byteLength: 4 }, 176: { type: "debug0", format: "<i", byteLength: 4 }, 177: { type: "debug1", format: "<i", byteLength: 4 }, 178: { type: "debug2", format: "<i", byteLength: 4 }, 179: { type: "debug3", format: "<i", byteLength: 4 }, 180: { type: "debug4", format: "<iiiiii", byteLength: 4 * 6 }, 181: { type: "debug4", format: "<iiiiii", byteLength: 4 * 6 }, 182: { type: "rawdata27", format: "<B" + "i".repeat(26), byteLength: 1 + 4 * 26 } };
  function peanutcodec(data) {
    let result = {};
    let i22 = 0;
    while (i22 < data.length) {
      if (PeanutCodes[data[i22]] && i22 + 1 + PeanutCodes[data[i22]].byteLength <= data.length) {
        let slice = data.slice(i22 + 1, i22 + 1 + PeanutCodes[data[i22]].byteLength).buffer;
        let unpacked = ByteParser3.struct(PeanutCodes[data[i22]].format).unpack(slice);
        let code2 = PeanutCodes[data[i22]].type;
        if (code2 === "unfilteredHEG" || code2 === "heg")
          unpacked = unpacked[0] / 256;
        else if (code2 === "POOR_SIGNAL" || code2 === "sampleNumber" || code2 === "debug0" || code2 === "debug1" || code2 === "debug2" || code2 === "debug3")
          unpacked = unpacked[0];
        if (!result[PeanutCodes[data[i22]].type]) {
          if (Array.isArray(unpacked))
            result[PeanutCodes[data[i22]].type] = unpacked;
          else
            result[PeanutCodes[data[i22]].type] = [unpacked];
        } else {
          if (Array.isArray(unpacked))
            result[PeanutCodes[data[i22]].type].push(...unpacked);
          else
            result[PeanutCodes[data[i22]].type].push(unpacked);
        }
        i22 += PeanutCodes[data[i22]].byteLength + 1;
      } else
        i22++;
    }
    result.timestamp = Date.now();
    return result;
  }
  var peanutSerialSettings = { deviceType: "USB", deviceName: "peanut", baudRate: 38400, bufferSize: 400, write: "protocol 3\n", buffering: { searchBytes: new Uint8Array([170, 170]) }, codec: peanutcodec, sps: 10.101 };
  var sealevel_hpa = 1013.25;
  var bme280codec = (data) => {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    let output = { timestamp: Date.now(), temp: [], pressure: [], altitude: [] };
    let mode = 0;
    if (arr[0].length === 74)
      mode = 1;
    if (!mode) {
      for (let j = 0; j < 3; j++) {
        let i22 = j * 16 + 2;
        let tint = ByteParser3.bytesToInt32(arr[3 + i22], arr[2 + i22], arr[1 + i22], arr[0 + i22]);
        let tfrac = ByteParser3.bytesToInt32(arr[7 + i22], arr[6 + i22], arr[5 + i22], arr[4 + i22]);
        output.temp.push(tint + tfrac / Math.pow(10, Math.ceil(Math.log10(tfrac))));
        let pint = 10 * ByteParser3.bytesToInt32(arr[11 + i22], arr[10 + i22], arr[9 + i22], arr[8 + i22]);
        let pfrac = ByteParser3.bytesToInt32(arr[15 + i22], arr[14 + i22], arr[13 + i22], arr[12 + i22]);
        output.pressure.push(pint + pfrac / Math.pow(10, Math.ceil(Math.log10(pfrac))));
        output.altitude.push(altitude(output.pressure[j], output.temp[j]));
      }
    } else {
      output.humidity = [];
      for (let j = 0; j < 3; j++) {
        let i22 = j * 24 + 2;
        let tint = ByteParser3.bytesToInt32(arr[3 + i22], arr[2 + i22], arr[1 + i22], arr[0 + i22]);
        let tfrac = ByteParser3.bytesToInt32(arr[7 + i22], arr[6 + i22], arr[5 + i22], arr[4 + i22]);
        output.temp.push(tint + tfrac / Math.pow(10, Math.ceil(Math.log10(tfrac))));
        let pint = 10 * ByteParser3.bytesToInt32(arr[11 + i22], arr[10 + i22], arr[9 + i22], arr[8 + i22]);
        let pfrac = ByteParser3.bytesToInt32(arr[15 + i22], arr[14 + i22], arr[13 + i22], arr[12 + i22]);
        output.pressure.push(pint + pfrac / Math.pow(10, Math.ceil(Math.log10(pfrac))));
        let hint = ByteParser3.bytesToInt32(arr[19 + i22], arr[18 + i22], arr[17 + i22], arr[16 + i22]);
        let hfrac = ByteParser3.bytesToInt32(arr[23 + i22], arr[22 + i22], arr[21 + i22], arr[20 + i22]);
        output.humidity.push(hint + hfrac / Math.pow(10, Math.ceil(Math.log10(hfrac))));
        output.altitude.push(altitude(output.pressure[j], output.temp[j]));
      }
    }
    return output;
  };
  function altitude(pressure, temperature) {
    return 44330 * (1 - Math.pow(pressure / sealevel_hpa, 0.1903));
  }
  function nrf5x_usbcodec(data) {
    let arr;
    if (data.getInt8)
      arr = new Uint8Array(data.buffer);
    else if (!data.buffer)
      arr = new Uint8Array(data);
    else
      arr = data;
    const output = {};
    if (arr[0] === 2) {
      Object.assign(output, ads131m08codec(arr.subarray(2)));
    } else if (arr[0] === 3) {
      let result = ads131m08codec(arr.subarray(2));
      Object.keys(result).forEach((key, i22) => {
        output[i22 + 8] = result[key];
      });
    } else if (arr[0] === 4) {
      Object.assign(output, mpu6050codec(arr.subarray(2)));
    } else if (arr[0] === 5) {
      Object.assign(output, max3010xcodec(arr.subarray(2)));
    } else if (arr[0] === 6) {
      Object.assign(output, bme280codec(arr.subarray(2)));
    } else {
      Object.assign(output, ads131m08codec(arr));
    }
    return output;
  }
  var nrf5xSerialSettings = { deviceType: "USB", deviceName: "nrf5x", baudRate: 115200, buffering: { searchBytes: new Uint8Array([240, 240]) }, codec: nrf5x_usbcodec, sps: 250 };
  var nrf5xBLESettings = { deviceType: "BLE", deviceName: "nrf5x", sps: 250, services: { "0000cafe-b0ba-8bad-f00d-deadbeef0000": { "0001cafe-b0ba-8bad-f00d-deadbeef0000": { write: void 0 }, "0002cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: ads131m08codec, sps: 250 }, "0003cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: max3010xcodec, sps: 100 }, "0004cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: mpu6050codec, sps: 100 }, "0005cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: ads131m08codec, sps: 250 }, "0006cafe-b0ba-8bad-f00d-deadbeef0000": { notify: true, notifyCallback: void 0, codec: bme280codec, sps: 3.33 } } } };
  var defaultChartSetting5 = { nSec: 10, sps: 250, units: "mV" };
  var nrf5x_usbChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting5)), "1": JSON.parse(JSON.stringify(defaultChartSetting5)), "2": JSON.parse(JSON.stringify(defaultChartSetting5)), "3": JSON.parse(JSON.stringify(defaultChartSetting5)), "4": JSON.parse(JSON.stringify(defaultChartSetting5)), "5": JSON.parse(JSON.stringify(defaultChartSetting5)), "6": JSON.parse(JSON.stringify(defaultChartSetting5)), "7": JSON.parse(JSON.stringify(defaultChartSetting5)) }, generateNewLines: true, cleanGeneration: false };
  var gain22 = 32;
  var nbits22 = 24;
  var vref22 = 1.2;
  var defaultsetting3 = { sps: 250, useDCBlock: false, useBandpass: false, bandpassLower: 3, bandpassUpper: 45, useScaling: true, scalar: 0.96 * 1e3 * vref22 / (gain22 * (Math.pow(2, nbits22) - 1)) };
  var nrf5x_usbFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting3)), "1": JSON.parse(JSON.stringify(defaultsetting3)), "2": JSON.parse(JSON.stringify(defaultsetting3)), "3": JSON.parse(JSON.stringify(defaultsetting3)), "4": JSON.parse(JSON.stringify(defaultsetting3)), "5": JSON.parse(JSON.stringify(defaultsetting3)), "6": JSON.parse(JSON.stringify(defaultsetting3)), "7": JSON.parse(JSON.stringify(defaultsetting3)), "8": JSON.parse(JSON.stringify(defaultsetting3)), "9": JSON.parse(JSON.stringify(defaultsetting3)), "10": JSON.parse(JSON.stringify(defaultsetting3)), "11": JSON.parse(JSON.stringify(defaultsetting3)), "12": JSON.parse(JSON.stringify(defaultsetting3)), "13": JSON.parse(JSON.stringify(defaultsetting3)), "14": JSON.parse(JSON.stringify(defaultsetting3)), "15": JSON.parse(JSON.stringify(defaultsetting3)) };
  var textdecoder2 = new TextDecoder();
  function statechangercodec(value) {
    let output = { timestamp: 0, left_red: 0, left_infrared: 0, left_heg: 0, center_red: 0, center_infrared: 0, center_heg: 0, right_red: 0, right_infrared: 0, right_heg: 0 };
    let txt = textdecoder2.decode(value);
    let line = txt.split("|");
    if (line.length >= 5) {
      output.timestamp = Date.now();
      output.left_red = parseInt(line[1]);
      output.left_infrared = parseInt(line[2]);
      output.left_heg = parseFloat(line[3]);
      output.center_red = parseInt(line[4]);
      output.center_infrared = parseInt(line[5]);
      output.center_heg = parseFloat(line[6]);
      output.right_red = parseInt(line[7]);
      output.right_infrared = parseInt(line[8]);
      output.right_heg = parseFloat(line[9]);
      return output;
    } else
      return txt;
  }
  var statechangerSerialSettings = { deviceType: "USB", deviceName: "statechanger", baudRate: 115200, codec: statechangercodec, sps: 20 };
  var statechangerBLESettings = { deviceType: "BLE", deviceName: "statechanger", sps: 20, services: { ["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { "6e400002-b5a3-f393-e0a9-e50e24dcca9e": { write: "t" }, "6e400003-b5a3-f393-e0a9-e50e24dcca9e": { notify: true, notifyCallback: void 0, codec: statechangercodec } }, ["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { ["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true }, ["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { write: void 0, notify: true, notifyCallback: void 0 }, ["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]: { read: true } } }, androidWebBLE: "o" };
  function blueberrycodec(value) {
    let output = { red: value.getInt32(2), ir: value.getInt32(6), ir2: value.getInt32(10), timestamp: Date.now() };
    output.heg = output.red / (0.5 * (output.ir + output.ir2));
    return output;
  }
  var sps8 = 40;
  var blueberryBLESettings = { deviceType: "BLE", deviceName: "blueberry", namePrefix: "blueberry", services: { "0f0e0d0c-0b0a-0908-0706-050403020100": { "1f1e1d1c-1b1a-1918-1716-151413121110": { write: void 0 }, "3f3e3d3c-3b3a-3938-3736-353433323130": { notify: true, notifyCallback: void 0, codec: blueberrycodec, sps: sps8 } } }, sps: sps8 };
  function blueberryshortcodec(value) {
    let output = { sred: value.getInt32(2), sir: value.getInt32(6), sir2: value.getInt32(10), timestamp: Date.now() };
    output.sheg = output.sred / (0.5 * (output.sir + output.sir2));
    return output;
  }
  function blueberrylongcodec(value) {
    let output = { red: value.getInt32(2), ir: value.getInt32(6), ir2: value.getInt32(10), timestamp: Date.now() };
    output.heg = output.sred / (0.5 * (output.ir + output.ir2));
    return output;
  }
  var sps9 = 40;
  var blueberry2BLESettings = { deviceType: "BLE", deviceName: "blueberry2", namePrefix: "blueberry", services: { "0f0e0d0c-0b0a-0908-0706-050403020100": { "1f1e1d1c-1b1a-1918-1716-151413121110": { write: void 0 }, "4f4e4d4c-4b6a-6968-6766-656463426160": { notify: true, notifyCallback: void 0, codec: blueberrylongcodec, sps: sps9 }, "4f4e4d4c-4b5a-5958-5756-555453425150": { notify: true, notifyCallback: void 0, codec: blueberryshortcodec, sps: sps9 } } }, sps: sps9 };
  var defaultsetting1 = { sps: 250, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45 };
  var ganglionFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting1)), "1": JSON.parse(JSON.stringify(defaultsetting1)), "2": JSON.parse(JSON.stringify(defaultsetting1)), "3": JSON.parse(JSON.stringify(defaultsetting1)) };
  var defaultChartSetting6 = { nSec: 10, sps: 250, units: "mV" };
  var ganglionChartSettings = { lines: { "0": JSON.parse(JSON.stringify(defaultChartSetting6)), "1": JSON.parse(JSON.stringify(defaultChartSetting6)), "2": JSON.parse(JSON.stringify(defaultChartSetting6)), "3": JSON.parse(JSON.stringify(defaultChartSetting6)), "ax": { nSec: 10, sps: 250, units: "mg" }, "ay": { nSec: 10, sps: 250, units: "mg" }, "az": { nSec: 10, sps: 250, units: "mg" } }, generateNewLines: true };
  var defaultsetting4 = { sps: 250, useDCBlock: true, useBandpass: true, bandpassLower: 3, bandpassUpper: 45 };
  var museFilterSettings = { "0": JSON.parse(JSON.stringify(defaultsetting4)), "1": JSON.parse(JSON.stringify(defaultsetting4)), "2": JSON.parse(JSON.stringify(defaultsetting4)), "3": JSON.parse(JSON.stringify(defaultsetting4)), "4": JSON.parse(JSON.stringify(defaultsetting4)) };
  function hrcodec(data) {
    return { hr: data.getInt8(1), timestamp: Date.now() };
  }
  var heartRateBLESettings = { deviceType: "BLE", deviceName: "heartrate", services: { "heart_rate": { "heart_rate_measurement": { notify: true, notifyCallback: void 0, codec: hrcodec } } } };
  var simulatorSettings = { sps: 250, deviceType: "CUSTOM", deviceName: "simulator", simulate: { "0": { sps: 250, freq: 1, amplitude: 1, offset: 0 }, "1": { sps: 250, freq: 10, amplitude: 1, offset: 0 }, "2": { sps: 250, freq: 100, amplitude: 0.5, offset: 0.5 }, "3": { sps: 250, freq: 25, amplitude: 1, offset: 0 } }, connect: (settings2 = {}) => {
    return new Promise(async (res2, rej) => {
      let _id = `simulated${Math.floor(Math.random() * 1e15)}`;
      let info = { _id, settings: Object.assign(Object.assign({}, simulatorSettings), settings2) };
      info.settings.looping = true;
      let loopTime = 50;
      let lastTime = Date.now();
      let loop22 = () => {
        if (info.settings.looping) {
          let newData = {};
          let now = Date.now();
          let frame = now - lastTime;
          for (const key in info.settings.simulate) {
            let newPoints = Math.floor(info.settings.simulate[key].sps * frame / 1e3);
            newData[key] = new Array(newPoints).fill(0);
            newData[key] = newData[key].map((v2, i22) => {
              return Math.sin(2 * Math.PI * info.settings.simulate[key].freq * 1e-3 * (lastTime + frame * (i22 + 1) / newPoints)) * info.settings.simulate[key].amplitude + info.settings.simulate[key].offset;
            });
          }
          lastTime = now;
          newData.timestamp = lastTime;
          info.settings.ondata(newData);
          setTimeout(() => {
            loop22();
          }, loopTime);
        }
      };
      loop22();
      if (info.settings.onconnect)
        info.settings.onconnect(info);
      res2(info);
    });
  }, codec: (reading) => {
    return reading;
  }, disconnect: (info) => {
    console.log(info);
    info.settings.looping = false;
    info.settings.ondisconnect(info);
  }, onconnect: (info) => {
    console.log("simulator connected!", info);
  }, ondisconnect: (info) => {
    console.log("simulator disconnected!", info);
  }, ondata: (data) => {
  } };
  var Devices = { BLE: { "nrf5x": nrf5xBLESettings, "hegduino": hegduinoBLESettings, "hegduinoV1": hegduinoV1BLESettings, "cognixionONE": cognixionONEBLESettings, "statechanger": statechangerBLESettings, "blueberry": blueberryBLESettings, "blueberry2": blueberry2BLESettings, "heart_rate": heartRateBLESettings }, USB: { "nrf5x": nrf5xSerialSettings, "freeEEG32": freeeeg32SerialSettings, "freeEEG32_optical": freeeeg32_optical_SerialSettings, "freeEEG128": freeeeg128SerialSettings, "hegduino": hegduinoSerialSettings, "hegduinoV1": hegduinoV1SerialSettings, "cyton": cytonSerialSettings, "cyton_daisy": daisycytonSerialSettings, "peanut": peanutSerialSettings, "statechanger": statechangerSerialSettings, "cognixionONE": cytonSerialSettings }, BLE_CUSTOM: {}, USB_CUSTOM: {}, CUSTOM: { "simulator": simulatorSettings } };
  var textdecoder3 = new TextDecoder();
  var BLE = new BLEClient();
  var workers = new WorkerService2({ roots: { ...workerCanvasRoutes3, ...remoteGraphRoutes } });
  function initDevice(settings2, options) {
    if (!settings2)
      return void 0;
    let deviceType = settings2.deviceType;
    let deviceName = settings2.deviceName;
    if (!options.workerUrl)
      options.workerUrl = stream_worker_default;
    if (!options.service)
      options.service = workers;
    let streamworker = options.service.addWorker({ url: options.workerUrl });
    if (!options.devices)
      options.devices = Devices;
    if (!options.devices[deviceType][deviceName]) {
      let cpy = Object.assign({}, settings2);
      for (const key in cpy) {
        if (typeof cpy[key] === "function")
          cpy[key] = cpy[key].toString();
      }
      streamworker.send({ route: "receiveDevice", args: cpy });
    }
    if (options.roots) {
      for (const key in options.roots) {
        let __parent = { callback: "decodeAndParseDevice", worker: streamworker };
        options.roots[key].__parent = options.roots[key].__parent ? Object.assign(options.roots[key].__parent, __parent) : __parent;
      }
      options.service.load(options.roots);
    }
    if (deviceType.includes("CUSTOM")) {
      return new Promise(async (res2, rej) => {
        settings2.ondata = (data) => {
          streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName]).then((result) => {
            if (typeof options.ondecoded === "function")
              options.ondecoded(result);
          });
        };
        settings2.ondisconnect = () => {
          options.service.terminate(streamworker._id);
          if (options.roots) {
            for (const key in options.roots) {
              options.service.remove(key);
            }
          }
        };
        let init2 = await settings2.connect(settings2);
        let info = { workers: { streamworker }, disconnect: () => {
          if (options.beforedisconnect)
            options.beforedisconnect(info);
          settings2.disconnect(init2);
          if (options.ondisconnect)
            options.ondisconnect(info);
          if (options.roots) {
            for (const key in options.roots) {
              options.service.remove(key);
            }
          }
        }, device: init2, options, read: (command) => {
          if (settings2.read)
            return new Promise((res22, rej2) => {
              res22(settings2.read(settings2, command));
            });
        }, write: (command) => {
          if (settings2.write)
            return new Promise((res22, rej2) => {
              res22(settings2.write(settings2, command));
            });
        }, roots: options.roots };
        if (options.onconnect)
          options.onconnect(info);
        res2(info);
      }).catch((er) => {
        console.error(er);
        options.service.terminate(streamworker._id);
        if (options.roots) {
          for (const key in options.roots) {
            options.service.remove(key);
          }
        }
      });
    } else if (deviceType === "BLE") {
      for (const primaryUUID in settings2.services) {
        for (const characteristic in settings2.services[primaryUUID]) {
          if (typeof options.ondecoded === "function") {
            if (settings2.services?.[primaryUUID]?.[characteristic]?.notify) {
              if (!settings2.services[primaryUUID][characteristic].notifyCallback)
                settings2.services[primaryUUID][characteristic].notifyCallback = (data) => {
                  streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], void 0, [data.buffer]).then(options.ondecoded);
                };
              break;
            }
          } else if (typeof options.ondecoded === "object") {
            if (options.ondecoded[characteristic]) {
              if (settings2.services?.[primaryUUID]?.[characteristic]?.notify) {
                if (!settings2.services[primaryUUID][characteristic].notifyCallback)
                  settings2.services[primaryUUID][characteristic].notifyCallback = (data) => {
                    streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], void 0, [data.buffer]).then(options.ondecoded[characteristic]);
                  };
              }
              if (settings2.services?.[primaryUUID]?.[characteristic]?.read) {
                if (!settings2.services[primaryUUID][characteristic].readCallback)
                  settings2.services[characteristic].readCallback = (data) => {
                    streamworker.run("decodeAndParseDevice", [data, deviceType, deviceName, primaryUUID, characteristic], void 0, [data.buffer]).then(options.ondecoded[characteristic]);
                  };
              }
            }
          }
        }
      }
      return new Promise((res2, rej) => {
        BLE.setup(settings2).then((result) => {
          let info = { workers: { streamworker }, options, device: result, disconnect: async () => {
            await BLE.disconnect(result.deviceId);
            if (options.ondisconnect)
              options.ondisconnect(info);
            streamworker.terminate();
            if (options.roots) {
              for (const key in options.roots) {
                options.service.remove(key);
              }
            }
          }, read: (command) => {
            return BLE.read(result.device, command.service, command.characteristic, command.ondata, command.timeout);
          }, write: (command) => {
            return BLE.write(result.device, command.service, command.characteristic, command.data, command.callback, command.timeout);
          }, roots: options.roots };
          if (options.onconnect)
            options.onconnect(info);
          res2(info);
        }).catch((er) => {
          console.error(er);
          streamworker.terminate();
          if (options.roots) {
            for (const key in options.roots) {
              options.service.remove(key);
            }
          }
          rej(er);
        });
      });
    } else if (deviceType === "USB") {
      let serialworker = options.service.addWorker({ url: options.workerUrl });
      serialworker.worker.addEventListener("message", (ev2) => {
        if (typeof ev2.data === "string") {
          if (ev2.data.includes("disconnected")) {
            options.service.terminate(serialworker._id);
            options.service.terminate(streamworker._id);
            if (options.roots) {
              for (const key in options.roots) {
                options.service.remove(key);
              }
            }
          }
        }
      });
      serialworker.post("setupSerial");
      let portId = options.service.establishMessageChannel(streamworker.worker, serialworker.worker);
      const WS = new WebSerial();
      return new Promise((res2, rej) => {
        WS.requestPort(settings2.usbVendorId, settings2.usbProductId).then((port) => {
          let info = port.getInfo();
          serialworker.run("openPort", { baudRate: settings2.baudRate, usbVendorId: info.usbVendorId, usbProductId: info.usbProductId, bufferSize: settings2.bufferSize, buffering: settings2.buffering ? settings2.buffering : void 0, frequency: settings2.frequency ? settings2.frequency : void 0, pipeTo: { route: "decodeAndParseDevice", _id: portId, extraArgs: [deviceType, deviceName] } }).then((result) => {
            if (settings2.write)
              serialworker.post("writeStream", [result._id, settings2.write]);
            if (typeof options.ondecoded === "function")
              streamworker.subscribe("decodeAndParseDevice", options.ondecoded);
            let info2 = { workers: { streamworker, serialworker }, device: result, options, disconnect: () => {
              serialworker.post("closeStream", result._id);
              if (options.ondisconnect)
                options.ondisconnect(info2);
            }, read: () => {
              return new Promise((res22, rej2) => {
                let sub;
                sub = streamworker.subscribe("decodeAndParseDevice", (result2) => {
                  serialworker.unsubscribe("decodeAndParseDevice", sub);
                  res22(result2);
                });
              });
            }, write: (command) => {
              return serialworker.run("writeStream", [result._id, command]);
            }, roots: options.roots };
            if (options.onconnect)
              options.onconnect(info2);
            res2(info2);
          });
        }).catch((er) => {
          console.error(er);
          options.service.terminate(serialworker._id);
          options.service.terminate(streamworker._id);
          if (options.roots) {
            for (const key in options.roots) {
              options.service.remove(key);
            }
          }
          rej(er);
        });
      });
    } else
      return void 0;
  }

  // src/scripts/device.worker.ts
  var str5 = String('(()=>{var __require=(x3=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(x3,{get:(a,b)=>(typeof require!=="undefined"?require:a)[b]}):x3)(function(x3){if(typeof require!=="undefined")return require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x3+\'" is not supported\')});var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __require2=(x3=>typeof __require!=="undefined"?__require:typeof Proxy!=="undefined"?new Proxy(x3,{get:(a,b)=>(typeof __require!=="undefined"?__require:a)[b]}):x3)(function(x3){if(typeof __require!=="undefined")return __require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x3+\'" is not supported\')});var __commonJS=(cb,mod)=>function __require23(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:true}):target,mod));var require_browser=__commonJS({"node_modules/web-worker/cjs/browser.js"(exports,module2){module2.exports=Worker}});var EventHandler=class{constructor(data){this.pushToState={};this.data={};this.triggers={};this.ctr=0;this.setState=updateObj=>{Object.assign(this.data,updateObj);let props=Object.getOwnPropertyNames(updateObj);for(const prop of props){this.triggerEvent(prop,this.data[prop])}if(this.triggers[statesubKey]){let run=fn=>{fn(updateObj)};this.triggers[statesubKey].forEach(v2=>{run(v2.onchange)})}return this.data};this.setValue=(key,value)=>{this.data[key]=value;this.triggerEvent(key,value)};this.triggerEvent=(key,value)=>{if(this.triggers[key]){let fn=obj=>obj.onchange(value,this.triggers[key]);this.triggers[key].forEach(fn)}};this.subscribeState=onchange=>{return this.subscribeEvent(statesubKey,onchange)};this.unsubscribeState=sub=>{return this.unsubscribeEvent(statesubKey,sub)};this.subscribeEvent=(key,onchange,refObject,refKey)=>{if(key){if(refObject&&refKey&&!this.triggers[key]){Object.defineProperty(this.data,key,{get:()=>{return refObject[refKey]},set:value=>{refObject[refKey]=value},enumerable:true,configurable:true})}if(!this.triggers[key]){this.triggers[key]=[]}let l=this.ctr;this.ctr++;this.triggers[key].push({sub:l,onchange});return l}else return void 0};this.unsubscribeEvent=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(sub===void 0){delete this.triggers[key];delete this.data[key]}else{let idx=void 0;let obj=triggers.find((o,i22)=>{if(o.sub===sub){idx=i22;return true}});if(obj)triggers.splice(idx,1);if(Object.keys(triggers).length===0){delete this.triggers[key];delete this.data[key]}if(this.onRemoved)this.onRemoved(obj);return true}}};this.subscribeEventOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeEvent(key,sub)};sub=this.subscribeEvent(key,changed)};this.getEvent=(key,sub)=>{for(const s in this.triggers[key]){if(this.triggers[key][s].sub===sub)return this.triggers[key][s]}};this.getSnapshot=()=>{const snapshot={};for(const key in this.data){snapshot[key]=this.data[key]}};if(typeof data==="object")this.data=data}};var statesubKey="*s";var state=new EventHandler;var GraphNode=class{constructor(properties,parent,graph){this.__node={tag:`node${Math.floor(Math.random()*1e15)}`,unique:`${Math.floor(Math.random()*1e15)}`,state};this.__setProperties=(properties2,parent2,graph2)=>{let enforceProperties=()=>{let orig=properties2;if(!("__node"in properties2))properties2.__node={};if(typeof properties2==="function"){if(isNativeClass(properties2)){properties2=new properties2}else properties2={__operator:properties2,__node:{forward:true,tag:properties2.name}}}else if(typeof properties2==="string"){if(graph2?.get(properties2)){properties2=graph2.get(properties2)}}if(!properties2.__node.initial)properties2.__node.initial=orig};enforceProperties();if(typeof properties2==="object"){let assignState=()=>{if(properties2.__node?.state)this.__node.state=properties2.__node.state};let setProps22=()=>{if(properties2.__props){if(typeof properties2.__props==="function")properties2.__props=new properties2.__props;if(typeof properties2.__props==="object"){this.__proxyObject(properties2.__props)}}};let setTag=()=>{if(!properties2.__node.tag){if(properties2.__operator?.name)properties2.__node.tag=properties2.__operator.name;else properties2.__node.tag=`node${Math.floor(Math.random()*1e15)}`}};let setNode=()=>{if(typeof properties2.__node==="string"){if(graph2?.get(properties2.__node.tag)){properties2=graph2.get(properties2.__node.tag)}else properties2.__node={}}else if(!properties2.__node)properties2.__node={};if(graph2){properties2.__node.graph=graph2}if(properties2 instanceof Graph)properties2.__node.source=properties2};let setParent=()=>{if(!properties2.__parent&&parent2)properties2.__parent=parent2;if(parent2?.__node&&!(parent2 instanceof Graph||properties2 instanceof Graph))properties2.__node.tag=parent2.__node.tag+"."+properties2.__node.tag;if(parent2 instanceof Graph&&properties2 instanceof Graph){if(properties2.__node.loaders)Object.assign(parent2.__node.loaders?parent2.__node.loaders:{},properties2.__node.loaders);if(parent2.__node.mapGraphs){properties2.__node.nodes.forEach(n=>{parent2.set(properties2.__node.tag+"."+n.__node.tag,n)});let ondelete=()=>{properties2.__node.nodes.forEach(n=>{parent2.__node.nodes.delete(properties2.__node.tag+"."+n.__node.tag)})};this.__addOndisconnected(ondelete)}}};let setOp=()=>{if(typeof properties2.default==="function"&&!properties2.__operator){properties2.__operator=properties2.default}if(properties2.__operator){if(typeof properties2.__operator==="string"){if(graph2){let n=graph2.get(properties2.__operator);if(n)properties2.__operator=n.__operator;if(!properties2.__node.tag&&properties2.__operator.name)properties2.__node.tag=properties2.__operator.name}}if(typeof properties2.__operator==="function")properties2.__operator=this.__setOperator(properties2.__operator);if(properties2.default)properties2.default=properties2.__operator}};let assignProps=()=>{properties2.__node=Object.assign(this.__node,properties2.__node);let keys22=Object.getOwnPropertyNames(properties2);for(const key of keys22){this[key]=properties2[key]}};let bindCallbacks=()=>{if(this.__onconnected){if(typeof this.__onconnected==="function"){this.__onconnected=this.__onconnected.bind(this)}else if(Array.isArray(this.__onconnected)){this.__onconnected=this.__onconnected.map(f=>{return f.bind(this)})}if(typeof this.__ondisconnected==="function"){this.__ondisconnected=this.__ondisconnected.bind(this)}else if(Array.isArray(this.__ondisconnected)){this.__ondisconnected=this.__ondisconnected.map(f=>{return f.bind(this)})}}};assignState();setTag();setProps22();setNode();setParent();assignProps();bindCallbacks();setOp()}};this.__subscribe=(callback,key,subInput,bound,target)=>{const subscribeToFunction=(k,setTarget=(callback2,target2)=>callback2,triggerCallback=callback)=>{let sub=this.__node.state.subscribeEvent(k,triggerCallback,this,key);let trigger=this.__node.state.getEvent(k,sub);if(!trigger)return sub;trigger.source=this.__node.tag;if(key)trigger.key=key;trigger.target=setTarget(callback);if(bound)trigger.bound=bound;return sub};const subscribeToGraph=callback2=>{let fn=this.__node.graph.get(callback2);if(!fn&&callback2.includes(".")){let n=this.__node.graph.get(callback2.substring(0,callback2.lastIndexOf(".")));let key2=callback2.substring(callback2.lastIndexOf(".")+1);if(n&&typeof n[key2]==="function")callback2=(...args)=>{return n[key2](...args)}}};if(key){if(!this.__node.localState||!this.__node.localState[key]){this.__addLocalState(this,key)}if(typeof callback==="string"){if(target){if(this.__node.graph?.get(target)){let n=this.__node.graph?.get(target);if(typeof n[callback]==="function"){let fn=n[callback];callback=(...inp)=>{fn(...inp)}}else{let k2=callback;let setter=inp=>{n[k2]=inp};callback=setter}}}else if(typeof this[callback]==="function"){let fn=this[callback];callback=(...inp)=>{fn(...inp)}}else if(this.__node.graph?.get(callback))subscribeToGraph(callback);if(typeof callback!=="function")return void 0}let sub;let k=subInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}else{if(typeof callback==="string"){if(this.__node.graph.get(callback))callback=this.__node.graph.get(callback);if(typeof callback!=="object")return void 0}let sub;let k=subInput?this.__node.unique+"input":this.__node.unique;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}};this.__unsubscribe=(sub,key,unsubInput)=>{if(key){return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key,sub)}else return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"input":this.__node.unique,sub)};this.__setOperator=fn=>{fn=fn.bind(this);if(this.__args&&this.__node.graph){fn=wrapArgs(fn,this.__args,this.__node.graph)}let inpstr=`${this.__node.unique}input`;this.__operator=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[this.__node.unique]){if(typeof result?.then==="function"){result.then(res=>{if(res!==void 0)this.__node.state.setValue(this.__node.unique,res)}).catch(console.error)}else if(result!==void 0)this.__node.state.setValue(this.__node.unique,result)}return result};if(this.__parent instanceof GraphNode&&!this.__subscribedToParent){if(this.__parent.__operator){let sub=this.__parent.__subscribe(this);let ondelete=()=>{this.__parent?.__unsubscribe(sub);delete this.__subscribedToParent};this.__addOndisconnected(ondelete);this.__subscribedToParent=true}}return this.__operator};this.__addLocalState=(props,key)=>{if(!props)return;if(!this.__node.localState){this.__node.localState={}}const localState=this.__node.localState;const initState=(props2,k)=>{let str4=this.__node.unique+"."+k;let inpstr=`${str4}input`;if(typeof props2[k]==="function"&&k!=="__operator"){let fn=props2[k].bind(this);props2[k]=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[str4]){if(typeof result?.then==="function"){result.then(res=>{this.__node.state.triggerEvent(str4,res)}).catch(console.error)}else this.__node.state.triggerEvent(str4,result)}return result}}else{let get,set;if(this.__props?.[k]){get=()=>{return this.__props[k]};set=v2=>{this.__props[k]=v2;if(this.__node.state.triggers[str4])this.__node.state.triggerEvent(str4,v2)}}else{localState[k]=props2[k];get=()=>{return localState[k]};set=v2=>{localState[k]=v2;if(this.__node.state.triggers[str4])this.__node.state.triggerEvent(str4,v2)}}const descriptor={get,set,enumerable:true,configurable:true};Object.defineProperty(props2,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}};if(key)initState(props,key);else{for(let k in props){initState(props,k)}}};this.__proxyObject=obj=>{const allProps=getAllProperties(obj);for(const k of allProps){if(typeof obj[k]==="function"){this[k]=(...args)=>{return obj[k](...args)}}else{const descriptor={get:()=>{return obj[k]},set:value=>{obj[k]=value},enumerable:true,configurable:true};Object.defineProperty(this,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}}};this.__setProperties(properties,parent,graph)}__addOnconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__onconnected)){this.__onconnected.push(callback)}else if(typeof this.__onconnected==="function"){this.__onconnected=[callback,this.__onconnected]}else this.__onconnected=callback}__addOndisconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__ondisconnected)){this.__ondisconnected.push(callback)}else if(typeof this.__ondisconnected==="function"){this.__ondisconnected=[callback,this.__ondisconnected]}else this.__ondisconnected=callback}__callConnected(node=this){if(typeof this.__onconnected==="function"){this.__onconnected(this)}else if(Array.isArray(this.__onconnected)){let fn=o=>{o(this)};this.__onconnected.forEach(fn)}}__callDisconnected(node=this){if(typeof this.__ondisconnected==="function")this.__ondisconnected(this);else if(Array.isArray(this.__ondisconnected)){let fn=o=>{o(this)};this.__ondisconnected.forEach(fn)}}};var Graph=class{constructor(options){this.__node={tag:`graph${Math.floor(Math.random()*1e15)}`,unique:`${Math.random()}`,nodes:new Map,state,roots:{}};this.init=options2=>{if(options2){let cpy=Object.assign({},options2);delete cpy.roots;recursivelyAssign(this.__node,cpy);if(options2.roots)this.load(options2.roots)}};this.load=roots=>{function recursivelyAssignChildren(target,obj,inChildren=true,top=true){if(top){if(target)Object.assign(target,obj);else target=Object.assign({},obj);recursivelyAssignChildren(target,obj,true,false)}if(obj.__children&&!inChildren){if(obj.__children?.constructor.name==="Object"){if(target.__children?.constructor.name==="Object")recursivelyAssignChildren(target.__children,obj.__children,true,false);else target.__children=recursivelyAssignChildren({},obj.__children,true,false)}else{target.__children=obj.__children}}else if(inChildren){for(const key in obj){target[key]=Object.assign({},obj[key]);if(obj[key].__children){recursivelyAssignChildren({},obj[key].__children,false,false)}}}return target}this.__node.roots=recursivelyAssignChildren(this.__node.roots?this.__node.roots:{},roots);let cpy=Object.assign({},roots);if(cpy.__node)delete cpy.__node;let listeners=this.recursiveSet(cpy,this,void 0,roots);if(roots.__node){if(!roots.__node.tag)roots.__node._tag=`roots${Math.floor(Math.random()*1e15)}`;else if(!this.get(roots.__node.tag)){let node=new GraphNode(roots,this,this);this.set(node.__node.tag,node);this.runLoaders(node,this,roots,roots.__node.tag);if(node.__listeners){listeners[node.__node.tag]=node.__listeners}}}else if(roots.__listeners){this.setListeners(roots.__listeners)}this.setListeners(listeners);return cpy};this.setLoaders=(loaders22,replace)=>{if(replace)this.__node.loaders=loaders22;else Object.assign(this.__node.loaders,loaders22);return this.__node.loaders};this.runLoaders=(node,parent,properties,key)=>{for(const l in this.__node.loaders){if(typeof this.__node.loaders[l]==="object"){if(this.__node.loaders[l].init)this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key);if(this.__node.loaders[l].connected)node.__addOnconnected(this.__node.loaders[l].connect);if(this.__node.loaders[l].disconnected)node.__addOndisconnected(this.__node.loaders[l].disconnect)}else if(typeof this.__node.loaders[l]==="function")this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key)}};this.add=(properties,parent)=>{let listeners={};if(typeof parent==="string")parent=this.get(parent);let instanced;if(typeof properties==="function"){if(isNativeClass(properties)){if(properties.prototype instanceof GraphNode){properties=properties.prototype.constructor(properties,parent,this);instanced=true}else properties=new properties}else properties={__operator:properties}}else if(typeof properties==="string"){properties=this.__node.roots[properties]}if(!properties)return;if(!instanced){let keys22=Object.getOwnPropertyNames(properties);let cpy={};for(const key of keys22){cpy[key]=properties[key]}properties=cpy}if(!properties.__node)properties.__node={};properties.__node.initial=properties;if(typeof properties==="object"&&(!properties?.__node?.tag||!this.get(properties.__node.tag))){let node;if(instanced)node=properties;else node=new GraphNode(properties,parent,this);this.set(node.__node.tag,node);this.runLoaders(node,parent,properties,node.__node.tag);this.__node.roots[node.__node.tag]=properties;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key in node.__listeners){let listener=node.__listeners[key];if(node[key]){delete listeners[node.__node.tag][key];listeners[node.__node.tag][node.__node.tag+"."+key]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][key]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][key]=parent.__node.tag}}}}this.setListeners(listeners);node.__callConnected();return node}return};this.recursiveSet=(t22,parent,listeners={},origin)=>{let keys22=Object.getOwnPropertyNames(origin);for(const key of keys22){if(key.includes("__"))continue;let p2=origin[key];if(Array.isArray(p2))continue;let instanced;if(typeof p2==="function"){if(isNativeClass(p2)){p2=new p2;if(p2 instanceof GraphNode){p2=p2.prototype.constructor(p2,parent,this);instanced=true}}else p2={__operator:p2}}else if(typeof p2==="string"){if(this.__node.nodes.get(p2))p2=this.__node.nodes.get(p2);else p2=this.__node.roots[p2]}else if(typeof p2==="boolean"){if(this.__node.nodes.get(key))p2=this.__node.nodes.get(key);else p2=this.__node.roots[key]}if(typeof p2==="object"){if(!instanced&&!(p2 instanceof GraphNode)){let keys3=Object.getOwnPropertyNames(p2);let cpy={};for(const key2 of keys3){cpy[key2]=p2[key2]}p2=cpy}if(!p2.__node)p2.__node={};if(!p2.__node.tag)p2.__node.tag=key;if(!p2.__node.initial)p2.__node.initial=t22[key];if(this.get(p2.__node.tag)&&!(!(parent instanceof Graph)&&parent?.__node)||parent?.__node&&this.get(parent.__node.tag+"."+p2.__node.tag))continue;let node;let newnode=false;if(instanced||p2 instanceof GraphNode){node=p2}else{node=new GraphNode(p2,parent,this);newnode=true}if(!newnode&&p2 instanceof GraphNode&&!instanced&&parent instanceof GraphNode){let sub=this.subscribe(parent.__node.tag,node.__node.tag);let ondelete=node2=>{this.unsubscribe(parent.__node.tag,sub)};node.__addOndisconnected(ondelete)}else{this.set(node.__node.tag,node);this.runLoaders(node,parent,t22[key],key);t22[key]=node;this.__node.roots[node.__node.tag]=p2;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key2 in node.__listeners){let listener=node.__listeners[key2];let k=key2;if(node[key2]){delete listeners[node.__node.tag][key2];k=node.__node.tag+"."+key2;listeners[node.__node.tag][k]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][k]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][k]=parent.__node.tag}}}}node.__callConnected()}}}return listeners};this.remove=(node,clearListeners=true)=>{this.unsubscribe(node);if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){this.delete(node.__node.tag);delete this.__node.roots[node.__node.tag];if(clearListeners){this.clearListeners(node)}node.__callDisconnected();const recursiveRemove=t22=>{for(const key in t22){this.unsubscribe(t22[key]);this.delete(t22[key].__node.tag);delete this.__node.roots[t22[key].__node.tag];this.delete(key);delete this.__node.roots[key];t22[key].__node.tag=t22[key].__node.tag.substring(t22[key].__node.tag.lastIndexOf(".")+1);if(clearListeners){this.clearListeners(t22[key])}t22[key].__callDisconnected();if(t22[key].__children){recursiveRemove(t22[key].__children)}}};if(node.__children){recursiveRemove(node.__children)}}if(node?.__node.tag&&node?.__parent){delete node?.__parent;node.__node.tag=node.__node.tag.substring(node.__node.tag.indexOf(".")+1)}if(node?.__node.graph)node.__node.graph=void 0;return node};this.run=(node,...args)=>{if(typeof node==="string"){let nd=this.get(node);if(!nd&&node.includes(".")){nd=this.get(node.substring(0,node.lastIndexOf(".")));if(typeof nd?.[node.substring(node.lastIndexOf(".")+1)]==="function")return nd[node.substring(node.lastIndexOf(".")+1)](...args)}else if(nd?.__operator)return nd.__operator(...args)}if(node?.__operator){return node?.__operator(...args)}};this.setListeners=listeners=>{for(const key in listeners){let node=this.get(key);if(!node)continue;if(typeof listeners[key]==="object"){for(const k in listeners[key]){let n=this.get(k);let sub;if(typeof listeners[key][k]!=="object")listeners[key][k]={__callback:listeners[key][k]};else if(!listeners[key][k].__callback){for(const kk in listeners[key][k]){if(typeof listeners[key][k][kk]!=="object"){listeners[key][k][kk]={__callback:listeners[key][k][kk]};if(node.__operator&&(listeners[key][k][kk].__callback===true||typeof listeners[key][k][kk].__callback==="undefined"))listeners[key][k][kk].__callback=node.__operator}let nn=this.get(kk);if(!nn){let tag=k.substring(0,k.lastIndexOf("."));nn=this.get(tag);if(nn){let prop=k.substring(k.lastIndexOf(".")+1);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState,target:key,bound:k};sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k][kk].__args,prop,listeners[key][k][kk].inputState,key,k);node.__listeners[k][kk].sub=sub}}else{if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState,target:key,bound:k};sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);node.__listeners[k][kk].sub=sub}}}if("__callback"in listeners[key][k]){if(listeners[key][k].__callback===true||typeof listeners[key][k].__callback==="undefined")listeners[key][k].__callback=node.__operator;if(typeof listeners[key][k].__callback==="function")listeners[key][k].__callback=listeners[key][k].__callback.bind(node);if(typeof node.__listeners!=="object")node.__listeners={};if(!n){let tag=k.substring(0,k.lastIndexOf("."));n=this.get(tag);if(n){if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState,target:key,bound:k};sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k].inputState,key,k);node.__listeners[k].sub=sub}}else{if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState,target:key,bound:k};sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);node.__listeners[k].sub=sub}}}}}};this.clearListeners=(node,listener)=>{if(typeof node==="string")node=this.get(node);if(node?.__listeners){for(const key in node.__listeners){if(listener&&key!==listener)continue;if(typeof node.__listeners[key]?.sub!=="number")continue;let n=this.get(key);if(!n){n=this.get(key.substring(0,key.lastIndexOf(".")));if(n){if(typeof node.__listeners[key]==="object"&&!node.__listeners[key]?.__callback){for(const k in node.__listeners[key]){if(typeof node.__listeners[key][k]?.sub==="number"){this.unsubscribe(n,node.__listeners[key][k].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}else{if(typeof!node.__listeners[key]?.__callback==="number"){for(const k in node.__listeners[key]){if(node.__listeners[key][k]?.sub){this.unsubscribe(n,node.__listeners[key][k].sub,void 0,node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,void 0,node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}}};this.get=tag=>{return this.__node.nodes.get(tag)};this.set=(tag,node)=>{return this.__node.nodes.set(tag,node)};this.delete=tag=>{return this.__node.nodes.delete(tag)};this.getProps=(node,getInitial)=>{if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){let cpy;if(getInitial)cpy=Object.assign({},this.__node.roots[node.__node.tag]);else{cpy=Object.assign({},node);for(const key in cpy){if(key.includes("__"))delete cpy[key]}}}};this.subscribe=(nodeEvent,onEvent,args,key,subInput,target,bound)=>{let nd=nodeEvent;if(typeof nodeEvent==="string"){nd=this.get(nodeEvent);if(!nd&&nodeEvent.includes(".")){nd=this.get(nodeEvent.substring(0,nodeEvent.lastIndexOf(".")));key=nodeEvent.substring(nodeEvent.lastIndexOf(".")+1)}}if(target instanceof GraphNode)target=target.__node.tag;if(typeof onEvent==="string"){let key2=onEvent;let setOnEventFromString=onEvent2=>{if(this.get(onEvent2)?.__operator){let node=this.get(onEvent2);onEvent2=function(...inp){return node.__operator(...inp)}}else if(onEvent2.includes(".")){let n=this.get(onEvent2.substring(0,onEvent2.lastIndexOf(".")));let key3=onEvent2.substring(onEvent2.lastIndexOf(".")+1);if(typeof n[key3]==="function"){if(n[key3]instanceof GraphNode)onEvent2=n[key3];else onEvent2=function(...inp){return n[key3](...inp)}}else{onEvent2=function(inp){n[key3]=inp;return n[key3]}}}return onEvent2};if(target){let node=this.get(target);if(typeof node?.[onEvent]==="function"){onEvent=function(...inp){return node[key2](...inp)}}else if(node[key2]){if(node[key2]instanceof GraphNode)onEvent=node[key2];else onEvent=function(inp){node[key2]=inp;return node[key2]}}else{onEvent=setOnEventFromString(onEvent)}}else{onEvent=setOnEventFromString(onEvent)}}if((typeof onEvent==="function"||onEvent instanceof GraphNode)&&args){if(onEvent instanceof GraphNode&&onEvent.__operator)onEvent=function(inp){return onEvent.__operator(inp)};onEvent=wrapArgs(onEvent,args,this)}let sub;if(nd instanceof GraphNode){const doSub=()=>{sub=nd.__subscribe(onEvent,key,subInput,target,bound);if(target&&this.get(target)&&this.get(target).__listeners[bound]){if(typeof this.get(target).__listeners[bound]!=="object"){this.get(target).__listeners[bound]=this.get(target).__node.state.getEvent(bound)}}this.get(target).__listeners[bound].sub=sub;let ondelete=()=>{if(sub!==void 0)nd.__unsubscribe(sub,key,subInput);sub=void 0};nd.__addOndisconnected(()=>{ondelete();nd.__addOnconnected(()=>{if(sub===void 0&&nd.__node.graph.__node.tag===this.__node.tag)doSub()})});if(typeof onEvent==="string"&&this.get(onEvent))onEvent=this.get(onEvent);if(onEvent instanceof GraphNode){onEvent.__addOndisconnected(()=>{ondelete()})}};doSub()}else if(typeof nodeEvent==="string"){let node=this.get(nodeEvent);if(node){if(onEvent instanceof GraphNode&&onEvent.__operator){const doSub=()=>{sub=node.__subscribe(onEvent.__operator,key,subInput,target,bound);if(target&&this.get(target)&&this.get(target).__listeners[bound]){if(typeof this.get(target).__listeners[bound]!=="object"){this.get(target).__listeners[bound]=this.get(target).__node.state.getEvent(bound)}this.get(target).__listeners[bound].sub=sub}let ondelete=()=>{if(sub!==void 0)node.__unsubscribe(sub,key,subInput)};node.__addOndisconnected(()=>{ondelete();node.__addOnconnected(()=>{if(sub===void 0&&node.__node.graph.__node.tag===this.__node.tag)doSub()})});onEvent.__addOndisconnected(ondelete)};doSub()}else if(typeof onEvent==="function"||typeof onEvent==="string"){const doSub=()=>{sub=node.__subscribe(onEvent,key,subInput,target,bound);if(target&&this.get(target)&&this.get(target).__listeners[bound]){if(typeof this.get(target).__listeners[bound]!=="object"){this.get(target).__listeners[bound]=this.get(target).__node.state.getEvent(bound)}this.get(target).__listeners[bound].sub=sub}let ondelete=()=>{if(sub!==void 0)node.__unsubscribe(sub,key,subInput);sub=void 0};node.__addOndisconnected(()=>{ondelete();node.__addOnconnected(()=>{if(sub===void 0&&node.__node.graph.__node.tag===this.__node.tag)doSub()})});if(typeof onEvent==="string"&&this.get(onEvent))this.get(onEvent).__addOndisconnected(ondelete);this.__node.state.getEvent(node.__node.unique,sub).source=nodeEvent};doSub()}}else{if(typeof onEvent==="string")onEvent=this.__node.nodes.get(onEvent).__operator;if(typeof onEvent==="function")sub=this.__node.state.subscribeEvent(nodeEvent,onEvent)}}return sub};this.unsubscribe=(node,sub,key,subInput)=>{if(node instanceof GraphNode){return node.__unsubscribe(sub,key,subInput)}else return this.get(node)?.__unsubscribe(sub,key,subInput)};this.setState=update=>{this.__node.state.setState(update)};this.init(options)}};function recursivelyAssign(target,obj){for(const key in obj){if(obj[key]?.constructor.name==="Object"){if(target[key]?.constructor.name==="Object")recursivelyAssign(target[key],obj[key]);else target[key]=recursivelyAssign({},obj[key])}else{target[key]=obj[key]}}return target}function getAllProperties(obj){var allProps=[],curr=obj;do{var props=Object.getOwnPropertyNames(curr);let fn=function(prop){if(allProps.indexOf(prop)===-1)allProps.push(prop)};props.forEach(fn)}while(curr=Object.getPrototypeOf(curr));return allProps}function isNativeClass(thing){return isFunction(thing)==="class"}function isFunction(x3){const res=typeof x3==="function"?x3.prototype?Object.getOwnPropertyDescriptor(x3,"prototype")?.writable?"function":"class":x3.constructor.name==="AsyncFunction"?"async":"arrow":"";return res}var wrapArgs=(callback,argOrder,graph)=>{let args=[];let getCallbackFromString=a=>{if(graph.get(a)?.__operator){let node=graph.get(a);return(...inp)=>{node.__operator(...inp)}}else if(a.includes(".")){let split=a.split(".");let popped=split.pop();let joined=split.join(".");let node=graph.get(joined);if(typeof graph.get(joined)?.[popped]==="function"){return(...inp)=>{return node[popped](...inp)}}else return()=>{return node[popped]}}else if(graph.get(a)){let node=graph.get(a);return()=>{return node}}else{let arg=a;return()=>{return arg}}};let forArg=(a,i22)=>{if(a==="__output"||a==="__input"){args[i22]=inp=>{return inp}}else if(typeof a==="string"){args[i22]=getCallbackFromString(a)}else if(typeof a==="function"){let fn2=a;args[i22]=(...inp)=>{return fn2(...inp)}}else if(typeof a==="object"&&a.__input){let recursivelyCreateCallback=function(c){let input=c.__input;if(typeof c.__input==="string"){input=getCallbackFromString(c.__input)}if(c.__args){input=wrapArgs(input,c.__args,graph)}if(c.__output){let output=c.__output;if(typeof c.__output==="string"){output=getCallbackFromString(output)}else if(typeof a.__output==="object"){output=recursivelyCreateCallback(output)}if(typeof output==="function"){let fn2=input;input=(...inp)=>{return output(fn2(...inp))}}}return input};args[i22]=recursivelyCreateCallback(a)}else{let arg=a;args[i22]=()=>{return arg}}};argOrder.forEach(forArg);if(typeof callback==="string")callback=getCallbackFromString(callback);let fn=callback;callback=function(...inp){let mapArg=arg=>{return arg(...inp)};return fn(...args.map(mapArg))};return callback};var backprop=(node,parent,graph)=>{if(node.__node.backward&&parent instanceof GraphNode){graph.setListeners({[parent.__node.tag]:{[node.__node.tag]:parent}})}};var loop=(node,parent,graph)=>{if(node.__operator&&!node.__node.looperSet){if(typeof node.__node.delay==="number"){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{setTimeout(async()=>{res(await fn(...args))},node.__node.delay)})})}else if(node.__node.frame===true){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{requestAnimationFrame(async()=>{res(await fn(...args))})})})}if(typeof node.__node.repeat==="number"||typeof node.__node.recursive==="number"){let fn=node.__operator;node.__setOperator(async(...args)=>{let i22=node.__node.repeat?node.__node.repeat:node.__node.recursive;let result;let repeater=async(tick,...inp)=>{while(tick>0){if(node.__node.delay||node.__node.frame){fn(...inp).then(async res=>{if(node.__node.recursive){await repeater(tick,res)}else await repeater(tick,...inp)});break}else result=await fn(...args);tick--}};await repeater(i22,...args);return result})}if(node.__node.loop&&typeof node.__node.loop==="number"){node.__node.looperSet=true;let fn=node.__operator;let time=node.__node.loop;node.__setOperator((...args)=>{if(!("looping"in node.__node))node.__node.looping=true;if(node.__node.looping){let last=performance.now();fn(...args);setTimeout(()=>{let now=performance.now();let overshoot=now-last-node.__node.loop;if(overshoot>0)time=node.__node.loop-overshoot;else time=node.__node.loop;if(time<=0)time=node.__node.loop;node.__operator(...args)},time)}});if(node.__node.looping)node.__operator();let ondelete=node2=>{if(node2.__node.looping)node2.__node.looping=false};node.__addOndisconnected(ondelete)}}};var animate=(node,parent,graph)=>{if(node.__node.animate===true||node.__animation){let fn=node.__operator;node.__setOperator((...args)=>{if(!("animating"in node.__node))node.__node.animating=true;if(node.__node.animating){if(typeof node.__animation==="function")node.__animation(...args);else fn(...args);requestAnimationFrame(()=>{node.__operator(...args)})}});if(node.__node.animating||(!("animating"in node.__node)||node.__node.animating)&&node.__animation)setTimeout(()=>{requestAnimationFrame(node.__operator)},10);let ondelete=node2=>{if(node2.__node.animating)node2.__node.animating=false};node.__addOndisconnected(ondelete)}};var branching=(node,parent,graph)=>{if(typeof node.__branch==="object"&&node.__operator&&!node.__branchApplied){let fn=node.__operator;node.__branchApplied=true;node.__operator=(...args)=>{let result=fn(...args);for(const key in node.__branch){let triggered=()=>{if(typeof node.__branch[key].then==="function"){node.__branch[key].then(result)}else if(node.__branch[key].then instanceof GraphNode&&node.__branch[key].then.__operator){node.__branch[key].then.__operator(result)}else result=node.__branch[key].then};if(typeof node.__branch[key].if==="function"){if(node.__branch[key].if(result)==true){triggered()}}else if(node.__branch[key].if===result){triggered()}}return result}}if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].branch&&!node.__listeners[key].branchApplied){let fn=node.__listeners[key].callback;node.__listeners[key].branchApplied=true;node.__listeners.callback=ret=>{let triggered=()=>{if(typeof node.__listeners[key].branch.then==="function"){ret=node.__listeners[key].branch.then(ret)}else if(node.__listeners[key].branch.then instanceof GraphNode&&node.__listeners[key].branch.then.__operator){ret=node.__listeners[key].branch.then.__operator(ret)}else ret=node.__listeners[key].branch.then};if(typeof node.__listeners[key].branch.if==="function"){if(node.__listeners[key].branch.if(ret)){triggered()}}else if(node.__listeners[key].branch.if===ret){triggered()}return fn(ret)}}}}}};var triggerListenerOncreate=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].oncreate){node.__listeners[key].callback(node.__listeners[key].oncreate)}}}}};var bindListener=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].binding==="object"){node.__listeners.callback=node.__listeners.callback.bind(node.__listeners[key].binding)}}}}};var transformListenerResult=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].transform==="function"&&!node.__listeners[key].transformApplied){let fn=node.__listeners[key].callback;node.__listeners[key].transformApplied=true;node.__listeners.callback=ret=>{ret=node.__listeners[key].transform(ret);return fn(ret)}}}}}};var substitute__operator=(node,parent,graph)=>{if(node.post&&!node.__operator){node.__setOperator(node.post)}else if(!node.__operator&&typeof node.get=="function"){node.__setOperator(node.get)}if(!node.get&&node.__operator){node.get=node.__operator}if(node.aliases){node.aliases.forEach(a=>{graph.set(a,node);let ondelete=node2=>{graph.__node.nodes.delete(a)};node.__addOndisconnected(ondelete)})}if(typeof graph.__node.roots?.[node.__node.tag]==="object"&&node.get)graph.__node.roots[node.__node.tag].get=node.get};var loaders={backprop,loop,animate,branching,triggerListenerOncreate,bindListener,transformListenerResult,substitute__operator};var recursivelyStringifyFunctions=obj=>{let cpy={};for(const key in obj){if(typeof obj[key]==="object"){cpy[key]=recursivelyStringifyFunctions(obj[key])}else if(typeof obj[key]==="function"){cpy[key]=obj[key].toString()}else cpy[key]=obj[key]}return cpy};function parseFunctionFromText(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs22(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs}var stringifyFast=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p2 in value[prop]){if(Array.isArray(value[prop][p2])){if(value[prop][p2].length>20)obj[prop][p2]=value[prop][p2].slice(value[prop][p2].length-20);else obj[prop][p2]=value[prop][p2]}else{if(value[prop][p2]!=null){let con=value[prop][p2].constructor.name;if(con.includes("Set")){obj[prop][p2]=Array.from(value[prop][p2])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p2]="instanceof_"+con}else{obj[prop][p2]=value[prop][p2]}}else{obj[prop][p2]=value[prop][p2]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast22(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast}function methodstrings(node){if(typeof node.__methods==="object"){for(const key in node.__methods){let fstr=node.__methods[key];let fn=typeof fstr==="function"?fstr:parseFunctionFromText(fstr);if(key==="__operator"){node.__setOperator(fn)}else{node[key]=fn.bind(node)}}}}var Service=class extends Graph{constructor(options){super({...options,loaders:options?.loaders?Object.assign({...loaders},options.loaders):{...loaders}});this.name=`service${Math.floor(Math.random()*1e15)}`;this.addServices=services=>{for(const s in services){if(typeof services[s]==="function")services[s]=new services[s];if(services[s]?.__node?.loaders)Object.assign(this.__node.loaders,services[s].__node.loaders);if(services[s]?.__node?.nodes){services[s].__node.nodes.forEach((n,tag)=>{if(!this.get(tag)){this.set(tag,n)}else this.set(s+"."+tag,n)});this.__node.nodes.forEach((n,k)=>{if(!services[s].__node.nodes.get(k))services[s].__node.nodes.set(k,n)});let set=this.set;this.set=(tag,node)=>{services[s].set(tag,node);return set(tag,node)};let del=this.delete;this.delete=tag=>{services[s].delete(tag);return del(tag)}}else if(typeof services[s]==="object"){this.load(services[s])}}};this.handleMethod=(route,method,args)=>{let m=method.toLowerCase();let src=this.__node.nodes.get(route);if(!src){src=this.__node.roots[route]}if(src?.[m]){if(typeof src[m]!=="function"){if(args){if(Array.isArray(args)&&args.length===1)src[m]=args[0];else src[m]=args;return}return src[m]}else{if(Array.isArray(args))return src[m](...args);else return src[m](args)}}else return this.handleServiceMessage({route,args,method})};this.transmit=(...args)=>{if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.receive=(...args)=>{if(args[0]){if(typeof args[0]==="string"){let substr=args[0].substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))args[0]=args[0].replace(/\\\\/g,"");if(args[0][0]===\'"\'){args[0]=args[0].substring(1,args[0].length-1)};args[0]=JSON.parse(args[0])}}}if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.pipe=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return this.subscribe(source,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.pipeOnce=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return source.__node.state.subscribeEventOnce(source.__node.unique,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.__node.state.subscribeEventOnce(source.__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.terminate=(...args)=>{};this.isTypedArray=isTypedArray;this.recursivelyAssign=recursivelyAssign2;this.spliceTypedArray=spliceTypedArray;this.ping=()=>{console.log("pinged!");return"pong"};this.echo=(...args)=>{this.transmit(...args);return args};this.log=(...args)=>{console.log(...args);return true};this.error=(...args)=>{console.error(...args);return true};if(options?.services)this.addServices(options.services);this.load(this)}handleServiceMessage(message){let call;if(typeof message==="object"){if(message.route)call=message.route;else if(message.node)call=message.node}if(call){if(Array.isArray(message.args))return this.run(call,...message.args);else return this.run(call,message.args)}else return message}handleGraphNodeCall(route,args){if(!route)return args;if(args?.args){this.handleServiceMessage(args)}else if(Array.isArray(args))return this.run(route,...args);else return this.run(route,args)}};function isTypedArray(x3){return ArrayBuffer.isView(x3)&&Object.prototype.toString.call(x3)!=="[object DataView]"}var recursivelyAssign2=(target,obj)=>{for(const key in obj){if(obj[key]?.constructor.name==="Object"&&!Array.isArray(obj[key])){if(target[key]?.constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign2(target[key],obj[key]);else target[key]=recursivelyAssign2({},obj[key])}else target[key]=obj[key]}return target};function spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let ta;if(s.length>0||e?.length>0)ta=new arr.constructor(s.length+e.length);if(ta){if(s.length>0)ta.set(s);if(e&&e.length>0)ta.set(e,s.length)}return ta}var nodeTemplates={};var remoteGraphRoutes={transferNode:(properties,connection,name2)=>{let str4;if(typeof properties==="object"){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}str4=recursivelyStringifyFunctions(properties)}else if(typeof properties==="function")str4=properties.toString();else if(typeof properties==="string")str4=properties;if(str4){if(connection.run)return connection.run("setNode",[str4]);else if(connection.postMessage){connection.postMessage({route:"setNode",args:str4},void 0);return new Promise(r=>r(name2))}else if(connection.send){connection.send(JSON.stringify({route:"setNode",args:str4}));return new Promise(r=>r(name2))}}},setNode:function(properties,name2){console.log("setting node",properties);if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function")properties={__operator:f,__node:{tag:name2?name2:f.name}};else{f=JSON.parse(properties);if(typeof f==="object")properties=f}}if(typeof properties==="object"||typeof properties==="function"){let template={};if(typeof properties==="object")Object.assign(template,properties);else template.__operator=properties;let node=this.__node.graph.add(properties);nodeTemplates[node.__node.tag]=template;return node.__node.tag}else return false},proxyRemoteNode:function(name2,connection){return new Promise((res,rej)=>{connection.run("getNodeProperties",name2).then(props=>{let proxy={};if(typeof props==="object"){for(const key in props){if(props[key]==="function"){proxy[key]=(...args)=>{return new Promise(r=>{connection.run(name2,args,key).then(r)})}}else{Object.defineProperty(proxy,key,{get:()=>{return new Promise(r=>{connection.run(name2,void 0,key).then(r)})},set:value=>{connection.post(name2,value,key)},configurable:true,enumerable:true})}}}res(proxy)})})},makeNodeTransferrable:function(properties,name2){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}const str4=recursivelyStringifyFunctions(properties);return str4},setTemplate:function(properties,name2){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function"){if(!name2)name2=f.name;properties={__operator:f,__node:{tag:name2}}}else{f=JSON.parse(properties);if(typeof f==="object"){properties=f;if(!name2&&f.__node?.tag)name2=f.__node.tag}}}if(!name2)name2=`node${Math.floor(Math.random()*1e15)}`;if(typeof properties==="object"||typeof properties==="function"){nodeTemplates[name2]=properties;return name2}else return false},loadFromTemplate:function(templateName,name2,properties){if(nodeTemplates[templateName]){let cpy=recursivelyAssign2({},nodeTemplates[templateName]);if(name2){if(!cpy.__node)cpy.__node={};cpy.__node.tag=name2}if(properties)Object.assign(cpy,properties);let node=this.__node.graph.add(cpy);return node.__node.tag}},setMethod:function(nodeTag,fn,methodKey){if(typeof fn==="string"){let f=parseFunctionFromText(fn);if(typeof f==="function")fn=f}if(!methodKey&&typeof fn==="function")methodKey=fn.name;if(this.__node.graph.get(nodeTag)){this.__node.graph.get(nodeTag)[methodKey]=fn}else this.__node.graph.add({__node:{tag:methodKey,[methodKey]:fn}});return true},assignNode:function(nodeTag,source){if(this.__node.graph.get(nodeTag)&&typeof source==="object"){Object.assign(this.__node.graph.get(nodeTag),source)}},getNodeProperties:function(nodeTag){let node=this.__node.graph.get(nodeTag);if(node){let properties=Object.getOwnPropertyNames(node);let result={};for(const key in properties){result[key]=typeof node[key]}return result}return void 0},transferClass:(classObj,connection,className)=>{if(typeof classObj==="object"){let str4=classObj.toString();let message={route:"receiveClass",args:[str4,className]};if(connection.run)return connection.run("receiveClass",[str4,className]);else if(connection.postMessage){connection.postMessage({route:"receiveClass",args:[str4,className]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"receiveClass",args:[str4,className]}));return new Promise(r=>r(name))}return message}return false},receiveClass:function(stringified,className){if(typeof stringified==="string"){if(stringified.indexOf("class")===0){let cls=(0,eval)("("+stringified+")");let name2=className;if(!name2)name2=cls.name;this.__node.graph[name2]=cls;return true}}return false},transferFunction:(fn,connection,fnName)=>{if(!fnName)fnName=fn.name;let str4=fn.toString();let message={route:"setNode",args:[str4,fnName]};if(connection.run)return connection.run("setNode",[str4,fnName]);else if(connection.postMessage){connection.postMessage({route:"setNode",args:[str4,fnName]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"setNode",args:[str4,fnName]}));return new Promise(r=>r(name))}return message},setGlobal:(key,value)=>{globalThis[key]=value;return true},assignGlobalObject:(target,source)=>{if(!globalThis[target])return false;if(typeof source==="object")Object.assign(globalThis[target],source);return true},setValue:function(key,value){this.__node.graph[key]=value;return true},assignObject:function(target,source){if(!this.__node.graph[target])return false;if(typeof source==="object")Object.assign(this.__node.graph[target],source);return true},setGlobalFunction:(fn,fnName)=>{if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;globalThis[fnName]=fn;return true}return false},setGraphFunction:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.__node.graph[fnName]=fn;return true}return false}};var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};sjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d2,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid("invalid aes key size");this.b=[d2=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d2[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d2[a]=d2[a-b]^c}for(b=0;a;b++,a--)c=d2[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]]};sjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d2=b[4],e,f,g,h=[],k=[],l,n,m,p2;for(e=0;256>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d2[m]=f,n=h[e=h[l=h[f]]],p2=16843009*n^65537*e^257*l^16843008*f,n=257*h[m]^16843008*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p2=p2<<24^p2>>>8;for(e=0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};function t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid("invalid aes block size");var d2=a.b[c],e=b[0]^d2[0],f=b[c?3:1]^d2[1],g=b[2]^d2[2];b=b[c?1:3]^d2[3];var h,k,l,n=d2.length/4-2,m,p2=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v2=h[2],w=h[3],x3=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v2[g>>8&255]^w[b&255]^d2[p2],k=a[f>>>24]^q[g>>16&255]^v2[b>>8&255]^w[e&255]^d2[p2+1],l=a[g>>>24]^q[b>>16&255]^v2[e>>8&255]^w[f&255]^d2[p2+2],b=a[b>>>24]^q[e>>16&255]^v2[f>>8&255]^w[g&255]^d2[p2+3],p2+=4,e=h,f=k,g=l;for(m=0;4>m;m++)r[c?3&-m:m]=x3[e>>>24]<<24^x3[f>>16&255]<<16^x3[g>>8&255]<<8^x3[b&255]^d2[p2++],h=e,e=f,f=g,g=b,b=h;return r}sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d2=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d2^a[b/32+1|0]>>>d2:a[b/32|0]>>>d2)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d2=sjcl.bitArray.getPartial(c);return 32===d2?a.concat(b):sjcl.bitArray.$(b,d2,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===b?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+1099511627776*a},getPartial:function(a){return Math.round(a/1099511627776)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return false;var c=0,d2;for(d2=0;d2<a.length;d2++)c|=a[d2]^b[d2];return 0===c},$:function(a,b,c,d2){var e;e=0;for(void 0===d2&&(d2=[]);32<=b;b-=32)d2.push(c),c=0;if(0===b)return d2.concat(a);for(e=0;e<a.length;e++)d2.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d2.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d2.pop(),1));return d2},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&65280|(c&65280)<<8|c<<24;return a}};sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d2,e;for(d2=0;d2<c/8;d2++)0===(d2&3)&&(e=a[d2/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d2=0;for(c=0;c<a.length;c++)d2=d2<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d2),d2=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d2));return b}};sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d2;a=a.replace(/\\s|0x/g,"");d2=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d2)}};sjcl.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d2=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f="",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d2<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d2?(k=a[c]<<d2-g,g+=e,c++):(k<<=d2,g-=d2);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,"").toUpperCase();var c=sjcl.codec.base32.BITS,d2=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p2){}throw new sjcl.exception.invalid("this isn\'t "+m+"!")}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d2,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};sjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};sjcl.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d2="",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d2.length<h;)d2+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d2.length&3&&!b;)d2+="=";return d2},toBits:function(a,b){a=a.replace(/\\s|=/g,"");var c=[],d2,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d2=0;d2<a.length;d2++){h=f.indexOf(a.charAt(d2));if(0>h)throw new sjcl.exception.invalid("this isn\'t base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return new sjcl.hash.sha256().update(a).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(9007199254740991<a)throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d2=new Uint32Array(c),e=0;for(b=512+b-(512+b&511);b<=a;b+=512)u(this,d2.subarray(16*e,16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&511);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/4294967296));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a2){return 4294967296*(a2-Math.floor(a2))|0}for(var b=0,c=2,d2,e;64>b;c++){e=true;for(d2=2;d2*d2<=c;d2++)if(0===c%d2){e=false;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};function u(a,b){var c,d2,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p2=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d2=b[c]:(d2=b[c+1&15],e=b[c+14&15],d2=b[c&15]=(d2>>>7^d2>>>18^d2>>>3^d2<<25^d2<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d2=d2+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p2^r))+g[c],q=r,r=p2,p2=m,m=n+d2|0,n=l,l=k,k=h,h=d2+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p2|0;f[6]=f[6]+r|0;f[7]=f[7]+q|0}sjcl.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d2,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d2=d2||[];if(7>k)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d2,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d2,e){e=e||64;d2=d2||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d2,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt("ccm: tag doesn\'t match");return k.data},na:function(a,b,c,d2,e,f){var g=[],h=sjcl.bitArray,k=h.i;d2=[h.partial(8,(b.length?64:0)|d2-2<<2|f-1)];d2=h.concat(d2,c);d2[3]|=e;d2=a.encrypt(d2);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:4294967295>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d2=a.encrypt(k(d2,g.slice(b,b+4).concat([0,0,0])));return d2},V:function(a,b,c,d2,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid("ccm: invalid tag length");if(4294967295<d2.length||4294967295<b.length)throw new sjcl.exception.bug("ccm: can\'t deal with 4GiB or more data");c=sjcl.mode.ccm.na(a,d2,c,e,g.bitLength(b)/8,f);for(d2=0;d2<b.length;d2+=4)c=a.encrypt(h(c,b.slice(d2,d2+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d2,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d2=h.bitSlice(g(d2,a.encrypt(c)),0,e);if(!k)return{tag:d2,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d2,data:h.clamp(b,l)}}};sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d2,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p2=[];d2=d2||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p2=p2.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));d2.length&&(n=l(n,f?d2:sjcl.mode.ocb2.pmac(a,d2)));return p2.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d2,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p2,r=sjcl.bitArray.bitLength(b)-e,q=[];d2=d2||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p2=r-32*c;m=a.encrypt(k(n,[0,0,0,p2]));m=k(m,h.clamp(b.slice(c),p2).concat([0,0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d2.length&&(l=k(l,f?d2:sjcl.mode.ocb2.pmac(a,d2)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt("ocb: tag doesn\'t match");return q.concat(h.clamp(m,p2))},pmac:function(a,b){var c,d2=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d2(d2(h)));for(c=0;c+4<b.length;c+=4)h=d2(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d2(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d2(f(h,d2(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d2,e){var f=b.slice(0);b=sjcl.bitArray;d2=d2||[];a=sjcl.mode.gcm.C(true,a,f,d2,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d2,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d2=d2||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(false,a,f,d2,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt("gcm: tag doesn\'t match");return a.data},ka:function(a,b){var c,d2,e,f,g,h=sjcl.bitArray.i;e=[0,0,0,0];f=b.slice(0);for(c=0;128>c;c++){(d2=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d2=3;0<d2;d2--)f[d2]=f[d2]>>>1|(f[d2-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-520093696)}return e},j:function(a,b,c){var d2,e=c.length;b=b.slice(0);for(d2=0;d2<e;d2+=4)b[0]^=4294967295&c[d2],b[1]^=4294967295&c[d2+1],b[2]^=4294967295&c[d2+2],b[3]^=4294967295&c[d2+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d2,e,f){var g,h,k,l,n,m,p2,r,q=sjcl.bitArray;m=c.length;p2=q.bitLength(c);r=q.bitLength(d2);h=q.bitLength(e);g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d2);n=e.slice(0);d2=h.slice(0);a||(d2=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p2);a&&(d2=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/4294967296),r&4294967295,Math.floor(p2/4294967296),p2&4294967295];d2=sjcl.mode.gcm.j(g,d2,a);k=b.encrypt(e);d2[0]^=k[0];d2[1]^=k[1];d2[2]^=k[2];d2[3]^=k[3];return{tag:q.bitSlice(d2,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d2,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d2=0;d2<e;d2++)c[0][d2]=a[d2]^909522486,c[1][d2]=a[d2]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=false};sjcl.misc.hmac.prototype.update=function(a){this.aa=true;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=new this.W(this.w[1]).update(a).finalize();this.reset();return a};sjcl.misc.pbkdf2=function(a,b,c,d2,e){c=c||1e4;if(0>d2||0>c)throw new sjcl.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d2||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d2&&(l=n.clamp(l,d2));return l};sjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=false;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=65536;this.T=[0,48,64,96,128,192,256,384,512,768,1024];this.da=3e4;this.ba=80};sjcl.prng.prototype={randomWords:function(a,b){var c=[],d2;d2=this.isReady(b);var e;if(d2===this.u)throw new sjcl.exception.notReady("generator isn\'t seeded");if(d2&this.J){d2=!(d2&this.I);e=[];var f=0,g;this.Z=e[0]=new Date().valueOf()+this.da;for(g=0;16>g;g++)e.push(4294967296*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d2||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d2=0;4>d2&&(this.h[d2]=this.h[d2]+1|0,!this.h[d2]);d2++);}for(d2=0;d2<a;d2+=4)0===(d2+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,b,c){c=c||"user";var d2,e,f=new Date().valueOf(),g=this.H[c],h=this.isReady(),k=0;d2=this.U[c];void 0===d2&&(d2=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case"number":void 0===b&&(b=1);this.c[g].update([d2,this.N++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d2,this.N++,2,b,f,a.length].concat(a))}break;case"string":void 0===b&&(b=a.length);this.c[g].update([d2,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A("seeded",Math.max(this.o,this.f)),A("progress",this.getProgress()))},isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&new Date().valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,false),window.addEventListener("mousemove",this.a.mouseCollector,false),window.addEventListener("keypress",this.a.keyboardCollector,false),window.addEventListener("devicemotion",this.a.accelerometerCollector,false),window.addEventListener("touchmove",this.a.touchCollector,false);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl.exception.bug("can\'t attach event");this.D=true}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,false),window.removeEventListener("mousemove",this.a.mouseCollector,false),window.removeEventListener("keypress",this.a.keyboardCollector,false),window.removeEventListener("devicemotion",this.a.accelerometerCollector,false),window.removeEventListener("touchmove",this.a.touchCollector,false)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=false)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d2,e=this.K[a],f=[];for(d2 in e)e.hasOwnProperty(d2)&&e[d2]===b&&f.push(d2);for(c=0;c<f.length;c++)d2=f[c],delete e[d2]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d2){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C(this,0)},qa:function(a){a=a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C(this,0)}};function A(a,b){var c,d2=sjcl.random.K[a],e=[];for(c in d2)d2.hasOwnProperty(c)&&e.push(d2[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy(new Date().valueOf(),b,"loadtime")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}function B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);a:try{if(G="undefined"!==typeof module&&module.exports){try{H=__require2("crypto")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array(new Uint8Array(D).buffer),sjcl.random.addEntropy(D,1024,"crypto[\'randomBytes\']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);else break a;sjcl.random.addEntropy(F,1024,"crypto[\'getRandomValues\']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}var D;var E;var F;var G;var H;sjcl.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&256!==f.ks||2>f.iv.length||4<f.iv.length)throw new sjcl.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d2,f);d2.key=a;f.ct="ccm"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d2){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,true);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&256!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f="ccm"===b.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d2,b);d2.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d2){var e=sjcl.json;return e.ia(a,e.decode(b),c,d2)},encode:function(a){var b,c="{",d2="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid("json encode: invalid property name");c+=d2+\'"\'+b+\'":\';d2=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+=\'"\'+escape(a[b])+\'"\';break;case"object":c+=\'"\'+sjcl.codec.base64.fromBits(a[b],0)+\'"\';break;default:throw new sjcl.exception.bug("json encode: unsupported type")}}return c+"}"},decode:function(a){a=a.replace(/\\s/g,"");if(!a.match(/^\\{.*\\}$/))throw new sjcl.exception.invalid("json decode: this isn\'t json!");a=a.replace(/^\\{|\\}$/g,"").split(/,/);var b={},c,d2;for(c=0;c<a.length;c++){if(!(d2=a[c].match(/^\\s*(?:(["\']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i)))throw new sjcl.exception.invalid("json decode: this isn\'t json!");null!=d2[3]?b[d2[2]]=parseInt(d2[3],10):null!=d2[4]?b[d2[2]]=d2[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d2[4]):unescape(d2[4]):null!=d2[5]&&(b[d2[2]]="true"===d2[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d2 in b)if(b.hasOwnProperty(d2)){if(c&&void 0!==a[d2]&&a[d2]!==b[d2])throw new sjcl.exception.invalid("required parameter overridden");a[d2]=b[d2]}return a},sa:function(a,b){var c={},d2;for(d2 in a)a.hasOwnProperty(d2)&&a[d2]!==b[d2]&&(c[d2]=a[d2]);return c},ra:function(a,b){var c={},d2;for(d2=0;d2<b.length;d2++)void 0!==a[b[d2]]&&(c[b[d2]]=a[b[d2]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d2;b=b||{};d2=b.iter||1e3;c=c[a]=c[a]||{};d2=c[d2]=c[d2]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d2.firstSalt:b.salt;d2[c]=d2[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d2[c].slice(0),salt:c.slice(0)}};var _HTTPfrontend=class extends Service{constructor(options,path,fetched){super(options);this.name="http";this.fetchProxied=false;this.listening={};this.GET=(url2="http://localhost:8080/ping",type="",mimeType)=>{if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"GET",url:url2,responseType:type,mimeType,onload:ev2=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url2 instanceof URL)url2=url2.toString();this.setState({[url2]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.POST=(message,url2="http://localhost:8080/echo",type="",mimeType)=>{if(typeof message==="object"&&(type==="json"||type==="text"||!type)){message=JSON.stringify(message)}if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"POST",url:url2,data:message,responseType:type,mimeType,onload:ev2=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url2 instanceof URL)url2=url2.toString();this.setState({[url2]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.transmit=(message,url2)=>{let obj=message;if(typeof obj==="object"){message=JSON.stringify(obj)}if(obj?.method?.toLowerCase()=="get"||message?.toLowerCase()==="get")return this.GET(url2);return this.POST(message,url2)};this.transponder=(url2,message,type="",mimeType)=>{if(typeof message==="object")message=JSON.stringify(message);let method="GET";if(message){method="POST"}if(type==="json")mimeType="application/json";else return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method,url:url2,data:message,responseType:type,onload:ev2=>{let body=xhr.response;if(typeof body==="string"){let substr=body.substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))body=body.replace(/\\\\/g,"");if(body[0]===\'"\'){body=body.substring(1,body.length-1)};body=JSON.parse(body)}}if(typeof body?.method==="string"){return resolve(this.handleMethod(body.route,body.method,body.args))}else if(typeof body?.route==="string"){return resolve(this.handleServiceMessage(body))}else if(typeof body?.node==="string"||body.node instanceof GraphNode){return resolve(this.handleGraphNodeCall(body.node,body.args))}else return resolve(body)},onabort:er=>{reject(er)}})}).catch(console.error)};this.listen=(path2="0",fetched2=async(clone,args,response)=>{const result=await clone.text();const returned=this.receive(result);this.setState({[response.url]:returned})})=>{this.listening[path2]={};let listenerId=`${path2}${Math.floor(Math.random()*1e15)}`;this.listening[path2][listenerId]=fetched2;if(!this.fetchProxied){globalThis.fetch=new Proxy(globalThis.fetch,{apply(fetch,that,args){const result=fetch.apply(that,args);result.then(response=>{if(!response.ok)return;if(this.listening["0"]){for(const key in this.listeners){const clone=response.clone();this.listening["0"][key](clone,args,response)}}else{for(const key in this.listening){if(response.url.includes(key)){for(const key2 in this.listening[path2]){const clone=response.clone();this.listening[path2][key2](clone,args,response)}break}}}}).catch(er=>{console.error(er)});return result}});this.fetchProxied=true}return listenerId};this.stopListening=(path2,listener)=>{if(!path2&&path2!==0){for(const key in this.listening)delete this.listening[key]}else{if(!listener)delete this.listening[path2];else delete this.listening[listener]}};this.load(this);this.listen(path,fetched)}};var HTTPfrontend=_HTTPfrontend;HTTPfrontend.request=options=>{const xhr=new XMLHttpRequest;if(options.responseType)xhr.responseType=options.responseType;else options.responseType="json";if(options.mimeType){xhr.overrideMimeType(options.mimeType)}if(options.onload)xhr.addEventListener("load",options.onload,false);if(options.onprogress)xhr.addEventListener("progress",options.onprogress,false);if(options.onabort)xhr.addEventListener("abort",options.onabort,false);if(options.onloadend)xhr.addEventListener("loadend",options.onloadend,false);if(options.onerror)xhr.addEventListener("error",options.onerror,false);xhr.open(options.method,options.url,true,options.user,options.pass);if(!options.onerror)xhr.onerror=function(){xhr.abort()};xhr.send(options.data);return xhr};var import_web_worker=__toESM(require_browser());var WorkerService=class extends Service{constructor(options){super();this.name="worker";this.workers={};this.threadRot=0;this.loadWorkerRoute=(rt,routeKey)=>{if(rt.workerUrl)rt.url=rt.workerUrl;if(rt.workerId)rt.__node.tag=rt.workerId;if(!rt.__node.tag)rt.__node.tag=routeKey;rt._id=rt.__node.tag;let worker;if(this.workers[rt._id])worker=this.workers[rt._id];else if(rt.worker)worker=rt.worker;if(!worker){worker=this.addWorker(rt)}rt.worker=worker;if(!rt.worker.__ondisconnected){let ondelete=rt2=>{rt2.worker?.terminate()};rt.__addOndisconnected(ondelete)}if(rt.transferFunctions){for(const prop in rt.transferFunctions){this.transferFunction(worker,rt.transferFunctions[prop],prop)}}if(rt.transferClasses){for(const prop in rt.transferClasses){this.transferClass(worker,rt.transferClasses[prop],prop)}}if(worker){if(!rt.__operator){rt.__operator=(...args)=>{if(rt.callback){if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.post(rt.callback,args);else return worker.run(rt.callback,args)}else{if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.send(args);else return worker.request(args)}}}if(rt.init){worker.run(rt.init,rt.initArgs,void 0,rt.initTransfer)}return worker}};this.workerloader={"workers":(node,parent,graph,roots)=>{let rt=node;if(!node.parentRoute&&(parent?.callback&&parent?.worker))node.parentRoute=parent?.callback;if(rt?.worker||rt?.workerId||rt?.workerUrl){let worker=this.loadWorkerRoute(rt,rt.__node.tag);if(worker){if(!rt.parentRoute&&rt.__parent?.callback)rt.parentRoute=rt.__parent.callback;if(rt.__parent&&!rt.portId){if(typeof rt.__parent==="string"){if(rt.__node.tag!==rt.__parent&&worker._id!==rt.__parent)rt.portId=this.establishMessageChannel(worker,rt.__parent)}else if(rt.__node.tag!==rt.__parent?.__node?.tag&&worker._id!==rt.__parent?.tag){rt.portId=this.establishMessageChannel(worker,rt.__parent.worker)}};if(rt.parentRoute){if(!rt.stopped){if(typeof rt.__parent==="string"&&rt.__parent===worker._id){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else if(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.parentRoute,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id)&&!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent){if(typeof rt.__parent==="string"){if(!rt.stopped){if(rt.__parent===worker._id){worker.run("subscribe",[rt.__parent,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id))worker.workerSubs[rt.__parent+rt.portId]={sub:null,route:worker._id,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent?.__node?.tag&&rt.__parent?.worker){if(!rt.stopped){if(rt.__node.tag===rt.__parent.__node.tag||worker._id===rt.__parent.__node.tag){worker.run("subscribe",[rt.__parent.__node.tag,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent.__node.tag,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent.__node.tag+rt.portId].sub=sub})}if(!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.__parent.__node.tag+rt.portId]={sub:null,route:rt.__parent.__node.tag,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}}}}else if(rt.__parent&&rt.parentRoute){if(typeof rt.__parent==="string"&&roots[rt.__parent]?.worker){roots[rt.__parent].worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}else if(rt.__parent?.worker){rt.__parent.worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}}return rt}};this.addDefaultMessageListener=()=>{globalThis.onmessage=ev2=>{let result=this.receive(ev2.data);if(this.__node.keepState)this.setState({[this.name]:result})}};this.postMessage=(message,target,transfer)=>{if(this.workers[target]){this.workers[target].send(message,transfer)}else{globalThis.postMessage(message,target,transfer)}};this.addWorker=options2=>{let worker;if(!options2._id)options2._id=`worker${Math.floor(Math.random()*1e15)}`;if(options2.url)worker=new import_web_worker.default(options2.url);else if(options2.port){worker=options2.port}else if(this.workers[options2._id]){if(this.workers[options2._id].port)worker=this.workers[options2._id].port;else worker=this.workers[options2._id].worker}if(!worker)return;let send=(message,transfer)=>{return this.transmit(message,worker,transfer)};let post=(route,args,method,transfer)=>{let message={route,args};if(method)message.method=method;return this.transmit(message,worker,transfer)};let run=(route,args,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[{route,args},options2._id,callbackId]};if(method)req.args[0].method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let request=(message,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,options2._id,callbackId]};if(method)req.method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let workerSubs={};let subscribe=(route,callback,args,key,subInput,blocking)=>{return this.subscribeToWorker(route,options2._id,callback,args,key,subInput,blocking)};let unsubscribe=(route,sub)=>{return run("unsubscribe",[route,sub])};let start=async(route,portId,callback,blocking)=>{if(route)await run("subscribeToWorker",[route,portId,void 0,callback,blocking]).then(sub=>{if(sub)workerSubs[route+portId]={sub,route,portId,callback,blocking}});else for(const key in workerSubs){if(typeof workerSubs[key].sub!=="number")await run("subscribeToWorker",[workerSubs[key].route,workerSubs[key].portId,void 0,workerSubs[key].callback,void 0,workerSubs[key].blocking]).then(sub=>{workerSubs[key].sub=sub});console.log(JSON.stringify(workerSubs))}return true};let stop=async(route,portId)=>{if(route&&portId&&workerSubs[route+portId]){await run("unsubscribe",[route,workerSubs[route+portId].sub]);workerSubs[route+portId].sub=false}else{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){await run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub]).then(console.log)}workerSubs[key].sub=false}}return true};let terminate=()=>{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}return this.terminate(options2._id)};if(!options2.onmessage)options2.onmessage=ev2=>{this.receive(ev2.data);this.setState({[options2._id]:ev2.data})};if(!options2.onerror){options2.onerror=ev2=>{console.error(ev2.data)}}worker.onmessage=options2.onmessage;worker.onerror=options2.onerror;this.workers[options2._id]={worker,send,post,run,request,subscribe,unsubscribe,terminate,start,stop,postMessage:worker.postMessage,workerSubs,graph:this,...options2};return this.workers[options2._id]};this.open=this.addWorker;this.toObjectURL=scriptTemplate=>{let blob=new Blob([scriptTemplate],{type:"text/javascript"});return URL.createObjectURL(blob)};this.transmit=(message,worker,transfer)=>{if(!transfer){transfer=this.getTransferable(message)}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){worker.postMessage(message,transfer)}else if(typeof worker==="string"){if(this.workers[worker]){if(this.workers[worker].port)this.workers[worker].port.postMessage(message,transfer);else if(this.workers[worker].worker)this.workers[worker].worker.postMessage(message,transfer)}}else{let keys22=Object.keys(this.workers);this.workers[keys22[this.threadRot]].worker.postMessage(message,transfer);this.threadRot++;if(this.threadRot===keys22.length)this.threadRot=0}return message};this.terminate=worker=>{let onclose;if(typeof worker==="string"){let obj=this.workers[worker];if(obj){delete this.workers[worker];worker=obj.worker;if(obj.onclose)onclose=obj.onclose}}else if(typeof worker==="object"){if(worker?._id){worker=worker.worker;delete this.workers[worker?._id]}}if(worker instanceof import_web_worker.default){worker.terminate();if(onclose)onclose(worker);return true}if(worker instanceof MessagePort){worker.close();if(onclose)onclose(worker);return true}return false};this.establishMessageChannel=(worker,worker2)=>{let workerId;if(typeof worker==="string"){workerId=worker;if(this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker2=this.workers[worker].worker}}else if(worker?.worker){worker=worker.worker}if(typeof worker2==="string"){if(this.workers[worker2]){if(this.workers[worker2].port)worker2=this.workers[worker2].port;else worker2=this.workers[worker2].worker}}else if(worker2?.worker){worker2=worker2.worker}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){let channel=new MessageChannel;let portId=`port${Math.floor(Math.random()*1e15)}`;worker.postMessage({route:"addWorker",args:{port:channel.port1,_id:portId}},[channel.port1]);if(worker2 instanceof import_web_worker.default||worker2 instanceof MessagePort){worker2.postMessage({route:"addWorker",args:{port:channel.port2,_id:portId}},[channel.port2])}else if(workerId&&this.workers[workerId]){channel.port2.onmessage=this.workers[workerId].onmessage;this.workers[workerId].port=channel.port2}return portId}return false};this.request=(message,workerId,transfer,method)=>{let worker=this.workers[workerId].worker;return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,callbackId]};if(method)req.method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};this.runRequest=(message,worker,callbackId)=>{let res=this.receive(message);if(typeof worker==="string"&&this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}if(res instanceof Promise){res.then(r=>{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:r,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:r,callbackId})})}else{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:res,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:res,callbackId})}return res};this.subscribeWorker=(route,worker,args,key,subInput,blocking)=>{let callback;if(blocking){let blocked=false;callback=res=>{if(!blocked){blocked=true;if(res instanceof Promise){res.then(r=>{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,r]).then(ret=>{blocked=false})})}else{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,res]).then(ret=>{blocked=false})}}}}else{callback=res=>{if(res instanceof Promise){res.then(r=>{if(worker?.postMessage)worker.postMessage({args:r,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:r,callbackId:route})})}else{if(worker?.postMessage)worker.postMessage({args:res,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:res,callbackId:route})}}}if(!blocking&&worker?.port){worker=worker.port}else if(!blocking&&worker?.worker){worker=worker.worker}else if(typeof worker==="string"&&this.workers[worker]){if(blocking)worker=this.workers[worker];else if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}return this.subscribe(route,callback,args,key,subInput)};this.subscribeToWorker=(route,workerId,callback,args,key,subInput,blocking)=>{if(typeof workerId==="string"&&this.workers[workerId]){this.__node.state.subscribeEvent(workerId,res=>{if(res?.callbackId===route){if(!callback)this.setState({[workerId]:res.args});else if(typeof callback==="string"){this.run(callback,res.args)}else callback(res.args)}});return this.workers[workerId].run("subscribeWorker",[route,workerId,args,key,subInput,blocking])}};this.triggerSubscription=async(route,workerId,result)=>{if(this.__node.state.triggers[workerId])for(let i22=0;i22<this.__node.state.triggers[workerId].length;i22++){await this.__node.state.triggers[workerId][i22].onchange({args:result,callbackId:route})}return true};this.pipeWorkers=(sourceWorker,listenerWorker,sourceRoute,listenerRoute,portId,args,key,subInput,blocking)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof listenerWorker==="string")listenerWorker=this.workers[listenerWorker];if(!portId){portId=this.establishMessageChannel(sourceWorker.worker,listenerWorker.worker)}return listenerWorker.run("subscribeToWorker",[sourceRoute,portId,listenerRoute,args,key,subInput,blocking])};this.unpipeWorkers=(sourceRoute,sourceWorker,sub)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof sourceWorker==="object"){return sourceWorker.run("unsubscribe",[sourceRoute,sub])}};this.connections={workers:this.workers};if(options?.services)this.addServices(options.services);this.load(this);this.setLoaders(this.workerloader);if(options)this.init(options);if(typeof WorkerGlobalScope!=="undefined"&&globalThis instanceof WorkerGlobalScope){this.addDefaultMessageListener()}}getTransferable(message){let transfer;if(typeof message==="object"){if(message.args){if(message.args?.constructor?.name==="Object"){for(const key in message.args){if(ArrayBuffer.isView(message.args[key])){if(!transfer)transfer=[message.args[key].buffer];else transfer.push(message.args[key].buffer)}else if(message.args[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message.args[key]];else transfer.push(message.args[key])}}}else if(Array.isArray(message.args)&&message.args.length<11){message.args.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg?.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message.args)){transfer=[message.args.buffer]}else if(message.args?.constructor?.name==="ArrayBuffer"){transfer=[message]}}else if(message?.constructor?.name==="Object"){for(const key in message){if(ArrayBuffer.isView(message[key])){if(!transfer)transfer=[message[key].buffer];else transfer.push(message[key].buffer)}else if(message[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message[key]];else transfer.push(message[key])}}}else if(Array.isArray(message)&&message.length<11){message.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message)){transfer=[message.buffer]}else if(message.constructor?.name==="ArrayBuffer"){transfer=[message]}}return transfer}};var mouseEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","altKey","shiftKey","button","which","pointerType","clientX","clientY","pageX","pageY","movementX","movementY","x","y","which","timeStamp"]);var wheelEventHandlerImpl=makeSendPropertiesHandler(["deltaX","deltaY"]);var keydownEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","altKey","isComposing","keyCode","key","code","repeat","timeStamp"]);function focusEventHandler(event,sendFn){const data={type:event.type};data.isTrusted=event.isTrusted;data.bubbles=event.bubbles;data.cancelBubble=event.cancelBubble;data.cancelable=event.cancelable;data.composed=event.composed;data.defaultPrevent=event.defaultPrevented;data.eventPhase=event.eventPhase;data.returnValue=event.returnValue;data.currentTarget=event.currentTarget.id?event.currentTarget.id:event.currentTarget.constructor.name;data.target=data.currentTarget;data.srcElement=data.currentTarget;sendFn(data)}function wheelEventHandler(event,sendFn){if(event.preventDefault)event.preventDefault();wheelEventHandlerImpl(event,sendFn)}function preventDefaultHandler(event){if(event.preventDefault)event.preventDefault()}function copyProperties(src,properties,dst){for(const name2 of properties){dst[name2]=src[name2]}}function makeSendPropertiesHandler(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties(event,properties,data);sendFn(data)}}function touchEventHandler(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i22=0;i22<event.touches.length;++i22){const touch=event.touches[i22];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var i=1;var keys={};while(i<222){keys[i]=true;i++}function filteredKeydownEventHandler(event,sendFn){let{keyCode}=event;if(keys[keyCode]){if(event.preventDefault&&(keyCode<110||keyCode>123))event.preventDefault();keydownEventHandler(event,sendFn)}}var eventHandlers={contextmenu:preventDefaultHandler,mousedown:mouseEventHandler,mousemove:mouseEventHandler,mouseup:mouseEventHandler,pointerdown:mouseEventHandler,pointermove:mouseEventHandler,pointerup:mouseEventHandler,pointerlockchange:mouseEventHandler,webkitpointerlockchange:mouseEventHandler,focus:focusEventHandler,blur:focusEventHandler,pointerout:mouseEventHandler,touchstart:touchEventHandler,touchmove:touchEventHandler,touchend:touchEventHandler,wheel:wheelEventHandler,keydown:filteredKeydownEventHandler,keyup:filteredKeydownEventHandler};function initProxyElement(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{if(!worker){handleProxyEvent(data,id)}else worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}if(eventHandlers.keydown){globalThis.addEventListener("keydown",function(ev2){eventHandlers.keydown(ev2,sendEvent)})}if(eventHandlers.keyup){globalThis.addEventListener("keyup",function(ev2){eventHandlers.keyup(ev2,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher=class{addEventListener(type,listener){if(this.__listeners===void 0)this.__listeners={};const listeners=this.__listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this.__listeners===void 0)return false;const listeners=this.__listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i22=0,l=array.length;i22<l;i22++){array[i22].call(this,event)}}}};function noop(){}var ElementProxyReceiver=class extends EventDispatcher{constructor(){super();this.__listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.style.width=this.width+"px";this.proxied.style.height=this.height+"px";this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop;data.stopPropagation=noop;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}blur(){}};var ProxyManager=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;if(typeof WorkerGlobalScope!=="undefined")addTo.style=proxy.style;if(proxy.width){addTo.style.width=proxy.width+"px";addTo.clientWidth=proxy.width}if(proxy.height){addTo.style.height=proxy.height+"px";addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy);addTo.blur=proxy.blur.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={elementFromPoint:(...args)=>{return this.targets[Object.keys(this.targets)[0]].proxied}}}};function makeProxy(id,elm){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;this.__node.graph.ProxyManager.makeProxy(id,elm)}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;globalThis.ProxyManager.makeProxy(id,elm)}return id}function handleProxyEvent(data,id){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;if(this.__node.graph.ProxyManager.handleEvent(data,id))return data}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;if(globalThis.ProxyManager.handleEvent(data,id))return data}}var proxyElementWorkerRoutes={initProxyElement,makeProxy,handleProxyEvent};function Renderer(options){if(options.worker){let worker=options.worker;let route=options.route;if(worker instanceof Blob||typeof worker==="string"){worker=new Worker(worker)}delete options.worker;delete options.route;return transferCanvas(worker,options,route)}else{initProxyElement(options.canvas,void 0,options._id);return setupCanvas(options)}}function transferCanvas(worker,options,route){console.log(options);if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();if(!options.width)options.width=options.canvas.clientWidth;if(!options.height)options.height=options.canvas.clientHeight;let message={route:route?route:"setupCanvas",args:{...options,canvas:offscreen}};if(this?.__node?.graph)this.__node.graph.run("initProxyElement",options.canvas,worker,options._id);else initProxyElement(options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let tr=[offscreen];if(options.transfer){tr.push(...options.transfer);delete options.transfer}worker.postMessage(message,tr);const canvascontrols={_id:options._id,width:options.width,height:options.height,worker,draw:(props,transfer)=>{worker.postMessage({route:"drawFrame",args:[props,options._id]},transfer)},update:(props,transfer)=>{worker.postMessage({route:"updateCanvas",args:[props,options._id]},transfer)},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:(newDrawProps,transfer)=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]},transfer)},terminate:()=>{worker.terminate()}};return canvascontrols}function setDraw(settings,_id){let canvasopts;if(this?.__node?.graph){if(_id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]]}else{if(_id)canvasopts=globalThis.CANVASES?.[settings._id];else if(settings._id)canvasopts=globalThis.CANVASES?.[settings._id];else canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]]}if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasopts._id,canvasopts.canvas);else proxyElementWorkerRoutes.makeProxy(canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText3(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw.bind(settings)}if(typeof settings.update==="string")settings.update=parseFunctionFromText3(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update.bind(settings)}if(typeof settings.init==="string")settings.init=parseFunctionFromText3(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init.bind(settings)}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText3(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear.bind(settings)}return settings._id}return void 0}function setupCanvas(options){if(this?.__node?.graph){if(!this.__node.graph.CANVASES)this.__node.graph.CANVASES={}}else if(!globalThis.CANVASES)globalThis.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this?.__node?.graph?.CANVASES[canvasOptions._id]){this.__node.graph.run("setDraw",canvasOptions)}else if(globalThis.CANVASES?.[canvasOptions._id]){setDraw(canvasOptions)}else{if(this?.__node?.graph){canvasOptions.graph=this.__node.graph;if(!canvasOptions.__node){canvasOptions.__node={}}if(!canvasOptions.__node.tag)canvasOptions.__node.tag=canvasOptions._id;canvasOptions=this.__node.graph.add(canvasOptions);canvasOptions.__addOndisconnected=()=>{canvasOptions.stop();delete this.__node.graph.CANVASES[canvasOptions._id]}}if(this?.__node?.graph)this.__node.graph.CANVASES[canvasOptions._id]=canvasOptions;else globalThis.CANVASES[canvasOptions._id]=canvasOptions;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);else proxyElementWorkerRoutes.makeProxy(canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText3(canvasOptions.draw)}else if(typeof canvasOptions.draw==="function"){canvasOptions.draw=canvasOptions.draw.bind(canvasOptions)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText3(canvasOptions.update)}else if(typeof canvasOptions.update==="function"){canvasOptions.update=canvasOptions.update.bind(canvasOptions)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText3(canvasOptions.init)}else if(typeof canvasOptions.init==="function"){canvasOptions.init=canvasOptions.init.bind(canvasOptions)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText3(canvasOptions.clear)}else if(typeof canvasOptions.clear==="function"){canvasOptions.clear=canvasOptions.clear.bind(canvasOptions)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);canvasOptions.stop=()=>{stopAnim(canvasOptions._id)};canvasOptions.start=draw=>{startAnim(canvasOptions._id,draw)};canvasOptions.set=settings=>{setDraw(settings,canvasOptions._id)};if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)return canvasOptions._id;else{const canvascontrols={_id:options._id,width:options.width,height:options.height,draw:props=>{drawFrame(props,options._id)},update:props=>{updateCanvas(props,options._id)},clear:()=>{clearCanvas(options._id)},init:()=>{initCanvas(options._id)},stop:()=>{stopAnim(options._id)},start:()=>{startAnim(options._id)},set:newDrawProps=>{setDraw(newDrawProps,options._id)},terminate:()=>{if(this.__node?.graph)this.__node.graph.remove(options._id);else{stopAnim(options._id);if(this?.__node?.graph)delete this.__node.graph.CANVASES[canvasOptions._id];else delete globalThis.CANVASES[canvasOptions._id]}}};return canvascontrols}}function drawFrame(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0}function clearCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function initCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function updateCanvas(input,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0}function setProps(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0}function startAnim(_id,draw){let canvasopts=getCanvas.call(this,_id);canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText3(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function stopAnim(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")requestAnimationFrame(canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context));return _id}return void 0}function getCanvas(_id){let canvasopts;if(this?.__node?.graph){if(!_id)canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];else canvasopts=this.__node.graph.CANVASES?.[_id]}else{if(!_id)canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];else canvasopts=globalThis.CANVASES?.[_id]}return canvasopts}var workerCanvasRoutes={...proxyElementWorkerRoutes,Renderer,transferCanvas,setupCanvas,setDraw,drawFrame,clearCanvas,initCanvas,updateCanvas,setProps,startAnim,stopAnim,getCanvas};function parseFunctionFromText3(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var __create2=Object.create;var __defProp2=Object.defineProperty;var __getOwnPropDesc2=Object.getOwnPropertyDescriptor;var __getOwnPropNames2=Object.getOwnPropertyNames;var __getProtoOf2=Object.getPrototypeOf;var __hasOwnProp2=Object.prototype.hasOwnProperty;var __commonJS2=(cb,mod)=>function __require4(){return mod||(0,cb[__getOwnPropNames2(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __export=(target,all)=>{for(var name2 in all)__defProp2(target,name2,{get:all[name2],enumerable:true})};var __copyProps2=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames2(from))if(!__hasOwnProp2.call(to,key)&&key!==except)__defProp2(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc2(from,key))||desc.enumerable})}return to};var __toESM2=(mod,isNodeMode,target)=>(target=mod!=null?__create2(__getProtoOf2(mod)):{},__copyProps2(isNodeMode||!mod||!mod.__esModule?__defProp2(target,"default",{value:mod,enumerable:true}):target,mod));var require_objectid=__commonJS2({"node_modules/bson-objectid/objectid.js"(exports,module2){var MACHINE_ID=Math.floor(Math.random()*16777215);var index=ObjectID2.index=parseInt(Math.random()*16777215,10);var pid=(typeof process==="undefined"||typeof process.pid!=="number"?Math.floor(Math.random()*1e5):process.pid)%65535;var BufferCtr=(()=>{try{return _Buffer}catch(_){try{return Buffer}catch(_2){return null}}})();var isBuffer=function(obj){return!!(obj!=null&&obj.constructor&&typeof obj.constructor.isBuffer==="function"&&obj.constructor.isBuffer(obj))};var hexTable=[];for(i3=0;i3<256;i3++){hexTable[i3]=(i3<=15?"0":"")+i3.toString(16)}var i3;var checkForHexRegExp=new RegExp("^[0-9a-fA-F]{24}$");var decodeLookup=[];i3=0;while(i3<10)decodeLookup[48+i3]=i3++;while(i3<16)decodeLookup[65-10+i3]=decodeLookup[97-10+i3]=i3++;function ObjectID2(id){if(!(this instanceof ObjectID2))return new ObjectID2(id);if(id&&(id instanceof ObjectID2||id._bsontype==="ObjectID"))return id;this._bsontype="ObjectID";if(id==null||typeof id==="number"){this.id=this.generate(id);return}var valid=ObjectID2.isValid(id);if(!valid&&id!=null){throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}else if(valid&&typeof id==="string"&&id.length===24){return ObjectID2.createFromHexString(id)}else if(id!=null&&id.length===12){this.id=id}else if(id!=null&&typeof id.toHexString==="function"){return id}else{throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}}module2.exports=ObjectID2;ObjectID2.default=ObjectID2;ObjectID2.createFromTime=function(time){time=parseInt(time,10)%4294967295;return new ObjectID2(hex(8,time)+"0000000000000000")};ObjectID2.createFromHexString=function(hexString){if(typeof hexString==="undefined"||hexString!=null&&hexString.length!==24){throw new Error("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters")}var data="";var i22=0;while(i22<24){data+=String.fromCharCode(decodeLookup[hexString.charCodeAt(i22++)]<<4|decodeLookup[hexString.charCodeAt(i22++)])}return new ObjectID2(data)};ObjectID2.isValid=function(id){if(id==null)return false;if(typeof id==="number"){return true}if(typeof id==="string"){return id.length===12||id.length===24&&checkForHexRegExp.test(id)}if(id instanceof ObjectID2){return true}if(isBuffer(id)){return ObjectID2.isValid(id.toString("hex"))}if(typeof id.toHexString==="function"){if(BufferCtr&&(id.id instanceof BufferCtr||typeof id.id==="string")){return id.id.length===12||id.id.length===24&&checkForHexRegExp.test(id.id)}}return false};ObjectID2.prototype={constructor:ObjectID2,toHexString:function(){if(!this.id||!this.id.length){throw new Error("invalid ObjectId, ObjectId.id must be either a string or a Buffer, but is ["+JSON.stringify(this.id)+"]")}if(this.id.length===24){return this.id}if(isBuffer(this.id)){return this.id.toString("hex")}var hexString="";for(var i22=0;i22<this.id.length;i22++){hexString+=hexTable[this.id.charCodeAt(i22)]}return hexString},equals:function(otherId){if(otherId instanceof ObjectID2){return this.toString()===otherId.toString()}else if(typeof otherId==="string"&&ObjectID2.isValid(otherId)&&otherId.length===12&&isBuffer(this.id)){return otherId===this.id.toString("binary")}else if(typeof otherId==="string"&&ObjectID2.isValid(otherId)&&otherId.length===24){return otherId.toLowerCase()===this.toHexString()}else if(typeof otherId==="string"&&ObjectID2.isValid(otherId)&&otherId.length===12){return otherId===this.id}else if(otherId!=null&&(otherId instanceof ObjectID2||otherId.toHexString)){return otherId.toHexString()===this.toHexString()}else{return false}},getTimestamp:function(){var timestamp=new Date;var time;if(isBuffer(this.id)){time=this.id[3]|this.id[2]<<8|this.id[1]<<16|this.id[0]<<24}else{time=this.id.charCodeAt(3)|this.id.charCodeAt(2)<<8|this.id.charCodeAt(1)<<16|this.id.charCodeAt(0)<<24}timestamp.setTime(Math.floor(time)*1e3);return timestamp},generate:function(time){if("number"!==typeof time){time=~~(Date.now()/1e3)}time=parseInt(time,10)%4294967295;var inc=next();return String.fromCharCode(time>>24&255,time>>16&255,time>>8&255,time&255,MACHINE_ID>>16&255,MACHINE_ID>>8&255,MACHINE_ID&255,pid>>8&255,pid&255,inc>>16&255,inc>>8&255,inc&255)}};function next(){return index=(index+1)%16777215}function hex(length,n){n=n.toString(16);return n.length===length?n:"00000000".substring(n.length,length)+n}var inspect=Symbol&&Symbol.for&&Symbol.for("nodejs.util.inspect.custom")||"inspect";ObjectID2.prototype[inspect]=function(){return"ObjectID("+this+")"};ObjectID2.prototype.toJSON=ObjectID2.prototype.toHexString;ObjectID2.prototype.toString=ObjectID2.prototype.toHexString}});var DataStructures_exports={};__export(DataStructures_exports,{AuthorizationStruct:()=>AuthorizationStruct,ChatroomStruct:()=>ChatroomStruct,CoherenceMap:()=>CoherenceMap,CoherenceStruct:()=>CoherenceStruct,CommentStruct:()=>CommentStruct,Data:()=>Data,DataStruct:()=>DataStruct,DateStruct:()=>DateStruct,ECGStruct:()=>ECGStruct,EDAStruct:()=>EDAStruct,EEGCoordinates:()=>EEGCoordinates,EEGStruct:()=>EEGStruct,EMGStruct:()=>EMGStruct,EventStruct:()=>EventStruct,EyeTrackerStruct:()=>EyeTrackerStruct,FNIRSStruct:()=>FNIRSStruct,FrequencyBandsStruct:()=>FrequencyBandsStruct,GroupStruct:()=>GroupStruct,HRVStruct:()=>HRVStruct,IMUStruct:()=>IMUStruct,NotificationStruct:()=>NotificationStruct,PPGStruct:()=>PPGStruct,ProfileStruct:()=>ProfileStruct,ScheduleStruct:()=>ScheduleStruct,Struct:()=>Struct,eegCoordinates:()=>eegCoordinates,setCoordinate:()=>setCoordinate,structRegistry:()=>structRegistry});function Struct(structType="struct",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){function randomId3(tag=""){return`${tag+Math.floor(Math.random()+Math.random()*Math.random()*1e16)}`}let struct={_id:randomId3(structType+"defaultId"),structType,ownerId:parentUser?._id,timestamp:Date.now(),parent:{structType:parentStruct?.structType,_id:parentStruct?._id}};if(!struct.ownerId)delete struct.ownerId;if(!struct?.parent?._id)delete struct.parent;if(Object.keys(assignProps).length>0)Object.assign(struct,assignProps);return struct}var eegCoordinates={FP1:[-21.2,66.9,12.1],FPZ:[1.4,65.1,11.3],FP2:[24.3,66.3,12.5],AF7:[-41.7,52.8,11.3],AF3:[-32.7,48.4,32.8],AFZ:[1.8,54.8,37.9],AF4:[35.1,50.1,31.1],AF8:[43.9,52.7,9.3],F5:[-51.4,26.7,24.7],F3:[-39.7,25.3,44.7],F1:[-22.1,26.8,54.9],FZ:[0,26.8,60.6],F2:[23.6,28.2,55.6],F4:[41.9,27.5,43.9],F6:[52.9,28.7,25.2],F7:[-52.1,28.6,3.8],F8:[53.2,28.4,3.1],FC5:[-59.1,3,26.1],FC3:[-45.5,2.4,51.3],FC1:[-24.7,.3,66.4],FCZ:[1,1,72.8],FC2:[26.1,3.2,66],FC4:[47.5,4.6,49.7],FC6:[60.5,4.9,25.5],FT9:[-53.8,-2.1,-29.1],FT7:[-59.2,3.4,-2.1],FT8:[60.2,4.7,-2.8],FT10:[55,-3.6,-31],T7:[-65.8,-17.8,-2.9],T5:[-61.5,-65.3,1.1],T3:[-70.2,-21.3,-10.7],T4:[71.9,-25.2,-8.2],T6:[59.3,-67.6,3.8],T8:[67.4,-18.5,-3.4],C5:[-63.6,-18.9,25.8],C3:[-49.1,-20.7,53.2],C1:[-25.1,-22.5,70.1],CZ:[.8,-21.9,77.4],C2:[26.7,-20.9,69.5],C4:[50.3,-18.8,53],C6:[65.2,-18,26.4],CP5:[-61.8,-46.2,22.5],CP3:[-46.9,-47.7,49.7],CP1:[-24,-49.1,66.1],CPZ:[.7,-47.9,72.6],CP2:[25.8,-47.1,66],CP4:[49.5,-45.5,50.7],CP6:[62.9,-44.6,24.4],TP9:[-73.6,-46.7,-4],TP7:[-63.6,-44.7,-4],TP8:[64.6,-45.4,-3.7],TP10:[74.6,-47.4,-3.7],P9:[-50.8,-51.3,-37.7],P7:[-55.9,-64.8,0],P5:[-52.7,-67.1,19.9],P3:[-41.4,-67.8,42.4],P1:[-21.6,-71.3,52.6],PZ:[.7,-69.3,56.9],P2:[24.4,-69.9,53.5],P4:[44.2,-65.8,42.7],P6:[54.4,-65.3,20.2],P8:[56.4,-64.4,.1],P10:[51,-53.9,-36.5],PO7:[-44,-81.7,1.6],PO3:[-33.3,-84.3,26.5],POZ:[0,-87.9,33.5],PO4:[35.2,-82.6,26.1],PO8:[43.3,-82,.7],O1:[-25.8,-93.3,7.7],OZ:[.3,-97.1,8.7],O2:[25,-95.2,6.2]};function setCoordinate(channelDict,assignTo={}){if(!eegCoordinates[channelDict.tag]&&channelDict.position){eegCoordinates[channelDict.tag]=[channelDict.position.x,channelDict.position.y,channelDict.position.z]}if(eegCoordinates[channelDict.tag]){let props={channel:"",position:{x:eegCoordinates[channelDict.tag][0],y:eegCoordinates[channelDict.tag][1],z:eegCoordinates[channelDict.tag][2]}};return Object.assign(assignTo,props)}else return Object.assign(assignTo,channelDict)}function EEGCoordinates(channelDicts=[],genCoherenceMap=true){let structs=[];for(let channelDict of channelDicts){let struct=EEGStruct(channelDict);structs.push(struct)}if(genCoherenceMap){structs.push(...CoherenceMap({channelDicts}))}return structs}function FrequencyBandsStruct(additionalBands=[],assignTo={}){let bands={scp:[],delta:[],theta:[],alpha1:[],alpha2:[],beta:[],lowgamma:[],highgamma:[]};additionalBands.forEach(band=>bands[band]=[]);return Object.assign(assignTo,bands)}function EEGStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let bands=FrequencyBandsStruct();let props={tag,position:{x:0,y:0,z:0},count:0,times:[],raw:[],filtered:[],fftCount:0,fftTimes:[],ffts:[],slices:JSON.parse(JSON.stringify(bands)),means:JSON.parse(JSON.stringify(bands)),startTime:Date.now()};let struct=Struct("eeg",props,parentUser,parentStruct);if(tag)setCoordinate(props,struct);return Object.assign(struct,assignProps)}function CoherenceStruct(coords={0:EEGStruct("FP1"),1:EEGStruct("FP2")},assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let bands=FrequencyBandsStruct();let props={tag:coords[0]?.tag+"::"+coords[1]?.tag,x0:coords[0]?.position?.x,y0:coords[0]?.position?.y,z0:coords[0]?.position?.z,x1:coords[1]?.position?.x,y1:coords[1]?.position?.y,z1:coords[1]?.position?.z,fftCount:0,fftTimes:[],ffts:[],slices:JSON.parse(JSON.stringify(bands)),means:JSON.parse(JSON.stringify(bands)),startTime:Date.now()};let struct=Struct("coherence",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function CoherenceMap(opts={channelDicts:[{ch:0,tag:"FP1",analyze:false},{ch:1,tag:"FP2",analyze:false}],taggedOnly:true},_={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){var cmap=[];var l=1,k=0;for(var i3=0;i3<opts.channelDicts.length*(opts.channelDicts.length+1)/2-opts.channelDicts.length;i3++){if(opts.taggedOnly===false||opts.taggedOnly===true&&(opts.channelDicts[k].tag!==null&&opts.channelDicts[k+l].tag!==null&&(opts.channelDicts[k].tag!=="other"&&opts.channelDicts[k+l].tag!=="other")&&(opts.channelDicts[k].analyze===true&&opts.channelDicts[k+l].analyze===true))){var coord0=EEGStruct(opts.channelDicts[k].tag);var coord1=EEGStruct(opts.channelDicts[k+l].tag);cmap.push(CoherenceStruct({0:coord0,1:coord1},{},parentUser,parentStruct))}l++;if(l+k===opts.channelDicts.length){k++;l=1}}return cmap}function FNIRSStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,position:{x:0,y:0,z:0},count:0,times:[],red:[],ir:[],ir2:[],ambient:[],ratio:[],temp:[],beat_detect:{beats:[],breaths:[],rir:[],rir2:[],drir_dt:[],localmins:[],localmaxs:[],val_dists:[],peak_dists:[],localmins2:[],localmaxs2:[],val_dists2:[],peak_dists2:[]},startTime:Date.now()};let struct=Struct("fnirs",props,parentUser,parentStruct);if(tag)setCoordinate(props,struct);return Object.assign(struct,assignProps)}function IMUStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,Ax:[],Ay:[],Az:[],Gx:[],Gy:[],Gz:[],startTime:Date.now()};let struct=Struct("imu",props,parentUser,parentStruct);if(tag)setCoordinate(props,struct);return Object.assign(struct,assignProps)}function EyeTrackerStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,count:0,times:[],x:[],y:[],smax:[],smay:[],startTime:Date.now()};let struct=Struct("eyetracker",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function ECGStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,count:0,times:[],raw:[],filtered:[],bpm:[],hrv:[],startTime:Date.now()};let struct=Struct("ecg",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function EDAStruct(_="",__={},___={_id:""},____={structType:"struct",_id:""}){}function PPGStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let struct=FNIRSStruct(tag,parentUser,parentStruct,assignProps);struct.structType="ppg";return struct}function HRVStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let struct=ECGStruct(tag,parentUser,parentStruct,assignProps);struct.structType="hrv";return struct}function EMGStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let struct=EEGStruct(tag,parentUser,parentStruct,assignProps);struct.structType="emg";return struct}function ProfileStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,name:"",username:"",firstName:"",lastName:"",email:"",phone:"",sex:"",birthday:"",type:"",userRoles:{},socials:{},data:{},id:""};let struct=Struct("profile",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function AuthorizationStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,authorizedId:"",authorizedName:"",authorizerId:"",authorizerName:"",authorizations:{},structs:{},excluded:{},groups:{},status:"PENDING",expires:false,associatedAuthId:""};let struct=Struct("authorization",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function GroupStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,name:"",details:"",admins:{},peers:{},clients:{},users:{}};let struct=Struct("group",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function Data(type,data){return{type,data,timestamp:Date.now()}}function DataStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,title:"",author:"",expires:false,type:"",data:new Array};let struct=Struct("data",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function EventStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,event:"",author:"",startTime:"",endTime:"",grade:0,notes:"",attachments:new Array,users:{}};let struct=Struct("event",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function ChatroomStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,message:"",topic:"",author:"",attachments:new Array,comments:new Array,replies:new Array,users:{},audioChatActive:false,videoChatActive:false};let struct=Struct("chatroom",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function CommentStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,author:"",replyTo:"",message:"",rating:0,replies:new Array,users:{},attachments:new Array};let struct=Struct("comment",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function NotificationStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,note:"",parentUserId:""};let struct=Struct("notification",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function ScheduleStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,title:"",author:"",attachments:new Array,dates:new Array};let struct=Struct("schedule",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}function DateStruct(tag="",assignProps={},parentUser={_id:""},parentStruct={structType:"struct",_id:""}){let props={tag,timeSet:"",notes:"",recurs:"NEVER",attachments:new Array};let struct=Struct("date",props,parentUser,parentStruct);return Object.assign(struct,assignProps)}var structRegistry={Struct,EEGStruct,FNIRSStruct,CoherenceStruct,CoherenceMap,FrequencyBandsStruct,IMUStruct,EyeTrackerStruct,ECGStruct,EDAStruct,PPGStruct,HRVStruct,EMGStruct,ProfileStruct,AuthorizationStruct,GroupStruct,DataStruct,EventStruct,ChatroomStruct,CommentStruct,NotificationStruct,ScheduleStruct,DateStruct};var EventHandler2=class{constructor(data){this.pushToState={};this.data={};this.triggers={};this.ctr=0;this.setState=updateObj=>{Object.assign(this.data,updateObj);let props=Object.getOwnPropertyNames(updateObj);for(const prop of props){this.triggerEvent(prop,this.data[prop])}if(this.triggers[statesubKey2]){let run=fn=>{fn(updateObj)};this.triggers[statesubKey2].forEach(v2=>{run(v2.onchange)})}return this.data};this.setValue=(key,value)=>{this.data[key]=value;this.triggerEvent(key,value)};this.triggerEvent=(key,value)=>{if(this.triggers[key]){let fn=obj=>obj.onchange(value,this.triggers[key]);this.triggers[key].forEach(fn)}};this.subscribeState=onchange=>{return this.subscribeEvent(statesubKey2,onchange)};this.unsubscribeState=sub=>{return this.unsubscribeEvent(statesubKey2,sub)};this.subscribeEvent=(key,onchange,refObject,refKey)=>{if(key){if(refObject&&refKey&&!this.triggers[key]){Object.defineProperty(this.data,key,{get:()=>{return refObject[refKey]},set:value=>{refObject[refKey]=value},enumerable:true,configurable:true})}if(!this.triggers[key]){this.triggers[key]=[]}let l=this.ctr;this.ctr++;this.triggers[key].push({sub:l,onchange});return l}else return void 0};this.unsubscribeEvent=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(sub===void 0){delete this.triggers[key];delete this.data[key]}else{let idx=void 0;let obj=triggers.find((o,i3)=>{if(o.sub===sub){idx=i3;return true}});if(obj)triggers.splice(idx,1);if(Object.keys(triggers).length===0){delete this.triggers[key];delete this.data[key]}if(this.onRemoved)this.onRemoved(obj);return true}}};this.subscribeEventOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeEvent(key,sub)};sub=this.subscribeEvent(key,changed)};this.getEvent=(key,sub)=>{for(const s in this.triggers[key]){if(this.triggers[key][s].sub===sub)return this.triggers[key][s]}};this.getSnapshot=()=>{const snapshot={};for(const key in this.data){snapshot[key]=this.data[key]}};if(typeof data==="object")this.data=data}};var statesubKey2="*s";var state2=new EventHandler2;var import_bson_objectid=__toESM2(require_objectid());var Systems={collision:{setupEntities:function(entities){for(const key in entities){const entity=entities[key];if(entity.components){if(!entity.components[this.__node.tag])continue}this.setupEntity(entity)}return entities},setupEntity:function(entity){if(!("collisionEnabled"in entity))entity.collisionEnabled=true;if(!entity.collisionType)entity.collisionType="sphere";if(!entity.collisionRadius)entity.collisionRadius=1;if(!entity.collisionBoundsScale)entity.collisionBoundsScale={x:1,y:1,z:1};if(!entity.colliding)entity.colliding={};if(!entity.position)entity.position={x:0,y:0,z:0};return entity},__node:{tag:"collision"},__operator:function(entities){let keys3=this.entityKeys;for(let i3=0;i3<keys3.length;i3++){const entity1=entities[keys3[i3]];if(entity1.components){if(!entity1.components[this.__node.tag]||!entity1.collisionEnabled)continue}if(!entity1.collisionEnabled)continue;for(let j=0;j<keys3.length;j++){if(i3===j)continue;const entity2=entities[keys3[j]];if(entity2.components){if(!entity2.components[this.__node.tag])continue}if(!entity2.collisionEnabled)continue;let colliding=Systems.collision.collisionCheck(entity1,entity2);if(colliding!==false){if(!entity1.colliding)entity1.colliding={};if(!entity2.colliding)entity2.colliding={};entity1.colliding[entity2.__node.tag]=colliding;entity2.colliding[entity1.__node.tag]=colliding}}}return entities},collisionCheck:(body1,body2)=>{if(body1.collisionEnabled===false||body2.collisionEnabled===false)return false;const dist=Systems.collision.distance(body1.position,body2.position);if(dist<Math.max(...Object.values(body1.collisionBoundsScale))*body1.collisionRadius+Math.max(...Object.values(body2.collisionBoundsScale))*body2.collisionRadius){let isColliding=false;if(body1.collisionType==="sphere"){if(body2.collisionType==="sphere"){isColliding=Systems.collision.sphereCollisionCheck(body1,body2,dist)}else if(body2.collisionType==="box"){isColliding=Systems.collision.sphereBoxCollisionCheck(body1,body2,dist)}else if(body2.collisionType==="point"){isColliding=Systems.collision.isPointInsideSphere(body2.position,body1,dist)}}else if(body1.collisionType==="box"){if(body2.collisionType==="sphere"){isColliding=Systems.collision.sphereBoxCollisionCheck(body2,body1,dist)}else if(body2.collisionType==="box"){isColliding=Systems.collision.boxCollisionCheck(body1,body2)}else if(body2.collisionType==="point"){isColliding=Systems.collision.isPointInsideBox(body1.position,body1)}}else if(body1.collisionType==="point"){if(body2.collisionType==="sphere"){isColliding=Systems.collision.isPointInsideSphere(body1.position,body2,dist)}else if(body2.collisionType==="box"){isColliding=Systems.collision.isPointInsideBox(body1.position,body2)}}if(isColliding)return dist}return false},sphereCollisionCheck:(body1,body2,dist)=>{if(dist===void 0)dist=Systems.collision.distance(body1.position,body2.position);return dist<body1.collisionRadius+body2.collisionRadius},boxCollisionCheck:(body1,body2)=>{let body1minX=(body1.position.x-body1.collisionRadius)*body1.collisionBoundsScale.x;let body1maxX=(body1.position.x+body1.collisionRadius)*body1.collisionBoundsScale.x;let body1minY=(body1.position.y-body1.collisionRadius)*body1.collisionBoundsScale.y;let body1maxY=(body1.position.y+body1.collisionRadius)*body1.collisionBoundsScale.y;let body1minZ=(body1.position.z-body1.collisionRadius)*body1.collisionBoundsScale.z;let body1maxZ=(body1.position.z+body1.collisionRadius)*body1.collisionBoundsScale.z;let body2minX=(body2.position.x-body2.collisionRadius)*body1.collisionBoundsScale.x;let body2maxX=(body2.position.x+body2.collisionRadius)*body1.collisionBoundsScale.x;let body2minY=(body2.position.y-body2.collisionRadius)*body1.collisionBoundsScale.y;let body2maxY=(body2.position.y+body2.collisionRadius)*body1.collisionBoundsScale.y;let body2minZ=(body2.position.z-body2.collisionRadius)*body1.collisionBoundsScale.z;let body2maxZ=(body2.position.z+body2.collisionRadius)*body1.collisionBoundsScale.z;return(body1maxX<=body2maxX&&body1maxX>=body2minX||body1minX<=body2maxX&&body1minX>=body2minX)&&(body1maxY<=body2maxY&&body1maxY>=body2minY||body1minY<=body2maxY&&body1minY>=body2minY)&&(body1maxZ<=body2maxZ&&body1maxZ>=body2minZ||body1minZ<=body2maxZ&&body1minZ>=body2minZ)},sphereBoxCollisionCheck:(sphere,box,dist)=>{let boxMinX=(box.position.x-box.collisionRadius)*box.collisionBoundsScale.x;let boxMaxX=(box.position.x+box.collisionRadius)*box.collisionBoundsScale.x;let boxMinY=(box.position.y-box.collisionRadius)*box.collisionBoundsScale.y;let boxMaxY=(box.position.y+box.collisionRadius)*box.collisionBoundsScale.y;let boxMinZ=(box.position.z-box.collisionRadius)*box.collisionBoundsScale.z;let boxMaxZ=(box.position.z+box.collisionRadius)*box.collisionBoundsScale.z;let clamp={x:Math.max(boxMinX,Math.min(sphere.position.x,boxMaxX)),y:Math.max(boxMinY,Math.min(sphere.position.y,boxMaxY)),z:Math.max(boxMinZ,Math.min(sphere.position.z,boxMaxZ))};if(dist===void 0)dist=Systems.collision.distance(sphere.position,clamp);return dist>sphere.collisionRadius},isPointInsideSphere:(point,sphere,dist)=>{if(dist===void 0)dist=Systems.collision.distance(point,sphere.position);return dist<sphere.collisionRadius},isPointInsideBox:(point,box)=>{let boxminX=(box.position.x-box.collisionRadius)*box.collisionBoundsScale.x;let boxmaxX=(box.position.x+box.collisionRadius)*box.collisionBoundsScale.x;let boxminY=(box.position.y-box.collisionRadius)*box.collisionBoundsScale.x;let boxmaxY=(box.position.y+box.collisionRadius)*box.collisionBoundsScale.x;let boxminZ=(box.position.z-box.collisionRadius)*box.collisionBoundsScale.x;let boxmaxZ=(box.position.z+box.collisionRadius)*box.collisionBoundsScale.x;return point.x>=boxminX&&point.x<=boxmaxX&&(point.y>=boxminY&&point.y<=boxmaxY)&&(point.z>=boxminZ&&point.z<=boxmaxZ)},closestPointOnLine:(point,lineStart,lineEnd)=>{let a={x:lineEnd.x-lineStart.x,y:lineEnd.y-lineStart.y,z:lineEnd.z-lineStart.z};let b={x:lineStart.x-point.x,y:lineStart.y-point.y,z:lineStart.z-point.z};let c={x:lineEnd.x-point.x,y:lineEnd.y-point.y,z:lineEnd.z-point.z};let bdota=Systems.collision.dot(b,a);if(bdota<=0)return lineStart;let cdota=Systems.collision.dot(c,a);if(cdota<=0)return lineEnd;let _bdotapluscdota=1/(bdota+cdota);return{x:lineStart.x+(lineEnd.x-lineStart.x)*bdota*_bdotapluscdota,y:lineStart.y+(lineEnd.y-lineStart.y)*bdota*_bdotapluscdota,z:lineStart.z+(lineEnd.z-lineStart.z)*bdota*_bdotapluscdota}},closestPointOnPolygon:(point,t0,t1,t22)=>{let n=Systems.collision.calcNormal(t0,t1,t22);let dist=Systems.collision.dot(point,n)-Systems.collision.dot(t0,n);let projection=Systems.collision.vecadd(point,Systems.collision.vecscale(n,-dist));let v0x=t22[0]-t0[0];let v0y=t22[1]-t0[1];let v0z=t22[2]-t0[2];let v1x=t1[0]-t0[0];let v1y=t1[1]-t0[1];let v1z=t1[2]-t0[2];let v2x=projection[0]-t0[0];let v2y=projection[1]-t0[1];let v2z=projection[2]-t0[2];let dot00=v0x*v0x+v0y*v0y+v0z*v0z;let dot01=v0x*v1x+v0y*v1y+v0z*v1z;let dot02=v0x*v2x+v0y*v2y+v0z*v2z;let dot11=v1x*v1x+v1y*v1y+v1z*v1z;let dot12=v1x*v2x+v1y*v2y+v1z*v2z;let denom=dot00*dot11-dot01*dot01;if(Math.abs(denom)<1e-30){return void 0}let _denom=1/denom;let u3=(dot11*dot02-dot01*dot12)*_denom;let v2=(dot00*dot12-dot01*dot02)*_denom;if(u3>=0&&v2>=0&&u3+v2<1){return projection}else return void 0},calcNormal:(t0,t1,t22,positive=true)=>{var QR=Systems.collision.makeVec(t0,t1);var QS=Systems.collision.makeVec(t0,t22);if(positive===true){return Systems.collision.normalize(Systems.collision.cross3D(QR,QS))}else{return Systems.collision.normalize(Systems.collision.cross3D(QS,QR))}},dot:(v1,v2)=>{let dot=0;for(const key in v1){dot+=v1[key]*v2[key]}return dot},makeVec(p1,p2){return{x:p2.x-p1.x,y:p2.y-p1.y,z:p2.z-p1.z}},vecadd:(v1,v2)=>{let result=Object.assign({},v1);for(const key in result){result[key]+=v2[key]}return result},vecsub:(v1,v2)=>{let result=Object.assign({},v1);for(const key in result){result[key]-=v2[key]}return result},vecmul:(v1,v2)=>{let result=Object.assign({},v1);for(const key in result){result[key]*=v2[key]}return result},vecdiv:(v1,v2)=>{let result=Object.assign({},v1);for(const key in result){result[key]/=v2[key]}return result},vecscale:(v1,scalar)=>{let result=Object.assign({},v1);for(const key in result){result[key]*=scalar}return result},distance:(v1,v2)=>{let distance=0;for(const key in v1){distance+=Math.pow(v1[key]-v2[key],2)}return Math.sqrt(distance)},magnitude:v2=>{let magnitude=0;for(const key in v2){magnitude+=v2[key]*v2[key]}return Math.sqrt(magnitude)},normalize:v2=>{let magnitude=Systems.collision.magnitude(v2);let _mag=magnitude?1/magnitude:0;let vn={};for(const key in v2){vn[key]=v2[key]*_mag}return vn},distance3D(v1,v2){return Math.sqrt((v1.x-v2.x)*(v1.x-v2.x)+(v1.y-v2.y)*(v1.y-v2.y)+(v1.z-v2.z)*(v1.z-v2.z))},cross3D(v1,v2){return{x:v1.y*v2.z-v1.z*v2.y,y:v1.z*v2.x-v1.x*v2.z,z:v1.x*v2.y-v1.y*v2.x}},nearestNeighborSearch(entities,isWithinRadius=1e15){var tree={};;for(const key in entities){let newnode={tag:key,position:void 0,neighbors:[]};newnode.position=entities[key].position;tree[key]=newnode}for(const i3 in tree){for(const j in tree){var dist=Systems.collision.distance3D(tree[i3].position,tree[j].position);if(dist<isWithinRadius){var newNeighbori={tag:j,position:entities[j].position,dist};tree[i3].neighbors.push(newNeighbori);var newNeighborj={tag:j,position:entities[i3].position,dist};tree[j].neighbors.push(newNeighborj)}}tree[i3].neighbors.sort(function(a,b){return a.dist-b.dist})}return tree},generateBoundingVolumeTree(entities,mode="octree",withinRadius=1e15,minEntities=3){let dynamicBoundingVolumeTree={proto:{parent:void 0,children:{},entities:{},collisionType:"box",collisionRadius:1,collisionBoundsScale:{x:1,y:1,z:1},position:{x:0,y:0,z:0}},tree:{}};let maxX,maxY,maxZ;let minX=0,minY=0,minZ=0;let positions={};let minRadius=withinRadius;for(const key in entities){const body=entities[key];let xx=body.position.x+body.collisionRadius*body.collisionBoundsScale.x;let yy=body.position.y+body.collisionRadius*body.collisionBoundsScale.y;let zz=body.position.z+body.collisionRadius*body.collisionBoundsScale.z;if(maxX<xx)maxX=xx;if(minX>xx)minX=xx;if(maxY<yy)maxY=yy;if(minY>yy)minY=yy;if(maxZ<zz)maxZ=zz;if(minZ>zz)minZ=zz;if(minRadius>body.collisionRadius)minRadius=body.collisionRadius;positions[key]=body.position};let head=JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto));let boxpos={x:(maxX+minX)*.5,y:(maxY+minY)*.5,z:(maxZ+minZ)*.5};let boxbounds={x:maxX-boxpos.x,y:maxY-boxpos.y,z:maxZ-boxpos.z};head.position=boxpos;head.collisionBoundsScale=boxbounds;head.entities=entities;dynamicBoundingVolumeTree.tree=head;minRadius*=2;if(mode==="octree"){let genOct=function(parentPos,halfbounds){let oct1={x:parentPos.x+halfbounds.x,y:parentPos.y+halfbounds.y,z:parentPos.z+halfbounds.z};let oct2={x:parentPos.x-halfbounds.x,y:parentPos.y+halfbounds.y,z:parentPos.z+halfbounds.z};let oct3={x:parentPos.x+halfbounds.x,y:parentPos.y-halfbounds.y,z:parentPos.z+halfbounds.z};let oct4={x:parentPos.x+halfbounds.x,y:parentPos.y+halfbounds.y,z:parentPos.z-halfbounds.z};let oct5={x:parentPos.x-halfbounds.x,y:parentPos.y-halfbounds.y,z:parentPos.z+halfbounds.z};let oct6={x:parentPos.x-halfbounds.x,y:parentPos.y+halfbounds.y,z:parentPos.z-halfbounds.z};let oct7={x:parentPos.x+halfbounds.x,y:parentPos.y-halfbounds.y,z:parentPos.z-halfbounds.z};let oct8={x:parentPos.x-halfbounds.x,y:parentPos.y-halfbounds.y,z:parentPos.z-halfbounds.z};return[oct1,oct2,oct3,oct4,oct5,oct6,oct7,oct8]},genOctTree=function(head2){let halfbounds={x:head2.collisionBoundsScale.x*.5,y:head2.collisionBoundsScale.y*.5,z:head2.collisionBoundsScale.z*.5};let octPos=genOct(head2.position,halfbounds);let check=Object.assign({},head2.bodies);for(let i3=0;i3<8;i3++){let octquadrant=Object.assign(JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto)),{position:octPos[i3],collisionBoundsScale:halfbounds});octquadrant.parent=head2;for(const j in check){let collided=Systems.collision.collisionCheck(check[j],octquadrant);if(collided){octquadrant.entities[j]=check[j];delete check[j]}}if(Object.keys(octquadrant.entities).length>minEntities-1){head2.children[i3]=octquadrant;octquadrant.parent=head2;if(Object.keys(octquadrant.entities).length>minEntities&&octquadrant.collisionRadius*.5>minRadius){genOctTree(octquadrant)}}}};genOctTree(head);return head}else{let tree=Systems.collision.nearestNeighborSearch(positions,withinRadius);let keys3=Object.keys(tree);let tag=keys3[Math.floor(Math.random()*keys3.length)];let searching=true;let count=0;let genBoundingBoxLevel=(tree2,volumes)=>{let newVolumes={};let foundidxs={};let treekeys=Object.keys(tree2);while(searching&&count<treekeys.length){let node=tree2[tag];let i3=0;let j=0;let ux=positions[node.tag].x-volumes[node.tag].collisionBoundsScale.x,uy=positions[node.tag].y-volumes[node.tag].collisionBoundsScale.y,uz=positions[node.tag].z-volumes[node.tag].collisionBoundsScale.z,mx=positions[node.tag].x+volumes[node.tag].collisionBoundsScale.x,my=positions[node.tag].y+volumes[node.tag].collisionBoundsScale.y,mz=positions[node.tag].z+volumes[node.tag].collisionBoundsScale.z;let newvolume=JSON.parse(JSON.stringify(dynamicBoundingVolumeTree.proto));newvolume.tag=`bound${Math.floor(Math.random()*1e15)}`;newvolume.children[node.tag]=volumes[node.tag];newvolume.bodies[node.tag]=entities[node.tag];volumes[node.tag].parent=newvolume;foundidxs[node.tag]=true;i3++;j++;let nkeys=Object.keys(node.neighbors);while(i3<nkeys.length&&j<3){if(foundidxs[node.neighbors[i3].tag]){i3++;continue}let uxn=positions[node.neighbors[i3].tag].x-volumes[node.neighbors[i3].tag].collisionBoundsScale.x,uyn=positions[node.neighbors[i3].tag].y-volumes[node.neighbors[i3].tag].collisionBoundsScale.y,uzn=positions[node.neighbors[i3].tag].z-volumes[node.neighbors[i3].tag].collisionBoundsScale.z,mxn=positions[node.neighbors[i3].tag].x+volumes[node.neighbors[i3].tag].collisionBoundsScale.x,myn=positions[node.neighbors[i3].tag].y+volumes[node.neighbors[i3].tag].collisionBoundsScale.y,mzn=positions[node.neighbors[i3].tag].z+volumes[node.neighbors[i3].tag].collisionBoundsScale.z;if(ux>uxn)ux=uxn;if(mx<mxn)mx=mxn;if(uy>uyn)uy=uyn;if(my<myn)my=myn;if(uz>uzn)uz=uzn;if(mz<mzn)mz=mzn;newvolume.children[node.neighbors[i3].tag]=volumes[node.neighbors[i3].tag];newvolume.entities[node.neighbors[i3].tag]=entities[node.neighbors[i3].tag];volumes[node.neighbors[i3].tag].parent=newvolume;foundidxs[node.neighbors[i3].tag]=true;i3++;j++}let pos={x:(mx+ux)*.5,y:(my+uy)*.5,z:(mz+uz)*.5};let bounds={x:mx-pos.x,y:my-pos.y,z:mz-pos.z};newvolume.position=pos;newvolume.collisionBoundsScale=bounds;if(newvolume.bodies.length===1)newvolume=node;newVolumes[newvolume.tag]=newvolume;while(i3<node.neighbors.length){if(!foundidxs[node.neighbors[i3].tag])break;i3++}if(i3<node.neighbors.length){tag=node.neighbors[i3].tag}else if(Object.keys(foundidxs).length<Object.keys(tree2).length){tag=keys3[0]}else searching=false;count++}return newVolumes};let result=genBoundingBoxLevel(tree,entities);while(Object.keys(result).length>2){let nextTree=Systems.collision.nearestNeighborSearch(result,withinRadius);result=genBoundingBoxLevel(nextTree,result)}head.children=result;head.children.forEach(n=>{n.parent=head});return head}}},collider:{lastTime:performance.now(),setupEntities:function(entities){for(const key in entities){const entity=entities[key];if(entity.components){if(!entity.components[this.__node.tag])continue}this.setupEntity(entity)}return entities},setupEntity:function(entity){if(!("collisionEnabled"in entity))Systems.collision.setupEntity(entity);if(!("boundingBox"in entity))entity.boundingBox={bot:0,top:100,left:0,right:100,front:0,back:100};if(!("position"in entity)){Systems.movement.setupEntity(entity)}if(!("restitution"in entity))entity.restitution=1;if(!("useBoundingBox"in entity))entity.useBoundingBox=true;if(!entity.position.x&&!entity.position.y&&!entity.position.z){entity.position.x=Math.random()*entity.boundingBox.right;entity.position.y=Math.random()*entity.boundingBox.back;entity.position.z=Math.random()*entity.boundingBox.top}return entity},__operator:function(entities){let keys3=this.entityKeys;for(let i3=0;i3<keys3.length;i3++){const entity1=entities[keys3[i3]];if(entity1.components){if(!entity1.components[this.__node.tag]||!entity1.collisionEnabled)continue}if(entity1.useBoundingBox)this.checkBoundingBox(entity1);if(!entity1.collisionEnabled)continue;if(entity1.colliding){for(const key2 in entity1.colliding){const entity2=entities[key2];if(entity1.colliding[key2]===false){delete entity1.colliding[key2];delete entity2.colliding[entity1.__node.tag];continue}if(!entity2.collisionEnabled)continue;if(entity2.collisionType==="box"){this.resolveBoxCollision(entity1,entity2,entity1.colliding[key2])}else{if(entity1.collisionType==="box"){entity1.fixed=true;this.resolveSphereCollisions(entity1,entity2,entity1.colliding[key2]);entity1.fixed=false}else{this.resolveSphereCollisions(entity1,entity2,entity1.colliding[key2]);delete entity2.colliding[entity1.__node.tag]}}delete entity1.colliding[entity2.__node.tag]}delete entity1.colliding}}return entities},__node:{tag:"collider"},checkBoundingBox:entity=>{const xsize=entity.collisionRadius*entity.collisionBoundsScale.x;const ysize=entity.collisionRadius*entity.collisionBoundsScale.y;const zsize=entity.collisionRadius*entity.collisionBoundsScale.z;if(entity.position.y-ysize<=entity.boundingBox.front){entity.velocity.y*=-entity.restitution;entity.position.y=entity.boundingBox.front+ysize}if(entity.position.y+ysize>=entity.boundingBox.back){entity.velocity.y*=-entity.restitution;entity.position.y=entity.boundingBox.back-ysize}if(entity.position.x-xsize<=entity.boundingBox.left){entity.velocity.x*=-entity.restitution;entity.position.x=entity.boundingBox.left+xsize}if(entity.position.x+xsize>=entity.boundingBox.right){entity.velocity.x*=-entity.restitution;entity.position.x=entity.boundingBox.right-xsize}if(entity.position.z-zsize<=entity.boundingBox.bot){entity.velocity.z*=-entity.restitution;entity.position.z=entity.boundingBox.bot+zsize}if(entity.position.z+zsize>=entity.boundingBox.top){entity.velocity.z*=-entity.restitution;entity.position.z=entity.boundingBox.top-zsize}},resolveBoxCollision:(body1,box,negate)=>{let positionVec=Systems.collision.makeVec(body1.position,box.position);var directionVec=Object.values(positionVec);let closestSide;let closestDist=Infinity;let mul=-1;if(directionVec[idx]<0)mul=1;if(negate)mul=-mul;for(const key in body1.position){let dist=Math.abs(box.position[key]-body1.position[key]);if(dist<closestDist&&Math.abs(box.position[key]-body1.position[key]+body1.velocity[key]*1e-17)<dist){closestSide=key;closestDist=dist}}var idx=directionVec.indexOf(closestSide);if(idx===0)idx="x";if(idx===1)idx="y";if(idx===2)idx="z";if(idx===3)idx="w";let boxEdgeAxisPosition=box.position[idx]+box.collisionRadius*box.collisionBoundsScale[idx]*mul;if(negate){let body1Offset=boxEdgeAxisPosition-body1.collisionRadius*body1.collisionBoundsScale[idx]*mul;body1.position[idx]=body1Offset}else{let body1Offset=boxEdgeAxisPosition+body1.collisionRadius*body1.collisionBoundsScale[idx]*mul;body1.position[idx]=body1Offset}body1.velocity[idx]=-body1.velocity[idx]*body1.restitution;if(negate)body1.force[idx]=-body1.velocity[idx];var body2AccelMag=Systems.collision.magnitude(box.acceleration);var body2AccelNormal=Systems.collision.normalize(box.acceleration);body1.force[idx]=-body2AccelNormal[idx]*body2AccelMag*box.mass;if(negate)body1.force[idx]=-body1.force[idx]},resolveSphereCollisions:(entity1,entity2,dist)=>{if(dist===void 0)dist=Systems.collision.distance(entity1.position,entity2.position);let vecn=Systems.collision.normalize(Systems.collision.makeVec(entity1.position,entity2.position));let sumMass=entity1.mass+entity2.mass;let ratio=entity1.mass/sumMass;let rmin=1-ratio;if(entity1.fixed===false){entity1.position.x+=vecn.x*rmin*1.01;entity1.position.y+=vecn.y*rmin*1.01;entity1.position.z+=vecn.z*rmin*1.001}else{entity2.position.x-=vecn.x*1.01;entity2.position.y-=vecn.y*1.01;entity2.position.z-=vecn.z*1.01}if(entity2.fixed===false){entity2.position.x+=vecn.x*ratio*1.01;entity2.position.y+=vecn.y*ratio*1.01;entity2.position.z+=vecn.z*ratio*1.01}else{entity1.position.x+=vecn.x*1.01;entity1.position.y+=vecn.y*1.01;entity1.position.z+=vecn.z*1.01}dist=Systems.collision.distance(entity1.position,entity2.position);let vrel={x:entity1.velocity.x-entity2.velocity.x,y:entity1.velocity.y-entity2.velocity.y,z:entity1.velocity.z-entity2.velocity.z};let speed=vrel.x*vecn.x+vrel.y*vecn.y+vrel.z*vecn.z;if(speed>0){let impulse=2*speed/sumMass;if(entity1.fixed===false){entity1.velocity.x-=impulse*vecn.x*entity2.mass*entity1.restitution;entity1.velocity.y-=impulse*vecn.y*entity2.mass*entity1.restitution;entity1.velocity.z-=impulse*vecn.z*entity2.mass*entity1.restitution}if(entity2.fixed===false){entity2.velocity.x+=impulse*vecn.x*entity2.mass*entity2.restitution/entity2.mass;entity2.velocity.y+=impulse*vecn.y*entity2.mass*entity2.restitution/entity2.mass;entity2.velocity.z+=impulse*vecn.z*entity2.mass*entity2.restitution/entity2.mass}}}},nbody:{lastTime:performance.now(),G:6674e-14,setupEntities:function(entities){for(const key in entities){const entity=entities[key];if(entity.components){if(!entity.components[this.__node.tag])continue}this.setupEntity(entity)}return entities},setupEntity:function(entity){if(!("collisionEnabled"in entity))Systems.collider.setupEntity(entity);entity.isAttractor=true;if(!("attractorGroup"in entity))entity.attractorGroup=0;if(!("attractorFrameSearchMax"in entity))entity.attractorFrameSearchMax=10;if(!("attractorGroupRules"in entity))entity.attractorGroupRules={0:{G:this.G,maxDist:void 0}};return entity},__operator:function(entities){let keys3=this.entityKeys;for(let i3=0;i3<keys3.length;i3++){const entity=entities[keys3[i3]];if(entity.components){if(!entity.components[this.__node.tag])continue}if(!entity.mass)continue;let nSearched=0;nested:for(let j=0;j<keys3.length;j++){let randKey=keys3[Math.floor(Math.random()*keys3.length)];nSearched++;const entity2=entities[randKey];if(entity2.components){if(!entity2.components[this.__node.tag])continue nested}if(!entity2.mass||!entity2.isAttractor)continue nested;this.attract(entity,entity2,void 0,this.G);if(nSearched>entity.attractorFrameSearchMax)break nested}}return entities},__node:{tag:"nbody"},attract:function(body1,body2,dist,G3=this.G,vecn){if(dist===void 0)dist=Systems.collision.distance3D(body1.position,body2.position);if(vecn===void 0)vecn=Systems.collision.normalize(Systems.collision.makeVec(body1.position,body2.position));let Fg=0;if(dist<.01)dist=.01;if(body1.attractorGroupRules[body2.attractorGroup]){if(typeof body1.attractorGroupRules[body2.attractorGroup]==="object"){if(body1.attractorGroupRules[body2.attractorGroup].maxDist&&body1.attractorGroupRules[body2.attractorGroup].maxDist<dist){}else Fg=body1.attractorGroupRules[body2.attractorGroup].G*body1.mass*body2.mass/(dist*dist)}else Fg=body1.attractorGroupRules[body2.attractorGroup]*body1.mass*body2.mass/(dist*dist)}else Fg=G3*body1.mass*body2.mass/(dist*dist);body1.force.x+=vecn.x*Fg;body1.force.y+=vecn.y*Fg;body1.force.z+=vecn.z*Fg;body2.force.x-=vecn.x*Fg;body2.force.y-=vecn.y*Fg;body2.force.z-=vecn.z*Fg}},boid:{lastTime:performance.now(),defaultAnchor:{x:Math.random(),y:Math.random(),z:Math.random(),mul:.006},setupEntities:function(entities){for(const key in entities){const entity=entities[key];this.setupEntity(entity)}return entities},setupEntity:function(entity){if(!entity.position){Systems.collider.setupEntity(entity)}let adjustedAnchor=Object.assign({},this.defaultAnchor);adjustedAnchor.x*=entity.boundingBox.right;adjustedAnchor.y*=entity.boundingBox.back;adjustedAnchor.z*=entity.boundingBox.top;let boidDefaults={cohesion:1e-5,separation:1e-4,alignment:.006,swirl:adjustedAnchor,attractor:Object.assign(adjustedAnchor,{mul:.002}),useCohesion:true,useSeparation:true,useAlignment:true,useSwirl:true,useAttractor:true,useAttraction:false,groupRadius:200,groupSize:5,searchLimit:5};if(!entity.boid){entity.boid=boidDefaults}else entity.boid=Object.assign(boidDefaults,entity.boid);if(this.entityKeys.length>1e3){entity.boid.groupSize=1;entity.boid.searchLimit=1}return entity},__operator:function(entities){let now=performance.now();let timeStep=now-this.lastTime;this.lastTime=now;let keys3=this.entityKeys;let length=keys3.length;let _timeStep=1/timeStep;let w=-1;outer:for(let i3=0;i3<keys3.length;i3++){w++;let p0=entities[keys3[i3]];const inRange=[];const distances=[];const boidVelocities=[p0.position.x,p0.position.y,p0.position.z,0,0,0,p0.velocity.x,p0.velocity.y,p0.velocity.z,0,0,0,0,0,0,0,0,0];let groupCount=1;let k=-1;nested:for(let j=0;j<keys3.length;j++){k++;if(distances.length>p0.boid.groupSize||k>p0.boid.searchLimit){break nested}let randj=keys3[Math.floor(Math.random()*length)];if(k===w||randj===keys3[i3]||inRange.indexOf(randj)>-1){continue nested}else{let pr=entities[randj];let disttemp=Math.sqrt((p0.position.x-pr.position.x)*(p0.position.x-pr.position.x)+(p0.position.y-pr.position.y)*(p0.position.y-pr.position.y)+(p0.position.z-pr.position.z)*(p0.position.z-pr.position.z));if(disttemp>p0.boid.groupRadius){continue nested}else{distances.push(disttemp);inRange.push(randj);let distInv;if(p0.boid.useSeparation||p0.boid.useAlignment){distInv=p0.boid.groupRadius/(disttemp*disttemp);if(distInv>p0.maxSpeed)distInv=p0.maxSpeed;else if(distInv<-p0.maxSpeed)distInv=-p0.maxSpeed}if(p0.boid.useCohesion){boidVelocities[0]+=(pr.position.x-p0.position.x)*.5*disttemp*_timeStep;boidVelocities[1]+=(pr.position.y-p0.position.y)*.5*disttemp*_timeStep;boidVelocities[2]+=(pr.position.z-p0.position.z)*.5*disttemp*_timeStep}if(isNaN(disttemp)||isNaN(boidVelocities[0])||isNaN(pr.position.x)){console.log(disttemp,i3,randj,p0.position,pr.position,boidVelocities);p0.position.x=NaN;return}if(p0.boid.useSeparation){boidVelocities[3]=boidVelocities[3]+(p0.position.x-pr.position.x)*distInv;boidVelocities[4]=boidVelocities[4]+(p0.position.y-pr.position.y)*distInv;boidVelocities[5]=boidVelocities[5]+(p0.position.z-pr.position.z)*distInv}if(p0.boid.useAttraction&&pr.boid.useAttraction){Systems.nbody.attract(p0,pr,disttemp)}if(p0.boid.useAlignment){boidVelocities[6]=boidVelocities[6]+pr.velocity.x*distInv;boidVelocities[7]=boidVelocities[7]+pr.velocity.y*distInv;boidVelocities[8]=boidVelocities[8]+pr.velocity.z*distInv}groupCount++}}}let _groupCount=1/groupCount;if(p0.boid.useCohesion){boidVelocities[0]=p0.boid.cohesion*(boidVelocities[0]*_groupCount);boidVelocities[1]=p0.boid.cohesion*(boidVelocities[1]*_groupCount);boidVelocities[2]=p0.boid.cohesion*(boidVelocities[2]*_groupCount)}else{boidVelocities[0]=0;boidVelocities[1]=0;boidVelocities[2]=0}if(p0.boid.useSeparation){boidVelocities[3]=p0.boid.separation*boidVelocities[3];boidVelocities[4]=p0.boid.separation*boidVelocities[4];boidVelocities[5]=p0.boid.separation*boidVelocities[5]}else{boidVelocities[3]=0;boidVelocities[4]=0;boidVelocities[5]=0}if(p0.boid.useAlignment){boidVelocities[6]=-(p0.boid.alignment*boidVelocities[6]*_groupCount);boidVelocities[7]=p0.boid.alignment*boidVelocities[7]*_groupCount;boidVelocities[8]=p0.boid.alignment*boidVelocities[8]*_groupCount}else{boidVelocities[6]=0;boidVelocities[7]=0;boidVelocities[8]=0}const swirlVec=[0,0,0];if(p0.boid.useSwirl==true){boidVelocities[9]=-(p0.position.y-p0.boid.swirl.y)*p0.boid.swirl.mul;boidVelocities[10]=(p0.position.z-p0.boid.swirl.z)*p0.boid.swirl.mul;boidVelocities[11]=(p0.position.x-p0.boid.swirl.x)*p0.boid.swirl.mul}const attractorVec=[0,0,0];if(p0.boid.useAttractor==true){boidVelocities[12]=(p0.boid.attractor.x-p0.position.x)*p0.boid.attractor.mul;if(p0.position.x>p0.boundingBox.left||p0.position.x<p0.boundingBox.right){boidVelocities[12]*=3}boidVelocities[13]=(p0.boid.attractor.y-p0.position.y)*p0.boid.attractor.mul;if(p0.position.y>p0.boundingBox.top||p0.position.y<p0.boundingBox.bottom){boidVelocities[13]*=3}boidVelocities[14]=(p0.boid.attractor.z-p0.position.z)*p0.boid.attractor.mul;if(p0.position.z>p0.boundingBox.front||p0.position.z<p0.boundingBox.back){boidVelocities[14]*=3}}p0.velocity.x=p0.velocity.x+boidVelocities[0]+boidVelocities[3]+boidVelocities[6]+boidVelocities[9]+boidVelocities[12]+boidVelocities[15],p0.velocity.y=p0.velocity.y+boidVelocities[1]+boidVelocities[4]+boidVelocities[7]+boidVelocities[10]+boidVelocities[13]+boidVelocities[16],p0.velocity.z=p0.velocity.z+boidVelocities[2]+boidVelocities[5]+boidVelocities[8]+boidVelocities[11]+boidVelocities[14]+boidVelocities[17];if(isNaN(p0.velocity.x))console.error(p0,i3,groupCount,p0.position,p0.velocity,swirlVec,attractorVec)}return entities},__node:{tag:"boid"}},movement:{__node:{tag:"movement"},lastTime:performance.now(),setupEntities:function(entities){for(const key in entities){const entity=entities[key];if(entity.components){if(!entity.components[this.__node.tag])continue}this.setupEntity(entity)}},setupEntity:function(entity){if(!("mass"in entity))entity.mass=1;if(!("fixed"in entity))entity.fixed=false;if(!entity.force)entity.force={x:0,y:0,z:0};if(!("mass"in entity))entity.mass=1;if(!("gravity"in entity))entity.gravity=-9.81;if(!entity.acceleration)entity.acceleration={x:0,y:0,z:0};if(!entity.velocity)entity.velocity={x:0,y:0,z:0};if(!("maxSpeed"in entity))entity.maxSpeed=10;if(!entity.position)entity.position={x:0,y:0,z:0};return entity},__operator:function(entities){let now=performance.now();let timeStep=(now-this.lastTime)*.001;this.lastTime=now;let keys3=this.entityKeys;for(let i3=0;i3<keys3.length;i3++){const entity=entities[keys3[i3]];if(entity.components){if(!entity.components[this.__node.tag])continue}if(entity.fixed)continue;if(entity.mass){if(entity.force.x){entity.acceleration.x+=entity.force.x/entity.mass;entity.force.x=0}if(entity.force.y){entity.acceleration.y+=entity.force.y/entity.mass;entity.force.y=0}if(entity.force.z){entity.acceleration.z+=entity.force.z/entity.mass+entity.gravity;entity.force.z=0}}if(entity.drag){if(entity.acceleration.x)entity.acceleration.x-=entity.acceleration.x*entity.drag*timeStep;if(entity.acceleration.y)entity.acceleration.y-=entity.acceleration.y*entity.drag*timeStep;if(entity.acceleration.z)entity.acceleration.z-=entity.acceleration.z*entity.drag*timeStep}if(entity.acceleration.x)entity.velocity.x+=entity.acceleration.x*timeStep;if(entity.acceleration.y)entity.velocity.y+=entity.acceleration.y*timeStep;if(entity.acceleration.z)entity.velocity.z+=entity.acceleration.z*timeStep;if(entity.maxSpeed>0){let magnitude=Systems.collision.magnitude(entity.velocity);if(magnitude>entity.maxSpeed){let scalar=entity.maxSpeed/magnitude;entity.velocity.x*=scalar;entity.velocity.y*=scalar;entity.velocity.z*=scalar}}if(entity.velocity.x)entity.position.x+=entity.velocity.x*timeStep;if(entity.velocity.y)entity.position.y+=entity.velocity.y*timeStep;if(entity.velocity.z)entity.position.z+=entity.velocity.z*timeStep}return entities}}};var v=class{constructor(e,t3,s,h){this.r=e,this.g=t3,this.b=s,this.a=h}};var A2=class{constructor(){this.scaleX=1,this.scaleY=1,this.offsetX=0,this.offsetY=0,this.loop=false,this._vbuffer=0,this._coord=0,this.visible=true,this.intensity=1,this.xy=new Float32Array([]),this.numPoints=0,this.color=new v(0,0,0,1),this.webglNumPoints=0}};var d=class extends A2{constructor(e,t3){super(),this.currentIndex=0,this.webglNumPoints=t3,this.numPoints=t3,this.color=e,this.xy=new Float32Array(2*this.webglNumPoints)}setX(e,t3){this.xy[e*2]=t3}setY(e,t3){this.xy[e*2+1]=t3}getX(e){return this.xy[e*2]}getY(e){return this.xy[e*2+1]}lineSpaceX(e,t3){for(let s=0;s<this.numPoints;s++)this.setX(s,e+t3*s)}arrangeX(){this.lineSpaceX(-1,2/this.numPoints)}constY(e){for(let t3=0;t3<this.numPoints;t3++)this.setY(t3,e)}shiftAdd(e){let t3=e.length;for(let s=0;s<this.numPoints-t3;s++)this.setY(s,this.getY(s+t3));for(let s=0;s<t3;s++)this.setY(s+this.numPoints-t3,e[s])}addArrayY(e){if(this.currentIndex+e.length<=this.numPoints)for(let t3=0;t3<e.length;t3++)this.setY(this.currentIndex,e[t3]),this.currentIndex++}replaceArrayY(e){if(e.length==this.numPoints)for(let t3=0;t3<this.numPoints;t3++)this.setY(t3,e[t3])}};var M=(c,e,t3)=>{let s={x:0,y:0};return s.x=c.x+e.x*t3,s.y=c.y+e.y*t3,s};var P=c=>Y(-c.y,c.x);var x2=(c,e)=>{let t3=T(c,e);return t3=S(t3),t3};var C2=(c,e)=>{let t3={x:0,y:0};return t3.x=c.x+e.x,t3.y=c.y+e.y,t3};var R=(c,e)=>c.x*e.x+c.y*e.y;var S=c=>{let e={x:0,y:0},t3=c.x*c.x+c.y*c.y;return t3>0&&(t3=1/Math.sqrt(t3),e.x=c.x*t3,e.y=c.y*t3),e};var Y=(c,e)=>{let t3={x:0,y:0};return t3.x=c,t3.y=e,t3};var T=(c,e)=>{let t3={x:0,y:0};return t3.x=c.x-e.x,t3.y=c.y-e.y,t3};var F2=c=>{let e,t3={x:0,y:0},s={x:0,y:0},h=[],o=(n,l)=>{h.push({vec2:n,miterLength:l})},a=n=>({x:c[n*2],y:c[n*2+1]});t3=x2(a(1),a(0)),e=P(t3),o(e,1);let r=c.length/2;for(let n=1;n<r-1;n++){let l=a(n-1),i3=a(n),u3=a(n+1);t3=x2(i3,l),e=P(t3),s=x2(u3,i3);let g=N(t3,s),f=X(t3,g,1);o(g,f)}return t3=x2(a(r-1),a(r-2)),e=P(t3),o(e,1),h};var N=(c,e)=>{let t3=C2(c,e);return t3=S(t3),Y(-t3.y,t3.x)};var X=(c,e,t3)=>{let s=Y(-c.y,c.x);return t3/R(e,s)};var p=class extends A2{constructor(e,t3,s){super(),this.currentIndex=0,this._thicknessRequested=0,this._actualThickness=0,this.webglNumPoints=t3*2,this.numPoints=t3,this.color=e,this._thicknessRequested=s,this._linePoints=new Float32Array(t3*2),this.xy=new Float32Array(2*this.webglNumPoints)}convertToTriPoints(){let e=this._actualThickness/2,t3=F2(this._linePoints);for(let s=0;s<this.numPoints;s++){let h=this._linePoints[2*s],o=this._linePoints[2*s+1],a={x:h,y:o},r=M(a,t3[s].vec2,t3[s].miterLength*e),n=M(a,t3[s].vec2,-t3[s].miterLength*e);this.xy[s*4]=r.x,this.xy[s*4+1]=r.y,this.xy[s*4+2]=n.x,this.xy[s*4+3]=n.y}}setX(e,t3){this._linePoints[e*2]=t3}setY(e,t3){this._linePoints[e*2+1]=t3}lineSpaceX(e,t3){for(let s=0;s<this.numPoints;s++)this.setX(s,e+t3*s)}setThickness(e){this._thicknessRequested=e}getThickness(){return this._thicknessRequested}setActualThickness(e){this._actualThickness=e}};var L=class{constructor(e,t3){this.debug=false,this.addLine=this.addDataLine,t3==null?this.webgl=e.getContext("webgl",{antialias:true,transparent:false}):(this.webgl=e.getContext("webgl",{antialias:t3.antialias,transparent:t3.transparent,desynchronized:t3.deSync,powerPerformance:t3.powerPerformance,preserveDrawing:t3.preserveDrawing}),this.debug=t3.debug==null?false:t3.debug),this.log("canvas type is: "+e.constructor.name),this.log(`[webgl-plot]:width=${e.width}, height=${e.height}`),this._linesData=[],this._linesAux=[],this._thickLines=[],this._surfaces=[],this.gScaleX=1,this.gScaleY=1,this.gXYratio=1,this.gOffsetX=0,this.gOffsetY=0,this.gLog10X=false,this.gLog10Y=false,this.webgl.clear(this.webgl.COLOR_BUFFER_BIT),this.webgl.viewport(0,0,e.width,e.height),this._progLine=this.webgl.createProgram(),this.initThinLineProgram(),this.webgl.enable(this.webgl.BLEND),this.webgl.blendFunc(this.webgl.SRC_ALPHA,this.webgl.ONE_MINUS_SRC_ALPHA)}get linesData(){return this._linesData}get linesAux(){return this._linesAux}get thickLines(){return this._thickLines}get surfaces(){return this._surfaces}_drawLines(e){let t3=this.webgl;e.forEach(s=>{if(s.visible){t3.useProgram(this._progLine);let h=t3.getUniformLocation(this._progLine,"uscale");t3.uniformMatrix2fv(h,false,new Float32Array([s.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,s.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let o=t3.getUniformLocation(this._progLine,"uoffset");t3.uniform2fv(o,new Float32Array([s.offsetX+this.gOffsetX,s.offsetY+this.gOffsetY]));let a=t3.getUniformLocation(this._progLine,"is_log");t3.uniform2iv(a,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));let r=t3.getUniformLocation(this._progLine,"uColor");t3.uniform4fv(r,[s.color.r,s.color.g,s.color.b,s.color.a]),t3.bufferData(t3.ARRAY_BUFFER,s.xy,t3.STREAM_DRAW),t3.drawArrays(s.loop?t3.LINE_LOOP:t3.LINE_STRIP,0,s.webglNumPoints)}})}_drawSurfaces(e){let t3=this.webgl;e.forEach(s=>{if(s.visible){t3.useProgram(this._progLine);let h=t3.getUniformLocation(this._progLine,"uscale");t3.uniformMatrix2fv(h,false,new Float32Array([s.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,s.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let o=t3.getUniformLocation(this._progLine,"uoffset");t3.uniform2fv(o,new Float32Array([s.offsetX+this.gOffsetX,s.offsetY+this.gOffsetY]));let a=t3.getUniformLocation(this._progLine,"is_log");t3.uniform2iv(a,new Int32Array([this.gLog10X?1:0,this.gLog10Y?1:0]));let r=t3.getUniformLocation(this._progLine,"uColor");t3.uniform4fv(r,[s.color.r,s.color.g,s.color.b,s.color.a]),t3.bufferData(t3.ARRAY_BUFFER,s.xy,t3.STREAM_DRAW),t3.drawArrays(t3.TRIANGLE_STRIP,0,s.webglNumPoints)}})}_drawTriangles(e){let t3=this.webgl;t3.bufferData(t3.ARRAY_BUFFER,e.xy,t3.STREAM_DRAW),t3.useProgram(this._progLine);let s=t3.getUniformLocation(this._progLine,"uscale");t3.uniformMatrix2fv(s,false,new Float32Array([e.scaleX*this.gScaleX*(this.gLog10X?1/Math.log(10):1),0,0,e.scaleY*this.gScaleY*this.gXYratio*(this.gLog10Y?1/Math.log(10):1)]));let h=t3.getUniformLocation(this._progLine,"uoffset");t3.uniform2fv(h,new Float32Array([e.offsetX+this.gOffsetX,e.offsetY+this.gOffsetY]));let o=t3.getUniformLocation(this._progLine,"is_log");t3.uniform2iv(o,new Int32Array([0,0]));let a=t3.getUniformLocation(this._progLine,"uColor");t3.uniform4fv(a,[e.color.r,e.color.g,e.color.b,e.color.a]),t3.drawArrays(t3.TRIANGLE_STRIP,0,e.xy.length/2)}_drawThickLines(){this._thickLines.forEach(e=>{if(e.visible){let t3=Math.min(this.gScaleX,this.gScaleY);e.setActualThickness(e.getThickness()/t3),e.convertToTriPoints(),this._drawTriangles(e)}})}update(){this.clear(),this.draw()}draw(){this._drawLines(this.linesData),this._drawLines(this.linesAux),this._drawThickLines(),this._drawSurfaces(this.surfaces)}clear(){this.webgl.clear(this.webgl.COLOR_BUFFER_BIT)}_addLine(e){e._vbuffer=this.webgl.createBuffer(),this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER,e._vbuffer),this.webgl.bufferData(this.webgl.ARRAY_BUFFER,e.xy,this.webgl.STREAM_DRAW),e._coord=this.webgl.getAttribLocation(this._progLine,"coordinates"),this.webgl.vertexAttribPointer(e._coord,2,this.webgl.FLOAT,false,0,0),this.webgl.enableVertexAttribArray(e._coord)}addDataLine(e){this._addLine(e),this.linesData.push(e)}addAuxLine(e){this._addLine(e),this.linesAux.push(e)}addThickLine(e){this._addLine(e),this._thickLines.push(e)}addSurface(e){this._addLine(e),this.surfaces.push(e)}initThinLineProgram(){let e=`\n      attribute vec2 coordinates;\n      uniform mat2 uscale;\n      uniform vec2 uoffset;\n      uniform ivec2 is_log;\n\n      void main(void) {\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\n         vec2 line = vec2(x, y);\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\n      }`,t3=this.webgl.createShader(this.webgl.VERTEX_SHADER);this.webgl.shaderSource(t3,e),this.webgl.compileShader(t3);let s=`\n         precision mediump float;\n         uniform highp vec4 uColor;\n         void main(void) {\n            gl_FragColor =  uColor;\n         }`,h=this.webgl.createShader(this.webgl.FRAGMENT_SHADER);this.webgl.shaderSource(h,s),this.webgl.compileShader(h),this._progLine=this.webgl.createProgram(),this.webgl.attachShader(this._progLine,t3),this.webgl.attachShader(this._progLine,h),this.webgl.linkProgram(this._progLine)}popDataLine(){this.linesData.pop()}removeAllLines(){this._linesData=[],this._linesAux=[],this._thickLines=[],this._surfaces=[]}removeDataLines(){this._linesData=[]}removeAuxLines(){this._linesAux=[]}viewport(e,t3,s,h){this.webgl.viewport(e,t3,s,h)}log(e){this.debug&&console.log("[webgl-plot]:"+e)}};var y2=class{constructor(){this.plots={}}initPlot(e,t3){if(t3||(t3=new L(e.canvas,e.webglOptions)),!e._id)e._id=`plot${Math.floor(Math.random()*1e15)}`;else if(this.plots[e._id]){let l=this.plots[e._id].initial;if(e.lines){for(let i3 in e.lines)if(l.lines[i3]&&Array.isArray(e.lines[i3])){let u3=e.lines[i3];e.lines[i3]=l.lines[i3]}}e=Object.assign(l,e)}e.overlay&&(typeof e.overlay!="object"&&(e.overlay=document.createElement("canvas"),e.overlay.style.position="absolute",e.overlay.width=e.canvas.width,e.overlay.height=e.canvas.height,e.canvas.appendChild(e.overlay)),e.overlayCtx||(e.overlayCtx=e.overlay.getContext("2d"))),e.width&&(e.canvas.width=e.width,e.canvas.style&&(e.canvas.style.width=e.width+"px"),typeof e.overlay=="object"&&(e.overlay.width=e.width,e.overlay.style&&(e.overlay.style.width=e.width+"px"))),e.height&&(e.canvas.height=e.height,e.canvas.style&&(e.canvas.style.height=e.height+"px"),typeof e.overlay=="object"&&(e.overlay.height=e.height,e.overlay.style&&(e.overlay.style.height=e.height+"px"))),e.lines?.timestamp&&delete e.lines.timestamp,e.lines||(e.lines={});let s={};for(let l in e.lines)s[l]=Object.assign({},s[l]),"viewing"in e.lines[l]||(e.lines[l].viewing=true),s[l].viewing=e.lines[l].viewing,s[l].sps=e.lines[l].sps,s[l].nSec=e.lines[l].nSec,s[l].nPoints=e.lines[l].nPoints,s[l].ymin=e.lines[l].ymin,s[l].ymax=e.lines[l].ymax,s[l].units=e.lines[l].units;let h={plot:t3,settings:e,initial:Object.assign(Object.assign({},e),{lines:s}),anim:()=>{t3.update()}};this.plots[e._id]=h;let o=0,a=0;Object.keys(e.lines).forEach(l=>{e.lines[l]?.viewing!==false&&a++}),e.nLines=a;let r,n;typeof e.overlay=="object"&&(r=e.overlay,n=e.overlayCtx,n.clearRect(0,0,e.overlay.width,e.overlay.height),n.font=e.overlayFont?e.overlayFont:"1em Courier",n.fillStyle=e.overlayColor?e.overlayColor:"white");for(let l in e.lines){let i3=e.lines[l];if(Array.isArray(i3)&&(i3={values:i3},e.lines[l]=i3),"viewing"in i3||(i3.viewing=true),i3.color)Array.isArray(i3.color)&&(i3.color=new v(...i3.color));else{let m=y2.HSLToRGB(360*(o/a)%360,100,50,1);h.initial.lines[l].color=[...m,1],i3.color=new v(...m,1)}let u3;if(i3.nSec&&i3.sps?u3=Math.ceil(i3.nSec*i3.sps):i3.nPoints?u3=i3.nPoints:i3.points?u3=i3.points:e.linePoints?u3=e.linePoints:i3.values?u3=i3.values.length:u3=1e3,i3.points=u3,e.lines[l].viewing===false)continue;if((i3.width||e.lineWidth)&&i3.width!==0){let m=e.lineWidth;m||(m=i3.width),i3.width?i3.line=new p(i3.color,u3,i3.width):e.lineWidth&&(i3.line=new p(i3.color,u3,e.lineWidth)),i3.line.lineSpaceX(-1,2/i3.line.numPoints)}else i3.line=new d(i3.color,u3),i3.line.arrangeX();i3.values?.length===i3.points?i3.values.length!==u3&&(i3.interpolate?i3.values.length>u3?i3.values=y2.downsample(i3.values,u3):i3.values.length<u3&&(i3.values=y2.upsample(i3.values,u3)):i3.values.length>i3.points?i3.values=i3.values.slice(i3.values.length-i3.points):i3.values=[...new Array(i3.points-i3.values.length).fill(0),...i3.values]):Array.isArray(i3.values)?i3.values.length>u3?i3.values=i3.values.slice(i3.values.length-u3):i3.values.length<u3&&(i3.values=[...new Array(u3-i3.values.length).fill(0),...i3.values]):i3.values=new Array(i3.points).fill(0);let g=i3.ymin,f=i3.ymax,b=i3.values.length<=1e5;if(g===f?(f=b?Math.max(...i3.values):1,g=b?Math.min(...i3.values):0):isNaN(f)&&(f=b?Math.max(...i3.values):1),isNaN(g)&&(g=b?Math.min(...i3.values):0),g>f){let m=g;f=g,g=m}let w=Math.abs(g);if(i3.absmax=w>f?w:f,"autoscale"in i3||(i3.autoscale=true),i3.position||(i3.position=e.nLines-o-1),i3.autoscale?i3.autoscale===2?("clamp"in i3||(i3.clamp=true),i3.scaled=y2.autoscale(i3.values,i3.position,a,i3.centerZero,g,f,i3.clamp)):(i3.scaled=i3.values,i3.line.scaleY=y2.getYScalar(i3.values,a,i3.centerZero,g,f),i3.line.offsetY=y2.getYOffset(i3.position,a,g,i3.line.scaleY)):i3.scaled=i3.values,i3.scaled.forEach((m,_)=>i3.line.setY(_,m)),i3.line instanceof p?t3.addThickLine(i3.line):i3.line instanceof d&&t3.addDataLine(i3.line),"xAxis"in i3||(i3.xAxis=true),i3.xAxis){i3.xColor?Array.isArray(i3.xColor)&&(i3.xColor=new v(...i3.xColor)):i3.xColor=new v(1,1,1,.3);let m=new d(i3.xColor,2),_=i3.autoscale?(o+1)*2/a-1-1/a:0;m.constY(_),m.arrangeX(),m.xy[2]=1,i3.x=m,t3.addAuxLine(m)}if(a>1&&i3.autoscale&&o!==a-1){e.dividerColor?Array.isArray(e.dividerColor)&&(e.dividerColor=new v(...e.dividerColor)):e.dividerColor=new v(1,1,1,1);let m=new d(e.dividerColor,2);m.constY(i3.autoscale?(o+1)*2/a-1:1),m.arrangeX(),m.xy[2]=1,i3.divider=m,t3.addAuxLine(m)}if(typeof e.overlay=="object"&&(i3.useOverlay||!("useOverlay"in i3))){let m=e.nLines-i3.position-1;n.fillText(l,20,r.height*(m+.2)/e.nLines),n.fillText(`${Math.floor(f)===f?f:f?.toFixed(5)} ${i3.units?i3.units:""}`,r.width-100,r.height*(m+.2)/e.nLines),n.fillText(`${Math.floor(g)===g?g:g?.toFixed(5)} ${i3.units?i3.units:""}`,r.width-100,r.height*(m+.9)/e.nLines)}o++}return requestAnimationFrame(h.anim),this.plots[e._id]}deinitPlot(e){return typeof e=="string"&&(e=this.plots[e]),e.plot.clear(),e.plot.removeAllLines(),true}reinitPlot(e,t3){if(typeof e=="string"){let s=e;e=this.plots[e],t3._id||(t3._id=s)}if(e.plot)return e.plot.clear(),e.plot.removeAllLines(),e.settings.overlayCtx&&e.settings.overlayCtx.clearRect(0,0,e.settings.overlay?.width,e.settings.overlay?.height),this.initPlot(t3,e.plot)}getChartSettings(e,t3){let s=this.plots[e];if(s){let h=Object.assign({},s.initial);for(let o in s.initial.lines)typeof s.initial.lines[o]?.ymax!="number"&&(h.lines[o].ymax=s.settings.lines[o]?.ymax),typeof s.initial.lines[o]?.ymin!="number"&&(h.lines[o].ymin=s.settings.lines[o]?.ymin),t3&&(h.lines[o].values=s.settings.lines[o].values);return delete h.canvas,delete h.overlay,delete h.overlayCtx,h}}update(e,t3,s=true){if(typeof e=="string"&&(e=this.plots[e]),!e)return false;if(t3){let h=false,o,a;typeof e.settings.overlay=="object"&&(o=e.settings.overlay,a=e.settings.overlayCtx,a.font=e.settings.overlayFont?e.settings.overlayFont:"1em Courier",a.fillStyle=e.settings.overlayColor?e.settings.overlayColor:"white");for(let r in t3)if(e.settings.lines[r]&&e.settings.lines[r].line){if(e.settings.lines[r]?.viewing===false)continue;let n=e.settings.lines[r];if(n.values){if(e.settings.mode&&e.settings.mode==="sweep"){"ct"in n||(n.ct=0);let f=b=>{n.ct>n.values.length&&(n.ct=0),n.values[n.ct]=b,n.ct++};Array.isArray(t3[r])?t3[r].forEach(f):typeof t3[r]=="number"?f(t3[r]):t3[r].values&&t3[r].values.forEach(f)}else Array.isArray(t3[r])&&n.values?.length<1e5?(n.values.length===0&&(n.values.length=n.points?n.points:1e3),t3[r].length===n.values.length?n.values=t3[r]:y2.circularBuffer(n.values,t3[r])):typeof t3[r]=="number"?(n.values.push(t3[r]),n.values.shift()):t3[r]?.values&&(n.values.length===0&&(n.values.length=n.points?n.points:1e3),t3[r].values.length===n.values.length?n.values=t3[r].values:y2.circularBuffer(n.values,t3[r].values));n.values.length!==n.points&&(n.interpolate?n.values.length>n.points?n.values=y2.downsample(n.values,n.points):n.scaled.length<n.points&&(n.values=y2.upsample(n.values,n.points)):n.values.length>n.points?n.values.splice(0,n.values.length-n.points):n.values=new Array(n.points).fill(0).splice(n.points-n.values.length,0,n.values));let l=n.ymin,i3=n.ymax,u3=n.values.length<=1e5;if(l===i3?(i3=u3?Math.max(...n.values):1,l=u3?Math.min(...n.values):0):isNaN(i3)&&(i3=u3?Math.max(...n.values):1),isNaN(l)&&(l=u3?Math.min(...n.values):0),l>i3){let f=l;i3=l,l=f}let g=Math.abs(l);if(n.absmax=g>i3?g:i3,n.autoscale?n.autoscale===2?n.scaled=y2.autoscale(n.values,n.position,e.settings.nLines,n.centerZero,l,i3,n.clamp):(n.scaled=n.values,n.line.scaleY=y2.getYScalar(n.values,e.settings.nLines,n.centerZero,l,i3),n.line.offsetY=y2.getYOffset(n.position,e.settings.nLines,l,n.line.scaleY)):n.scaled=n.values,n.scaled.forEach((f,b)=>{!n.autoscale&&n.absmax>1?n.line.setY(b,f/n.absmax):n.line.setY(b,f)}),typeof e.settings.overlay=="object"&&(n.useOverlay||!("useOverlay"in n))){let f=e.settings.nLines-n.position-1,b=o.height*f/e.settings.nLines,w=o.height/e.settings.nLines;if(a.clearRect(0,b,o.width,w),e.settings.mode&&e.settings.mode==="sweep"){a.fillStyle=e.settings.sweepColor?e.settings.sweepColor:"rgba(0,255,0,0.25)",a.beginPath();let m=o.width*n.ct/n.values.length;a.moveTo(m,b),a.lineTo(m,w),a.stroke()}a.fillStyle=e.settings.overlayColor?e.settings.overlayColor:"white",a.fillText(r,20,o.height*(f+.2)/e.settings.nLines),a.fillText(`${Math.floor(i3)===i3?i3:i3?.toFixed(5)} ${n.units?n.units:""}`,o.width-100,o.height*(f+.2)/e.settings.nLines),a.fillText(`${Math.floor(l)===l?l:l?.toFixed(5)} ${n.units?n.units:""}`,o.width-100,o.height*(f+.9)/e.settings.nLines)}}}else e.settings.generateNewLines&&!r.includes("timestamp")&&(Array.isArray(t3[r])&&(t3[r]={values:t3[r]}),!t3[r].nSec&&!t3[r].nPoints&&!e.settings.linePoints&&(t3[r].nPoints=1e3),h=true);if(h)return e.settings.cleanGeneration||Object.keys(e.initial.lines).forEach(r=>{t3[r]?t3[r]=Object.assign(e.initial.lines[r],t3[r]):t3[r]=e.initial.lines[r]}),this.reinitPlot(e,{_id:e.settings._id,lines:t3}),true}return s&&requestAnimationFrame(e.anim),true}updateLine(e,t3,s,h,o,a,r){return e.numPoints!==t3.length&&(s?e.numPoints>t3.length?t3=y2.downsample(t3,e.numPoints):e.numPoints<t3.length&&(t3=y2.upsample(t3,e.numPoints)):t3.length>e.numPoints?t3=t3.slice(t3.length-e.numPoints):t3=[...new Array(t3.length).fill(0),...t3]),h&&(t3=y2.autoscale(t3,o,a,r)),t3.forEach((n,l)=>e.setY(l,n)),true}static autoscale(e,t3=0,s=1,h=false,o,a,r){if(e?.length===0)return e;let n=typeof a=="number"?a:e.length<=1e5?Math.max(...e):1,l=typeof o=="number"?o:e.length<=1e5?Math.min(...e):0,i3=1/s,u3=1;if(h){let g=Math.max(Math.abs(l),Math.abs(n));return g!==0&&(u3=i3/g),e.map(f=>(r&&(f<l&&(f=l),f>n&&(f=n)),f*u3+(i3*(t3+1)*2-1-i3)))}else return n===l?n!==0?u3=i3/n:l!==0&&(u3=i3/Math.abs(l)):u3=i3/(n-l),e.map(g=>(r&&(g<l&&(g=l),g>n&&(g=n)),2*((g-l)*u3-1/(2*s))+(i3*(t3+1)*2-1-i3)))}static getYScalar(e,t3=1,s=false,h,o){if(e?.length===0)return e;let a=typeof o=="number"?o:e.length<=1e5?Math.max(...e):1,r=typeof h=="number"?h:e.length<=1e5?Math.min(...e):0,n=1/t3,l=1;if(s){let i3=Math.max(Math.abs(r),Math.abs(a));return i3!==0&&(l=n/i3),2*l}else return a===r?a!==0?l=n/a:r!==0&&(l=n/Math.abs(r)):l=n/(a-r),2*l}static getYOffset(e=0,t3=1,s=0,h=1){let o=1/t3,a=o*(e+1)*2-1-o;return s!==0?a-=s*h+1/t3:a-=h+1/t3,a}static absmax(e){return Math.max(Math.abs(Math.min(...e)),Math.max(...e))}static downsample(e,t3,s=1){if(e.length>t3){let h=new Array(t3),o=e.length/t3,a=e.length-1,r=0,n=0;for(let l=o;l<e.length;l+=o){let i3=Math.round(l);i3>a&&(i3=a);for(let u3=r;u3<i3;u3++)h[n]+=e[u3];h[n]/=(i3-r)*s,n++,r=i3}return h}else return e}static upsample(e,t3,s=1){var h=function(g,f,b){return(g+(f-g)*b)*s},o=new Array(t3),a=(e.length-1)/(t3-1);o[0]=e[0];for(var r=1;r<t3-1;r++){var n=r*a,l=Math.floor(n),i3=Math.ceil(n),u3=n-l;o[r]=h(e[l],e[i3],u3)}return o[t3-1]=e[e.length-1],o}static interpolate(e,t3,s=1){return e.length>t3?y2.downsample(e,t3,s):e.length<t3?y2.upsample(e,t3,s):e}static HSLToRGB(e,t3,s,h=255){t3/=100,s/=100;let o=(1-Math.abs(2*s-1))*t3,a=o*(1-Math.abs(e/60%2-1)),r=s-o/2,n=0,l=0,i3=0;return 0<=e&&e<60?(n=o,l=a,i3=0):60<=e&&e<120?(n=a,l=o,i3=0):120<=e&&e<180?(n=0,l=o,i3=a):180<=e&&e<240?(n=0,l=a,i3=o):240<=e&&e<300?(n=a,l=0,i3=o):300<=e&&e<360&&(n=o,l=0,i3=a),n=(n+r)*h,l=(l+r)*h,i3=(i3+r)*h,[n,l,i3]}static circularBuffer(e,t3){if(t3.length<e.length){let s=e.slice(t3.length),h=e.length;e.splice(0,h,...s,...t3)}else if(t3.length>e.length){let s=e.length;e.splice(0,s,...t3.slice(t3.length-s))}else e.splice(0,e.length,...t3);return e}static formatDataForCharts(e,t3){if(Array.isArray(e)){if(Array.isArray(e[0])){let s={};if(e.forEach((h,o)=>{s[o]=h}),e=s,isNaN(e[0][0]))return}else if(t3){if(e={[t3]:e},isNaN(e[t3][0]))return}else if(e={0:e},isNaN(e[0][0]))return}else if(typeof e=="object"){for(let s in e)if(typeof e[s]=="number"?e[s]=[e[s]]:e[s]?.values&&typeof e[s].values=="number"&&(e[s].values=[e[s].values]),isNaN(e[s][0]))return}else if(typeof e=="string"){let s;if(e.includes(`\\r\n`)){let h=e.split(`\\r\n`);e={},h.forEach((o,a)=>{o.includes("	")?s=o.split("	"):o.includes(",")?s=o.split(","):o.includes("|")&&(s=o.split("|")),s&&s.forEach((r,n)=>{if(r.includes(":")){let[l,i3]=r.split(":"),u3=parseFloat(i3);isNaN(u3)||(e[l]=[u3])}else{let l=parseFloat(r);isNaN(l)||(e[n]=[l])}})})}else e.includes("	")?s=e.split("	"):e.includes(",")?s=e.split(","):e.includes("|")&&(s=e.split("|"));e={},s&&s.forEach((h,o)=>{if(h.includes(":")){let[a,r]=h.split(":"),n=parseFloat(r);isNaN(n)||(e[a]=[n])}else{let a=parseFloat(h);isNaN(a)||(e[o]=[a])}})}else typeof e=="number"&&(t3?e={[t3]:[e]}:e={0:[e]});return e}static padTime(e,t3,s,h){let o=(e[0]-t3)/s/h;return[...new Array(h-e.length).map((r,n)=>t3+o*(n+1)),...e]}static interpolateForTime(e,t3,s){return y2.interpolate(e,Math.ceil(s*t3))}};var webglPlotRoutes={setupChart:function setupChart(settings){console.log("initializing chart",settings);if(!this?.__node?.graph?.plotter){this.__node.graph.plotter=new y2;return this.__node.graph.plotter.initPlot(settings).settings._id}else{globalThis.plotter=new y2;return globalThis.plotter.initPlot(settings).settings._id}},updateChartData:function updateChartData(plot,lines,draw=true){if(typeof lines==="object"){if(globalThis.plotter)globalThis.plotter.update(plot,lines,draw);else if(this?.__node?.graph?.plotter)this.__node.graph.plotter.update(plot,lines,draw);return true}return false},clearChart:function clearChart(plot){if(globalThis.plotter)globalThis.plotter.deinitPlot(plot);else if(this?.__node?.graph?.plotter)this.__node.graph.plotter.deinitPlot(plot);return true},resetChart:function resetChart(plot,settings){if(globalThis.plotter)globalThis.plotter.reinitPlot(plot,settings);else if(this?.__node?.graph?.plotter)this.__node.graph.plotter.reinitPlot(plot,settings);return settings._id},getChartSettings:function getChartSettings(plotId){let settings;if(globalThis.plotter)settings=globalThis.plotter.getChartSettings(plotId);else if(this?.__node?.graph?.plotter)settings=this.__node.graph.plotter.getChartSettings(plotId);return settings}};var __defProp22=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp22(obj,key,{enumerable:true,configurable:true,writable:true,value}):obj[key]=value;var __publicField=(obj,key,value)=>{__defNormalProp(obj,typeof key!=="symbol"?key+"":key,value);return value};var _Math2=class{constructor(){}static genSineWave(freq=20,peakAmp=1,nSec=1,fs3=512,freq2=0,peakAmp2=1){var sineWave=[];var t3=[];var increment=1/fs3;for(var ti=0;ti<nSec;ti+=increment){var amplitude=Math.sin(2*Math.PI*freq*ti)*peakAmp;amplitude+=Math.sin(2*Math.PI*freq2*ti)*peakAmp2;sineWave.push(amplitude);t3.push(ti)}return[t3,sineWave]}static getSineAmplitude(frequency=20,peakAmplitude=1,ti=0,tOffset=0){return Math.sin(this.TWO_PI*frequency*ti+tOffset)*peakAmplitude}static mean(arr){var sum=arr.reduce((prev,curr)=>curr+=prev);return sum/arr.length}static mode(arr){return arr.sort((a,b)=>arr.filter(v2=>v2===a).length-arr.filter(v2=>v2===b).length).pop()}static std(arr,mean=void 0){let avg=mean;if(!mean)avg=this.mean(arr);let summed=0;for(let i3=0;i3<arr.length;i3++){let subbed=arr[i3]-avg;summed+=subbed*subbed}return Math.sqrt(summed/arr.length)}static relError(actual=[],forecast=[],abs=true){if(actual.length!==forecast.length)throw new Error("Input arrays of same length!");let i3=actual.length;let d2=new Array(actual.length);for(let j=0;j<i3;j++){let dd=(actual[j]-forecast[j])/actual[j];if(abs)dd=Math.abs(dd);d2[j]=dd}return d2}static informationEntropy(probabilities=[]){let len=probabilities.length;let entropy=new Array(len);for(let i3=0;i3<len;i3++){let ent=probabilities[i3]*Math.log(probabilities[i3]);if(isNaN(ent))ent=0;entropy[i3]=ent}return entropy}static zscore(arr){let mean=this.mean(arr);let std=this.std(arr,mean);let z3=new Array().length(arr.length);for(let i3=0;i3<arr.length;i3++){z3[i3]=(arr[i3]-mean)/std}return z3}static variance(arr){var mean=this.mean(arr);return arr.reduce((a,b)=>a+(b-mean)**2,0)/arr.length}static dot(vec1,vec2){var dot=0;for(var i3=0;i3<vec1.length;i3++){dot+=vec1[i3]*vec2[i3]}return dot}static cross3D(vec1,vec2){return[vec1[1]*vec2[2]-vec1[2]*vec2[1],vec1[2]*vec2[0]-vec1[0]*vec2[2],vec1[0]*vec2[1]-vec1[1]*vec2[0]]}static magnitude(vec){var sqrd=0;vec.forEach(c=>{sqrd+=c*c});return Math.sqrt(sqrd)}static distance(point1,point2){var dsqrd=0;point1.forEach((c,i3)=>{dsqrd+=(point2[i3]-c)*(point2[i3]-c)});return Math.sqrt(dsqrd)}static midpoint(point1=[1,2,3],point2=[3,4,5]){return point1.map((c,i3)=>{return(c+point2[i3])*.5})}static normalize(vec){var norm=0;norm=this.magnitude(vec);var vecn=new Array(vec.length);vec.forEach((c,i3)=>{vecn[i3]=c*norm});return vecn}static normalizeSeries(arr=[],fromZero=true){let max=Math.max(...arr);let min=Math.min(...arr);if(fromZero==false){max=Math.max(max,Math.abs(min));min=0}if(max-min===0){min=0;if(max===0)max=1e-13}return arr.map(v2=>(v2-min)/(max-min))}static quadraticFormula(a,b,c){let bbmac4=Math.sqrt(b*b-4*a*c);if(!isNaN(bbmac4))return["complex","complex"];let _a2=1/(2*a);if(bbmac4===0)return[b*_a2];let nb=-b;return[(nb+bbmac4)*_a2,(nb-bbmac4)*_a2]}static newtonsMethod(foo=x22=>{return Math.pow(x22,5)+x22*x22-x22-.2},start=0,end=1,precision=.01,attempts=10){let roots=[];for(let i3=0;i3<attempts;i3++){let seedx=Math.random()*(end-start);let guess=foo(seedx);let guess2=foo(seedx+precision);let slope=(guess2-guess)/precision;let xn=seedx+precision;while(Math.abs(slope)>precision){let step=-guess/slope2;let xn12=xn+step;guess=guess2;guess2=foo(xn12);let slope2=(guess2-guess)/(xn12-xn)}let idx;let f=roots.find((root,i22)=>{if(Math.abs(xn1-root)<precision){idx=i22;return true}});if(f)roots[idx]=(xn1+f)*.5;else roots.push(xn1)}return roots}static makeVec(point1,point2){var vec=[];point1.forEach((c,i3)=>{vec.push(point2[i3]-c)});return vec}static getBufferedValueByCoordinates(vb=new Array(300).fill(1),dims=[10,10,2],coordinate=[1,2,1],cardinal=void 0){let getIdx=(foundIdx=0,dimIdx=0)=>{if(dimIdx===dims.length)return foundIdx;if(dimIdx==0)foundIdx+=coordinate[dimIdx];else if(dims[dimIdx]==0)dimsAt0++;else{let reMul=(val=coordinate[dimIdx],di=dimIdx-1)=>{val*=dims[di];di--;if(di==0)return val;else return reMul(val,di)};foundIdx+=reMul(coordinate[dimIdx]+1,dimIdx-1)}dimIdx++;return getIdx(foundIdx,dimIdx)};let found=getIdx();if(cardinal){if(coordinate[coordinate.length-1]===0){let lastnonzero=0;let idx=0;while(idx!==coordinate.length-1){if(coordinate[idx]!==0)lastnonzero=idx;idx++}return vb[found-lastnonzero+cardinal]}return vb[found-dims.length+cardinal]}else{if(coordinate[coordinate.length-1]===0){let lastnonzero=0;let idx=0;while(idx!==coordinate.length-1){if(coordinate[idx]!==0)lastnonzero=idx;idx++}return vb.slice(found-lastnonzero,found+1)}return vb.slice(found-dims.length,found+1)}}static forBufferedMat(vb=new Array(100).fill(1),dims=[10,10],asIndex=(v2,i3,x22,y22)=>{return v2+x22+y22}){let coordinate=[];let idx=0;let recurseFor=(depth=0,nextDepth=depth+1)=>{let result=new Array(vb.length);for(let di=0;di<dims[depth];di++){coordinate[depth]=di;if(dims[nextDepth])recurseFor(nextDepth);else{result[idx]=asIndex(vb[idx],idx,...coordinate);idx++}}return result};let recurseForArrFuncs=(depth,nextDepth=depth+1)=>{let result=new Array(vb.length);for(let di=0;di<dims[depth];di++){coordinate[depth]=di;if(dims[nextDepth])recurseFor(nextDepth);else{for(let dj=0;dj<dims.length;dj++){result[idx]=asIndex[dj](vb[idx],idx,...coordinate);idx++}}}return result};if(typeof asIndex==="function"){return recurseFor()}else if(Array.isArray(asIndex)){return recurseForArrFuncs()}}static mapBufferedMat(buffer=new Array(100).fill(1),dimensions=[10,10],asIndex=(v2,idx,i3,j)=>{console.log(`value:${v2}, idx:${idx}, x:${i3},y:${j}`);return v2+i3+j}){let coordinate=new Array(dimensions.length).fill(0);const iterateCoordinate=(coord,idx=0)=>{if(coord[idx]>=dimensions[idx]){coord[idx]=0;idx++;if(idx===dimensions.length)return;iterateCoordinate(coord,idx)}else coord[idx]++};let result=new Array(buffer.length);let i3=0;if(typeof asIndex==="function"){while(i3<buffer.length){result[i3]=asIndex(buffer[i3],i3,...coordinate);i3+=dimensions.length;iterateCoordinate(coordinate)}}else if(Array.isArray(asIndex)){while(i3<buffer.length){asIndex.forEach(func=>{result[i3]=func(buffer[i3],i3,...coordinate);i3++;iterateCoordinate(coordinate)})}}return result}static combinations(choices=["a","b","c"],vecsize=3){var result=[];if(vecsize<=0){result.push([])}else{_Math2.combinations(choices,vecsize-1).forEach(function(previousComb){choices.forEach(function(element){result.push([element].concat(previousComb))})})}return result}static generateCoordinateSpace(upperBounds=[10,10,10],lowerBounds=[-10,-10,-10],steps=[1,1,1],mutater=void 0){for(let i3=0;i3<upperBounds.length;i3++){if(lowerBounds[i3]>upperBounds[i3]){let temp=upperBounds[i3];upperBounds[i3]=lowerBounds[i3];lowerBounds[i3]=temp}}let result=[];let copy=[...upperBounds];let lastindex=copy.length-1;result.push([...copy]);while(copy[0]>=lowerBounds[0]){let checkNextIndex=decrIdx2=>{if(copy[decrIdx2]<=lowerBounds[decrIdx2]){if(decrIdx2===0)return;copy[decrIdx2]=upperBounds[decrIdx2];decrIdx2--;if(decrIdx2<0)return;if(typeof steps[decrIdx2]=="function")copy[decrIdx2]-=steps[decrIdx2](copy[decrIdx2]);else copy[decrIdx2]-=steps[decrIdx2];checkNextIndex(decrIdx2)}};let decrIdx=lastindex;if(typeof steps[decrIdx]=="function")copy[decrIdx]-=steps[decrIdx](copy[decrIdx]);else copy[decrIdx]-=steps[decrIdx];result.push([...copy]);checkNextIndex(decrIdx);if(mutater)result[result.length-1]=mutater(result[result.length-1])}return result}static calcVectorField(coordinates=[[0,0],[0,1],[1,0],[1,1]],formula=(x22,y22)=>{return[x22*10,y22*10]}){return coordinates.map(vec=>formula(...vec))}static transpose(mat){return mat[0].map((_,colIndex)=>mat.map(row=>row[colIndex]))}static matmul(a,b){var aNumRows=a.length,aNumCols=a[0].length,bNumRows=b.length,bNumCols=b[0].length,m=new Array(aNumRows);for(var r=0;r<aNumRows;++r){m[r]=new Array(bNumCols);for(var c=0;c<bNumCols;++c){m[r][c]=0;for(var i3=0;i3<aNumCols;++i3){m[r][c]+=a[r][i3]*b[i3][c]}}}return m}static matscale(mat,scalar){let m=[];for(var i3=0;i3<mat.length;i3++){m[i3]=[];for(let j=0;j<mat[0].length;j++){m[i3][j]=mat[i3][j]*scalar}}return m}static matadd(a,b){let m=[];for(let i3=0;i3<a.length;i3++){m[i3]=[];for(var j=0;j<a[0].length;j++){m[i3][j]=a[i3][j]+b[i3][j]}}return m}static matsub(a,b){let m=[];for(let i3=0;i3<a.length;i3++){m[i3]=[];for(var j=0;j<a[0].length;j++){m[i3][j]=a[i3][j]-b[i3][j]}}return m}static histogram(arr=[],binSize=1,nBins=void 0){let copy=[...arr];copy.sort(function(a,b){return a-b});let binStart=Math.min(...copy);if(typeof nBins==="number"){let binEnd=Math.max(...copy);binSize=Math.abs((binEnd-binStart)/(nBins-1))}let j=binStart;let binx=[];let biny=[];for(let i3=0;i3<copy.length;i3++){let binidx=binSize*j;if(copy[i3]>binStart+binidx){j++;binidx+=binSize;let binmin=binStart+binidx;let binmid=binmin+binidx*.5;binx.push(binmid);biny.push(0)}biny[biny.length-1]++}return[binx,biny]}static normalDistribution(samples=[],normalize=true,cutoff=1e-4){let m=this.mean(samples);let vari=this.variance(samples);let nSamples=samples.length;let probabilities=[];let denom=1/(this.TWO_PI*vari);let _variance=1/vari;let sum=0;for(let i3=0;i3<nSamples;i3++){let px=Math.exp(-.5*Math.pow((samples[i3]-m)*_variance,2))*denom;if(px<cutoff)px=0;probabilities.push(px);sum+=px}if(normalize){let _sum=1/sum;probabilities=probabilities.map(x22=>x22*_sum)}return probabilities}static expectedValue(samples=[],probabilities=this.normalDistribution(samples)){return samples.reduce((sum,item,idx)=>sum+item*probabilities[idx])}static originMoment(samples=[],probabilities=this.normalDistribution(samples),order=1){return samples.reduce((sum,item,idx)=>sum+Math.pow(item,order)*probabilities[idx])}static centralMoment(samples=[],probabilities=this.normalDistribution(samples),order=1){let m=this.mean(samples);return samples.reduce((sum,item,idx)=>sum+Math.pow(item-m,order)*probabilities[idx]/samples.length)}static linearDiscriminantAnalysis(samples=[],classifier=[]){let mean=this.mean(samples);let meank=this.mean(classifier);let covariance=this.cov1d(samples,classifier);let probs=this.normalDistribution(samples);let dk=[];for(let i3=0;i3<samples.length;i3++){dk.push(x[i3]*covariance*meank-.5*mean*covariance*meank+Math.log10(probs[i3]))}return dk}static conv1D(arr=[],kern=[1/3,1/3,1/3],pad=Math.floor(kern.length*.5)){let result=[];let _n=1/kern.length;if(pad>0){let pads=new Array(pad).fill(0);arr=[...pads,...arr,...pads]}let start=Math.floor(kern.length*.5);let end=arr.length-kern.length+start;for(let i3=start;i3<end;i3++){let acc=0;for(let j=0;j<kern.length;j++){acc+=arr[i3-start]*kern[j]}result.push(acc*_n)}return result}static conv2D(mat=[[],[],[]],kern=[[],[],[]],pad=0){let result=new Array(mat.length-Math.ceil(kern.length*.5)).fill([]);let mat_t;let kern_t=_Math2.transpose(kern_t);if(pad>0){let pads=new Array(pad).fill(0);mat_t=_Math2.transpose(mat);for(let i22=0;i22<mat_t.length;i22++){mat_t[i22]=[...pads,...mat_t[i22],...pads]}mat=_Math2.transpose(mat_t);for(let j=0;j<mat.length;j++){mat[j]=[...pads,...mat[j],...pads]}}let startr=Math.floor(kern[0].length*.5);let startl=Math.floor(kern_t[0].length*.5);let endr=mat[0].length-kern[0].length+startr;let endl=mat_t[0].length-kern_t[0].length+startl;let _n=1/(kern[0].length*kern_t[0].length);let iters=endr*endl;let i3=startr;let x22;let y22=startl;while(i3<iters){let acc=0;x22=i3%mat[0].length;if(x22===0){y22++}for(let j=0;j<kern[0].length;j++){for(let k=0;k<kern_t[0].length;j++){acc+=mat[y22-startl+k][x22-startr+j]*kern[k][j]}result[y22].push(acc*_n)}i3++}return result}static cov2d(mat){var mattransposed=this.transpose(mat);var matproducts=[];var rowmeans=[];var colmeans=[];mat.forEach((row,idx)=>{rowmeans.push(this.mean(row))});mattransposed.forEach((col,idx)=>{colmeans.push(this.mean(col))});mat.forEach((row,idx)=>{matproducts.push([]);for(var col=0;col<row.length;col++){matproducts[idx].push((mat[idx][col]-rowmeans[idx])*(mat[idx][col]-colmeans[col])/(row.length-1))}});var matproductstransposed=this.transpose(matproducts);var aNumRows=matproducts.length,aNumCols=matproducts[0].length,bNumRows=matproductstransposed.length,bNumCols=matproductstransposed[0].length,m=new Array(aNumRows);for(var r=0;r<aNumRows;++r){m[r]=new Array(bNumCols);for(var c=0;c<bNumCols;++c){m[r][c]=0;for(var i3=0;i3<aNumCols;++i3){m[r][c]+=matproducts[r][i3]*matproductstransposed[i3][c]/(mat[0].length-1)}}}return m}static cov1d(arr1=[],arr2=[]){return this.cov2d([arr1,arr2])}static cov3d(x22=[],y22=[],z3=[]){return[[this.cov1d(x22,x22),this.cov1d(x22,y22),this.cov1d(x22,z3)],[this.cov1d(y22,x22),this.cov1d(y22,y22),this.cov1d(y22,z3)],[this.cov1d(z3,x22),this.cov1d(z3,y22),this.cov1d(z3,z3)]]}static covNd(dimensionalData=[]){let covariance=[];dimensionalData.forEach((arr,i3)=>{covariance.push([]);dimensionalData.forEach((arr2,j)=>{covariance[i3].push(this.cov1d(arr,arr2))})})}static eigens2x2(mat=[[1,2],[3,4]]){let det=mat[0][0]*mat[1][1]-mat[0][1]*mat[1][0];let mean=(mat[0][0]+mat[1][1])*.5;let sqrt=Math.sqrt(mean*mean-det);let eig1=mean+sqrt;let eig2=mean-sqrt;return[eig1,eig2]}static eigenvectors2x2(mat=[[1,2],[3,4]],eigens=[1,2]){let v1=[-mat[0][1],mat[0][0]-eigens[0]];if(v1[0]===0&&v1[1]===0){v1[0]=mat[1][1]-eigens[0];v1[1]=-mat[1][0]}let v2=[-mat[0][1],mat[0][0]-eigens[1]];if(v2[0]===0&&v2[1]===0){v2[0]=mat[1][1]-eigens[1];v2[1]=-mat[1][0]}return[v1,v2]}static fastpca2d(xarr,yarr){let cov1d=this.cov1d(xarr,yarr);let eigs=this.eigens2x2(cov1d);if(eigs[1]>eigs[0])eigs.reverse();let evs=this.eigenvectors2x2(cov1d,eigs);console.log(eigs,evs);return[eigs,evs]}static crosscorrelation(arr1,arr2){var arr2buf=[...arr2,...Array(arr2.length).fill(0)];var mean1=this.mean(arr1);var mean2=this.mean(arr2);var arr1Est=arr1.reduce((sum,item)=>sum+=Math.pow(item-mean1,2));arr1Est=Math.sqrt(Math.abs(arr1Est));var arr2Est2=arr2.reduce((sum,item)=>sum+=Math.pow(item-mean1,2));arr2Est2=Math.sqrt(Math.abs(arr2Est2));let denom=arr1Est*arr2Est2;if(denom===0)denom=1e-26;var _arrEstsMul=1/denom;var correlations=new Array(arr1.length).fill(0);for(var delay=0;delay<arr1.length;delay++){var r=arr1.reduce((sum,item,i3)=>sum+=(item-mean1)*(arr2buf[delay+i3]-mean2));correlations[delay]=r*_arrEstsMul}return correlations}static autocorrelation(arr1){var delaybuf=[...arr1,...Array(arr1.length).fill(0)];var mean1=this.mean(arr1);var arr1Est=arr1.reduce((sum,item)=>sum+=Math.pow(item-mean1,2));arr1Est=Math.sqrt(Math.abs(arr1Est));let denom=arr1Est*arr2Est;if(denom===0)denom=1e-26;var _arr1estsqrd=1/denom;var correlations=new Array(arr1.length).fill(0);for(var delay=0;delay<arr1.length;delay++){var r=arr1.reduce((sum,item,i3)=>sum+=(item-mean1)*(delaybuf[delay+i3]-mean1));correlations[delay]=r*_arr1estsqrd}return correlations}static autocorrelation2dNormalized(mat2d2){let result=[];for(let y22=0;y22<mat2d2.length;y22++){result.push([]);for(let x22=0;x22<mat2d2[y22].length;x22++){let G3=0;let _G=0;for(let b=0;b<mat2d2.length;b++){for(let a=0;a<mat2d2[b].length;a++){G3+=mat2d2[y22][x22]*mat2d2[mat2d2.length-1-b][mat2d2[y22].length-1-a];_G+=mat2d2[y22][x22]*mat2d2[mat2d2.length-1][mat2d2[y22].length-1]}}result[y22][x22]=G3/_G-1}}return result}static crosscorrelation2d(mat2d1,mat2d2){let result=[];for(let y22=0;y22<mat2d1.length;y22++){result.push([]);for(let x22=0;x22<mat2d1[y22].length;x22++){let G3=0;for(let b=0;b<mat2d2.length;b++){for(let a=0;a<mat2d2[b].length;a++){G3+=mat2d1[y22][x22]*mat2d2[mat2d2.length-1-b][mat2d2[y22].length-1-a]}}result[y22][x22]=G3}}return result}static crosscorrelation2dNormalized(mat2d1,mat2d2){let result=[];for(let y22=0;y22<mat2d1.length;y22++){result.push([]);for(let x22=0;x22<mat2d1[y22].length;x22++){let G3=0;let _G=0;for(let b=0;b<mat2d2.length;b++){for(let a=0;a<mat2d2[b].length;a++){G3+=mat2d1[y22][x22]*mat2d2[mat2d.length-1-b][mat2d2[y22].length-1-a];_G+=mat2d1[y22][x22]*mat2d2[mat2d2.length-1][mat2d2[y22].length-1]}}result[y22][x22]=G3/_G-1}}return result}static correlograms(dat=[[],[]]){var correlograms=[];dat.forEach((row1,i3)=>{dat.forEach((row2,j)=>{if(j>=i3){correlograms.push(_Math2.crosscorrelation(row1,row2))}})});return correlograms}static dft(sineWave=[]){var TWOPI=2*3.141592653589793;var real=[];var imag=[];var mags=[];for(var k=0;k<sineWave.length;k++){real.push(0);imag.push(0);for(var j=0;j<sineWave.length;j++){var shared=TWOPI*k*j/sineWave.length;real[k]=real[k]+sineWave[j]*Math.cos(shared);imag[k]=imag[k]-sineWave[j]*Math.sin(shared)}mags.push(Math.sqrt(real[k]*real[k]+imag[k]*imag[k]))}function orderMagnitudes(unorderedMags){return[...unorderedMags.slice(Math.ceil(unorderedMags.length*.5),unorderedMags.length),...unorderedMags.slice(0,Math.ceil(unorderedMags.length*.5))]}mags=orderMagnitudes(mags);let halflen=mags.length*.5;let freqs=mags.map((m,i3)=>{return i3-halflen});return{real,imag,freqs,mags}}static sma(arr=[],window2){var smaArr=[];for(var i3=0;i3<arr.length;i3++){if(i3==0){smaArr.push(arr[0])}else if(i3<window2){var arrslice=arr.slice(0,i3+1);smaArr.push(arrslice.reduce((previous,current)=>current+=previous)/(i3+1))}else{var arrslice=arr.slice(i3-window2,i3);smaArr.push(arrslice.reduce((previous,current)=>current+=previous)/window2)}}return smaArr}static sum(arr=[]){if(arr.length>0){var sum=arr.reduce((prev,curr)=>curr+=prev);return sum}else{return 0}}static reduceArrByFactor(arr,factor=2){let x22=arr.filter((element,index)=>{return index%factor===0});return x22}static makeArr(startValue,stopValue,nSteps){var arr=[];var step=(stopValue-startValue)/(nSteps-1);for(var i3=0;i3<nSteps;i3++){arr.push(startValue+step*i3)}return arr}static autoscale(array,stackedLines=1,stackPosition=0,centerZero=false){if(array?.length===0)return array;let max=Math.max(...array);let min=Math.min(...array);let _lines=1/stackedLines;let scalar;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));scalar=_lines/absmax;return array.map(y22=>y22*scalar+(_lines*(stackPosition+1)*2-1-_lines))}else{scalar=_lines/(max-min);return array.map(y22=>2*((y22-min)*scalar-1/(2*stackedLines))+(_lines*(stackPosition+1)*2-1-_lines))}}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i3=incr;i3<array.length;i3+=incr){let rounded=Math.round(i3);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static interpolateArray(data,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array;var springFactor=(data.length-1)/(fitCount-1);newData[0]=data[0];for(var i3=1;i3<fitCount-1;i3++){var tmp=i3*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i3]=linearInterpolate(data[before],data[after],atPoint)}newData[fitCount-1]=data[data.length-1];return newData}static isExtrema(arr,critical="peak"){let ref=[...arr];if(ref.length%2===0)ref.pop();if(arr.length>1){let pass=true;for(let i3=0;i3<ref.length;i3++){let val=ref[i3];if(critical==="peak"){if(i3<Math.floor(ref.length*.5)&&val>=ref[Math.floor(ref.length*.5)]){pass=false;break}else if(i3>Math.floor(ref.length*.5)&&val>=ref[Math.floor(ref.length*.5)]){pass=false;break}}else if(critical==="valley"){if(i3<Math.floor(ref.length*.5)&&val<=ref[Math.floor(ref.length*.5)]){pass=false;break}else if(i3>Math.floor(ref.length*.5)&&val<=ref[Math.floor(ref.length*.5)]){pass=false;break}}else{if(i3<Math.floor(ref.length*.5)&&val<=ref[Math.floor(ref.length*.5)]){pass=false;break}else if(i3>Math.floor(ref.length*.5)&&val<=ref[Math.floor(ref.length*.5)]){pass=false;break}}}if(critical!=="peak"&&critical!=="valley"&&pass===false){pass=true;for(let i3=0;i3<ref.length;i3++){let val=ref[i3];if(i3<Math.floor(ref.length*.5)&&val>=ref[Math.floor(ref.length*.5)]){pass=false;break}else if(i3>Math.floor(ref.length*.5)&&val>=ref[Math.floor(ref.length*.5)]){pass=false;break}}}return pass}else return void 0}static isCriticalPoint(arr,critical="peak"){let ref=[...arr];if(ref.length%2===0)ref.pop();if(arr.length>1){let pass=true;for(let i3=0;i3<ref.length;i3++){let val=ref[i3];if(critical==="peak"){if(i3<ref.length*.5&&val<=0){pass=false;break}else if(i3>ref.length*.5&&val>0){pass=false;break}}else if(critical==="valley"){if(i3<ref.length*.5&&val>=0){pass=false;break}else if(i3>ref.length*.5&&val<0){pass=false;break}}else{if(i3<ref.length*.5&&val>=0){pass=false;break}else if(i3>ref.length*.5&&val<0){pass=false;break}}}if(critical!=="peak"&&critical!=="valley"&&pass===false){pass=true;for(let i3=0;i3<ref.length;i3++){let val=ref[i3];if(i3<ref.length*.5&&val<=0){pass=false;break}else if(i3>ref.length*.5&&val>0){pass=false;break}}}return pass}else return void 0}static getPeakThreshold(arr,peakIndices,thresholdVar){let threshold;let filtered=arr.filter((o,i3)=>{if(peakIndices.indexOf(i3)>-1)return true});if(thresholdVar===0){threshold=this.mean(filtered)}else threshold=(thresholdVar+this.mean(filtered))*.5;return threshold}static column(mat,x22){let col=new Array(mat.length).fill(0).map(()=>new Array(1).fill(0));for(let i3=0;i3<mat.length;i3++){col[i3][0]=mat[i3][x22]}return col}static flatten_vector(v2){let v_new=[];for(let i3=0;i3<v2.length;i3++){v_new[i3]=v2[i3][0]}return v_new}static squared_difference(v1,v2){let sum=0;for(let i3=0;i3<v1.length;i3++){sum=sum+Math.pow(v1[i3]-v2[i3],2)}return sum}static shift_deflate(mat,eigenvalue,eigenvector){let len=Math.sqrt(this.matmul(this.transpose(eigenvector),eigenvector));let U=this.matscale(eigenvector,1/len);let delta=this.matscale(this.matmul(U,this.transpose(U)),eigenvalue);let M_new=this.matsub(mat,delta);return M_new}static eigenvalue_of_vector(mat,eigenvector){ev=this.matmul(this.matmul(this.transpose(eigenvector),mat),eigenvector);return ev}static power_iteration(mat,tolerance=1e-5,max_iterations=1e3){let rank=mat.length;let eigenvector=new Array(rank).fill(0).map(()=>new Array(1).fill(Math.sqrt(rank)));let eigenvalue=this.eigenvalue_of_vector(mat,eigenvector);let epsilon=1;let iter=0;while(epsilon>tolerance&&iter<max_iterations){let old_eigenvalue=JSON.parse(JSON.stringify(eigenvalue));let Mv=this.matmul(mat,eigenvector);eigenvector=this.normalize(Mv);eigenvalue=this.eigenvalue_of_vector(mat,eigenvector);epsilon=Math.abs(eigenvalue-old_eigenvalue);iter++};return[eigenvalue,eigenvector]}static eigens(mat,tolerance=1e-4,max_iterations=1e3){let eigenvalues=[];let eigenvectors=[];for(let i3=0;i3<mat.length;i3++){let result=this.power_iteration(mat,tolerance,max_iterations);let eigenvalue=result[0];let eigenvector=result[1];eigenvalues[i3]=eigenvalue;eigenvectors[i3]=this.flatten_vector(eigenvector);mat=this.shift_deflate(mat,eigenvalue,eigenvector)}return[eigenvalues,eigenvectors]}static pca(mat,tolerance=1e-5){let dims=mat.length;let t3=new Array(dims);let p2=new Array(dims);let mat_t=this.transpose(mat);t3[0]=this.column(mat,0);let epsilon=1;let iter=0;while(espilon>tolerance){iter++;p2[0]=this.matmul(mat_t,t3[0]);let tp=this.matmul(this.transpose(t3[0]),t3[0]);p2[0]=this.matscale(p2[0],1/tp);let p_length=Math.sqrt(this.matmul(this.transpose(p2[0]),p2[0]));p2[0]=this.matscale(p2[0],1/p_length);let t_new=this.matmul(mat,p2[0]);let pp=this.matmul(this.transpose(p2[0]),p2[0]);t_new=this.matscale(t_new,1/pp);epsilon=this.squared_difference(t3[0],t_new);t3[0]=JSON.parse(JSON.stringify(t_new))}let components=this.matmul(this.transpose(t3[0]),t3[0]);return components}static circularBuffer(arr,newEntries){if(Array.isArray(newEntries)){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}}else{arr.push(newEntries);arr.shift()}return arr}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x22=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x22;b=0}else if(60<=h&&h<120){r=x22;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x22}else if(180<=h&&h<240){r=0;g=x22;b=c}else if(240<=h&&h<300){r=x22;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x22}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static p300(event_timestamps=[],raw_signal=[],signal_timestamps=[],sps10=256){let smoothingstep=Math.floor(sps10/10);let smoothed=this.sma(raw_signal,smoothingstep);let peaks=this.peakDetect(smoothed,"peak",smoothingstep);let mean=this.mean(smoothed);let std=this.std(smoothed,mean);let p_idx=0;let candidates=[];if(peaks.length>0){event_timestamps.forEach((t3,j)=>{while(signal_timestamps[peaks[p_idx]]<t3+200){p_idx++;if(!peaks[p_idx])break}let tempi=0;let tempcandidates=[];while(signal_timestamps[peaks[p_idx+tempi]]<t3+600){tempcandidates.push(p_idx+tempi);tempi++;if(!peaks[p_idx+tempi])break}if(tempcandidates.length>1){let peakvals=[];tempcandidates.forEach(tc=>{peakvals.push(smoothed[peaks[tc]])});let max=Math.max(...peakvals);let maxi=tempcandidates[peakvals.indexOf(max)];candidates.push({event_timestamp:t3,event_index:j,peak_timestamp:signal_timestamps[[peaks[maxi]]],signal_index:[peaks[maxi]],signal_amplitude:raw_signal[[peaks[maxi]]],zscore:(smoothed[peaks[maxi]]-mean)/std})}else if(tempcandidates.length===1)candidates.push({event_timestamp:t3,event_index:j,peak_timestamp:signal_timestamps[peaks[tempcandidates[0]]],signal_index:peaks[tempcandidates[0]],signal_amplitude:raw_signal[[peaks[tempcandidates[0]]]],zscore:(smoothed[peaks[tempcandidates[0]]]-mean)/std})})}return candidates}};var Math2=_Math2;__publicField(Math2,"TWO_PI",Math.PI*2);__publicField(Math2,"C",299792458);__publicField(Math2,"G",66743e-15);__publicField(Math2,"h",662607015e-42);__publicField(Math2,"R",8314.32);__publicField(Math2,"Ra",287);__publicField(Math2,"H",69.3);__publicField(Math2,"kbar",1054571817e-43);__publicField(Math2,"kB",1380649e-29);__publicField(Math2,"ke",89875517923e-1);__publicField(Math2,"me",91093837015e-41);__publicField(Math2,"mp",167262192369e-38);__publicField(Math2,"mn",167492749804e-38);__publicField(Math2,"P0",101325);__publicField(Math2,"T0",288.15);__publicField(Math2,"p0",1.225);__publicField(Math2,"Na",60220978e16);__publicField(Math2,"y",1.405);__publicField(Math2,"M0",28.96643);__publicField(Math2,"g0",9.80665);__publicField(Math2,"Re",6378100);__publicField(Math2,"B",1458e-9);__publicField(Math2,"S",110.4);__publicField(Math2,"Sigma",365e-12);__publicField(Math2,"imgkernels",{edgeDetection:[[-1,-1,-1],[-1,8,-1],[-1,-1,-1]],boxBlur:[[1/9,1/9,1/9],[1/9,1/9,1/9],[1/9,1/9,1/9]],sobelLeft:[[1,0,-1],[2,0,-2],[1,0,-1]],sobelRight:[[-1,0,1],[-2,0,2],[-1,0,1]],sobelTop:[[1,2,1],[0,0,0],[-1,-2,-1]],sobelBottom:[[-1,2,1],[0,0,0],[1,2,1]],identity:[[0,0,0],[0,1,0],[0,0,0]],gaussian3x3:[[1,2,1],[2,4,2],[1,2,1]],guassian7x7:[[0,0,0,5,0,0,0],[0,5,18,32,18,5,0],[0,18,64,100,64,18,0],[5,32,100,100,100,32,5],[0,18,64,100,64,18,0],[0,5,18,32,18,5,0],[0,0,0,5,0,0,0]],emboss:[[-2,-1,0],[-1,1,1],[0,1,2]],sharpen:[[0,-1,0],[-1,5,-1],[0,-1,0]]});__publicField(Math2,"integral",(func=x22=>{let y22=x22;return y22},range=[],stepx=.01)=>{let area=0;for(let i3=range[0];i3<range[1];i3+=stepx){let y22=func(i3);area+=y22*stepx}return area});__publicField(Math2,"dintegral",(func=(x22,y22)=>{let z3=x22+y22;return z3},range=[[],[]],stepx=.01,stepy=stepx)=>{let volume=0;for(let i3=range[0][0]+stepx;i3<range[0][1];i3+=stepx){for(let j=range[1][0]+stepy;j<range[1][1];j+=stepy){let z3=func(i3,j);volume+=z3*stepx*stepy}}return volume});__publicField(Math2,"tintegral",(func=(x22,y22,z3)=>{let w=x22+y22+z3;return w},range=[[],[],[]],stepx=.01,stepy=stepx,stepz=stepx)=>{let volume=0;for(let i3=range[0][0]+stepx;i3<range[0][1];i3+=stepx){for(let j=range[1][0]+stepy;j<range[1][1];j+=stepy){for(let k=range[2][0]+stepz;k<range[2][1];k+=stepz){let w=func(i3,j,k);volume+=w*stepx*stepy*stepz}}}return volume});__publicField(Math2,"pintegral",(func=x22=>{let y22=x22;return y22},range=[],stepx=.01)=>{let length=0;let y0=void 0;let yi=void 0;for(let i3=range[0];i3<range[1];i3+=stepx){y0=yi;yi=func(i3);if(y0)length+=_Math2.distance([0,y0],[stepx,yi])}return length});__publicField(Math2,"meshgrid",_Math2.generateCoordinateSpace);__publicField(Math2,"autocorrelation2d",mat2d2=>{let result=[];for(let y22=0;y22<mat2d2.length;y22++){result.push([]);for(let x22=0;x22<mat2d2[y22].length;x22++){let G3=0;for(let b=0;b<mat2d2.length;b++){for(let a=0;a<mat2d2[b].length;a++){G3+=mat2d2[y22][x22]*mat2d2[mat2d2.length-1-b][mat2d2[y22].length-1-a]}}result[y22][x22]=G3}}return result});__publicField(Math2,"lerp",_Math2.makeArr);__publicField(Math2,"upsample",_Math2.interpolateArray);__publicField(Math2,"lerp",(v0,v1,fit,floor=true)=>{function lerp2(v02,v12,t3){return(1-t3)*v02+t3*v12}function interpolerp2(v02,v12,fit2,floor2=true){if(fit2<=2)return[v02,v12];let a=1/fit2;let result=new Array(fit2);result[0]=v02;for(let i3=1;i3<=fit2;i3++){result[i3]=lerp2(v02,v12,a*i3);if(floor2)result[i3]=Math.floor(result[i3])}return result}});__publicField(Math2,"peakDetect",(smoothedArray,type="peak",window2=49)=>{let mid=Math.floor(window2*.5);let peaks=[];for(let i3=0;i3<smoothedArray.length-window2;i3++){let isPeak=_Math2.isExtrema(smoothedArray.slice(i3,i3+window2),type);if(isPeak){peaks.push(i3+mid-1)}}return peaks});Object.assign(Math,Math2);var accel_gyro={accelConstant:1/8192,gyroConstant:1/65.5,gyroXAngle:0,gyroYAngle:0,gyroZAngle:0,px:0,py:0,pz:0,sps:100,lastAccelTime:Date.now(),lastGyroTime:Date.now(),__operator:function(data){if(!("ax"in data)&&!("gx"in data))return void 0;if(!data.timestamp){if(data.ax&&Array.isArray(data.ax)||data.gx&&Array.isArray(data.gx)){let len=data.ax?data.ax.length:data.gx.length;let now=Date.now();let toInterp=[now-len*this.sps*1e3,now];data.timestamp=Math2.upsample(toInterp,len)}else{data.timestamp=Date.now()}}let result;if(data.ax){let apass=(timestamp,ax,ay,az)=>{ax=ax*this.accelConstant;ay=ay*this.accelConstant;az=az*this.accelConstant;const accelXAngle=Math.atan(ay/Math.sqrt(ax*ax)+az*az*180/Math.PI)+this.accelXError;const accelYAngle=Math.atan(-ax/Math.sqrt(ay*ay)+az*az*180/Math.PI)+this.accelYError;return{ax,ay,az,roll:accelXAngle,pitch:accelYAngle}};if(Array.isArray(data.timestamp)){result=data.timestamp.map((v2,i3)=>{return apass(v2,data.ax[i3],data.ay[i3],data.az[i3])})}else result=apass(data.timestamp,data.ax,data.ay,data.az)}if(data.gx){let gpass=(timestamp,gx,gy,gz)=>{const elapsed=timestamp-this.lastGyroTime;this.lastGyroTime=timestamp;gx=gx*this.gyroConstant+this.gyroXError;gy=gy*this.gyroConstant+this.gyroYError;gz=gz*this.gyroConstant+this.gyroZError;this.gyroXAngle+=gx*elapsed;this.gyroYAngle+=gy*elapsed;this.gyroZAngle+=gz*elapsed;return{gx,gy,gz,roll:this.gyroXAngle,pitch:this.gyroYAngle,yaw:this.gyroZAngle}};let res;if(Array.isArray(data.timestamp)){res=data.timestamp.map((v2,i3)=>{if(result){let r=gpass(v2,data.gx[i3],data.gy[i3],data.gz[i3]);result.roll=result.roll*.04+r.roll*.96;result.pitch=result.pitch*.04+r.pitch*.96;result.yaw=res.yaw}else return gpass(v2,data.gx[i3],data.gy[i3],data.gz[i3])});if(!result)result=res}else{res=gpass(data.timestamp,data.gx,data.gy,data.gz);if(result){result.roll=result.roll*.04+res.roll*.96;result.pitch=result.pitch*.04+res.pitch*.96;result.yaw=res.yaw}else result=res}}else if(this.gyroXAngle||this.gyroYAngle||this.gyroZAngle){result.roll=result.roll*.04+this.gyroXAngle*.96;result.pitch=result.pitch*.04+this.gyroYAngle*.96;result.yaw=this.gyroXAngle}if(result.ax){const setPositionOffset=(timestamp,result2)=>{const elapsed=timestamp-this.lastAccelTime;this.lastAccelTime=timestamp;this.px+=result2.ax*elapsed*elapsed*Math.cos(this.pitch*Math.PI*.005555555555);this.py+=result2.ay*elapsed*elapsed*Math.cos(this.roll*Math.PI*.005555555555);this.pz+=result2.az*elapsed*elapsed*Math.sin(this.pitch*Math.PI*.005555555555);result2.px=this.px;result2.py=this.py;result2.pz=this.pz;return result2};if(Array.isArray(data.timestamp)){data.timestamp.map((timestamp,i3)=>{setPositionOffset(timestamp,result)})}else{setPositionOffset(data.timestamp,result)}}return result}};var Biquad=class{constructor(type,freq,sps10,Q=1/Math.sqrt(2),dbGain=0){this.a0=0;this.a1=0;this.a2=0;this.b0=0;this.b1=0;this.b2=0;this.x1=0;this.x2=0;this.y1=0;this.y2=0;let types=["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"];if(types.indexOf(type)<0){console.error("Valid types: \'lowpass\',\'highpass\',\'bandpass\',\'notch\',\'peak\',\'lowshelf\',\'highshelf\'");return}this.type=type;this.freq=freq;this.sps=sps10;this.Q=Q;this.dbGain=dbGain;let A22=Math.pow(10,dbGain/40);let omega=2*Math.PI*freq/sps10;let sn=Math.sin(omega);let cs=Math.cos(omega);let alpha=sn/(2*Q);let beta=Math.sqrt(A22+A22);this[type](A22,sn,cs,alpha,beta);this.b0/=this.a0;this.b1/=this.a0;this.b2/=this.a0;this.a1/=this.a0;this.a2/=this.a0}lowpass(A22,sn,cs,alpha,beta){this.b0=(1-cs)*.5;this.b1=1-cs;this.b2=(1-cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}highpass(A22,sn,cs,alpha,beta){this.b0=(1+cs)*.5;this.b1=-(1+cs);this.b2=(1+cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}bandpass(A22,sn,cs,alpha,beta){this.b0=alpha;this.b1=0;this.b2=-alpha;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}notch(A22,sn,cs,alpha,beta){this.b0=1;this.b1=-2*cs;this.b2=1;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}peak(A22,sn,cs,alpha,beta){this.b0=1+alpha*A22;this.b1=-2*cs;this.b2=1-alpha*A22;this.a0=1+alpha/A22;this.a1=-2*cs;this.a2=1-alpha/A22}lowshelf(A22,sn,cs,alpha,beta){this.b0=A22*(A22+1-(A22-1)*cs+beta*sn);this.b1=2*A22*(A22-1-(A22+1)*cs);this.b2=A22*(A22+1-(A22-1)*cs-beta*sn);this.a0=A22+1+(A22+1)*cs+beta*sn;this.a1=2*(A22-1+(A22+1)*cs);this.a2=A22+1+(A22-1)*cs-beta*sn}highshelf(A22,sn,cs,alpha,beta){this.b0=A22*(A22+1+(A22-1)*cs+beta*sn);this.b1=2*A22*(A22-1+(A22+1)*cs);this.b2=A22*(A22+1-(A22-1)*cs-beta*sn);this.a0=A22+1-(A22+1)*cs-beta*sn;this.a1=2*(A22-1-(A22+1)*cs);this.a2=A22+1-(A22-1)*cs-beta*sn}applyFilter(signal_step){let y22=this.b0*signal_step+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;this.x2=this.x1;this.x1=signal_step;this.y2=this.y1;this.y1=y22;return y22}zResult(freq){try{let phi=Math.pow(Math.sin(Math.PI*freq*2/(2*this.sps)),2);let result=(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*phi+16*this.b0*this.b2*phi*phi)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*phi+16*this.a2*phi*phi);return result}catch(err){return-200}}static calcCenterFrequency(freqStart,freqEnd){return(freqStart+freqEnd)/2}static calcBandwidth(freqStart,freqEnd){return freqEnd-this.calcCenterFrequency(freqStart,freqEnd)}static calcBandpassQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*Math.sqrt((frequency-bandwidth)*(frequency+bandwidth))/(2*bandwidth);return Q}static calcNotchQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*frequency*bandwidth/Math.sqrt((frequency-bandwidth)*(frequency+bandwidth));return Q}};var beat_detect={refdata:[],lowpass:void 0,smoothed:[],timestamp:[],peaks:[],valleys:[],peak_distances:[],valley_distances:[],beats:[],lastPeak:0,lastValley:0,sps:100,maxFreq:4,limit:10,__onconnected:function(){if(!this.lowpass){let freq=this.maxFreq;if(!freq)freq=1;if(freq>1)freq*=.5;this.lowpass=new Biquad("lowpass",this.maxFreq,this.sps);this.peakFinderWindow=Math.floor(this.sps/this.maxFreq);if(this.peakFinderWindow%2===0)this.peakFinderWindow+=1;if(this.peakFinderWindow<5)this.peakFinderWindow=5;this.midpoint=Math.round(this.peakFinderWindow*.5)}},__operator:function(data){if(!("red"in data)&&!("heg"in data)&&!("raw"in data))return void 0;let refdata=data.red?data.red:data.heg?data.heg:data.raw;if(!("timestamp"in data)){if(Array.isArray(refdata)){let now=Date.now();let len;if(refdata)len=refdata.length;let toInterp=[now-refdata.length*this.sps*1e3,now];data.timestamp=Math2.upsample(toInterp,refdata.length)}else{data.timestamp=Date.now()}}let pass=(amplitude,timestamp)=>{if(amplitude){this.refdata.push(amplitude)}this.timestamp.push(timestamp);let beat;if(this.refdata.length>this.peakFinderWindow){this.refdata.shift();this.timestamp.shift()}this.smoothed.push(this.lowpass.applyFilter(this.refdata[this.refdata.length-1]));if(this.smoothed.length>this.peakFinderWindow){this.smoothed.shift()}if(this.smoothed.length===this.peakFinderWindow){if(Math2.isExtrema(this.smoothed,"valley")){this.valleys.push({value:this.smoothed[this.smoothed.length-this.midpoint?this.midpoint:1],timestamp:this.timestamp[this.timestamp.length-this.midpoint?this.midpoint:1]})}else if(Math2.isExtrema(this.smoothed,"peak")){this.peaks.push({value:this.smoothed[this.smoothed.length-this.midpoint?this.midpoint:1],timestamp:this.timestamp[this.timestamp.length-this.midpoint?this.midpoint:1]})}if(this.valleys.length>2&&this.peaks.length>2){if(this.valleys[this.valleys.length-1].timestamp<this.peaks[this.peaks.length-2].timestamp)this.peaks.splice(this.peaks.length-1);if(this.peaks[this.peaks.length-1].timestamp<this.valleys[this.valleys.length-2].timestamp)this.valleys.splice(this.valleys.length-1);this.valley_distances.push({distance:this.valleys[this.valleys.length-1].timestamp-this.valleys[this.valleys.length-2].timestamp,timestamp:this.valleys[this.valleys.length-1].timestamp,peak0:this.valleys[this.valleys.length-1].value,peak1:this.valleys[this.valleys.length-2].value});this.peak_distances.push({distance:this.peaks[this.peaks.length-1].timestamp-this.peaks[this.peaks.length-2].timestamp,timestamp:this.peaks[this.peaks.length-1].timestamp,peak0:this.peaks[this.peaks.length-1].value,peak1:this.peaks[this.peaks.length-2].value});if(this.peak_distances.length>1&&this.valley_distances.length>1){if(this.lastPeak<this.peaks[this.peaks.length-1].timestamp&&this.lastValley<this.peaks[this.peaks.length-1].timestamp){if(this.valley_distances[this.valley_distances.length-1].timestamp>this.peak_distances[this.peak_distances.length-1].timestamp){let bpm,change=0;if(this.beats.length<1){bpm=60/(5e-4*(this.peak_distances[this.peak_distances.length-1].distance+this.valley_distances[this.valley_distances.length-1].distance))}else if(this.beats[this.beats.length-1].timestamp!==this.peak_distances[this.peak_distances.length-1].timestamp){bpm=60/(5e-4*(this.peak_distances[this.peak_distances.length-1].dt+this.valley_distances[this.valley_distances.length-1].dt));change=Math.abs(bpm-this.beats[this.beats.length-1].bpm)}beat={timestamp:this.peak_distances[this.peak_distances.length-1].timestamp,change,bpm,height0:this.peak_distances[this.peak_distances.length-1].peak0-this.valley_distances[this.valley_distances.length-1].peak0,height1:this.peak_distances[this.peak_distances.length-1].peak1-this.valley_distances[this.valley_distances.length-1].peak1};this.beats.push(beat);this.lastPeak=this.peaks[this.peaks.length-1].timestamp;this.lastValley=this.peaks[this.peaks.length-1].timestamp}else{let bpm,change=0;if(this.beats.length<2){bpm=60/(5e-4*(this.peak_distances[this.peak_distances.length-2].distance+this.valley_distances[this.valley_distances.length-2].distance))}else if(this.beats[this.beats.length-1].timestamp!==this.peak_distances[this.peak_distances.length-2].timestamp){bpm=60/(5e-4*(this.peak_distances[this.peak_distances.length-2].distance+this.valley_distances[this.valley_distances.length-2].distance));change=Math.abs(bpm-this.beats[this.beats.length-2].bpm)}beat={timestamp:this.peak_distances[this.peak_distances.length-2].timestamp,change,bpm,height0:this.peak_distances[this.peak_distances.length-2].peak0-this.valley_distances[this.valley_distances.length-2].peak0,height1:this.peak_distances[this.peak_distances.length-2].peak1-this.valley_distances[this.valley_distances.length-2].peak1};this.beats.push(beat);this.lastPeak=this.peaks[this.peaks.length-1].timestamp;this.lastValley=this.peaks[this.peaks.length-1].timestamp}}}if(this.peaks.length>this.limit){this.peaks.shift()}if(this.valleys.length>this.limit){this.valleys.shift()}if(this.peak_distances.length>this.limit){this.peak_distances.shift()}if(this.valley_distances.length>this.limit){this.valley_distances.shift()}if(this.beats.length>this.limit){this.beats.shift()}}}return beat};if(data.red){if("ir"in data&&!Array.isArray(data.red))return pass(data.red+data.ir,data.timestamp);let result;if(data.ir)result=data.red.map((v2,i3)=>{return pass(v2+data.ir[i3],data.timestamp[i3])});else result=data.red.map((v2,i3)=>{return pass(v2,data.timestamp[i3])});return result}else if(data.raw){if(!Array.isArray(data.raw))return pass(data.raw,data.timestamp);let result=data.raw.map((v2,i3)=>{return pass(v2,data.timestamp[i3])});return result}else if(Array.isArray(data.heg)){if(!Array.isArray(data.heg))return pass(data.heg,data.timestamp);let result=data.heg.map((v2,i3)=>{return pass(v2,data.timestamp[i3])});return result}}};var blink_detect={sps:250,intervals:{},watch:["0"],tolerance:.2,__onconnected:node=>{node.watch.forEach(ch=>node.intervals[ch]={lowpass:new Biquad("lowpass",20,node.sps),filtered:[],averaged:[]})},__operator:function(data){let checkCt=5;let averageCt=50;let found={};let passed=false;let pass=(key,n)=>{let next=this.intervals[key].lowpass.applyFilter(n);this.intervals[key].filtered.push(next);this.intervals[key].averaged.push(next);if(this.intervals[key].filtered.length>checkCt){if(this.intervals[key].averaged.length>averageCt){this.intervals[key].averaged.splice(0,checkCt);let mean=Math2.mean(this.intervals[key].averaged);if(Math.abs(Math.min(...this.intervals[key].filtered))>Math.abs(mean)+this.tolerance){this.intervals[key].filtered.length=0;passed=true;found[key]=true}}else this.intervals[key].filtered.shift()}};for(const key in this.intervals){if(data[key]){if(Array.isArray(data[key])){data[key].forEach(n=>{pass(key,n)})}else if(typeof data[key]==="number")pass(key,data[key])}}if(passed)return found}};var _ArrayManip=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y22=>{if(clamp){if(y22<min)y22=min;if(y22>max)y22=max}return y22*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y22=>{if(clamp){if(y22<min)y22=min;if(y22>max)y22=max}return 2*((y22-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps10){let now=Date.now();let toInterp=[now-ct*1e3/sps10,now];return _ArrayManip.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i3=incr;i3<array.length;i3+=incr){let rounded=Math.round(i3);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i3=1;i3<fitCount-1;i3++){var tmp=i3*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i3]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x3=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x3;b=0}else if(60<=h&&h<120){r=x3;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x3}else if(180<=h&&h<240){r=0;g=x3;b=c}else if(240<=h&&h<300){r=x3;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x3}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,...newEntries.slice(newEntries.length-len))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d2={};data.forEach((arr,i3)=>{d2[i3]=arr});data=d2;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\r\\n")){let lines=data.split("\\r\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}if(Array.isArray(split)){split.forEach((val,i3)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i3]=[fl];else return void 0}})}})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(Array.isArray(split)){split.forEach((val,i3)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i3]=[fl];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_,i3)=>lastValue+slopeIncr*(i3+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x3){return ArrayBuffer.isView(x3)&&Object.prototype.toString.call(x3)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip=_ArrayManip;ArrayManip.bufferValues=(objects,property,keys3,buffer)=>{if(!Array.isArray(keys3)&&typeof keys3==="object")keys3=Object.keys(keys3);if(!buffer){let object_keys=Object.keys(objects);if(keys3)buffer=new Float32Array(object_keys.length*keys3.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys3=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys3.length)}else buffer=new Float32Array(object_keys.length)}}let i3=0;for(const key in objects){if(objects[key][property]){if(keys3){for(let j=0;j<keys3.length;j++){buffer[i3]=objects[key][property][keys3[j]];i3++}}else{buffer[i3]=objects[key][property];i3++}}}return buffer};var rechk=/^([<>])?(([1-9]\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt=/([1-9]\\d*)?([xcbB?hHiIfdsp])/g;var str=(v2,o,c)=>String.fromCharCode(...new Uint8Array(v2.buffer,v2.byteOffset+o,c));var rts=(v2,o,c,s)=>new Uint8Array(v2.buffer,v2.byteOffset+o,c).set(s.split("").map(str22=>str22.charCodeAt(0)));var pst=(v2,o,c)=>str(v2,o+1,Math.min(v2.getUint8(o),c-1));var tsp=(v2,o,c,s)=>{v2.setUint8(o,s.length);rts(v2,o+1,c-1,s)};var lut=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v2=>str(v2,o,1),p:(v2,c2)=>rts(v2,o,1,c2)})],"?":c=>[c,1,o=>({u:v2=>Boolean(v2.getUint8(o)),p:(v2,B3)=>v2.setUint8(o,B3)})],b:c=>[c,1,o=>({u:v2=>v2.getInt8(o),p:(v2,b)=>v2.setInt8(o,b)})],B:c=>[c,1,o=>({u:v2=>v2.getUint8(o),p:(v2,B3)=>v2.setUint8(o,B3)})],h:c=>[c,2,o=>({u:v2=>v2.getInt16(o,le),p:(v2,h)=>v2.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v2=>v2.getUint16(o,le),p:(v2,H3)=>v2.setUint16(o,H3,le)})],i:c=>[c,4,o=>({u:v2=>v2.getInt32(o,le),p:(v2,i3)=>v2.setInt32(o,i3,le)})],I:c=>[c,4,o=>({u:v2=>v2.getUint32(o,le),p:(v2,I)=>v2.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v2=>v2.getFloat32(o,le),p:(v2,f)=>v2.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v2=>v2.getFloat64(o,le),p:(v2,d2)=>v2.setFloat64(o,d2,le)})],s:c=>[1,c,o=>({u:v2=>str(v2,o,c),p:(v2,s)=>rts(v2,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v2=>pst(v2,o,c),p:(v2,s)=>tsp(v2,o,c,s.slice(0,c-1))})]});var errbuf=new RangeError("Structure larger than remaining buffer");var errval=new RangeError("Not enough values for structure");var _ByteParser=class extends ArrayManip{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i3=search(haystack);i3!==-1;i3=search(haystack,i3+skip)){indices.push(i3);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y22){return[y22&255,y22>>8&255]}static bytesToInt24(x0,x1,x22){let int24=(255&x0)<<16|(255&x1)<<8|255&x22;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x22){return x0*65536+x1*256+x22}static Uint24ToBytes(y22){return[y22&255,y22>>8&255,y22>>16&255]}static bytesToInt32(x0,x1,x22,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x22)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x22,x3){return x0*16777216+x1*65536+x22*256+x3}static Uint32ToBytes(y22){return[y22&255,y22>>8&255,y22>>16&255,y22>>24&255]}static get2sCompliment(val,nbits4){if(val>4294967296)return null;return val<<32-nbits4>>32-nbits4}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i3=0;i3<input.length;i3++){var c=input.charCodeAt(i3);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i3]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser.asUint8Array(patternBuffer);var M2=pattern.length;if(M2===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R2=256;var rightmost_positions=new Int32Array(R2);for(var c=0;c<R2;c++){rightmost_positions[c]=-1}for(var j=0;j<M2;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i3=start;i3<=lastIndex;i3+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i3+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i3}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk.exec(format);if(!m){throw new RangeError("Invalid format string")}const t3=lut("<"===m[1]),lu=(n,c)=>t3[c](n?parseInt(n,10):1);while(m=refmt.exec(format)){((r,s,f)=>{for(let i3=0;i3<r;++i3,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf}let v2=new DataView(arrb,offs|0);return fns.map(f=>f.u(v2))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval}if(arrb.byteLength<offs+size){throw errbuf}const v2=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i3)=>f.p(v2,values[i3]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser=_ByteParser;ByteParser.codes={"\\\\n":10,"\\\\r":13,"\\\\t":9,"\\\\s":32,"\\\\b":8,"\\\\f":12,"\\\\":92};var rms={sps:250,nSec:1,watch:["0","1","2","3"],data:{},rms:{},__operator:function(data){this.watch.forEach(key=>{if(data[key]){if(!this.data[key]){if(Array.isArray(data[key])){this.data[key]=new Array(Math.floor(this.sps*this.nSec)).fill(data[key][0])}else this.data[key]=new Array(Math.floor(this.sps*this.nSec)).fill(data[key])}ByteParser.circularBuffer(this.data[key],data[key])}});if(data.timestamp){if(Array.isArray(data.timestamp)){this.rms.timestamp=data.timestamp[data.timestamp.length-1]}else this.rms.timestamp=data.timestamp}else this.rms.timestamp=Date.now();return new Promise(async res=>{await Promise.all(this.watch.map(async key=>{if(this.data[key])this.rms[key]=Math.sqrt(Math.abs(this.data[key].reduce((p2,v2,i3)=>p2+v2*v2)/this.data[key].length));else delete this.rms[key]}));res(this.rms)})}};var circularBuffer2d={bufferSize:250,watch:["0","1","2","3"],data:{},blocking:false,__onconnected:function(node){for(const key in node.watch){node.data[key]=new Array(node.bufferSize).fill(0)}},__operator:function(data){let buffer2d=[];this.watch.forEach(key=>{if(data[key]){ByteParser.circularBuffer(this.data[key],data[key]);buffer2d.push(this.data[key])}});return buffer2d}};var algorithms={beat_detect,accel_gyro,heartrate:beat_detect,breath:Object.assign({},beat_detect),blink_detect,rms,circularBuffer2d};algorithms["breath"].maxFreq=.2;var _ArrayManip2=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y4=>{if(clamp){if(y4<min)y4=min;if(y4>max)y4=max}return y4*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y4=>{if(clamp){if(y4<min)y4=min;if(y4>max)y4=max}return 2*((y4-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps10){let now=Date.now();let toInterp=[now-ct*1e3/sps10,now];return _ArrayManip2.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i3=incr;i3<array.length;i3+=incr){let rounded=Math.round(i3);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i3=1;i3<fitCount-1;i3++){var tmp=i3*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i3]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip2.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip2.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x3=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x3;b=0}else if(60<=h&&h<120){r=x3;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x3}else if(180<=h&&h<240){r=0;g=x3;b=c}else if(240<=h&&h<300){r=x3;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x3}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d2={};data.forEach((arr,i3)=>{d2[i3]=arr});data=d2;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\r\\n")){let lines=data.split("\\r\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}if(Array.isArray(split)){split.forEach((val,i3)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i3]=[fl];else return void 0}})}})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(Array.isArray(split)){split.forEach((val,i3)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i3]=[fl];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_,i3)=>lastValue+slopeIncr*(i3+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip2.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x3){return ArrayBuffer.isView(x3)&&Object.prototype.toString.call(x3)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip2=_ArrayManip2;ArrayManip2.bufferValues=(objects,property,keys3,buffer)=>{if(!Array.isArray(keys3)&&typeof keys3==="object")keys3=Object.keys(keys3);if(!buffer){let object_keys=Object.keys(objects);if(keys3)buffer=new Float32Array(object_keys.length*keys3.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys3=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys3.length)}else buffer=new Float32Array(object_keys.length)}}let i3=0;for(const key in objects){if(objects[key][property]){if(keys3){for(let j=0;j<keys3.length;j++){buffer[i3]=objects[key][property][keys3[j]];i3++}}else{buffer[i3]=objects[key][property];i3++}}}return buffer};var rechk2=/^([<>])?(([1-9]\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt2=/([1-9]\\d*)?([xcbB?hHiIfdsp])/g;var str2=(v2,o,c)=>String.fromCharCode(...new Uint8Array(v2.buffer,v2.byteOffset+o,c));var rts2=(v2,o,c,s)=>new Uint8Array(v2.buffer,v2.byteOffset+o,c).set(s.split("").map(str4=>str4.charCodeAt(0)));var pst2=(v2,o,c)=>str2(v2,o+1,Math.min(v2.getUint8(o),c-1));var tsp2=(v2,o,c,s)=>{v2.setUint8(o,s.length);rts2(v2,o+1,c-1,s)};var lut2=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v2=>str2(v2,o,1),p:(v2,c2)=>rts2(v2,o,1,c2)})],"?":c=>[c,1,o=>({u:v2=>Boolean(v2.getUint8(o)),p:(v2,B3)=>v2.setUint8(o,B3)})],b:c=>[c,1,o=>({u:v2=>v2.getInt8(o),p:(v2,b)=>v2.setInt8(o,b)})],B:c=>[c,1,o=>({u:v2=>v2.getUint8(o),p:(v2,B3)=>v2.setUint8(o,B3)})],h:c=>[c,2,o=>({u:v2=>v2.getInt16(o,le),p:(v2,h)=>v2.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v2=>v2.getUint16(o,le),p:(v2,H3)=>v2.setUint16(o,H3,le)})],i:c=>[c,4,o=>({u:v2=>v2.getInt32(o,le),p:(v2,i3)=>v2.setInt32(o,i3,le)})],I:c=>[c,4,o=>({u:v2=>v2.getUint32(o,le),p:(v2,I)=>v2.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v2=>v2.getFloat32(o,le),p:(v2,f)=>v2.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v2=>v2.getFloat64(o,le),p:(v2,d2)=>v2.setFloat64(o,d2,le)})],s:c=>[1,c,o=>({u:v2=>str2(v2,o,c),p:(v2,s)=>rts2(v2,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v2=>pst2(v2,o,c),p:(v2,s)=>tsp2(v2,o,c,s.slice(0,c-1))})]});var errbuf2=new RangeError("Structure larger than remaining buffer");var errval2=new RangeError("Not enough values for structure");var _ByteParser2=class extends ArrayManip2{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser2.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser2.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser2.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i3=search(haystack);i3!==-1;i3=search(haystack,i3+skip)){indices.push(i3);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y4){return[y4&255,y4>>8&255]}static bytesToInt24(x0,x1,x22){let int24=(255&x0)<<16|(255&x1)<<8|255&x22;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x22){return x0*65536+x1*256+x22}static Uint24ToBytes(y4){return[y4&255,y4>>8&255,y4>>16&255]}static bytesToInt32(x0,x1,x22,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x22)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x22,x3){return x0*16777216+x1*65536+x22*256+x3}static Uint32ToBytes(y4){return[y4&255,y4>>8&255,y4>>16&255,y4>>24&255]}static get2sCompliment(val,nbits4){if(val>4294967296)return null;return val<<32-nbits4>>32-nbits4}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i3=0;i3<input.length;i3++){var c=input.charCodeAt(i3);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i3]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser2.asUint8Array(patternBuffer);var M2=pattern.length;if(M2===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R2=256;var rightmost_positions=new Int32Array(R2);for(var c=0;c<R2;c++){rightmost_positions[c]=-1}for(var j=0;j<M2;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser2.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i3=start;i3<=lastIndex;i3+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i3+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i3}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk2.exec(format);if(!m){throw new RangeError("Invalid format string")}const t3=lut2("<"===m[1]),lu=(n,c)=>t3[c](n?parseInt(n,10):1);while(m=refmt2.exec(format)){((r,s,f)=>{for(let i3=0;i3<r;++i3,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf2}let v2=new DataView(arrb,offs|0);return fns.map(f=>f.u(v2))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval2}if(arrb.byteLength<offs+size){throw errbuf2}const v2=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i3)=>f.p(v2,values[i3]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser2=_ByteParser2;ByteParser2.codes={"\\\\n":10,"\\\\r":13,"\\\\t":9,"\\\\s":32,"\\\\b":8,"\\\\f":12,"\\\\":92};var WebSerial=class extends ByteParser2{constructor(){super(...arguments);this.streams={};this.createStream=options=>{let stream={_id:options._id?options._id:`stream${Math.floor(Math.random()*1e15)}`,info:options.port.getInfo(),running:false,...options};if(options.port?.readable){if(options.transforms){stream.reader=WebSerial.setStreamTransforms(options.port.readable,options.transforms).getReader()}else{stream.reader=options.port.readable.getReader()}}this.streams[stream._id]=stream;return stream}}getPorts(){return navigator.serial.getPorts()}requestPort(usbVendorId,usbProductId){let options={};if(usbVendorId){options.usbVendorId=usbVendorId}if(usbProductId){options.usbProductId=usbProductId}if(options.usbVendorId)return navigator.serial.requestPort({filters:[options]});else return navigator.serial.requestPort()}openPort(port,options){if(options)options=Object.assign({},options);if(options?.ondisconnect){port.ondisconnect=options.ondisconnect;delete options.ondisconnect}return port.open(options).then(()=>{if(options?.onconnect)options.onconnect(port)})}async readWithTimeout(port,timeout){const reader=port.readable.getReader();const timer=setTimeout(()=>{reader.releaseLock()},timeout);const result=await reader.read();clearTimeout(timer);reader.releaseLock();return result}async writePort(port,message){const writer=port.writable.getWriter();await writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}getSignals(port){return port.getSignals()}setSignals(port,signals){return port.setSignals(signals)}readStream(stream){if(stream.reader&&!stream.running){let reader=stream.reader;if(stream.buffering){if(typeof stream.buffering!=="object")stream.buffering={};if(!stream.buffering.buffer){stream.buffering.buffer=[]}if(!stream.buffering.searchBytes)stream.buffering.searchBytes=new Uint8Array([13,10])}let readLoop=()=>{if(stream.port.readable&&stream.running){reader.read().then(result=>{if(result.done)reader.releaseLock();else{if(stream.buffering){stream.buffering.buffer.push(...result.value);const needle=stream.buffering.searchBytes;const haystack=stream.buffering.buffer;const search=WebSerial.boyerMoore(needle);const skip=search.byteLength;let nextIndex=-1;let used=stream.buffering.lockIdx??0;for(var i3=search(haystack);i3!==-1;i3=search(haystack,i3+skip)){if(!stream.buffering.locked&&!("lockIdx"in stream.buffering))used=stream.buffering.lockIdx=i3;else{nextIndex=i3;if(nextIndex>=0){const len=nextIndex-used;if(!stream.buffering.locked){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(data);stream.buffering.locked=true}else if(len>0){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(new Uint8Array(data))}used=nextIndex}}}}else stream.ondata(result.value);setTimeout(()=>{readLoop()},stream.frequency)}}).catch(er=>{console.error(stream._id," Read error:",er);if(er.message.includes("overrun")||er.message.includes("framing")){delete stream.reader;this.reconnect(stream)}})}else if(!stream.running&&stream.port.readable){try{reader.releaseLock()}catch(er){console.error(er)}}};stream.running=true;readLoop();return stream}return void 0}writeStream(stream,message){if(typeof stream==="string")stream=this.streams[stream];if(stream.port.writable){let writer=stream.port.writable.getWriter();writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}return void 0}closeStream(stream,onclose){if(typeof stream==="string")stream=this.streams[stream];stream.running=false;return new Promise((res,rej)=>{if(stream.settings.beforedisconnect){stream.settings.beforedisconnect(this,stream.port)}setTimeout(async()=>{if(stream.port.readable&&stream.reader){try{stream.reader.releaseLock()}catch(er){console.error(er)}if(stream.transforms)try{await stream.reader.cancel()}catch(err){console.error(err)}}try{await stream.port.close().then(()=>{if(onclose)onclose(this.streams[stream._id])});delete this.streams[stream._id];res(true)}catch(er){rej(er)}},300)})}reconnect(stream,options){if(typeof stream==="string")stream=this.streams[stream];return new Promise((res,rej)=>{if(typeof stream!=="object"){rej(void 0);return}let info=stream.port.getInfo();this.closeStream(stream._id).then(closed=>{setTimeout(()=>{this.getPorts().then(ports=>{for(let i3=0;i3<ports.length;i3++){if(ports[i3].getInfo().usbVendorId===info.usbVendorId&&ports[i3].getInfo().usbProductId===info.usbProductId){if(!options)options=stream;else options._id=stream._id;delete options.port;this.openPort(ports[i3],options.settings).then(()=>{const stream2=this.createStream({...options,port:ports[i3]});this.readStream(stream2);res(stream2)}).catch(rej)}}}).catch(rej)},100)})})}static setStreamTransforms(stream,transforms){let transform=[];Object.keys(transforms).forEach(t3=>{let opt=transforms[t3];if(opt instanceof TransformStream){transform.push(opt)}else{if(!opt.start)opt.start=function start(){};if(!opt.flush)opt.flush=function flush(){};let transformer=new TransformStream({start:opt.start,transform:opt.transform,flush:opt.flush},opt.writableStrategy,opt.readableStrategy);transform.push(transformer)}});let str4=stream;transform.forEach(transform2=>{str4=str4.pipeThrough(transform2)});return str4}};function ads131m08codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array(9),1:new Array(9),2:new Array(9),3:new Array(9),4:new Array(9),5:new Array(9),6:new Array(9),7:new Array(9),timestamp:Date.now()};for(let i3=0;i3<9;i3++){let j=i3*25;output[0][i3]=ByteParser2.bytesToInt24(arr[j],arr[j+1],arr[j+2]);output[1][i3]=ByteParser2.bytesToInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i3]=ByteParser2.bytesToInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i3]=ByteParser2.bytesToInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i3]=ByteParser2.bytesToInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i3]=ByteParser2.bytesToInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i3]=ByteParser2.bytesToInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i3]=ByteParser2.bytesToInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var decoder=new TextDecoder;function ads131m08_arduinocodec(data){const parsed=decoder.decode(data);let split;if(parsed.includes("|"))split=parsed.split("|");else if(split.includes(","))split=parsed.split(",");else split=parsed.split("	");return{"0":parseInt(split[0]),"1":parseInt(split[1]),"2":parseInt(split[2]),"3":parseInt(split[3]),"4":parseInt(split[4]),"5":parseInt(split[5]),"6":parseInt(split[6]),"7":parseInt(split[7]),timestamp:Date.now()}}var sps=250;var defaultChartSetting={nSec:10,sps,units:"mV"};var ads131m08ChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting)),"1":JSON.parse(JSON.stringify(defaultChartSetting)),"2":JSON.parse(JSON.stringify(defaultChartSetting)),"3":JSON.parse(JSON.stringify(defaultChartSetting)),"4":JSON.parse(JSON.stringify(defaultChartSetting)),"5":JSON.parse(JSON.stringify(defaultChartSetting)),"6":JSON.parse(JSON.stringify(defaultChartSetting)),"7":JSON.parse(JSON.stringify(defaultChartSetting))}};var gain=32;var nbits=24;var vref=1.2;var defaultsetting={sps,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref/(gain*(Math.pow(2,nbits)-1))};var ads131m08FilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting)),"1":JSON.parse(JSON.stringify(defaultsetting)),"2":JSON.parse(JSON.stringify(defaultsetting)),"3":JSON.parse(JSON.stringify(defaultsetting)),"4":JSON.parse(JSON.stringify(defaultsetting)),"5":JSON.parse(JSON.stringify(defaultsetting)),"6":JSON.parse(JSON.stringify(defaultsetting)),"7":JSON.parse(JSON.stringify(defaultsetting))};var accScale=.002/Math.pow(2,4);var getAcc=(arr,output,channels=8)=>{const accIdx=channels*3+1;const sum=(a,b)=>a+b;const accSum=arr.slice(accIdx).reduce(sum,0);if(accSum!==0){output.ax=accScale*ByteParser2.bytesToInt16(arr[accIdx],arr[accIdx+1]);output.ay=accScale*ByteParser2.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output.az=accScale*ByteParser2.bytesToInt16(arr[accIdx+4],arr[accIdx+5])}};function cytoncodec(data){let arr;if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i3=0;i3<8;i3++){let idx=1+3*i3;output[i3]=ByteParser2.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);output.timestamp=Date.now();return output}function daisycytoncodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i3=0;i3<8;i3++){let idx=1+3*i3;if(arr[0]%2===0)output[i3+7]=ByteParser2.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2]);else output[i3]=ByteParser2.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);return output}var sps2=250;var cytonSerialSettings={deviceType:"USB",deviceName:"cyton",baudRate:115200,codec:cytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var daisycytonSerialSettings={deviceType:"USB",deviceName:"cyton_daisy",baudRate:115200,codec:daisycytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var defaultChartSetting2={nSec:10,sps:sps2,units:"mV"};var defaultChartSetting22={nSec:10,sps:sps2};var cytonChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting2)),"1":JSON.parse(JSON.stringify(defaultChartSetting2)),"2":JSON.parse(JSON.stringify(defaultChartSetting2)),"3":JSON.parse(JSON.stringify(defaultChartSetting2)),"4":JSON.parse(JSON.stringify(defaultChartSetting2)),"5":JSON.parse(JSON.stringify(defaultChartSetting2)),"6":JSON.parse(JSON.stringify(defaultChartSetting2)),"7":JSON.parse(JSON.stringify(defaultChartSetting2)),"ax":JSON.parse(JSON.stringify(defaultChartSetting22)),"ay":JSON.parse(JSON.stringify(defaultChartSetting22)),"az":JSON.parse(JSON.stringify(defaultChartSetting22))},generateNewLines:true};var defaultsetting2={sps:sps2,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*4.5/(24*(Math.pow(2,23)-1))};var cytonFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting2)),"1":JSON.parse(JSON.stringify(defaultsetting2)),"2":JSON.parse(JSON.stringify(defaultsetting2)),"3":JSON.parse(JSON.stringify(defaultsetting2)),"4":JSON.parse(JSON.stringify(defaultsetting2)),"5":JSON.parse(JSON.stringify(defaultsetting2)),"6":JSON.parse(JSON.stringify(defaultsetting2)),"7":JSON.parse(JSON.stringify(defaultsetting2)),"8":JSON.parse(JSON.stringify(defaultsetting2)),"9":JSON.parse(JSON.stringify(defaultsetting2)),"10":JSON.parse(JSON.stringify(defaultsetting2)),"11":JSON.parse(JSON.stringify(defaultsetting2)),"12":JSON.parse(JSON.stringify(defaultsetting2)),"13":JSON.parse(JSON.stringify(defaultsetting2)),"14":JSON.parse(JSON.stringify(defaultsetting2)),"15":JSON.parse(JSON.stringify(defaultsetting2))};function freeeeg128codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i3=0;i3<128;i3++){let idx=i3*3+1;output[i3]=ByteParser2.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=385;output["ax"]=ByteParser2.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser2.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser2.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser2.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser2.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser2.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps3=250;var freeeeg128SerialSettings={deviceType:"USB",deviceName:"freeeeg128",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg128codec,sps:sps3,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg128ChartSettings={lines:{"ax":{nSec:10,sps:sps3},"ay":{nSec:10,sps:sps3},"az":{nSec:10,sps:sps3},"gx":{nSec:10,sps:sps3},"gy":{nSec:10,sps:sps3},"gz":{nSec:10,sps:sps3}}};var freeeeg128FilterSettings={};for(let i3=0;i3<128;i3++){freeeeg128ChartSettings.lines[i3]={sps:sps3,nSec:10,units:"mV"};freeeeg128FilterSettings[i3]={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,scalar:1e3*2.5/(32*(Math.pow(2,24)-1))}}function freeeeg32codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i3=0;i3<32;i3++){let idx=i3*3+1;output[i3]=ByteParser2.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=97;output["ax"]=ByteParser2.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser2.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser2.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser2.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser2.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser2.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps4=512;var freeeeg32SerialSettings={deviceType:"USB",deviceName:"freeeeg32",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg32_optical_SerialSettings={deviceType:"USB",deviceName:"freeeeg32_optical",baudRate:1e6,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var defaultChartSetting3={nSec:10,sps:sps4};var freeeeg32ChartSettings={lines:{"ax":JSON.parse(JSON.stringify(defaultChartSetting3)),"ay":JSON.parse(JSON.stringify(defaultChartSetting3)),"az":JSON.parse(JSON.stringify(defaultChartSetting3)),"gx":JSON.parse(JSON.stringify(defaultChartSetting3)),"gy":JSON.parse(JSON.stringify(defaultChartSetting3)),"gz":JSON.parse(JSON.stringify(defaultChartSetting3))}};var freeeeg32FilterSettings={};for(let i3=0;i3<32;i3++){freeeeg32ChartSettings.lines[i3]={sps:sps4,nSec:10,units:"mV"};freeeeg32FilterSettings[i3]={sps:sps4,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*2.5/(8*(Math.pow(2,24)-1))}}var textdecoder=new TextDecoder;function hegduinocodec(value){let output={timestamp:0,red:0,infrared:0,heg:0,ambient:0,temperature:0};let txt=textdecoder.decode(value);let line=txt.split("|");if(line.length===3){output.timestamp=Date.now();output.red=parseInt(line[0]);output.infrared=parseInt(line[1]);output.heg=parseFloat(line[2])}else if(line.length>=2){output.timestamp=Date.now();output.red=parseInt(line[1]);output.infrared=parseInt(line[2]);output.heg=parseFloat(line[3]);if(line[4])output.ambient=parseFloat(line[4]);if(line[5])output.temperature=parseFloat(line[5]);return output}else return txt}var sps5=40;var hegduinoSerialSettings={deviceType:"USB",deviceName:"hegduino",baudRate:115200,write:"t\\n",codec:hegduinocodec,sps:sps5};var hegduinoV1SerialSettings=Object.assign({},hegduinoSerialSettings);hegduinoV1SerialSettings.sps=19;var hegduinoBLESettings={deviceType:"BLE",deviceName:"hegduino",sps:sps5,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:hegduinocodec,sps:sps5}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};var hegduinoV1BLESettings=Object.assign({},hegduinoSerialSettings);hegduinoV1BLESettings.sps=19;function max3010xcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let pktCt=32;const output={"red":new Array(pktCt),"ir":new Array(pktCt),"max_dietemp":ByteParser2.get2sCompliment(arr[193],8)+.0625*arr[194],"timestamp":Date.now()};let i3=0;while(i3<pktCt){let idx=i3*6;if(i3%2===0){output["ir"][i3]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["ir"][i3+1]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}else{output["red"][i3-1]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["red"][i3]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}i3++}return output}function mpu6050codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={"ax":new Array(20),"ay":new Array(20),"az":new Array(20),"gx":new Array(20),"gy":new Array(20),"gz":new Array(20),"mpu_dietemp":(ByteParser2.bytesToInt16(arr[241],arr[242])+521)/340+35,timestamp:Date.now()};for(let i3=0;i3<20;i3++){let idx=i3*12;output.ax[i3]=ByteParser2.bytesToInt16(arr[idx+1],arr[idx+2]);output.ay[i3]=ByteParser2.bytesToInt16(arr[idx+3],arr[idx+4]);output.az[i3]=ByteParser2.bytesToInt16(arr[idx+5],arr[idx+6]);output.gx[i3]=ByteParser2.bytesToInt16(arr[idx+7],arr[idx+8]);output.gy[i3]=ByteParser2.bytesToInt16(arr[idx+9],arr[idx+10]);output.gz[i3]=ByteParser2.bytesToInt16(arr[idx+11],arr[idx+12])}return output}function cognixionONE_EEG_codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array,1:new Array,2:new Array,3:new Array,4:new Array,5:new Array,6:new Array,7:new Array,timestamp:Date.now()};for(let i3=0;i3<7;i3++){let j=i3*26+1;if(!arr[j+23])break;output[0][i3]=ByteParser2.bytesToUInt24(arr[j],arr[j+1],arr[j+2]);output[1][i3]=ByteParser2.bytesToUInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i3]=ByteParser2.bytesToUInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i3]=ByteParser2.bytesToUInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i3]=ByteParser2.bytesToUInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i3]=ByteParser2.bytesToUInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i3]=ByteParser2.bytesToUInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i3]=ByteParser2.bytesToUInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var sps6=250;var cognixionONEBLESettings={deviceType:"BLE",deviceName:"cognixionONE",services:{["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{notify:true,notifyCallback:void 0,codec:cognixionONE_EEG_codec,sps:sps6}},["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{write:void 0},["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{read:true}}},sps:sps6};var cognixionONESerialSettings=Object.assign({},cytonSerialSettings);cognixionONESerialSettings.sps=sps6;cognixionONESerialSettings.deviceName="cognixionONE";var defaultChartSetting4={nSec:10,sps:sps6,units:"mV"};var cognixionONEChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting4)),"1":JSON.parse(JSON.stringify(defaultChartSetting4)),"2":JSON.parse(JSON.stringify(defaultChartSetting4)),"3":JSON.parse(JSON.stringify(defaultChartSetting4)),"4":JSON.parse(JSON.stringify(defaultChartSetting4)),"5":JSON.parse(JSON.stringify(defaultChartSetting4)),"6":JSON.parse(JSON.stringify(defaultChartSetting4)),"7":JSON.parse(JSON.stringify(defaultChartSetting4))}};var PeanutCodes={2:{type:"POOR_SIGNAL",format:"<B",byteLength:1},144:{type:"heg",format:"<i",byteLength:4},145:{type:"filteredHEG",format:"<i",byteLength:4},147:{type:"rawdata4",format:"<iiii",byteLength:4*4},148:{type:"rawdata6",format:"<iiiiii",byteLength:4*6},160:{type:"sampleNumber",format:"<i",byteLength:4},176:{type:"debug0",format:"<i",byteLength:4},177:{type:"debug1",format:"<i",byteLength:4},178:{type:"debug2",format:"<i",byteLength:4},179:{type:"debug3",format:"<i",byteLength:4},180:{type:"debug4",format:"<iiiiii",byteLength:4*6},181:{type:"debug4",format:"<iiiiii",byteLength:4*6},182:{type:"rawdata27",format:"<B"+"i".repeat(26),byteLength:1+4*26}};function peanutcodec(data){let result={};let i3=0;while(i3<data.length){if(PeanutCodes[data[i3]]&&i3+1+PeanutCodes[data[i3]].byteLength<=data.length){let slice=data.slice(i3+1,i3+1+PeanutCodes[data[i3]].byteLength).buffer;let unpacked=ByteParser2.struct(PeanutCodes[data[i3]].format).unpack(slice);let code=PeanutCodes[data[i3]].type;if(code==="unfilteredHEG"||code==="heg")unpacked=unpacked[0]/256;else if(code==="POOR_SIGNAL"||code==="sampleNumber"||code==="debug0"||code==="debug1"||code==="debug2"||code==="debug3")unpacked=unpacked[0];if(!result[PeanutCodes[data[i3]].type]){if(Array.isArray(unpacked))result[PeanutCodes[data[i3]].type]=unpacked;else result[PeanutCodes[data[i3]].type]=[unpacked]}else{if(Array.isArray(unpacked))result[PeanutCodes[data[i3]].type].push(...unpacked);else result[PeanutCodes[data[i3]].type].push(unpacked)}i3+=PeanutCodes[data[i3]].byteLength+1}else i3++}result.timestamp=Date.now();return result}var peanutSerialSettings={deviceType:"USB",deviceName:"peanut",baudRate:38400,bufferSize:400,write:"protocol 3\\n",buffering:{searchBytes:new Uint8Array([170,170])},codec:peanutcodec,sps:10.101};var sealevel_hpa=1013.25;var bme280codec=data=>{let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={timestamp:Date.now(),temp:[],pressure:[],altitude:[]};let mode=0;if(arr[0].length===74)mode=1;if(!mode){for(let j=0;j<3;j++){let i3=j*16+2;let tint=ByteParser2.bytesToInt32(arr[3+i3],arr[2+i3],arr[1+i3],arr[0+i3]);let tfrac=ByteParser2.bytesToInt32(arr[7+i3],arr[6+i3],arr[5+i3],arr[4+i3]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser2.bytesToInt32(arr[11+i3],arr[10+i3],arr[9+i3],arr[8+i3]);let pfrac=ByteParser2.bytesToInt32(arr[15+i3],arr[14+i3],arr[13+i3],arr[12+i3]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}else{output.humidity=[];for(let j=0;j<3;j++){let i3=j*24+2;let tint=ByteParser2.bytesToInt32(arr[3+i3],arr[2+i3],arr[1+i3],arr[0+i3]);let tfrac=ByteParser2.bytesToInt32(arr[7+i3],arr[6+i3],arr[5+i3],arr[4+i3]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser2.bytesToInt32(arr[11+i3],arr[10+i3],arr[9+i3],arr[8+i3]);let pfrac=ByteParser2.bytesToInt32(arr[15+i3],arr[14+i3],arr[13+i3],arr[12+i3]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));let hint=ByteParser2.bytesToInt32(arr[19+i3],arr[18+i3],arr[17+i3],arr[16+i3]);let hfrac=ByteParser2.bytesToInt32(arr[23+i3],arr[22+i3],arr[21+i3],arr[20+i3]);output.humidity.push(hint+hfrac/Math.pow(10,Math.ceil(Math.log10(hfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}return output};function altitude(pressure,temperature){return 44330*(1-Math.pow(pressure/sealevel_hpa,.1903))}function nrf5x_usbcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={};if(arr[0]===2){Object.assign(output,ads131m08codec(arr.subarray(2)))}else if(arr[0]===3){let result=ads131m08codec(arr.subarray(2));Object.keys(result).forEach((key,i3)=>{output[i3+8]=result[key]})}else if(arr[0]===4){Object.assign(output,mpu6050codec(arr.subarray(2)))}else if(arr[0]===5){Object.assign(output,max3010xcodec(arr.subarray(2)))}else if(arr[0]===6){Object.assign(output,bme280codec(arr.subarray(2)))}else{Object.assign(output,ads131m08codec(arr))}return output}var nrf5xSerialSettings={deviceType:"USB",deviceName:"nrf5x",baudRate:115200,buffering:{searchBytes:new Uint8Array([240,240])},codec:nrf5x_usbcodec,sps:250};var nrf5xBLESettings={deviceType:"BLE",deviceName:"nrf5x",sps:250,services:{"0000cafe-b0ba-8bad-f00d-deadbeef0000":{"0001cafe-b0ba-8bad-f00d-deadbeef0000":{write:void 0},"0002cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0003cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:max3010xcodec,sps:100},"0004cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:mpu6050codec,sps:100},"0005cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0006cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:bme280codec,sps:3.33}}}};var defaultChartSetting5={nSec:10,sps:250,units:"mV"};var nrf5x_usbChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting5)),"1":JSON.parse(JSON.stringify(defaultChartSetting5)),"2":JSON.parse(JSON.stringify(defaultChartSetting5)),"3":JSON.parse(JSON.stringify(defaultChartSetting5)),"4":JSON.parse(JSON.stringify(defaultChartSetting5)),"5":JSON.parse(JSON.stringify(defaultChartSetting5)),"6":JSON.parse(JSON.stringify(defaultChartSetting5)),"7":JSON.parse(JSON.stringify(defaultChartSetting5))},generateNewLines:true,cleanGeneration:false};var gain2=32;var nbits2=24;var vref2=1.2;var defaultsetting3={sps:250,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref2/(gain2*(Math.pow(2,nbits2)-1))};var nrf5x_usbFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting3)),"1":JSON.parse(JSON.stringify(defaultsetting3)),"2":JSON.parse(JSON.stringify(defaultsetting3)),"3":JSON.parse(JSON.stringify(defaultsetting3)),"4":JSON.parse(JSON.stringify(defaultsetting3)),"5":JSON.parse(JSON.stringify(defaultsetting3)),"6":JSON.parse(JSON.stringify(defaultsetting3)),"7":JSON.parse(JSON.stringify(defaultsetting3)),"8":JSON.parse(JSON.stringify(defaultsetting3)),"9":JSON.parse(JSON.stringify(defaultsetting3)),"10":JSON.parse(JSON.stringify(defaultsetting3)),"11":JSON.parse(JSON.stringify(defaultsetting3)),"12":JSON.parse(JSON.stringify(defaultsetting3)),"13":JSON.parse(JSON.stringify(defaultsetting3)),"14":JSON.parse(JSON.stringify(defaultsetting3)),"15":JSON.parse(JSON.stringify(defaultsetting3))};var textdecoder2=new TextDecoder;function statechangercodec(value){let output={timestamp:0,left_red:0,left_infrared:0,left_heg:0,center_red:0,center_infrared:0,center_heg:0,right_red:0,right_infrared:0,right_heg:0};let txt=textdecoder2.decode(value);let line=txt.split("|");if(line.length>=5){output.timestamp=Date.now();output.left_red=parseInt(line[1]);output.left_infrared=parseInt(line[2]);output.left_heg=parseFloat(line[3]);output.center_red=parseInt(line[4]);output.center_infrared=parseInt(line[5]);output.center_heg=parseFloat(line[6]);output.right_red=parseInt(line[7]);output.right_infrared=parseInt(line[8]);output.right_heg=parseFloat(line[9]);return output}else return txt}var statechangerSerialSettings={deviceType:"USB",deviceName:"statechanger",baudRate:115200,codec:statechangercodec,sps:20};var statechangerBLESettings={deviceType:"BLE",deviceName:"statechanger",sps:20,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:statechangercodec}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};function blueberrycodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.red/(.5*(output.ir+output.ir2));return output}var sps7=40;var blueberryBLESettings={deviceType:"BLE",deviceName:"blueberry",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"3f3e3d3c-3b3a-3938-3736-353433323130":{notify:true,notifyCallback:void 0,codec:blueberrycodec,sps:sps7}}},sps:sps7};function blueberryshortcodec(value){let output={sred:value.getInt32(2),sir:value.getInt32(6),sir2:value.getInt32(10),timestamp:Date.now()};output.sheg=output.sred/(.5*(output.sir+output.sir2));return output}function blueberrylongcodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.sred/(.5*(output.ir+output.ir2));return output}var sps8=40;var blueberry2BLESettings={deviceType:"BLE",deviceName:"blueberry2",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"4f4e4d4c-4b6a-6968-6766-656463426160":{notify:true,notifyCallback:void 0,codec:blueberrylongcodec,sps:sps8},"4f4e4d4c-4b5a-5958-5756-555453425150":{notify:true,notifyCallback:void 0,codec:blueberryshortcodec,sps:sps8}}},sps:sps8};var defaultsetting1={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var ganglionFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting1)),"1":JSON.parse(JSON.stringify(defaultsetting1)),"2":JSON.parse(JSON.stringify(defaultsetting1)),"3":JSON.parse(JSON.stringify(defaultsetting1))};var defaultChartSetting6={nSec:10,sps:250,units:"mV"};var ganglionChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting6)),"1":JSON.parse(JSON.stringify(defaultChartSetting6)),"2":JSON.parse(JSON.stringify(defaultChartSetting6)),"3":JSON.parse(JSON.stringify(defaultChartSetting6)),"ax":{nSec:10,sps:250,units:"mg"},"ay":{nSec:10,sps:250,units:"mg"},"az":{nSec:10,sps:250,units:"mg"}},generateNewLines:true};var defaultsetting4={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var museFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting4)),"1":JSON.parse(JSON.stringify(defaultsetting4)),"2":JSON.parse(JSON.stringify(defaultsetting4)),"3":JSON.parse(JSON.stringify(defaultsetting4)),"4":JSON.parse(JSON.stringify(defaultsetting4))};function hrcodec(data){return{hr:data.getInt8(1),timestamp:Date.now()}}var heartRateBLESettings={deviceType:"BLE",deviceName:"heartrate",services:{"heart_rate":{"heart_rate_measurement":{notify:true,notifyCallback:void 0,codec:hrcodec}}}};var simulatorSettings={sps:250,deviceType:"CUSTOM",deviceName:"simulator",simulate:{"0":{sps:250,freq:1,amplitude:1,offset:0},"1":{sps:250,freq:10,amplitude:1,offset:0},"2":{sps:250,freq:100,amplitude:.5,offset:.5},"3":{sps:250,freq:25,amplitude:1,offset:0}},connect:(settings={})=>{return new Promise(async(res,rej)=>{let _id=`simulated${Math.floor(Math.random()*1e15)}`;let info={_id,settings:Object.assign(Object.assign({},simulatorSettings),settings)};info.settings.looping=true;let loopTime=50;let lastTime=Date.now();let loop3=()=>{if(info.settings.looping){let newData={};let now=Date.now();let frame=now-lastTime;for(const key in info.settings.simulate){let newPoints=Math.floor(info.settings.simulate[key].sps*frame/1e3);newData[key]=new Array(newPoints).fill(0);newData[key]=newData[key].map((v2,i3)=>{return Math.sin(2*Math.PI*info.settings.simulate[key].freq*.001*(lastTime+frame*(i3+1)/newPoints))*info.settings.simulate[key].amplitude+info.settings.simulate[key].offset})}lastTime=now;newData.timestamp=lastTime;info.settings.ondata(newData);setTimeout(()=>{loop3()},loopTime)}};loop3();if(info.settings.onconnect)info.settings.onconnect(info);res(info)})},codec:reading=>{return reading},disconnect:info=>{console.log(info);info.settings.looping=false;info.settings.ondisconnect(info)},onconnect:info=>{console.log("simulator connected!",info)},ondisconnect:info=>{console.log("simulator disconnected!",info)},ondata:data=>{}};var Devices={BLE:{"nrf5x":nrf5xBLESettings,"hegduino":hegduinoBLESettings,"hegduinoV1":hegduinoV1BLESettings,"cognixionONE":cognixionONEBLESettings,"statechanger":statechangerBLESettings,"blueberry":blueberryBLESettings,"blueberry2":blueberry2BLESettings,"heart_rate":heartRateBLESettings},USB:{"nrf5x":nrf5xSerialSettings,"freeEEG32":freeeeg32SerialSettings,"freeEEG32_optical":freeeeg32_optical_SerialSettings,"freeEEG128":freeeeg128SerialSettings,"hegduino":hegduinoSerialSettings,"hegduinoV1":hegduinoV1SerialSettings,"cyton":cytonSerialSettings,"cyton_daisy":daisycytonSerialSettings,"peanut":peanutSerialSettings,"statechanger":statechangerSerialSettings,"cognixionONE":cytonSerialSettings},BLE_CUSTOM:{},USB_CUSTOM:{},CUSTOM:{"simulator":simulatorSettings}};var textdecoder3=new TextDecoder;var decoders={"raw":data=>{if(data?.buffer)return Array.from(new Uint8Array(data));else return data},"utf8":data=>{return textdecoder3.decode(data)},"console-f12":data=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(data);return data},"debug":(data,debugmessage)=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(debugmessage,data);return data},"ads131m08":ads131m08codec,"arduino_ads131m08":ads131m08_arduinocodec,"max3010x":max3010xcodec,"mpu6050":mpu6050codec,"bme280":bme280codec,"freeeeg32":freeeeg32codec,"freeeeg128":freeeeg128codec,"cyton":cytoncodec,"cognixionONE_BLE":cognixionONE_EEG_codec,"hegduino":hegduinocodec,"nrf5x":nrf5x_usbcodec,"peanut":peanutcodec,"statechanger":statechangercodec,"blueberry":blueberrycodec,"heart_rate":hrcodec};var BiquadChannelFilterer=class{constructor(options={sps:512,useSMA4:false,useNotch50:true,useNotch60:true,useLowpass:false,lowpassHz:100,useBandpass:false,bandpassLower:3,bandpassUpper:45,useDCBlock:true,DCBresonance:.995,trimOutliers:false,outlierTolerance:.2,useScaling:false,scalar:1}){this.idx=0;this.sps=options.sps;this.bandpassLower=options.bandpassLower?options.bandpassLower:3;this.bandpassUpper=options.bandpassUpper?options.bandpassUpper:45;this.useSMA4=options.useSMA4;this.last4=[];this.useNotch50=options.useNotch50;this.useNotch60=options.useNotch60;this.useLowpass=options.useLowpass;this.lowpassHz=options.lowpassHz?options.lowpassHz:100;this.useBandpass=options.useBandpass;this.useDCBlock=options.useDCBlock;this.DCBresonance=options.DCBresonance?options.DCBresonance:.995;this.useScaling=options.useScaling;this.scalar=options.scalar;this.trimOutliers=options.trimOutliers;this.outlierTolerance=options.outlierTolerance;let sps10=this.sps;this.notch50=[makeNotchFilter(50,sps10,2),makeNotchFilter(100,sps10,2)];this.notch60=[makeNotchFilter(60,sps10,2),makeNotchFilter(120,sps10,2)];this.lp1=[new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1)];this.dcb=new DCBlocker(options.DCBresonance?options.DCBresonance:.995)}reset(sps10=this.sps){this.notch50=[makeNotchFilter(50,sps10,2),makeNotchFilter(100,sps10,2)];this.notch60=[makeNotchFilter(60,sps10,2),makeNotchFilter(120,sps10,2)];this.lp1=[new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10),new Biquad2("lowpass",this.lowpassHz,sps10)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps10,1)];this.dcb=new DCBlocker(this.DCBresonance)}setBandpass(bandpassLower=this.bandpassLower,bandpassUpper=this.bandpassUpper,sps10=this.sps){this.bandpassLower=bandpassLower;this.bandpassUpper=bandpassUpper;this.bp1=[makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10),makeBandpassFilter(bandpassLower,bandpassUpper,sps10)]}apply(latestData=0){let out=latestData;if(this.useScaling===true){out*=this.scalar}if(this.filtered&&this.trimOutliers&&this.outlierTolerance){if(Math.abs(out-this.filtered)>this.outlierTolerance){out=this.filtered}}if(this.useDCBlock===true){out=this.dcb.applyFilter(out)}if(this.useSMA4===true){if(this.last4.length<4){this.last4.push(out)}else{out=this.last4.reduce((accumulator,currentValue)=>accumulator+currentValue)/this.last4.length;this.last4.shift();this.last4.push(out)}}if(this.useNotch50===true){this.notch50.forEach((f,i3)=>{out=f.applyFilter(out)})}if(this.useNotch60===true){this.notch60.forEach((f,i3)=>{out=f.applyFilter(out)})}if(this.useLowpass===true){this.lp1.forEach((f,i3)=>{out=f.applyFilter(out)})}if(this.useBandpass===true){this.bp1.forEach((f,i3)=>{out=f.applyFilter(out)})}this.filtered=out;this.idx++;return out}};var Biquad2=class{constructor(type,freq,sps10,Q=1/Math.sqrt(2),dbGain=0){this.a0=0;this.a1=0;this.a2=0;this.b0=0;this.b1=0;this.b2=0;this.x1=0;this.x2=0;this.y1=0;this.y2=0;let types=["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"];if(types.indexOf(type)<0){console.error("Valid types: \'lowpass\',\'highpass\',\'bandpass\',\'notch\',\'peak\',\'lowshelf\',\'highshelf\'");return}this.type=type;this.freq=freq;this.sps=sps10;this.Q=Q;this.dbGain=dbGain;let A4=Math.pow(10,dbGain/40);let omega=2*Math.PI*freq/sps10;let sn=Math.sin(omega);let cs=Math.cos(omega);let alpha=sn/(2*Q);let beta=Math.sqrt(A4+A4);this[type](A4,sn,cs,alpha,beta);this.b0/=this.a0;this.b1/=this.a0;this.b2/=this.a0;this.a1/=this.a0;this.a2/=this.a0}lowpass(A4,sn,cs,alpha,beta){this.b0=(1-cs)*.5;this.b1=1-cs;this.b2=(1-cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}highpass(A4,sn,cs,alpha,beta){this.b0=(1+cs)*.5;this.b1=-(1+cs);this.b2=(1+cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}bandpass(A4,sn,cs,alpha,beta){this.b0=alpha;this.b1=0;this.b2=-alpha;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}notch(A4,sn,cs,alpha,beta){this.b0=1;this.b1=-2*cs;this.b2=1;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}peak(A4,sn,cs,alpha,beta){this.b0=1+alpha*A4;this.b1=-2*cs;this.b2=1-alpha*A4;this.a0=1+alpha/A4;this.a1=-2*cs;this.a2=1-alpha/A4}lowshelf(A4,sn,cs,alpha,beta){this.b0=A4*(A4+1-(A4-1)*cs+beta*sn);this.b1=2*A4*(A4-1-(A4+1)*cs);this.b2=A4*(A4+1-(A4-1)*cs-beta*sn);this.a0=A4+1+(A4+1)*cs+beta*sn;this.a1=2*(A4-1+(A4+1)*cs);this.a2=A4+1+(A4-1)*cs-beta*sn}highshelf(A4,sn,cs,alpha,beta){this.b0=A4*(A4+1+(A4-1)*cs+beta*sn);this.b1=2*A4*(A4-1+(A4+1)*cs);this.b2=A4*(A4+1-(A4-1)*cs-beta*sn);this.a0=A4+1-(A4+1)*cs-beta*sn;this.a1=2*(A4-1-(A4+1)*cs);this.a2=A4+1-(A4-1)*cs-beta*sn}applyFilter(signal_step){let y4=this.b0*signal_step+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;this.x2=this.x1;this.x1=signal_step;this.y2=this.y1;this.y1=y4;return y4}zResult(freq){try{let phi=Math.pow(Math.sin(Math.PI*freq*2/(2*this.sps)),2);let result=(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*phi+16*this.b0*this.b2*phi*phi)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*phi+16*this.a2*phi*phi);return result}catch(err){return-200}}static calcCenterFrequency(freqStart,freqEnd){return(freqStart+freqEnd)/2}static calcBandwidth(freqStart,freqEnd){return freqEnd-this.calcCenterFrequency(freqStart,freqEnd)}static calcBandpassQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*Math.sqrt((frequency-bandwidth)*(frequency+bandwidth))/(2*bandwidth);return Q}static calcNotchQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*frequency*bandwidth/Math.sqrt((frequency-bandwidth)*(frequency+bandwidth));return Q}};var DCBlocker=class{constructor(r=.995){this.r=r;this.y1=this.y2=this.x1=this.x2=0}applyFilter(signal_step){this.x2=this.x1;this.x1=signal_step;let y4=this.x1-this.x2+this.r*this.y1;this.y2=this.y1;this.y1=y4;return y4}};var makeNotchFilter=(frequency,sps10,bandwidth)=>{return new Biquad2("notch",frequency,sps10,Biquad2.calcNotchQ(frequency,bandwidth),0)};var makeBandpassFilter=(freqStart,freqEnd,sps10,resonance=Math.pow(10,Math.floor(Math.log10(Biquad2.calcCenterFrequency(freqStart,freqEnd)))))=>{return new Biquad2("bandpass",Biquad2.calcCenterFrequency(freqStart,freqEnd),sps10,Biquad2.calcBandpassQ(Biquad2.calcCenterFrequency(freqStart,freqEnd),Biquad2.calcBandwidth(freqStart,freqEnd),resonance),0)};function parseFunctionFromText2(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs4(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs2}var stringifyFast2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p2 in value[prop]){if(Array.isArray(value[prop][p2])){if(value[prop][p2].length>20)obj[prop][p2]=value[prop][p2].slice(value[prop][p2].length-20);else obj[prop][p2]=value[prop][p2]}else{if(value[prop][p2]!=null){let con=value[prop][p2].constructor.name;if(con.includes("Set")){obj[prop][p2]=Array.from(value[prop][p2])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p2]="instanceof_"+con}else{obj[prop][p2]=value[prop][p2]}}else{obj[prop][p2]=value[prop][p2]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast4(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast2}function loadStreamWorkerGlobals(){globalThis.Devices=Devices;globalThis.WebSerial=WebSerial;globalThis.decoders=decoders;globalThis.decoder="raw";globalThis.ByteParser=ByteParser2;globalThis.filtering=true;globalThis.filters={};globalThis.BiquadChannelFilterer=BiquadChannelFilterer;globalThis.ArrayManip=ArrayManip2}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){loadStreamWorkerGlobals()}var streamWorkerRoutes={"transferDevice":function transferDevice(device,worker){let cpy=Object.assign({},device);for(const key in cpy){if(typeof cpy[key]==="function")cpy[key]=cpy[key].toString()}worker.send({route:"receiveDevice",args:cpy})},"receiveDevice":function receiveDevice(device){for(const key in device){if(typeof device[key]==="string"){let fn=parseFunctionFromText2(device[key]);if(typeof fn==="function"){device[key]=fn}}}if(!globalThis.Devices[device.deviceType])globalThis.Devices[device.deviceType]={};globalThis.Devices[device.deviceType][device.deviceName]=device},"receiveDecoder":function receiveDecoder(decoder3,decoderName){globalThis.decoders[decoderName]=(0,eval)("("+decoder3+")")},"receiveCodec":function receiveDeviceCodec(decoder3,deviceType,device,service,characteristic){let codec=parseFunctionFromText2(decoder3);if(codec){if(deviceType==="BLE"&&service&&characteristic){if(globalThis.Devices[deviceType][device]){if(globalThis.Devices[deviceType][device][service]){if(globalThis.Devices[deviceType][device][characteristic]){globalThis.Devices[deviceType][device][characteristic].codec=codec}else{globalThis.Devices[deviceType][device][characteristic]={codec}}}else{globalThis.Devices[deviceType][device]={[characteristic]:{codec}}}}}else if(globalThis.Devices[deviceType][device]?.codec){if(globalThis.Devices[deviceType][device])globalThis.Devices[deviceType][device].codec=codec;else{globalThis.Devices[deviceType][device]={codec}}}}},"decode":function decode(data){return globalThis.decoder(data)},"decodeAndParse":function decodeAndParse(data){let decoded=this.__node.graph.run("decode",data);if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v2=>filter.apply(v2))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v2=>filter.apply(v2))}}}}return parsed}}return decoded},"setActiveDecoder":function setActiveDecoder(deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device]?.codec;else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device][service][characteristic].codec;return true},"decodeDevice":function decodeDevice(data,deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)return globalThis.Devices[deviceType][device].codec(data);else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)return globalThis.Devices[deviceType][device][service][characteristic].codec(data)},"decodeAndParseDevice":function decodeAndParseDevice(data,deviceType,deviceName,service,characteristic){let decoded;if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][deviceName]?.services[service]?.[characteristic]?.codec)decoded=globalThis.Devices[deviceType][deviceName].services[service][characteristic].codec(data);else if(globalThis.Devices[deviceType][deviceName]?.codec)decoded=globalThis.Devices[deviceType][deviceName].codec(data);else decoded=data;if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v2=>filter.apply(v2))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v2=>filter.apply(v2))}else if(typeof parsed[prop]==="number"){parsed[prop]=filter.apply(parsed[prop])}}}}return parsed}}return decoded},"toggleAnim":function toggleAnim(){globalThis.runningAnim=!globalThis.runningAnim;return globalThis.runningAnim},"setFilters":function setFilters(filters,clearFilters=false){if(!globalThis.filters||clearFilters)globalThis.filters={};for(const key in filters){globalThis.filters[key]=new BiquadChannelFilterer(filters[key])}return true},"getFilterSettings":function getFilterSettings(){if(globalThis.filters){let filters={};for(const key in globalThis.filters){filters[key]={sps:globalThis.filters[key].sps,useScaling:globalThis.filters[key].useScaling,scalar:globalThis.filters[key].scalar,useNotch50:globalThis.filters[key].useNotch50,useNotch60:globalThis.filters[key].useNotch60,useDCBlock:globalThis.filters[key].useDCBlock,useLowpass:globalThis.filters[key].useLowpass,lowpassHz:globalThis.filters[key].lowpassHz,useBandpass:globalThis.filters[key].useBandpass,bandpassLower:globalThis.filters[key].bandpassLower,bandpassUpper:globalThis.filters[key].bandpassUpper}}return filters}return void 0},"setupSerial":function setupSerial(){globalThis.Serial=new globalThis.WebSerial;globalThis.decoder="raw";console.log("worker: Setting up Serial",globalThis.Serial);return true},"openPort":function openPort(settings){const WorkerService3=this.__node.graph;if(!globalThis.Serial)WorkerService3.run("setupSerial");return new Promise((res,rej)=>{globalThis.Serial.getPorts().then(ports=>{const Serial=globalThis.Serial;let port=ports.find(port2=>{return port2.getInfo().usbVendorId===settings.usbVendorId&&port2.getInfo().usbProductId===settings.usbProductId});if(port){let options=Object.assign({},settings);if(typeof settings.pipeTo==="object"&&settings.pipeTo.extraArgs&&globalThis.Devices?.[settings.pipeTo.extraArgs[0]]?.[settings.pipeTo.extraArgs[1]]){options.onconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].onconnect;options.ondisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].ondisconnect;options.beforedisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].beforedisconnect}Serial.openPort(port,options).then(()=>{const stream=Serial.createStream({port,settings:options,frequency:settings.frequency?settings.frequency:10,buffering:settings.buffering,ondata:value=>{if(stream.settings.pipeTo){if(typeof stream.settings.pipeTo==="string")WorkerService3.transmit(value,stream.settings.pipeTo,[value.buffer]);else if(stream.settings.pipeTo?.route){let args=value;if(stream.settings.pipeTo.extraArgs)args=[value,...stream.settings.pipeTo.extraArgs];WorkerService3.transmit({route:stream.settings.pipeTo.route,args},stream.settings.pipeTo._id,[value.buffer])}}else{WorkerService3.transmit(value,void 0,[value.buffer])}}});Serial.readStream(stream);port.ondisconnect=()=>{postMessage(`${stream._id} disconnected`)};res({_id:stream._id,settings,info:stream.info})}).catch(()=>{postMessage(`disconnected`)});;}else{rej(false)}})})},"closeStream":function closeStream(streamId){return new Promise((res,rej)=>{const Serial=globalThis.Serial;let ondisconnect;if(Serial.streams[streamId].port?.ondisconnect)ondisconnect=Serial.streams[streamId].port.ondisconnect;Serial.closeStream(Serial.streams[streamId]).then(resolved=>{if(ondisconnect)ondisconnect(void 0);res(resolved)}).catch(rej)})},"writeStream":function writeStream(streamId,message){globalThis.Serial.writeStream(globalThis.Serial.streams[streamId],message);return true},"updateStreamSettings":function updateStreamSettings(streamId,settings){if(globalThis.Serial?.streams[streamId]){for(const key in settings){if(typeof settings[key]==="object"){Object.assign(globalThis.Serial.streams[streamId].settings[key],settings[key])}else globalThis.Serial.streams[streamId][key]=settings[key]}}}};var __create3=Object.create;var __defProp3=Object.defineProperty;var __getOwnPropDesc3=Object.getOwnPropertyDescriptor;var __getOwnPropNames3=Object.getOwnPropertyNames;var __getProtoOf3=Object.getPrototypeOf;var __hasOwnProp3=Object.prototype.hasOwnProperty;var __require3=(x3=>typeof __require!=="undefined"?__require:typeof Proxy!=="undefined"?new Proxy(x3,{get:(a,b)=>(typeof __require!=="undefined"?__require:a)[b]}):x3)(function(x3){if(typeof __require!=="undefined")return __require.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x3+\'" is not supported\')});var __esm=(fn,res)=>function __init(){return fn&&(res=(0,fn[__getOwnPropNames3(fn)[0]])(fn=0)),res};var __commonJS3=(cb,mod)=>function __require32(){return mod||(0,cb[__getOwnPropNames3(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __export2=(target,all)=>{for(var name2 in all)__defProp3(target,name2,{get:all[name2],enumerable:true})};var __copyProps3=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames3(from))if(!__hasOwnProp3.call(to,key)&&key!==except)__defProp3(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc3(from,key))||desc.enumerable})}return to};var __toESM3=(mod,isNodeMode,target)=>(target=mod!=null?__create3(__getProtoOf3(mod)):{},__copyProps3(isNodeMode||!mod||!mod.__esModule?__defProp3(target,"default",{value:mod,enumerable:true}):target,mod));var createCapacitorPlatforms;var initPlatforms;var CapacitorPlatforms;var addPlatform;var setPlatform;var ExceptionCode;var CapacitorException;var getPlatformId;var createCapacitor;var initCapacitorGlobal;var Capacitor;var registerPlugin;var Plugins;var WebPlugin;var init_dist=__esm({"src/ble/node_modules/@capacitor/core/dist/index.js"(){createCapacitorPlatforms=win=>{const defaultPlatformMap=new Map;defaultPlatformMap.set("web",{name:"web"});const capPlatforms=win.CapacitorPlatforms||{currentPlatform:{name:"web"},platforms:defaultPlatformMap};const addPlatform2=(name2,platform)=>{capPlatforms.platforms.set(name2,platform)};const setPlatform2=name2=>{if(capPlatforms.platforms.has(name2)){capPlatforms.currentPlatform=capPlatforms.platforms.get(name2)}};capPlatforms.addPlatform=addPlatform2;capPlatforms.setPlatform=setPlatform2;return capPlatforms};initPlatforms=win=>win.CapacitorPlatforms=createCapacitorPlatforms(win);CapacitorPlatforms=initPlatforms(typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{});addPlatform=CapacitorPlatforms.addPlatform;setPlatform=CapacitorPlatforms.setPlatform;(function(ExceptionCode2){ExceptionCode2["Unimplemented"]="UNIMPLEMENTED";ExceptionCode2["Unavailable"]="UNAVAILABLE"})(ExceptionCode||(ExceptionCode={}));CapacitorException=class extends Error{constructor(message,code,data){super(message);this.message=message;this.code=code;this.data=data}};getPlatformId=win=>{var _a,_b;if(win===null||win===void 0?void 0:win.androidBridge){return"android"}else if((_b=(_a=win===null||win===void 0?void 0:win.webkit)===null||_a===void 0?void 0:_a.messageHandlers)===null||_b===void 0?void 0:_b.bridge){return"ios"}else{return"web"}};createCapacitor=win=>{var _a,_b,_c,_d,_e;const capCustomPlatform=win.CapacitorCustomPlatform||null;const cap=win.Capacitor||{};const Plugins2=cap.Plugins=cap.Plugins||{};const capPlatforms=win.CapacitorPlatforms;const defaultGetPlatform=()=>{return capCustomPlatform!==null?capCustomPlatform.name:getPlatformId(win)};const getPlatform=((_a=capPlatforms===null||capPlatforms===void 0?void 0:capPlatforms.currentPlatform)===null||_a===void 0?void 0:_a.getPlatform)||defaultGetPlatform;const defaultIsNativePlatform=()=>getPlatform()!=="web";const isNativePlatform=((_b=capPlatforms===null||capPlatforms===void 0?void 0:capPlatforms.currentPlatform)===null||_b===void 0?void 0:_b.isNativePlatform)||defaultIsNativePlatform;const defaultIsPluginAvailable=pluginName=>{const plugin=registeredPlugins.get(pluginName);if(plugin===null||plugin===void 0?void 0:plugin.platforms.has(getPlatform())){return true}if(getPluginHeader(pluginName)){return true}return false};const isPluginAvailable=((_c=capPlatforms===null||capPlatforms===void 0?void 0:capPlatforms.currentPlatform)===null||_c===void 0?void 0:_c.isPluginAvailable)||defaultIsPluginAvailable;const defaultGetPluginHeader=pluginName=>{var _a2;return(_a2=cap.PluginHeaders)===null||_a2===void 0?void 0:_a2.find(h=>h.name===pluginName)};const getPluginHeader=((_d=capPlatforms===null||capPlatforms===void 0?void 0:capPlatforms.currentPlatform)===null||_d===void 0?void 0:_d.getPluginHeader)||defaultGetPluginHeader;const handleError=err=>win.console.error(err);const pluginMethodNoop=(_target,prop,pluginName)=>{return Promise.reject(`${pluginName} does not have an implementation of "${prop}".`)};const registeredPlugins=new Map;const defaultRegisterPlugin=(pluginName,jsImplementations={})=>{const registeredPlugin=registeredPlugins.get(pluginName);if(registeredPlugin){console.warn(`Capacitor plugin "${pluginName}" already registered. Cannot register plugins twice.`);return registeredPlugin.proxy}const platform=getPlatform();const pluginHeader=getPluginHeader(pluginName);let jsImplementation;const loadPluginImplementation=async()=>{if(!jsImplementation&&platform in jsImplementations){jsImplementation=typeof jsImplementations[platform]==="function"?jsImplementation=await jsImplementations[platform]():jsImplementation=jsImplementations[platform]}else if(capCustomPlatform!==null&&!jsImplementation&&"web"in jsImplementations){jsImplementation=typeof jsImplementations["web"]==="function"?jsImplementation=await jsImplementations["web"]():jsImplementation=jsImplementations["web"]}return jsImplementation};const createPluginMethod=(impl,prop)=>{var _a2,_b2;if(pluginHeader){const methodHeader=pluginHeader===null||pluginHeader===void 0?void 0:pluginHeader.methods.find(m=>prop===m.name);if(methodHeader){if(methodHeader.rtype==="promise"){return options=>cap.nativePromise(pluginName,prop.toString(),options)}else{return(options,callback)=>cap.nativeCallback(pluginName,prop.toString(),options,callback)}}else if(impl){return(_a2=impl[prop])===null||_a2===void 0?void 0:_a2.bind(impl)}}else if(impl){return(_b2=impl[prop])===null||_b2===void 0?void 0:_b2.bind(impl)}else{throw new CapacitorException(`"${pluginName}" plugin is not implemented on ${platform}`,ExceptionCode.Unimplemented)}};const createPluginMethodWrapper=prop=>{let remove;const wrapper=(...args)=>{const p2=loadPluginImplementation().then(impl=>{const fn=createPluginMethod(impl,prop);if(fn){const p22=fn(...args);remove=p22===null||p22===void 0?void 0:p22.remove;return p22}else{throw new CapacitorException(`"${pluginName}.${prop}()" is not implemented on ${platform}`,ExceptionCode.Unimplemented)}});if(prop==="addListener"){p2.remove=async()=>remove()}return p2};wrapper.toString=()=>`${prop.toString()}() { [capacitor code] }`;Object.defineProperty(wrapper,"name",{value:prop,writable:false,configurable:false});return wrapper};const addListener=createPluginMethodWrapper("addListener");const removeListener=createPluginMethodWrapper("removeListener");const addListenerNative=(eventName,callback)=>{const call=addListener({eventName},callback);const remove=async()=>{const callbackId=await call;removeListener({eventName,callbackId},callback)};const p2=new Promise(resolve=>call.then(()=>resolve({remove})));p2.remove=async()=>{console.warn(`Using addListener() without \'await\' is deprecated.`);await remove()};return p2};const proxy=new Proxy({},{get(_,prop){switch(prop){case"$$typeof":return void 0;case"toJSON":return()=>({});case"addListener":return pluginHeader?addListenerNative:addListener;case"removeListener":return removeListener;default:return createPluginMethodWrapper(prop)}}});Plugins2[pluginName]=proxy;registeredPlugins.set(pluginName,{name:pluginName,proxy,platforms:new Set([...Object.keys(jsImplementations),...pluginHeader?[platform]:[]])});return proxy};const registerPlugin2=((_e=capPlatforms===null||capPlatforms===void 0?void 0:capPlatforms.currentPlatform)===null||_e===void 0?void 0:_e.registerPlugin)||defaultRegisterPlugin;if(!cap.convertFileSrc){cap.convertFileSrc=filePath=>filePath}cap.getPlatform=getPlatform;cap.handleError=handleError;cap.isNativePlatform=isNativePlatform;cap.isPluginAvailable=isPluginAvailable;cap.pluginMethodNoop=pluginMethodNoop;cap.registerPlugin=registerPlugin2;cap.Exception=CapacitorException;cap.DEBUG=!!cap.DEBUG;cap.isLoggingEnabled=!!cap.isLoggingEnabled;cap.platform=cap.getPlatform();cap.isNative=cap.isNativePlatform();return cap};initCapacitorGlobal=win=>win.Capacitor=createCapacitor(win);Capacitor=initCapacitorGlobal(typeof globalThis!=="undefined"?globalThis:typeof self!=="undefined"?self:typeof window!=="undefined"?window:typeof global!=="undefined"?global:{});registerPlugin=Capacitor.registerPlugin;Plugins=Capacitor.Plugins;WebPlugin=class{constructor(config){this.listeners={};this.windowListeners={};if(config){console.warn(`Capacitor WebPlugin "${config.name}" config object was deprecated in v3 and will be removed in v4.`);this.config=config}}addListener(eventName,listenerFunc){const listeners=this.listeners[eventName];if(!listeners){this.listeners[eventName]=[]}this.listeners[eventName].push(listenerFunc);const windowListener=this.windowListeners[eventName];if(windowListener&&!windowListener.registered){this.addWindowListener(windowListener)}const remove=async()=>this.removeListener(eventName,listenerFunc);const p2=Promise.resolve({remove});Object.defineProperty(p2,"remove",{value:async()=>{console.warn(`Using addListener() without \'await\' is deprecated.`);await remove()}});return p2}async removeAllListeners(){this.listeners={};for(const listener in this.windowListeners){this.removeWindowListener(this.windowListeners[listener])}this.windowListeners={}}notifyListeners(eventName,data){const listeners=this.listeners[eventName];if(listeners){listeners.forEach(listener=>listener(data))}}hasListeners(eventName){return!!this.listeners[eventName].length}registerWindowListener(windowEventName,pluginEventName){this.windowListeners[pluginEventName]={registered:false,windowEventName,pluginEventName,handler:event=>{this.notifyListeners(pluginEventName,event)}}}unimplemented(msg="not implemented"){return new Capacitor.Exception(msg,ExceptionCode.Unimplemented)}unavailable(msg="not available"){return new Capacitor.Exception(msg,ExceptionCode.Unavailable)}async removeListener(eventName,listenerFunc){const listeners=this.listeners[eventName];if(!listeners){return}const index=listeners.indexOf(listenerFunc);this.listeners[eventName].splice(index,1);if(!this.listeners[eventName].length){this.removeWindowListener(this.windowListeners[eventName])}}addWindowListener(handle){window.addEventListener(handle.windowEventName,handle.handler);handle.registered=true}removeWindowListener(handle){if(!handle){return}window.removeEventListener(handle.windowEventName,handle.handler);handle.registered=false}}}});function numbersToDataView(value){return new DataView(Uint8Array.from(value).buffer)}function dataViewToNumbers(value){return Array.from(new Uint8Array(value.buffer))}function numberToUUID(value){return`0000${value.toString(16).padStart(4,"0")}-0000-1000-8000-00805f9b34fb`}function hexStringToDataView(value){const numbers=value.trim().split(" ").filter(e=>e!=="").map(s=>parseInt(s,16));return numbersToDataView(numbers)}function dataViewToHexString(value){return dataViewToNumbers(value).map(n=>{let s=n.toString(16);if(s.length==1){s="0"+s}return s}).join(" ")}function webUUIDToString(uuid){if(typeof uuid==="string"){return uuid}else if(typeof uuid==="number"){return numberToUUID(uuid)}else{throw new Error("Invalid UUID")}}function mapToObject(map){const obj={};if(!map){return void 0}map.forEach((value,key)=>{obj[key.toString()]=value});return obj}var init_conversion=__esm({"src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/conversion.js"(){}});async function runWithTimeout(promise,time,exception){let timer;return Promise.race([promise,new Promise((_,reject)=>{timer=setTimeout(()=>reject(exception),time)})]).finally(()=>clearTimeout(timer))}var init_timeout=__esm({"src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/timeout.js"(){}});var web_exports={};__export2(web_exports,{BluetoothLeWeb:()=>BluetoothLeWeb});var BluetoothLeWeb;var init_web=__esm({"src/ble/node_modules/@capacitor-community/bluetooth-le/dist/esm/web.js"(){init_dist();init_conversion();init_timeout();BluetoothLeWeb=class extends WebPlugin{constructor(){super(...arguments);this.deviceMap=new Map;this.discoveredDevices=new Map;this.scan=null;this.DEFAULT_CONNECTION_TIMEOUT=1e4;this.onAdvertisementReceivedCallback=this.onAdvertisementReceived.bind(this);this.onDisconnectedCallback=this.onDisconnected.bind(this);this.onCharacteristicValueChangedCallback=this.onCharacteristicValueChanged.bind(this)}async initialize(){if(typeof navigator==="undefined"||!navigator.bluetooth){throw this.unavailable("Web Bluetooth API not available in this browser.")}const isAvailable=await navigator.bluetooth.getAvailability();if(!isAvailable){throw this.unavailable("No Bluetooth radio available.")}}async isEnabled(){return{value:true}}async enable(){throw this.unavailable("enable is not available on web.")}async disable(){throw this.unavailable("disable is not available on web.")}async startEnabledNotifications(){}async stopEnabledNotifications(){}async isLocationEnabled(){throw this.unavailable("isLocationEnabled is not available on web.")}async openLocationSettings(){throw this.unavailable("openLocationSettings is not available on web.")}async openBluetoothSettings(){throw this.unavailable("openBluetoothSettings is not available on web.")}async openAppSettings(){throw this.unavailable("openAppSettings is not available on web.")}async setDisplayStrings(){}async requestDevice(options){const filters=this.getFilters(options);const device=await navigator.bluetooth.requestDevice({filters:filters.length?filters:void 0,optionalServices:options===null||options===void 0?void 0:options.optionalServices,acceptAllDevices:filters.length===0});this.deviceMap.set(device.id,device);const bleDevice=this.getBleDevice(device);return bleDevice}async requestLEScan(options){this.requestBleDeviceOptions=options;const filters=this.getFilters(options);await this.stopLEScan();this.discoveredDevices=new Map;navigator.bluetooth.removeEventListener("advertisementreceived",this.onAdvertisementReceivedCallback);navigator.bluetooth.addEventListener("advertisementreceived",this.onAdvertisementReceivedCallback);this.scan=await navigator.bluetooth.requestLEScan({filters:filters.length?filters:void 0,acceptAllAdvertisements:filters.length===0,keepRepeatedDevices:options===null||options===void 0?void 0:options.allowDuplicates})}onAdvertisementReceived(event){var _a,_b;const deviceId=event.device.id;this.deviceMap.set(deviceId,event.device);const isNew=!this.discoveredDevices.has(deviceId);if(isNew||((_a=this.requestBleDeviceOptions)===null||_a===void 0?void 0:_a.allowDuplicates)){this.discoveredDevices.set(deviceId,true);const device=this.getBleDevice(event.device);const result={device,localName:device.name,rssi:event.rssi,txPower:event.txPower,manufacturerData:mapToObject(event.manufacturerData),serviceData:mapToObject(event.serviceData),uuids:(_b=event.uuids)===null||_b===void 0?void 0:_b.map(webUUIDToString)};this.notifyListeners("onScanResult",result)}}async stopLEScan(){var _a;if((_a=this.scan)===null||_a===void 0?void 0:_a.active){this.scan.stop()}this.scan=null}async getDevices(_options){const devices=await navigator.bluetooth.getDevices();const bleDevices=devices.map(device=>{this.deviceMap.set(device.id,device);const bleDevice=this.getBleDevice(device);return bleDevice});return{devices:bleDevices}}async getConnectedDevices(_options){const devices=await navigator.bluetooth.getDevices();const bleDevices=devices.filter(device=>{var _a;return(_a=device.gatt)===null||_a===void 0?void 0:_a.connected}).map(device=>{this.deviceMap.set(device.id,device);const bleDevice=this.getBleDevice(device);return bleDevice});return{devices:bleDevices}}async connect(options){var _a,_b;const device=this.getDeviceFromMap(options.deviceId);device.removeEventListener("gattserverdisconnected",this.onDisconnectedCallback);device.addEventListener("gattserverdisconnected",this.onDisconnectedCallback);const timeoutError=Symbol();if(device.gatt===void 0){throw new Error("No gatt server available.")}try{const timeout=(_a=options.timeout)!==null&&_a!==void 0?_a:this.DEFAULT_CONNECTION_TIMEOUT;await runWithTimeout(device.gatt.connect(),timeout,timeoutError)}catch(error){await((_b=device.gatt)===null||_b===void 0?void 0:_b.disconnect());if(error===timeoutError){throw new Error("Connection timeout")}else{throw error}}}onDisconnected(event){const deviceId=event.target.id;const key=`disconnected|${deviceId}`;this.notifyListeners(key,null)}async createBond(_options){throw this.unavailable("createBond is not available on web.")}async isBonded(_options){throw this.unavailable("isBonded is not available on web.")}async disconnect(options){var _a;(_a=this.getDeviceFromMap(options.deviceId).gatt)===null||_a===void 0?void 0:_a.disconnect()}async getServices(options){var _a,_b;const services=(_b=await((_a=this.getDeviceFromMap(options.deviceId).gatt)===null||_a===void 0?void 0:_a.getPrimaryServices()))!==null&&_b!==void 0?_b:[];const bleServices=[];for(const service of services){const characteristics=await service.getCharacteristics();const bleCharacteristics=[];for(const characteristic of characteristics){bleCharacteristics.push({uuid:characteristic.uuid,properties:this.getProperties(characteristic),descriptors:await this.getDescriptors(characteristic)})}bleServices.push({uuid:service.uuid,characteristics:bleCharacteristics})}return{services:bleServices}}async getDescriptors(characteristic){try{const descriptors=await characteristic.getDescriptors();return descriptors.map(descriptor=>({uuid:descriptor.uuid}))}catch(_a){return[]}}getProperties(characteristic){return{broadcast:characteristic.properties.broadcast,read:characteristic.properties.read,writeWithoutResponse:characteristic.properties.writeWithoutResponse,write:characteristic.properties.write,notify:characteristic.properties.notify,indicate:characteristic.properties.indicate,authenticatedSignedWrites:characteristic.properties.authenticatedSignedWrites,reliableWrite:characteristic.properties.reliableWrite,writableAuxiliaries:characteristic.properties.writableAuxiliaries}}async getCharacteristic(options){var _a;const service=await((_a=this.getDeviceFromMap(options.deviceId).gatt)===null||_a===void 0?void 0:_a.getPrimaryService(options===null||options===void 0?void 0:options.service));return service===null||service===void 0?void 0:service.getCharacteristic(options===null||options===void 0?void 0:options.characteristic)}async getDescriptor(options){const characteristic=await this.getCharacteristic(options);return characteristic===null||characteristic===void 0?void 0:characteristic.getDescriptor(options===null||options===void 0?void 0:options.descriptor)}async discoverServices(_options){throw this.unavailable("discoverServices is not available on web.")}async readRssi(_options){throw this.unavailable("readRssi is not available on web.")}async read(options){const characteristic=await this.getCharacteristic(options);const value=await(characteristic===null||characteristic===void 0?void 0:characteristic.readValue());return{value}}async write(options){const characteristic=await this.getCharacteristic(options);let dataView;if(typeof options.value==="string"){dataView=hexStringToDataView(options.value)}else{dataView=options.value}await(characteristic===null||characteristic===void 0?void 0:characteristic.writeValueWithResponse(dataView))}async writeWithoutResponse(options){const characteristic=await this.getCharacteristic(options);let dataView;if(typeof options.value==="string"){dataView=hexStringToDataView(options.value)}else{dataView=options.value}await(characteristic===null||characteristic===void 0?void 0:characteristic.writeValueWithoutResponse(dataView))}async readDescriptor(options){const descriptor=await this.getDescriptor(options);const value=await(descriptor===null||descriptor===void 0?void 0:descriptor.readValue());return{value}}async writeDescriptor(options){const descriptor=await this.getDescriptor(options);let dataView;if(typeof options.value==="string"){dataView=hexStringToDataView(options.value)}else{dataView=options.value}await(descriptor===null||descriptor===void 0?void 0:descriptor.writeValue(dataView))}async startNotifications(options){const characteristic=await this.getCharacteristic(options);characteristic===null||characteristic===void 0?void 0:characteristic.removeEventListener("characteristicvaluechanged",this.onCharacteristicValueChangedCallback);characteristic===null||characteristic===void 0?void 0:characteristic.addEventListener("characteristicvaluechanged",this.onCharacteristicValueChangedCallback);await(characteristic===null||characteristic===void 0?void 0:characteristic.startNotifications())}onCharacteristicValueChanged(event){var _a,_b;const characteristic=event.target;const key=`notification|${(_a=characteristic.service)===null||_a===void 0?void 0:_a.device.id}|${(_b=characteristic.service)===null||_b===void 0?void 0:_b.uuid}|${characteristic.uuid}`;this.notifyListeners(key,{value:characteristic.value})}async stopNotifications(options){const characteristic=await this.getCharacteristic(options);await(characteristic===null||characteristic===void 0?void 0:characteristic.stopNotifications())}getFilters(options){var _a;const filters=[];for(const service of(_a=options===null||options===void 0?void 0:options.services)!==null&&_a!==void 0?_a:[]){filters.push({services:[service],name:options===null||options===void 0?void 0:options.name,namePrefix:options===null||options===void 0?void 0:options.namePrefix})}if(((options===null||options===void 0?void 0:options.name)||(options===null||options===void 0?void 0:options.namePrefix))&&filters.length===0){filters.push({name:options.name,namePrefix:options.namePrefix})}console.log(filters);return filters}getDeviceFromMap(deviceId){const device=this.deviceMap.get(deviceId);if(device===void 0){throw new Error(\'Device not found. Call "requestDevice", "requestLEScan" or "getDevices" first.\')}return device}getBleDevice(device){var _a;const bleDevice={deviceId:device.id,name:(_a=device.name)!==null&&_a!==void 0?_a:void 0};return bleDevice}}}});var require_throat=__commonJS3({"src/ble/node_modules/throat/index.js"(exports,module2){"use strict";function throatInternal(size){var queue=new Queue;var s=size|0;function run(fn,self2,args){if((s|0)!==0){s=(s|0)-1;return new Promise(function(resolve){resolve(fn.apply(self2,args))}).then(onFulfill,onReject)}return new Promise(function(resolve){queue.push(new Delayed(resolve,fn,self2,args))}).then(runDelayed)}function runDelayed(d2){try{return Promise.resolve(d2.fn.apply(d2.self,d2.args)).then(onFulfill,onReject)}catch(ex){onReject(ex)}}function onFulfill(result){release();return result}function onReject(error){release();throw error}function release(){var next=queue.shift();if(next){next.resolve(next)}else{s=(s|0)+1}}return run}function earlyBound(size,fn){const run=throatInternal(size|0);return function(){var args=new Array(arguments.length);for(var i22=0;i22<arguments.length;i22++){args[i22]=arguments[i22]}return run(fn,this,args)}}function lateBound(size){const run=throatInternal(size|0);return function(fn){if(typeof fn!=="function"){throw new TypeError("Expected throat fn to be a function but got "+typeof fn)}var args=new Array(arguments.length-1);for(var i22=1;i22<arguments.length;i22++){args[i22-1]=arguments[i22]}return run(fn,this,args)}}module2.exports=function throat2(size,fn){if(typeof size==="function"){var temp=fn;fn=size;size=temp}if(typeof size!=="number"){throw new TypeError("Expected throat size to be a number but got "+typeof size)}if(fn!==void 0&&typeof fn!=="function"){throw new TypeError("Expected throat fn to be a function but got "+typeof fn)}if(typeof fn==="function"){return earlyBound(size|0,fn)}else{return lateBound(size|0)}};module2.exports.default=module2.exports;function Delayed(resolve,fn,self2,args){this.resolve=resolve;this.fn=fn;this.self=self2||null;this.args=args}var blockSize=64;function Queue(){this._s1=[];this._s2=[];this._shiftBlock=this._pushBlock=new Array(blockSize);this._pushIndex=0;this._shiftIndex=0}Queue.prototype.push=function(value){if(this._pushIndex===blockSize){this._pushIndex=0;this._s1[this._s1.length]=this._pushBlock=new Array(blockSize)}this._pushBlock[this._pushIndex++]=value};Queue.prototype.shift=function(){if(this._shiftIndex===blockSize){this._shiftIndex=0;var s2=this._s2;if(s2.length===0){var s1=this._s1;if(s1.length===0){return void 0}this._s1=s2;s2=this._s2=s1.reverse()}this._shiftBlock=s2.pop()}if(this._pushBlock===this._shiftBlock&&this._pushIndex===this._shiftIndex){return void 0}var result=this._shiftBlock[this._shiftIndex];this._shiftBlock[this._shiftIndex++]=null;return result}}});var __create22=Object.create;var __defProp23=Object.defineProperty;var __getOwnPropDesc22=Object.getOwnPropertyDescriptor;var __getOwnPropNames22=Object.getOwnPropertyNames;var __getProtoOf22=Object.getPrototypeOf;var __hasOwnProp22=Object.prototype.hasOwnProperty;var __require22=(x3=>typeof __require3!=="undefined"?__require3:typeof Proxy!=="undefined"?new Proxy(x3,{get:(a,b)=>(typeof __require3!=="undefined"?__require3:a)[b]}):x3)(function(x3){if(typeof __require3!=="undefined")return __require3.apply(this,arguments);throw new Error(\'Dynamic require of "\'+x3+\'" is not supported\')});var __commonJS22=(cb,mod)=>function __require222(){return mod||(0,cb[__getOwnPropNames22(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps22=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames22(from))if(!__hasOwnProp22.call(to,key)&&key!==except)__defProp23(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc22(from,key))||desc.enumerable})}return to};var __toESM22=(mod,isNodeMode,target)=>(target=mod!=null?__create22(__getProtoOf22(mod)):{},__copyProps22(isNodeMode||!mod||!mod.__esModule?__defProp23(target,"default",{value:mod,enumerable:true}):target,mod));var require_browser2=__commonJS22({"node_modules/web-worker/cjs/browser.js"(exports,module2){module2.exports=Worker}});var EventHandler3=class{constructor(data){this.pushToState={};this.data={};this.triggers={};this.setState=updateObj=>{Object.assign(this.data,updateObj);let props=Object.getOwnPropertyNames(updateObj);for(const prop of props){this.triggerEvent(prop,this.data[prop])}return this.data};this.setValue=(key,value)=>{this.data[key]=value;this.triggerEvent(key,value)};this.triggerEvent=(key,value)=>{if(this.triggers[key]){let fn=obj=>obj.onchange(value);this.triggers[key].forEach(fn)}};this.subscribeEvent=(key,onchange,refObject,refKey)=>{if(key){if(refObject&&refKey&&!this.triggers[key]){Object.defineProperty(this.data,key,{get:()=>{return refObject[refKey]},set:value=>{refObject[refKey]=value},enumerable:true,configurable:true})}if(!this.triggers[key]){this.triggers[key]=[]}let l=this.triggers[key].length;this.triggers[key].push({sub:l,onchange});return this.triggers[key].length-1}else return void 0};this.unsubscribeEvent=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(!sub){delete this.triggers[key];delete this.data[key]}else{let sub2=void 0;let obj=triggers.find((o,i22)=>{if(o.sub===sub2){sub2=i22;return true}});if(obj)triggers.splice(sub2,1);if(Object.keys(triggers).length===0){delete this.triggers[key];delete this.data[key]}if(this.onRemoved)this.onRemoved(obj);return true}}};this.subscribeEventOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeEvent(key,sub)};sub=this.subscribeEvent(key,changed)};this.getEvent=(key,sub)=>{for(const s in this.triggers[key]){if(this.triggers[key][s].sub===sub)return this.triggers[key][s]}};this.getSnapshot=()=>{const snapshot={};for(const key in this.data){snapshot[key]=this.data[key]}};if(typeof data==="object")this.data=data}};var state3=new EventHandler3;var GraphNode2=class{constructor(properties,parent,graph){this.__node={tag:`node${Math.floor(Math.random()*1e15)}`,unique:`${Math.floor(Math.random()*1e15)}`,state:state3};this.__setProperties=(properties2,parent2,graph2)=>{let enforceProperties=()=>{let orig=properties2;if(typeof properties2==="function"){if(isNativeClass2(properties2)){properties2=new properties2}else properties2={__operator:properties2,__node:{forward:true,tag:properties2.name}}}else if(typeof properties2==="string"){if(graph2?.get(properties2)){properties2=graph2.get(properties2)}}if(!properties2.__node.initial)properties2.__node.initial=orig};enforceProperties();if(typeof properties2==="object"){let assignState=()=>{if(properties2.__node?.state)this.__node.state=properties2.__node.state};let setProps22=()=>{if(properties2.__props){if(typeof properties2.__props==="function")properties2.__props=new properties2.__props;if(typeof properties2.__props==="object"){this.__proxyObject(properties2.__props)}}};let setTag=()=>{if(!properties2.__node.tag){if(properties2.__operator?.name)properties2.__node.tag=properties2.__operator.name;else properties2.__node.tag=`node${Math.floor(Math.random()*1e15)}`}};let setNode=()=>{if(typeof properties2.__node==="string"){if(graph2?.get(properties2.__node.tag)){properties2=graph2.get(properties2.__node.tag)}else properties2.__node={}}else if(!properties2.__node)properties2.__node={};if(graph2){properties2.__node.graph=graph2}if(properties2 instanceof Graph2)properties2.__node.source=properties2};let setParent=()=>{if(!properties2.__parent&&parent2)properties2.__parent=parent2;if(parent2?.__node&&!(parent2 instanceof Graph2||properties2 instanceof Graph2))properties2.__node.tag=parent2.__node.tag+"."+properties2.__node.tag;if(parent2 instanceof Graph2&&properties2 instanceof Graph2){if(properties2.__node.loaders)Object.assign(parent2.__node.loaders?parent2.__node.loaders:{},properties2.__node.loaders);if(parent2.__node.mapGraphs){properties2.__node.nodes.forEach(n=>{parent2.set(properties2.__node.tag+"."+n.__node.tag,n)});let ondelete=()=>{properties2.__node.nodes.forEach(n=>{parent2.__node.nodes.delete(properties2.__node.tag+"."+n.__node.tag)})};this.__addOndisconnected(ondelete)}}};let setOp=()=>{if(typeof properties2.default==="function"&&!properties2.__operator){properties2.__operator=properties2.default}if(properties2.__operator){if(typeof properties2.__operator==="string"){if(graph2){let n=graph2.get(properties2.__operator);if(n)properties2.__operator=n.__operator;if(!properties2.__node.tag&&properties2.__operator.name)properties2.__node.tag=properties2.__operator.name}}if(typeof properties2.__operator==="function")properties2.__operator=this.__setOperator(properties2.__operator);if(properties2.default)properties2.default=properties2.__operator}};let assignProps=()=>{properties2.__node=Object.assign(this.__node,properties2.__node);let keys22=Object.getOwnPropertyNames(properties2);for(const key of keys22){this[key]=properties2[key]}};let bindCallbacks=()=>{if(this.__onconnected){if(typeof this.__onconnected==="function"){this.__onconnected=this.__onconnected.bind(this)}else if(Array.isArray(this.__onconnected)){this.__onconnected=this.__onconnected.map(f=>{return f.bind(this)})}if(typeof this.__ondisconnected==="function"){this.__ondisconnected=this.__ondisconnected.bind(this)}else if(Array.isArray(this.__ondisconnected)){this.__ondisconnected=this.__ondisconnected.map(f=>{return f.bind(this)})}}};assignState();setTag();setProps22();setNode();setParent();assignProps();bindCallbacks();setOp()}};this.__subscribe=(callback,key,subInput,bound,target)=>{const subscribeToFunction=(k,setTarget=(callback2,target2)=>callback2,triggerCallback=callback)=>{let sub=this.__node.state.subscribeEvent(k,triggerCallback,this,key);let trigger=this.__node.state.getEvent(k,sub);trigger.source=this.__node.tag;if(key)trigger.key=key;trigger.target=setTarget(callback);if(bound)trigger.bound=bound;return sub};const subscribeToGraph=callback2=>{let fn=this.__node.graph.get(callback2);if(!fn&&callback2.includes(".")){let n=this.__node.graph.get(callback2.substring(0,callback2.lastIndexOf(".")));let key2=callback2.substring(callback2.lastIndexOf(".")+1);if(n&&typeof n[key2]==="function")callback2=(...args)=>{return n[key2](...args)}}};if(key){if(!this.__node.localState||!this.__node.localState[key]){this.__addLocalState(this,key)}if(typeof callback==="string"){if(target){if(this.__node.graph?.get(target)){let n=this.__node.graph?.get(target);if(typeof n[callback]==="function"){let fn=n[callback];callback=(...inp)=>{fn(...inp)}}else{let k2=callback;let setter=inp=>{n[k2]=inp};callback=setter}}}else if(typeof this[callback]==="function"){let fn=this[callback];callback=(...inp)=>{fn(...inp)}}else if(this.__node.graph?.get(callback))subscribeToGraph(callback);if(typeof callback!=="function")return void 0}let sub;let k=subInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}else{if(typeof callback==="string"){if(this.__node.graph.get(callback))callback=this.__node.graph.get(callback);if(typeof callback!=="object")return void 0}let sub;let k=subInput?this.__node.unique+"input":this.__node.unique;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}};this.__unsubscribe=(sub,key,unsubInput)=>{if(key)return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key,sub);else return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"input":this.__node.unique,sub)};this.__setOperator=fn=>{fn=fn.bind(this);if(this.__args&&this.__node.graph){fn=wrapArgs2(fn,this.__args,this.__node.graph)}let inpstr=`${this.__node.unique}input`;this.__operator=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[this.__node.unique]){if(typeof result?.then==="function"){result.then(res=>{if(res!==void 0)this.__node.state.setValue(this.__node.unique,res)}).catch(console.error)}else if(result!==void 0)this.__node.state.setValue(this.__node.unique,result)}return result};if(this.__parent instanceof GraphNode2&&!this.__subscribedToParent){if(this.__parent.__operator){let sub=this.__parent.__subscribe(this);let ondelete=()=>{this.__parent?.__unsubscribe(sub);delete this.__subscribedToParent};this.__addOndisconnected(ondelete);this.__subscribedToParent=true}}return this.__operator};this.__addLocalState=(props,key)=>{if(!props)return;if(!this.__node.localState){this.__node.localState={}}const localState=this.__node.localState;const initState=(props2,k)=>{let str22=this.__node.unique+"."+k;let inpstr=`${str22}input`;if(typeof props2[k]==="function"&&k!=="__operator"){let fn=props2[k].bind(this);props2[k]=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[str22]){if(typeof result?.then==="function"){result.then(res=>{this.__node.state.triggerEvent(str22,res)}).catch(console.error)}else this.__node.state.triggerEvent(str22,result)}return result}}else{let get,set;if(this.__props?.[k]){get=()=>{return this.__props[k]};set=v2=>{this.__props[k]=v2;if(this.__node.state.triggers[str22])this.__node.state.triggerEvent(str22,v2)}}else{localState[k]=props2[k];get=()=>{return localState[k]};set=v2=>{localState[k]=v2;if(this.__node.state.triggers[str22])this.__node.state.triggerEvent(str22,v2)}}const descriptor={get,set,enumerable:true,configurable:true};Object.defineProperty(props2,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}};if(key)initState(props,key);else{for(let k in props){initState(props,k)}}};this.__proxyObject=obj=>{const allProps=getAllProperties2(obj);for(const k of allProps){if(typeof obj[k]==="function"){this[k]=(...args)=>{return obj[k](...args)}}else{const descriptor={get:()=>{return obj[k]},set:value=>{obj[k]=value},enumerable:true,configurable:true};Object.defineProperty(this,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}}};this.__setProperties(properties,parent,graph)}__addOnconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__onconnected)){this.__onconnected.push(callback)}else if(typeof this.__onconnected==="function"){this.__onconnected=[callback,this.__onconnected]}else this.__onconnected=callback}__addOndisconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__ondisconnected)){this.__ondisconnected.push(callback)}else if(typeof this.__ondisconnected==="function"){this.__ondisconnected=[callback,this.__ondisconnected]}else this.__ondisconnected=callback}__callConnected(node=this){if(typeof this.__onconnected==="function"){this.__onconnected(this)}else if(Array.isArray(this.__onconnected)){let fn=o=>{o(this)};this.__onconnected.forEach(fn)}}__callDisconnected(node=this){if(typeof this.__ondisconnected==="function")this.__ondisconnected(this);else if(Array.isArray(this.__ondisconnected)){let fn=o=>{o(this)};this.__ondisconnected.forEach(fn)}}};var Graph2=class{constructor(options){this.__node={tag:`graph${Math.floor(Math.random()*1e15)}`,unique:`${Math.random()}`,nodes:new Map,state:state3,roots:{}};this.init=options2=>{if(options2){let cpy=Object.assign({},options2);delete cpy.roots;recursivelyAssign3(this.__node,cpy);if(options2.roots)this.load(options2.roots)}};this.load=roots=>{function recursivelyAssignChildren(target,obj,inChildren=true,top=true){if(top){if(target)Object.assign(target,obj);else target=Object.assign({},obj);recursivelyAssignChildren(target,obj,true,false)}if(obj.__children&&!inChildren){if(obj.__children?.constructor.name==="Object"){if(target.__children?.constructor.name==="Object")recursivelyAssignChildren(target.__children,obj.__children,true,false);else target.__children=recursivelyAssignChildren({},obj.__children,true,false)}else{target.__children=obj.__children}}else if(inChildren){for(const key in obj){target[key]=Object.assign({},obj[key]);if(obj[key].__children){recursivelyAssignChildren({},obj[key].__children,false,false)}}}return target}this.__node.roots=recursivelyAssignChildren(this.__node.roots?this.__node.roots:{},roots);let cpy=Object.assign({},roots);if(cpy.__node)delete cpy.__node;let listeners=this.recursiveSet(cpy,this,void 0,roots);if(roots.__node){if(!roots.__node.tag)roots.__node._tag=`roots${Math.floor(Math.random()*1e15)}`;else if(!this.get(roots.__node.tag)){let node=new GraphNode2(roots,this,this);this.set(node.__node.tag,node);this.runLoaders(node,this,roots,roots.__node.tag);if(node.__listeners){listeners[node.__node.tag]=node.__listeners}}}else if(roots.__listeners){this.setListeners(roots.__listeners)}this.setListeners(listeners);return cpy};this.setLoaders=(loaders22,replace)=>{if(replace)this.__node.loaders=loaders22;else Object.assign(this.__node.loaders,loaders22);return this.__node.loaders};this.runLoaders=(node,parent,properties,key)=>{for(const l in this.__node.loaders){if(typeof this.__node.loaders[l]==="object"){if(this.__node.loaders[l].init)this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key);if(this.__node.loaders[l].connected)node.__addOnconnected(this.__node.loaders[l].connect);if(this.__node.loaders[l].disconnected)node.__addOndisconnected(this.__node.loaders[l].disconnect)}else if(typeof this.__node.loaders[l]==="function")this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key)}};this.add=(properties,parent)=>{let listeners={};if(typeof parent==="string")parent=this.get(parent);let instanced;if(typeof properties==="function"){if(isNativeClass2(properties)){if(properties.prototype instanceof GraphNode2){properties=properties.prototype.constructor(properties,parent,this);instanced=true}else properties=new properties}else properties={__operator:properties}}else if(typeof properties==="string"){properties=this.__node.roots[properties]}if(!properties)return;if(!instanced){let keys22=Object.getOwnPropertyNames(properties);let cpy={};for(const key of keys22){cpy[key]=properties[key]}properties=cpy}if(!properties.__node)properties.__node={};properties.__node.initial=properties;if(typeof properties==="object"&&(!properties?.__node?.tag||!this.get(properties.__node.tag))){let node;if(instanced)node=properties;else node=new GraphNode2(properties,parent,this);this.set(node.__node.tag,node);this.runLoaders(node,parent,properties,node.__node.tag);this.__node.roots[node.__node.tag]=properties;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key in node.__listeners){let listener=node.__listeners[key];if(node[key]){delete listeners[node.__node.tag][key];listeners[node.__node.tag][node.__node.tag+"."+key]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][key]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode2&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][key]=parent.__node.tag}}}}this.setListeners(listeners);node.__callConnected();return node}return};this.recursiveSet=(t22,parent,listeners={},origin)=>{let keys22=Object.getOwnPropertyNames(origin);for(const key of keys22){if(key.includes("__"))continue;let p2=origin[key];if(Array.isArray(p2))continue;let instanced;if(typeof p2==="function"){if(isNativeClass2(p2)){p2=new p2;if(p2 instanceof GraphNode2){p2=p2.prototype.constructor(p2,parent,this);instanced=true}}else p2={__operator:p2}}else if(typeof p2==="string"){if(this.__node.nodes.get(p2))p2=this.__node.nodes.get(p2);else p2=this.__node.roots[p2]}else if(typeof p2==="boolean"){if(this.__node.nodes.get(key))p2=this.__node.nodes.get(key);else p2=this.__node.roots[key]}if(typeof p2==="object"){if(!instanced&&!(p2 instanceof GraphNode2)){let keys3=Object.getOwnPropertyNames(p2);let cpy={};for(const key2 of keys3){cpy[key2]=p2[key2]}p2=cpy}if(!p2.__node)p2.__node={};if(!p2.__node.tag)p2.__node.tag=key;if(!p2.__node.initial)p2.__node.initial=t22[key];if(this.get(p2.__node.tag)&&!(!(parent instanceof Graph2)&&parent?.__node)||parent?.__node&&this.get(parent.__node.tag+"."+p2.__node.tag))continue;let node;let newnode=false;if(instanced||p2 instanceof GraphNode2){node=p2}else{node=new GraphNode2(p2,parent,this);newnode=true}if(!newnode&&p2 instanceof GraphNode2&&!instanced&&parent instanceof GraphNode2){let sub=this.subscribe(parent.__node.tag,node.__node.tag);let ondelete=node2=>{this.unsubscribe(parent.__node.tag,sub)};node.__addOndisconnected(ondelete)}else{this.set(node.__node.tag,node);this.runLoaders(node,parent,t22[key],key);t22[key]=node;this.__node.roots[node.__node.tag]=p2;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key2 in node.__listeners){let listener=node.__listeners[key2];let k=key2;if(node[key2]){delete listeners[node.__node.tag][key2];k=node.__node.tag+"."+key2;listeners[node.__node.tag][k]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][k]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode2&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][k]=parent.__node.tag}}}}node.__callConnected()}}}return listeners};this.remove=(node,clearListeners=true)=>{this.unsubscribe(node);if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode2){this.delete(node.__node.tag);delete this.__node.roots[node.__node.tag];if(clearListeners){this.clearListeners(node)}node.__callDisconnected();const recursiveRemove=t22=>{for(const key in t22){this.unsubscribe(t22[key]);this.delete(t22[key].__node.tag);delete this.__node.roots[t22[key].__node.tag];this.delete(key);delete this.__node.roots[key];t22[key].__node.tag=t22[key].__node.tag.substring(t22[key].__node.tag.lastIndexOf(".")+1);if(clearListeners){this.clearListeners(t22[key])}console.log(key,t22[key].__listeners);t22[key].__callDisconnected();if(t22[key].__children){recursiveRemove(t22[key].__children)}}};if(node.__children){recursiveRemove(node.__children)}}if(node?.__node.tag&&node?.__parent){delete node?.__parent;node.__node.tag=node.__node.tag.substring(node.__node.tag.indexOf(".")+1)}return node};this.run=(node,...args)=>{if(typeof node==="string"){let nd=this.get(node);if(!nd&&node.includes(".")){nd=this.get(node.substring(0,node.lastIndexOf(".")));if(typeof nd?.[node.substring(node.lastIndexOf(".")+1)]==="function")return nd[node.substring(node.lastIndexOf(".")+1)](...args)}else if(nd?.__operator)return nd.__operator(...args)}if(node?.__operator){return node?.__operator(...args)}};this.setListeners=listeners=>{for(const key in listeners){let node=this.get(key);if(typeof listeners[key]==="object"){for(const k in listeners[key]){let n=this.get(k);let sub;if(typeof listeners[key][k]!=="object")listeners[key][k]={__callback:listeners[key][k]};else if(!listeners[key][k].__callback){for(const kk in listeners[key][k]){if(typeof listeners[key][k][kk]!=="object"){listeners[key][k][kk]={__callback:listeners[key][k][kk]};if(listeners[key][k][kk].__callback===true||typeof listeners[key][k][kk].__callback==="undefined")listeners[key][k][kk].__callback=node.__operator}let nn=this.get(kk);if(nn){if(!nn){let tag=k.substring(0,k.lastIndexOf("."));nn=this.get(tag);if(n){sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k][kk].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k][kk].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}else{sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}}}if("__callback"in listeners[key][k]){if(listeners[key][k].__callback===true||typeof listeners[key][k].__callback==="undefined")listeners[key][k].__callback=node.__operator;if(typeof listeners[key][k].__callback==="function")listeners[key][k].__callback=listeners[key][k].__callback.bind(node);if(typeof node.__listeners!=="object")node.__listeners={};if(!n){let tag=k.substring(0,k.lastIndexOf("."));n=this.get(tag);if(n){sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}else{sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}}}}};this.clearListeners=(node,listener)=>{if(typeof node==="string")node=this.get(node);if(node?.__listeners){for(const key in node.__listeners){if(listener&&key!==listener)continue;if(typeof node.__listeners[key]?.sub!=="number")continue;let n=this.get(key);if(!n){n=this.get(key.substring(0,key.lastIndexOf(".")));if(n){if(typeof node.__listeners[key]==="object"&&!node.__listeners[key]?.__callback){for(const k in node.__listeners[key]){if(typeof node.__listeners[key][k]?.sub==="number"){this.unsubscribe(n,node.__listeners[key][k].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}else{if(typeof!node.__listeners[key]?.__callback==="number"){for(const k in node.__listeners[key]){if(node.__listeners[key][k]?.sub){this.unsubscribe(n,node.__listeners[key][k].sub,void 0,node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,void 0,node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}}};this.get=tag=>{return this.__node.nodes.get(tag)};this.set=(tag,node)=>{return this.__node.nodes.set(tag,node)};this.delete=tag=>{return this.__node.nodes.delete(tag)};this.getProps=(node,getInitial)=>{if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode2){let cpy;if(getInitial)cpy=Object.assign({},this.__node.roots[node.__node.tag]);else{cpy=Object.assign({},node);for(const key in cpy){if(key.includes("__"))delete cpy[key]}}}};this.subscribe=(nodeEvent,onEvent,args,key,subInput,target,bound)=>{let nd=nodeEvent;if(typeof nodeEvent==="string"){nd=this.get(nodeEvent);if(!nd&&nodeEvent.includes(".")){nd=this.get(nodeEvent.substring(0,nodeEvent.lastIndexOf(".")));key=nodeEvent.substring(nodeEvent.lastIndexOf(".")+1)}}let sub;if(target instanceof GraphNode2)target=target.__node.tag;if(typeof onEvent==="string"){let key2=onEvent;let setOnEventFromString=onEvent2=>{if(this.get(onEvent2)?.__operator){let node=this.get(onEvent2);onEvent2=function(...inp){return node.__operator(...inp)}}else if(onEvent2.includes(".")){let n=this.get(onEvent2.substring(0,onEvent2.lastIndexOf(".")));let key3=onEvent2.substring(onEvent2.lastIndexOf(".")+1);if(typeof n[key3]==="function"){if(n[key3]instanceof GraphNode2)onEvent2=n[key3];else onEvent2=function(...inp){return n[key3](...inp)}}else{onEvent2=function(inp){n[key3]=inp;return n[key3]}}}return onEvent2};if(target){let node=this.get(target);if(typeof node?.[onEvent]==="function"){onEvent=function(...inp){return node[key2](...inp)}}else if(node[key2]){if(node[key2]instanceof GraphNode2)onEvent=node[key2];else onEvent=function(inp){node[key2]=inp;return node[key2]}}else{onEvent=setOnEventFromString(onEvent)}}else{onEvent=setOnEventFromString(onEvent)}}if((typeof onEvent==="function"||onEvent instanceof GraphNode2)&&args){if(onEvent instanceof GraphNode2&&onEvent.__operator)onEvent=function(inp){return onEvent.__operator(inp)};onEvent=wrapArgs2(onEvent,args,this)}if(nd instanceof GraphNode2){sub=nd.__subscribe(onEvent,key,subInput,target,bound);let ondelete=()=>{nd.__unsubscribe(sub,key,subInput)};nd.__addOndisconnected(ondelete)}else if(typeof nodeEvent==="string"){if(this.get(nodeEvent)){if(onEvent instanceof GraphNode2&&onEvent.__operator){sub=this.get(nodeEvent).__subscribe(onEvent.__operator,key,subInput,target,bound);let ondelete=()=>{this.get(nodeEvent).__unsubscribe(sub)};onEvent.__addOndisconnected(ondelete)}else if(typeof onEvent==="function"||typeof onEvent==="string"){sub=this.get(nodeEvent).__subscribe(onEvent,key,subInput,target,bound);this.__node.state.getEvent(this.get(nodeEvent).__node.unique,sub).source=nodeEvent}}else{if(typeof onEvent==="string")onEvent=this.__node.nodes.get(onEvent).__operator;if(typeof onEvent==="function")sub=this.__node.state.subscribeEvent(nodeEvent,onEvent)}}return sub};this.unsubscribe=(node,sub,key,subInput)=>{if(node instanceof GraphNode2){return node.__unsubscribe(sub,key,subInput)}else return this.get(node)?.__unsubscribe(sub,key,subInput)};this.setState=update=>{this.__node.state.setState(update)};this.init(options)}};function recursivelyAssign3(target,obj){for(const key in obj){if(obj[key]?.constructor.name==="Object"&&!Array.isArray(obj[key])){if(target[key]?.constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign3(target[key],obj[key]);else target[key]=recursivelyAssign3({},obj[key])}else{target[key]=obj[key]}}return target}function getAllProperties2(obj){var allProps=[],curr=obj;do{var props=Object.getOwnPropertyNames(curr);let fn=function(prop){if(allProps.indexOf(prop)===-1)allProps.push(prop)};props.forEach(fn)}while(curr=Object.getPrototypeOf(curr));return allProps}function isNativeClass2(thing){return isFunction2(thing)==="class"}function isFunction2(x3){const res=typeof x3==="function"?x3.prototype?Object.getOwnPropertyDescriptor(x3,"prototype")?.writable?"function":"class":x3.constructor.name==="AsyncFunction"?"async":"arrow":"";return res}var wrapArgs2=(callback,argOrder,graph)=>{let args=[];let getCallbackFromString=a=>{if(graph.get(a)?.__operator){let node=graph.get(a);return(...inp)=>{node.__operator(...inp)}}else if(a.includes(".")){let split=a.split(".");let popped=split.pop();let joined=split.join(".");let node=graph.get(joined);if(typeof graph.get(joined)?.[popped]==="function"){return(...inp)=>{return node[popped](...inp)}}else return()=>{return node[popped]}}else if(graph.get(a)){let node=graph.get(a);return()=>{return node}}else{let arg=a;return()=>{return arg}}};let forArg=(a,i22)=>{if(a==="__output"){args[i22]=inp=>{return inp}}else if(typeof a==="string"){args[i22]=getCallbackFromString(a)}else if(typeof a==="function"){let fn2=a;args[i22]=(...inp)=>{return fn2(...inp)}}else if(typeof a==="object"&&a.__input){let recursivelyCreateCallback=function(c){let input=c.__input;if(typeof c.__input==="string"){input=getCallbackFromString(c.__input)}if(c.__args){input=wrapArgs2(input,c.__args,graph)}if(c.__output){let output=c.__output;if(typeof c.__output==="string"){output=getCallbackFromString(output)}else if(typeof a.__output==="object"){output=recursivelyCreateCallback(output)}if(typeof output==="function"){let fn2=input;input=(...inp)=>{return output(fn2(...inp))}}}return input};args[i22]=recursivelyCreateCallback(a)}else{let arg=a;args[i22]=()=>{return arg}}};argOrder.forEach(forArg);if(typeof callback==="string")callback=getCallbackFromString(callback);let fn=callback;callback=function(...inp){let mapArg=arg=>{return arg(...inp)};return fn(...args.map(mapArg))};return callback};var backprop2=(node,parent,graph)=>{if(node.__node.backward&&parent instanceof GraphNode2){graph.setListeners({[parent.__node.tag]:{[node.__node.tag]:parent}})}};var loop2=(node,parent,graph)=>{if(node.__operator&&!node.__node.looperSet){if(typeof node.__node.delay==="number"){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{setTimeout(async()=>{res(await fn(...args))},node.__node.delay)})})}else if(node.__node.frame===true){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{requestAnimationFrame(async()=>{res(await fn(...args))})})})}if(typeof node.__node.repeat==="number"||typeof node.__node.recursive==="number"){let fn=node.__operator;node.__setOperator(async(...args)=>{let i22=node.__node.repeat?node.__node.repeat:node.__node.recursive;let result;let repeater=async(tick,...inp)=>{while(tick>0){if(node.__node.delay||node.__node.frame){fn(...inp).then(async res=>{if(node.__node.recursive){await repeater(tick,res)}else await repeater(tick,...inp)});break}else result=await fn(...args);tick--}};await repeater(i22,...args);return result})}if(node.__node.loop&&typeof node.__node.loop==="number"){node.__node.looperSet=true;let fn=node.__operator;node.__setOperator((...args)=>{if(!("looping"in node.__node))node.__node.looping=true;if(node.__node.looping){fn(...args);setTimeout(()=>{node.__operator(...args)},node.__node.loop)}});if(node.__node.looping)node.__operator();let ondelete=node2=>{if(node2.__node.looping)node2.__node.looping=false};node.__addOndisconnected(ondelete)}}};var animate2=(node,parent,graph)=>{if(node.__node.animate===true||node.__animation){let fn=node.__operator;node.__setOperator((...args)=>{if(!("animating"in node.__node))node.__node.animating=true;if(node.__node.animating){if(typeof node.__animation==="function")node.__animation(...args);else fn(...args);requestAnimationFrame(()=>{node.__operator(...args)})}});if(node.__node.animating||(!("animating"in node.__node)||node.__node.animating)&&node.__animation)setTimeout(()=>{requestAnimationFrame(node.__operator)},10);let ondelete=node2=>{if(node2.__node.animating)node2.__node.animating=false};node.__addOndisconnected(ondelete)}};var branching2=(node,parent,graph)=>{if(typeof node.__branch==="object"&&node.__operator&&!node.__branchApplied){let fn=node.__operator;node.__branchApplied=true;node.__operator=(...args)=>{let result=fn(...args);for(const key in node.__branch){let triggered=()=>{if(typeof node.__branch[key].then==="function"){node.__branch[key].then(result)}else if(node.__branch[key].then instanceof GraphNode2&&node.__branch[key].then.__operator){node.__branch[key].then.__operator(result)}else result=node.__branch[key].then};if(typeof node.__branch[key].if==="function"){if(node.__branch[key].if(result)==true){triggered()}}else if(node.__branch[key].if===result){triggered()}}return result}}if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].branch&&!node.__listeners[key].branchApplied){let fn=node.__listeners[key].callback;node.__listeners[key].branchApplied=true;node.__listeners.callback=ret=>{let triggered=()=>{if(typeof node.__listeners[key].branch.then==="function"){ret=node.__listeners[key].branch.then(ret)}else if(node.__listeners[key].branch.then instanceof GraphNode2&&node.__listeners[key].branch.then.__operator){ret=node.__listeners[key].branch.then.__operator(ret)}else ret=node.__listeners[key].branch.then};if(typeof node.__listeners[key].branch.if==="function"){if(node.__listeners[key].branch.if(ret)){triggered()}}else if(node.__listeners[key].branch.if===ret){triggered()}return fn(ret)}}}}}};var triggerListenerOncreate2=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].oncreate){node.__listeners[key].callback(node.__listeners[key].oncreate)}}}}};var bindListener2=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].binding==="object"){node.__listeners.callback=node.__listeners.callback.bind(node.__listeners[key].binding)}}}}};var transformListenerResult2=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].transform==="function"&&!node.__listeners[key].transformApplied){let fn=node.__listeners[key].callback;node.__listeners[key].transformApplied=true;node.__listeners.callback=ret=>{ret=node.__listeners[key].transform(ret);return fn(ret)}}}}}};var substitute__operator2=(node,parent,graph)=>{if(node.post&&!node.__operator){node.__setOperator(node.post)}else if(!node.__operator&&typeof node.get=="function"){node.__setOperator(node.get)}if(!node.get&&node.__operator){node.get=node.__operator}if(node.aliases){node.aliases.forEach(a=>{graph.set(a,node);let ondelete=node2=>{graph.__node.nodes.delete(a)};node.__addOndisconnected(ondelete)})}if(typeof graph.__node.roots?.[node.__node.tag]==="object"&&node.get)graph.__node.roots[node.__node.tag].get=node.get};var loaders2={backprop:backprop2,loop:loop2,animate:animate2,branching:branching2,triggerListenerOncreate:triggerListenerOncreate2,bindListener:bindListener2,transformListenerResult:transformListenerResult2,substitute__operator:substitute__operator2};var recursivelyStringifyFunctions2=obj=>{let cpy={};for(const key in obj){if(typeof obj[key]==="object"){cpy[key]=recursivelyStringifyFunctions2(obj[key])}else if(typeof obj[key]==="function"){cpy[key]=obj[key].toString()}else cpy[key]=obj[key]}return cpy};function parseFunctionFromText4(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs3=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs22(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs3}var stringifyFast3=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p2 in value[prop]){if(Array.isArray(value[prop][p2])){if(value[prop][p2].length>20)obj[prop][p2]=value[prop][p2].slice(value[prop][p2].length-20);else obj[prop][p2]=value[prop][p2]}else{if(value[prop][p2]!=null){let con=value[prop][p2].constructor.name;if(con.includes("Set")){obj[prop][p2]=Array.from(value[prop][p2])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p2]="instanceof_"+con}else{obj[prop][p2]=value[prop][p2]}}else{obj[prop][p2]=value[prop][p2]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast22(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast3}function methodstrings2(node){if(typeof node.__methods==="object"){for(const key in node.__methods){let fstr=node.__methods[key];let fn=typeof fstr==="function"?fstr:parseFunctionFromText4(fstr);if(key==="__operator"){node.__setOperator(fn)}else{node[key]=fn.bind(node)}}}}var Service2=class extends Graph2{constructor(options){super({...options,loaders:options?.loaders?Object.assign({...loaders2},options.loaders):{...loaders2}});this.name=`service${Math.floor(Math.random()*1e15)}`;this.addServices=services=>{for(const s in services){if(typeof services[s]==="function")services[s]=new services[s];if(services[s]?.__node?.loaders)Object.assign(this.__node.loaders,services[s].__node.loaders);if(services[s]?.__node?.nodes){services[s].__node.nodes.forEach((n,tag)=>{if(!this.get(tag)){this.set(tag,n)}else this.set(s+"."+tag,n)});this.__node.nodes.forEach((n,k)=>{if(!services[s].__node.nodes.get(k))services[s].__node.nodes.set(k,n)});let set=this.set;this.set=(tag,node)=>{services[s].set(tag,node);return set(tag,node)};let del=this.delete;this.delete=tag=>{services[s].delete(tag);return del(tag)}}else if(typeof services[s]==="object"){this.load(services[s])}}};this.handleMethod=(route,method,args)=>{let m=method.toLowerCase();let src=this.__node.nodes.get(route);if(!src){src=this.__node.roots[route]}if(src?.[m]){if(typeof src[m]!=="function"){if(args){if(Array.isArray(args)&&args.length===1)src[m]=args[0];else src[m]=args;return}return src[m]}else{if(Array.isArray(args))return src[m](...args);else return src[m](args)}}else return this.handleServiceMessage({route,args,method})};this.transmit=(...args)=>{if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.receive=(...args)=>{if(args[0]){if(typeof args[0]==="string"){let substr=args[0].substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))args[0]=args[0].replace(/\\\\/g,"");if(args[0][0]===\'"\'){args[0]=args[0].substring(1,args[0].length-1)};args[0]=JSON.parse(args[0])}}}if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.pipe=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode2){if(callback)return this.subscribe(source,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.pipeOnce=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode2){if(callback)return source.__node.state.subscribeEventOnce(source.__node.unique,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.__node.state.subscribeEventOnce(source.__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.terminate=(...args)=>{};this.isTypedArray=isTypedArray2;this.recursivelyAssign=recursivelyAssign22;this.spliceTypedArray=spliceTypedArray2;this.ping=()=>{console.log("pinged!");return"pong"};this.echo=(...args)=>{this.transmit(...args);return args};if(options?.services)this.addServices(options.services);this.load(this)}handleServiceMessage(message){let call;if(typeof message==="object"){if(message.route)call=message.route;else if(message.node)call=message.node}if(call){if(Array.isArray(message.args))return this.run(call,...message.args);else return this.run(call,message.args)}else return message}handleGraphNodeCall(route,args){if(!route)return args;if(args?.args){this.handleServiceMessage(args)}else if(Array.isArray(args))return this.run(route,...args);else return this.run(route,args)}};function isTypedArray2(x3){return ArrayBuffer.isView(x3)&&Object.prototype.toString.call(x3)!=="[object DataView]"}var recursivelyAssign22=(target,obj)=>{for(const key in obj){if(obj[key].constructor.name==="Object"&&!Array.isArray(obj[key])){if(obj[key].constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign22(target[key],obj[key]);else target[key]=recursivelyAssign22({},obj[key])}else target[key]=obj[key]}return target};function spliceTypedArray2(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let ta;if(s.length>0||e?.length>0)ta=new arr.constructor(s.length+e.length);if(ta){if(s.length>0)ta.set(s);if(e&&e.length>0)ta.set(e,s.length)}return ta}var nodeTemplates2={};var remoteGraphRoutes2={transferNode:(properties,connection,name2)=>{let str22;if(typeof properties==="object"){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}str22=recursivelyStringifyFunctions2(properties)}else if(typeof properties==="function")str22=properties.toString();else if(typeof properties==="string")str22=properties;if(str22){if(connection.run)return connection.run("setNode",[str22]);else if(connection.postMessage){connection.postMessage({route:"setNode",args:str22},void 0);return new Promise(r=>r(name2))}else if(connection.send){connection.send(JSON.stringify({route:"setNode",args:str22}));return new Promise(r=>r(name2))}}},setNode:function(properties){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings2}}}if(typeof properties==="string"){let f=parseFunctionFromText4(properties);if(typeof f==="function")properties={__operator:f,__node:{tag:f.name}};else{f=JSON.parse(properties);if(typeof f==="object")properties=f}}if(typeof properties==="object"||typeof properties==="function"){let template=Object.assign({},properties);let node=this.__node.graph.add(properties);nodeTemplates2[node.__node.tag]=template;return node.__node.tag}else return false},proxyRemoteNode:function(name2,connection){return new Promise((res,rej)=>{connection.run("getNodeProperties",name2).then(props=>{let proxy={};if(typeof props==="object"){for(const key in props){if(props[key]==="function"){proxy[key]=(...args)=>{return new Promise(r=>{connection.run(name2,args,key).then(r)})}}else{Object.defineProperty(proxy,key,{get:()=>{return new Promise(r=>{connection.run(name2,void 0,key).then(r)})},set:value=>{connection.post(name2,value,key)},configurable:true,enumerable:true})}}}res(proxy)})})},makeNodeTransferrable:function(properties,name2){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}const str22=recursivelyStringifyFunctions2(properties);return str22},setTemplate:function(properties,name2){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings2}}}if(typeof properties==="string"){let f=parseFunctionFromText4(properties);if(typeof f==="function"){if(!name2)name2=f.name;properties={__operator:f,__node:{tag:name2}}}else{f=JSON.parse(properties);if(typeof f==="object"){properties=f;if(!name2&&f.__node?.tag)name2=f.__node.tag}}}if(!name2)name2=`node${Math.floor(Math.random()*1e15)}`;if(typeof properties==="object"||typeof properties==="function"){nodeTemplates2[name2]=properties;return name2}else return false},loadFromTemplate:function(templateName,name2,properties){if(nodeTemplates2[templateName]){let cpy=recursivelyAssign22({},nodeTemplates2[templateName]);if(name2){if(!cpy.__node)cpy.__node={};cpy.__node.tag=name2}if(properties)Object.assign(cpy,properties);let node=this.__node.graph.add(cpy);return node.__node.tag}},setMethod:function(route,fn,methodKey){if(typeof fn==="string"){let f=parseFunctionFromText4(fn);if(typeof f==="function")fn=f}if(!methodKey&&typeof fn==="function")methodKey=fn.name;if(this.__node.graph.get(route)){this.__node.graph.get(route)[methodKey]=fn}else this.__node.graph.add({__node:{tag:methodKey,[methodKey]:fn}});return true},assignNode:function(nodeTag,source){if(this.__node.graph.get(nodeTag)&&typeof source==="object"){Object.assign(this.__node.graph.get(nodeTag),source)}},getNodeProperties:function(nodeTag){let node=this.__node.graph.get(nodeTag);if(node){let properties=Object.getOwnPropertyNames(node);let result={};for(const key in properties){result[key]=typeof node[key]}return result}return void 0},transferClass:(classObj,connection,className)=>{if(typeof classObj==="object"){let str22=classObj.toString();let message={route:"receiveClass",args:[str22,className]};if(connection.run)return connection.run("receiveClass",[str22,className]);else if(connection.postMessage){connection.postMessage({route:"receiveClass",args:[str22,className]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"receiveClass",args:[str22,className]}));return new Promise(r=>r(name))}return message}return false},receiveClass:function(stringified,className){if(typeof stringified==="string"){if(stringified.indexOf("class")===0){let cls=(0,eval)("("+stringified+")");let name2=className;if(!name2)name2=cls.name;this.__node.graph[name2]=cls;return true}}return false},transferFunction:(fn,connection,fnName)=>{if(!fnName)fnName=fn.name;let str22=fn.toString();let message={route:"receiveClass",args:[str22,fnName]};if(connection.run)return connection.run("setFunction",[str22,fnName]);else if(connection.postMessage){connection.postMessage({route:"setFunction",args:[str22,fnName]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"setFunction",args:[str22,fnName]}));return new Promise(r=>r(name))}return message},setGlobal:(key,value)=>{globalThis[key]=value;return true},assignGlobalObject:(target,source)=>{if(!globalThis[target])return false;if(typeof source==="object")Object.assign(globalThis[target],source);return true},setValue:function(key,value){this.__node.graph[key]=value;return true},assignObject:function(target,source){if(!this.__node.graph[target])return false;if(typeof source==="object")Object.assign(this.__node.graph[target],source);return true},setGlobalFunction:(fn,fnName)=>{if(typeof fn==="string")fn=parseFunctionFromText4(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;globalThis[fnName]=fn;return true}return false},setGraphFunction:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText4(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.__node.graph[fnName]=fn;return true}return false}};var sjcl2={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};sjcl2.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d2,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl2.exception.invalid("invalid aes key size");this.b=[d2=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d2[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d2[a]=d2[a-b]^c}for(b=0;a;b++,a--)c=d2[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]]};sjcl2.cipher.aes.prototype={encrypt:function(a){return t2(this,a,0)},decrypt:function(a){return t2(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d2=b[4],e,f,g,h=[],k=[],l,n,m,p2;for(e=0;256>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d2[m]=f,n=h[e=h[l=h[f]]],p2=16843009*n^65537*e^257*l^16843008*f,n=257*h[m]^16843008*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p2=p2<<24^p2>>>8;for(e=0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};function t2(a,b,c){if(4!==b.length)throw new sjcl2.exception.invalid("invalid aes block size");var d2=a.b[c],e=b[0]^d2[0],f=b[c?3:1]^d2[1],g=b[2]^d2[2];b=b[c?1:3]^d2[3];var h,k,l,n=d2.length/4-2,m,p2=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v2=h[2],w=h[3],x3=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v2[g>>8&255]^w[b&255]^d2[p2],k=a[f>>>24]^q[g>>16&255]^v2[b>>8&255]^w[e&255]^d2[p2+1],l=a[g>>>24]^q[b>>16&255]^v2[e>>8&255]^w[f&255]^d2[p2+2],b=a[b>>>24]^q[e>>16&255]^v2[f>>8&255]^w[g&255]^d2[p2+3],p2+=4,e=h,f=k,g=l;for(m=0;4>m;m++)r[c?3&-m:m]=x3[e>>>24]<<24^x3[f>>16&255]<<16^x3[g>>8&255]<<8^x3[b&255]^d2[p2++],h=e,e=f,f=g,g=b,b=h;return r}sjcl2.bitArray={bitSlice:function(a,b,c){a=sjcl2.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl2.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d2=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d2^a[b/32+1|0]>>>d2:a[b/32|0]>>>d2)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d2=sjcl2.bitArray.getPartial(c);return 32===d2?a.concat(b):sjcl2.bitArray.$(b,d2,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===b?0:32*(b-1)+sjcl2.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl2.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+1099511627776*a},getPartial:function(a){return Math.round(a/1099511627776)||32},equal:function(a,b){if(sjcl2.bitArray.bitLength(a)!==sjcl2.bitArray.bitLength(b))return false;var c=0,d2;for(d2=0;d2<a.length;d2++)c|=a[d2]^b[d2];return 0===c},$:function(a,b,c,d2){var e;e=0;for(void 0===d2&&(d2=[]);32<=b;b-=32)d2.push(c),c=0;if(0===b)return d2.concat(a);for(e=0;e<a.length;e++)d2.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl2.bitArray.getPartial(e);d2.push(sjcl2.bitArray.partial(b+a&31,32<b+a?c:d2.pop(),1));return d2},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&65280|(c&65280)<<8|c<<24;return a}};sjcl2.codec.utf8String={fromBits:function(a){var b="",c=sjcl2.bitArray.bitLength(a),d2,e;for(d2=0;d2<c/8;d2++)0===(d2&3)&&(e=a[d2/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d2=0;for(c=0;c<a.length;c++)d2=d2<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d2),d2=0);c&3&&b.push(sjcl2.bitArray.partial(8*(c&3),d2));return b}};sjcl2.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl2.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d2;a=a.replace(/\\s|0x/g,"");d2=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl2.bitArray.clamp(c,4*d2)}};sjcl2.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d2=sjcl2.codec.base32.BASE,e=sjcl2.codec.base32.REMAINING,f="",g=0,h=sjcl2.codec.base32.B,k=0,l=sjcl2.bitArray.bitLength(a);c&&(h=sjcl2.codec.base32.X);for(c=0;f.length*d2<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d2?(k=a[c]<<d2-g,g+=e,c++):(k<<=d2,g-=d2);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\\s|=/g,"").toUpperCase();var c=sjcl2.codec.base32.BITS,d2=sjcl2.codec.base32.BASE,e=sjcl2.codec.base32.REMAINING,f=[],g,h=0,k=sjcl2.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl2.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl2.codec.base32hex.toBits(a)}catch(p2){}throw new sjcl2.exception.invalid("this isn\'t "+m+"!")}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d2,l^=n<<c-h)}h&56&&f.push(sjcl2.bitArray.partial(h&56,l,1));return f}};sjcl2.codec.base32hex={fromBits:function(a,b){return sjcl2.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl2.codec.base32.toBits(a,1)}};sjcl2.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d2="",e=0,f=sjcl2.codec.base64.B,g=0,h=sjcl2.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d2.length<h;)d2+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d2.length&3&&!b;)d2+="=";return d2},toBits:function(a,b){a=a.replace(/\\s|=/g,"");var c=[],d2,e=0,f=sjcl2.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d2=0;d2<a.length;d2++){h=f.indexOf(a.charAt(d2));if(0>h)throw new sjcl2.exception.invalid("this isn\'t base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl2.bitArray.partial(e&56,g,1));return c}};sjcl2.codec.base64url={fromBits:function(a){return sjcl2.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl2.codec.base64.toBits(a,1)}};sjcl2.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl2.hash.sha256.hash=function(a){return new sjcl2.hash.sha256().update(a).finalize()};sjcl2.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl2.codec.utf8String.toBits(a));var b,c=this.A=sjcl2.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl2.bitArray.bitLength(a);if(9007199254740991<a)throw new sjcl2.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d2=new Uint32Array(c),e=0;for(b=512+b-(512+b&511);b<=a;b+=512)u2(this,d2.subarray(16*e,16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&511);b<=a;b+=512)u2(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl2.bitArray.concat(b,[sjcl2.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/4294967296));for(b.push(this.l|0);b.length;)u2(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a2){return 4294967296*(a2-Math.floor(a2))|0}for(var b=0,c=2,d2,e;64>b;c++){e=true;for(d2=2;d2*d2<=c;d2++)if(0===c%d2){e=false;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};function u2(a,b){var c,d2,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p2=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d2=b[c]:(d2=b[c+1&15],e=b[c+14&15],d2=b[c&15]=(d2>>>7^d2>>>18^d2>>>3^d2<<25^d2<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d2=d2+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p2^r))+g[c],q=r,r=p2,p2=m,m=n+d2|0,n=l,l=k,k=h,h=d2+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p2|0;f[6]=f[6]+r|0;f[7]=f[7]+q|0}sjcl2.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl2.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl2.mode.ccm.G.indexOf(a);-1<a&&sjcl2.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl2.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d2,e){var f,g=b.slice(0),h=sjcl2.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d2=d2||[];if(7>k)throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,8*(15-f));b=sjcl2.mode.ccm.V(a,b,c,d2,e,f);g=sjcl2.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d2,e){e=e||64;d2=d2||[];var f=sjcl2.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl2.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl2.mode.ccm.C(a,k,c,l,e,b);a=sjcl2.mode.ccm.V(a,k.data,c,d2,e,b);if(!f.equal(k.tag,a))throw new sjcl2.exception.corrupt("ccm: tag doesn\'t match");return k.data},na:function(a,b,c,d2,e,f){var g=[],h=sjcl2.bitArray,k=h.i;d2=[h.partial(8,(b.length?64:0)|d2-2<<2|f-1)];d2=h.concat(d2,c);d2[3]|=e;d2=a.encrypt(d2);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:4294967295>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d2=a.encrypt(k(d2,g.slice(b,b+4).concat([0,0,0])));return d2},V:function(a,b,c,d2,e,f){var g=sjcl2.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl2.exception.invalid("ccm: invalid tag length");if(4294967295<d2.length||4294967295<b.length)throw new sjcl2.exception.bug("ccm: can\'t deal with 4GiB or more data");c=sjcl2.mode.ccm.na(a,d2,c,e,g.bitLength(b)/8,f);for(d2=0;d2<b.length;d2+=4)c=a.encrypt(h(c,b.slice(d2,d2+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d2,e,f){var g,h=sjcl2.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d2=h.bitSlice(g(d2,a.encrypt(c)),0,e);if(!k)return{tag:d2,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl2.mode.ccm.fa(g/k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d2,data:h.clamp(b,l)}}};sjcl2.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d2,e,f){if(128!==sjcl2.bitArray.bitLength(c))throw new sjcl2.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl2.mode.ocb2.S,k=sjcl2.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p2=[];d2=d2||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p2=p2.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));d2.length&&(n=l(n,f?d2:sjcl2.mode.ocb2.pmac(a,d2)));return p2.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d2,e,f){if(128!==sjcl2.bitArray.bitLength(c))throw new sjcl2.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl2.mode.ocb2.S,h=sjcl2.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p2,r=sjcl2.bitArray.bitLength(b)-e,q=[];d2=d2||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p2=r-32*c;m=a.encrypt(k(n,[0,0,0,p2]));m=k(m,h.clamp(b.slice(c),p2).concat([0,0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d2.length&&(l=k(l,f?d2:sjcl2.mode.ocb2.pmac(a,d2)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl2.exception.corrupt("ocb: tag doesn\'t match");return q.concat(h.clamp(m,p2))},pmac:function(a,b){var c,d2=sjcl2.mode.ocb2.S,e=sjcl2.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d2(d2(h)));for(c=0;c+4<b.length;c+=4)h=d2(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d2(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d2(f(h,d2(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};sjcl2.mode.gcm={name:"gcm",encrypt:function(a,b,c,d2,e){var f=b.slice(0);b=sjcl2.bitArray;d2=d2||[];a=sjcl2.mode.gcm.C(true,a,f,d2,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d2,e){var f=b.slice(0),g=sjcl2.bitArray,h=g.bitLength(f);e=e||128;d2=d2||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl2.mode.gcm.C(false,a,f,d2,c,e);if(!g.equal(a.tag,b))throw new sjcl2.exception.corrupt("gcm: tag doesn\'t match");return a.data},ka:function(a,b){var c,d2,e,f,g,h=sjcl2.bitArray.i;e=[0,0,0,0];f=b.slice(0);for(c=0;128>c;c++){(d2=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d2=3;0<d2;d2--)f[d2]=f[d2]>>>1|(f[d2-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-520093696)}return e},j:function(a,b,c){var d2,e=c.length;b=b.slice(0);for(d2=0;d2<e;d2+=4)b[0]^=4294967295&c[d2],b[1]^=4294967295&c[d2+1],b[2]^=4294967295&c[d2+2],b[3]^=4294967295&c[d2+3],b=sjcl2.mode.gcm.ka(b,a);return b},C:function(a,b,c,d2,e,f){var g,h,k,l,n,m,p2,r,q=sjcl2.bitArray;m=c.length;p2=q.bitLength(c);r=q.bitLength(d2);h=q.bitLength(e);g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl2.mode.gcm.j(g,[0,0,0,0],e),e=sjcl2.mode.gcm.j(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]));h=sjcl2.mode.gcm.j(g,[0,0,0,0],d2);n=e.slice(0);d2=h.slice(0);a||(d2=sjcl2.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p2);a&&(d2=sjcl2.mode.gcm.j(g,h,c));a=[Math.floor(r/4294967296),r&4294967295,Math.floor(p2/4294967296),p2&4294967295];d2=sjcl2.mode.gcm.j(g,d2,a);k=b.encrypt(e);d2[0]^=k[0];d2[1]^=k[1];d2[2]^=k[2];d2[3]^=k[3];return{tag:q.bitSlice(d2,0,f),data:c}}};sjcl2.misc.hmac=function(a,b){this.W=b=b||sjcl2.hash.sha256;var c=[[],[]],d2,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d2=0;d2<e;d2++)c[0][d2]=a[d2]^909522486,c[1][d2]=a[d2]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};sjcl2.misc.hmac.prototype.encrypt=sjcl2.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl2.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl2.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=false};sjcl2.misc.hmac.prototype.update=function(a){this.aa=true;this.R.update(a)};sjcl2.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=new this.W(this.w[1]).update(a).finalize();this.reset();return a};sjcl2.misc.pbkdf2=function(a,b,c,d2,e){c=c||1e4;if(0>d2||0>c)throw new sjcl2.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl2.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl2.codec.utf8String.toBits(b));e=e||sjcl2.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl2.bitArray;for(k=1;32*l.length<(d2||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d2&&(l=n.clamp(l,d2));return l};sjcl2.prng=function(a){this.c=[new sjcl2.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=false;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=65536;this.T=[0,48,64,96,128,192,256,384,512,768,1024];this.da=3e4;this.ba=80};sjcl2.prng.prototype={randomWords:function(a,b){var c=[],d2;d2=this.isReady(b);var e;if(d2===this.u)throw new sjcl2.exception.notReady("generator isn\'t seeded");if(d2&this.J){d2=!(d2&this.I);e=[];var f=0,g;this.Z=e[0]=new Date().valueOf()+this.da;for(g=0;16>g;g++)e.push(4294967296*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d2||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl2.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=f);this.P++;this.b=sjcl2.hash.sha256.hash(this.b.concat(e));this.L=new sjcl2.cipher.aes(this.b);for(d2=0;4>d2&&(this.h[d2]=this.h[d2]+1|0,!this.h[d2]);d2++);}for(d2=0;d2<a;d2+=4)0===(d2+1)%this.ca&&y3(this),e=z2(this),c.push(e[0],e[1],e[2],e[3]);y3(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl2.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,b,c){c=c||"user";var d2,e,f=new Date().valueOf(),g=this.H[c],h=this.isReady(),k=0;d2=this.U[c];void 0===d2&&(d2=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case"number":void 0===b&&(b=1);this.c[g].update([d2,this.N++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d2,this.N++,2,b,f,a.length].concat(a))}break;case"string":void 0===b&&(b=a.length);this.c[g].update([d2,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl2.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A3("seeded",Math.max(this.o,this.f)),A3("progress",this.getProgress()))},isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&new Date().valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B2(this,this.ma),mouseCollector:B2(this,this.oa),keyboardCollector:B2(this,this.la),accelerometerCollector:B2(this,this.ea),touchCollector:B2(this,this.qa)};if(window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,false),window.addEventListener("mousemove",this.a.mouseCollector,false),window.addEventListener("keypress",this.a.keyboardCollector,false),window.addEventListener("devicemotion",this.a.accelerometerCollector,false),window.addEventListener("touchmove",this.a.touchCollector,false);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl2.exception.bug("can\'t attach event");this.D=true}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,false),window.removeEventListener("mousemove",this.a.mouseCollector,false),window.removeEventListener("keypress",this.a.keyboardCollector,false),window.removeEventListener("devicemotion",this.a.accelerometerCollector,false),window.removeEventListener("touchmove",this.a.touchCollector,false)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=false)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d2,e=this.K[a],f=[];for(d2 in e)e.hasOwnProperty(d2)&&e[d2]===b&&f.push(d2);for(c=0;c<f.length;c++)d2=f[c],delete e[d2]},la:function(){C3(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d2){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C3(this,0)},qa:function(a){a=a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C3(this,0)},ma:function(){C3(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C3(this,0)}};function A3(a,b){var c,d2=sjcl2.random.K[a],e=[];for(c in d2)d2.hasOwnProperty(c)&&e.push(d2[c]);for(c=0;c<e.length;c++)e[c](b)}function C3(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy(new Date().valueOf(),b,"loadtime")}function y3(a){a.b=z2(a).concat(z2(a));a.L=new sjcl2.cipher.aes(a.b)}function z2(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}function B2(a,b){return function(){b.apply(a,arguments)}}sjcl2.random=new sjcl2.prng(6);a:try{if(G2="undefined"!==typeof module&&module.exports){try{H2=__require22("crypto")}catch(a){H2=null}G2=E2=H2}if(G2&&E2.randomBytes)D2=E2.randomBytes(128),D2=new Uint32Array(new Uint8Array(D2).buffer),sjcl2.random.addEntropy(D2,1024,"crypto[\'randomBytes\']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F3=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F3);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F3);else break a;sjcl2.random.addEntropy(F3,1024,"crypto[\'getRandomValues\']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}var D2;var E2;var F3;var G2;var H2;sjcl2.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl2.json,f=e.g({iv:sjcl2.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl2.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl2.codec.base64.toBits(f.iv));if(!sjcl2.mode[f.mode]||!sjcl2.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&256!==f.ks||2>f.iv.length||4<f.iv.length)throw new sjcl2.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl2.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl2.ecc&&a instanceof sjcl2.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl2.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl2.codec.utf8String.toBits(c));g=new sjcl2.cipher[f.cipher](a);e.g(d2,f);d2.key=a;f.ct="ccm"===f.mode&&sjcl2.arrayBuffer&&sjcl2.arrayBuffer.ccm&&b instanceof ArrayBuffer?sjcl2.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl2.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d2){var e=sjcl2.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d2){c=c||{};d2=d2||{};var e=sjcl2.json;b=e.g(e.g(e.g({},e.defaults),b),c,true);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl2.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl2.codec.base64.toBits(b.iv));if(!sjcl2.mode[b.mode]||!sjcl2.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&256!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl2.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl2.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl2.ecc&&a instanceof sjcl2.ecc.elGamal.secretKey&&(a=a.unkem(sjcl2.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl2.codec.utf8String.toBits(f));g=new sjcl2.cipher[b.cipher](a);f="ccm"===b.mode&&sjcl2.arrayBuffer&&sjcl2.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl2.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl2.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d2,b);d2.key=a;return 1===c.raw?f:sjcl2.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d2){var e=sjcl2.json;return e.ia(a,e.decode(b),c,d2)},encode:function(a){var b,c="{",d2="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl2.exception.invalid("json encode: invalid property name");c+=d2+\'"\'+b+\'":\';d2=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+=\'"\'+escape(a[b])+\'"\';break;case"object":c+=\'"\'+sjcl2.codec.base64.fromBits(a[b],0)+\'"\';break;default:throw new sjcl2.exception.bug("json encode: unsupported type")}}return c+"}"},decode:function(a){a=a.replace(/\\s/g,"");if(!a.match(/^\\{.*\\}$/))throw new sjcl2.exception.invalid("json decode: this isn\'t json!");a=a.replace(/^\\{|\\}$/g,"").split(/,/);var b={},c,d2;for(c=0;c<a.length;c++){if(!(d2=a[c].match(/^\\s*(?:(["\']?)([a-z][a-z0-9]*)\\1)\\s*:\\s*(?:(-?\\d+)|"([a-z0-9+\\/%*_.@=\\-]*)"|(true|false))$/i)))throw new sjcl2.exception.invalid("json decode: this isn\'t json!");null!=d2[3]?b[d2[2]]=parseInt(d2[3],10):null!=d2[4]?b[d2[2]]=d2[2].match(/^(ct|adata|salt|iv)$/)?sjcl2.codec.base64.toBits(d2[4]):unescape(d2[4]):null!=d2[5]&&(b[d2[2]]="true"===d2[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d2 in b)if(b.hasOwnProperty(d2)){if(c&&void 0!==a[d2]&&a[d2]!==b[d2])throw new sjcl2.exception.invalid("required parameter overridden");a[d2]=b[d2]}return a},sa:function(a,b){var c={},d2;for(d2 in a)a.hasOwnProperty(d2)&&a[d2]!==b[d2]&&(c[d2]=a[d2]);return c},ra:function(a,b){var c={},d2;for(d2=0;d2<b.length;d2++)void 0!==a[b[d2]]&&(c[b[d2]]=a[b[d2]]);return c}};sjcl2.encrypt=sjcl2.json.encrypt;sjcl2.decrypt=sjcl2.json.decrypt;sjcl2.misc.pa={};sjcl2.misc.cachedPbkdf2=function(a,b){var c=sjcl2.misc.pa,d2;b=b||{};d2=b.iter||1e3;c=c[a]=c[a]||{};d2=c[d2]=c[d2]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl2.random.randomWords(2,0)};c=void 0===b.salt?d2.firstSalt:b.salt;d2[c]=d2[c]||sjcl2.misc.pbkdf2(a,c,b.iter);return{key:d2[c].slice(0),salt:c.slice(0)}};var _HTTPfrontend2=class extends Service2{constructor(options,path,fetched){super(options);this.name="http";this.fetchProxied=false;this.listening={};this.GET=(url2="http://localhost:8080/ping",type="",mimeType)=>{if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend2.request({method:"GET",url:url2,responseType:type,mimeType,onload:ev2=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url2 instanceof URL)url2=url2.toString();this.setState({[url2]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.POST=(message,url2="http://localhost:8080/echo",type="",mimeType)=>{if(typeof message==="object"&&(type==="json"||type==="text"||!type)){message=JSON.stringify(message)}if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend2.request({method:"POST",url:url2,data:message,responseType:type,mimeType,onload:ev2=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url2 instanceof URL)url2=url2.toString();this.setState({[url2]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.transmit=(message,url2)=>{let obj=message;if(typeof obj==="object"){message=JSON.stringify(obj)}if(obj?.method?.toLowerCase()=="get"||message?.toLowerCase()==="get")return this.GET(url2);return this.POST(message,url2)};this.transponder=(url2,message,type="",mimeType)=>{if(typeof message==="object")message=JSON.stringify(message);let method="GET";if(message){method="POST"}if(type==="json")mimeType="application/json";else return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend2.request({method,url:url2,data:message,responseType:type,onload:ev2=>{let body=xhr.response;if(typeof body==="string"){let substr=body.substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\"))body=body.replace(/\\\\/g,"");if(body[0]===\'"\'){body=body.substring(1,body.length-1)};body=JSON.parse(body)}}if(typeof body?.method==="string"){return resolve(this.handleMethod(body.route,body.method,body.args))}else if(typeof body?.route==="string"){return resolve(this.handleServiceMessage(body))}else if(typeof body?.node==="string"||body.node instanceof GraphNode2){return resolve(this.handleGraphNodeCall(body.node,body.args))}else return resolve(body)},onabort:er=>{reject(er)}})}).catch(console.error)};this.listen=(path2="0",fetched2=async(clone,args,response)=>{const result=await clone.text();const returned=this.receive(result);this.setState({[response.url]:returned})})=>{this.listening[path2]={};let listenerId=`${path2}${Math.floor(Math.random()*1e15)}`;this.listening[path2][listenerId]=fetched2;if(!this.fetchProxied){globalThis.fetch=new Proxy(globalThis.fetch,{apply(fetch,that,args){const result=fetch.apply(that,args);result.then(response=>{if(!response.ok)return;if(this.listening["0"]){for(const key in this.listeners){const clone=response.clone();this.listening["0"][key](clone,args,response)}}else{for(const key in this.listening){if(response.url.includes(key)){for(const key2 in this.listening[path2]){const clone=response.clone();this.listening[path2][key2](clone,args,response)}break}}}}).catch(er=>{console.error(er)});return result}});this.fetchProxied=true}return listenerId};this.stopListening=(path2,listener)=>{if(!path2&&path2!==0){for(const key in this.listening)delete this.listening[key]}else{if(!listener)delete this.listening[path2];else delete this.listening[listener]}};this.load(this);this.listen(path,fetched)}};var HTTPfrontend2=_HTTPfrontend2;HTTPfrontend2.request=options=>{const xhr=new XMLHttpRequest;if(options.responseType)xhr.responseType=options.responseType;else options.responseType="json";if(options.mimeType){xhr.overrideMimeType(options.mimeType)}if(options.onload)xhr.addEventListener("load",options.onload,false);if(options.onprogress)xhr.addEventListener("progress",options.onprogress,false);if(options.onabort)xhr.addEventListener("abort",options.onabort,false);if(options.onloadend)xhr.addEventListener("loadend",options.onloadend,false);if(options.onerror)xhr.addEventListener("error",options.onerror,false);xhr.open(options.method,options.url,true,options.user,options.pass);if(!options.onerror)xhr.onerror=function(){xhr.abort()};xhr.send(options.data);return xhr};var import_web_worker2=__toESM22(require_browser2());var WorkerService2=class extends Service2{constructor(options){super();this.name="worker";this.workers={};this.threadRot=0;this.loadWorkerRoute=(rt,routeKey)=>{if(rt.workerUrl)rt.url=rt.workerUrl;if(rt.workerId)rt.__node.tag=rt.workerId;if(!rt.__node.tag)rt.__node.tag=routeKey;rt._id=rt.__node.tag;let worker;if(this.workers[rt._id])worker=this.workers[rt._id];else if(rt.worker)worker=rt.worker;if(!worker){worker=this.addWorker(rt)}rt.worker=worker;if(!rt.worker.__ondisconnected){let ondelete=rt2=>{rt2.worker?.terminate()};rt.__addOndisconnected(ondelete)}if(rt.transferFunctions){for(const prop in rt.transferFunctions){this.transferFunction(worker,rt.transferFunctions[prop],prop)}}if(rt.transferClasses){for(const prop in rt.transferClasses){this.transferClass(worker,rt.transferClasses[prop],prop)}}if(worker){if(!rt.__operator){rt.__operator=(...args)=>{if(rt.callback){if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.post(rt.callback,args);else return worker.run(rt.callback,args)}else{if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.send(args);else return worker.request(args)}}}if(rt.init){worker.run(rt.init,rt.initArgs,void 0,rt.initTransfer)}return worker}};this.workerloader={"workers":(node,parent,graph,roots)=>{let rt=node;if(!node.parentRoute&&(parent?.callback&&parent?.worker))node.parentRoute=parent?.callback;if(rt?.worker||rt?.workerId||rt?.workerUrl){let worker=this.loadWorkerRoute(rt,rt.__node.tag);if(worker){if(!rt.parentRoute&&rt.__parent?.callback)rt.parentRoute=rt.__parent.callback;if(rt.__parent&&!rt.portId){if(typeof rt.__parent==="string"){if(rt.__node.tag!==rt.__parent&&worker._id!==rt.__parent)rt.portId=this.establishMessageChannel(worker,rt.__parent)}else if(rt.__node.tag!==rt.__parent?.__node?.tag&&worker._id!==rt.__parent?.tag){rt.portId=this.establishMessageChannel(worker,rt.__parent.worker)}};if(rt.parentRoute){if(!rt.stopped){if(typeof rt.__parent==="string"&&rt.__parent===worker._id){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else if(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.parentRoute,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id)&&!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent){if(typeof rt.__parent==="string"){if(!rt.stopped){if(rt.__parent===worker._id){worker.run("subscribe",[rt.__parent,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id))worker.workerSubs[rt.__parent+rt.portId]={sub:null,route:worker._id,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent?.__node?.tag&&rt.__parent?.worker){if(!rt.stopped){if(rt.__node.tag===rt.__parent.__node.tag||worker._id===rt.__parent.__node.tag){worker.run("subscribe",[rt.__parent.__node.tag,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent.__node.tag,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent.__node.tag+rt.portId].sub=sub})}if(!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.__parent.__node.tag+rt.portId]={sub:null,route:rt.__parent.__node.tag,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}}}}else if(rt.__parent&&rt.parentRoute){if(typeof rt.__parent==="string"&&roots[rt.__parent]?.worker){roots[rt.__parent].worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}else if(rt.__parent?.worker){rt.__parent.worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}}return rt}};this.addDefaultMessageListener=()=>{globalThis.onmessage=ev2=>{let result=this.receive(ev2.data);if(this.__node.keepState)this.setState({[this.name]:result})}};this.postMessage=(message,target,transfer)=>{if(this.workers[target]){this.workers[target].send(message,transfer)}else{globalThis.postMessage(message,target,transfer)}};this.addWorker=options2=>{let worker;if(!options2._id)options2._id=`worker${Math.floor(Math.random()*1e15)}`;if(options2.url)worker=new import_web_worker2.default(options2.url);else if(options2.port){worker=options2.port}else if(this.workers[options2._id]){if(this.workers[options2._id].port)worker=this.workers[options2._id].port;else worker=this.workers[options2._id].worker}if(!worker)return;let send=(message,transfer)=>{return this.transmit(message,worker,transfer)};let post=(route,args,method,transfer)=>{let message={route,args};if(method)message.method=method;return this.transmit(message,worker,transfer)};let run=(route,args,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[{route,args},options2._id,callbackId]};if(method)req.args[0].method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let request=(message,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,options2._id,callbackId]};if(method)req.method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let workerSubs={};let subscribe=(route,callback,args,key,subInput,blocking)=>{return this.subscribeToWorker(route,options2._id,callback,args,key,subInput,blocking)};let unsubscribe=(route,sub)=>{return run("unsubscribe",[route,sub])};let start=async(route,portId,callback,blocking)=>{if(route)await run("subscribeToWorker",[route,portId,void 0,callback,blocking]).then(sub=>{if(sub)workerSubs[route+portId]={sub,route,portId,callback,blocking}});else for(const key in workerSubs){if(typeof workerSubs[key].sub!=="number")await run("subscribeToWorker",[workerSubs[key].route,workerSubs[key].portId,void 0,workerSubs[key].callback,void 0,workerSubs[key].blocking]).then(sub=>{workerSubs[key].sub=sub});console.log(JSON.stringify(workerSubs))}return true};let stop=async(route,portId)=>{if(route&&portId&&workerSubs[route+portId]){await run("unsubscribe",[route,workerSubs[route+portId].sub]);workerSubs[route+portId].sub=false}else{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){await run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub]).then(console.log)}workerSubs[key].sub=false}}return true};let terminate=()=>{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}return this.terminate(options2._id)};if(!options2.onmessage)options2.onmessage=ev2=>{this.receive(ev2.data);this.setState({[options2._id]:ev2.data})};if(!options2.onerror){options2.onerror=ev2=>{console.error(ev2.data)}}worker.onmessage=options2.onmessage;worker.onerror=options2.onerror;this.workers[options2._id]={worker,send,post,run,request,subscribe,unsubscribe,terminate,start,stop,postMessage:worker.postMessage,workerSubs,graph:this,...options2};return this.workers[options2._id]};this.open=this.addWorker;this.toObjectURL=scriptTemplate=>{let blob=new Blob([scriptTemplate],{type:"text/javascript"});return URL.createObjectURL(blob)};this.transmit=(message,worker,transfer)=>{if(!transfer){transfer=this.getTransferable(message)}if(worker instanceof import_web_worker2.default||worker instanceof MessagePort){worker.postMessage(message,transfer)}else if(typeof worker==="string"){if(this.workers[worker]){if(this.workers[worker].port)this.workers[worker].port.postMessage(message,transfer);else if(this.workers[worker].worker)this.workers[worker].worker.postMessage(message,transfer)}}else{let keys22=Object.keys(this.workers);this.workers[keys22[this.threadRot]].worker.postMessage(message,transfer);this.threadRot++;if(this.threadRot===keys22.length)this.threadRot=0}return message};this.terminate=worker=>{let onclose;if(typeof worker==="string"){let obj=this.workers[worker];if(obj){delete this.workers[worker];worker=obj.worker;if(obj.onclose)onclose=obj.onclose}}else if(typeof worker==="object"){if(worker?._id){worker=worker.worker;delete this.workers[worker?._id]}}if(worker instanceof import_web_worker2.default){worker.terminate();if(onclose)onclose(worker);return true}if(worker instanceof MessagePort){worker.close();if(onclose)onclose(worker);return true}return false};this.establishMessageChannel=(worker,worker2)=>{let workerId;if(typeof worker==="string"){workerId=worker;if(this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker2=this.workers[worker].worker}}else if(worker?.worker){worker=worker.worker}if(typeof worker2==="string"){if(this.workers[worker2]){if(this.workers[worker2].port)worker2=this.workers[worker2].port;else worker2=this.workers[worker2].worker}}else if(worker2?.worker){worker2=worker2.worker}if(worker instanceof import_web_worker2.default||worker instanceof MessagePort){let channel=new MessageChannel;let portId=`port${Math.floor(Math.random()*1e15)}`;worker.postMessage({route:"addWorker",args:{port:channel.port1,_id:portId}},[channel.port1]);if(worker2 instanceof import_web_worker2.default||worker2 instanceof MessagePort){worker2.postMessage({route:"addWorker",args:{port:channel.port2,_id:portId}},[channel.port2])}else if(workerId&&this.workers[workerId]){channel.port2.onmessage=this.workers[workerId].onmessage;this.workers[workerId].port=channel.port2}return portId}return false};this.request=(message,workerId,transfer,method)=>{let worker=this.workers[workerId].worker;return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,callbackId]};if(method)req.method=method;let onmessage=ev2=>{if(typeof ev2.data==="object"){if(ev2.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev2.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};this.runRequest=(message,worker,callbackId)=>{let res=this.receive(message);if(typeof worker==="string"&&this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}if(res instanceof Promise){res.then(r=>{if(worker instanceof import_web_worker2.default||worker instanceof MessagePort)worker.postMessage({args:r,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:r,callbackId})})}else{if(worker instanceof import_web_worker2.default||worker instanceof MessagePort)worker.postMessage({args:res,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:res,callbackId})}return res};this.subscribeWorker=(route,worker,args,key,subInput,blocking)=>{let callback;if(blocking){let blocked=false;callback=res=>{if(!blocked){blocked=true;if(res instanceof Promise){res.then(r=>{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,r]).then(ret=>{blocked=false})})}else{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,res]).then(ret=>{blocked=false})}}}}else{callback=res=>{if(res instanceof Promise){res.then(r=>{if(worker?.postMessage)worker.postMessage({args:r,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:r,callbackId:route})})}else{if(worker?.postMessage)worker.postMessage({args:res,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:res,callbackId:route})}}}if(!blocking&&worker?.port){worker=worker.port}else if(!blocking&&worker?.worker){worker=worker.worker}else if(typeof worker==="string"&&this.workers[worker]){if(blocking)worker=this.workers[worker];else if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}return this.subscribe(route,callback,args,key,subInput)};this.subscribeToWorker=(route,workerId,callback,args,key,subInput,blocking)=>{if(typeof workerId==="string"&&this.workers[workerId]){this.__node.state.subscribeEvent(workerId,res=>{if(res?.callbackId===route){if(!callback)this.setState({[workerId]:res.args});else if(typeof callback==="string"){this.run(callback,res.args)}else callback(res.args)}});return this.workers[workerId].run("subscribeWorker",[route,workerId,args,key,subInput,blocking])}};this.triggerSubscription=async(route,workerId,result)=>{if(this.__node.state.triggers[workerId])for(let i22=0;i22<this.__node.state.triggers[workerId].length;i22++){await this.__node.state.triggers[workerId][i22].onchange({args:result,callbackId:route})}return true};this.pipeWorkers=(sourceWorker,listenerWorker,sourceRoute,listenerRoute,portId,args,key,subInput,blocking)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof listenerWorker==="string")listenerWorker=this.workers[listenerWorker];if(!portId){portId=this.establishMessageChannel(sourceWorker.worker,listenerWorker.worker)}return listenerWorker.run("subscribeToWorker",[sourceRoute,portId,listenerRoute,args,key,subInput,blocking])};this.unpipeWorkers=(sourceRoute,sourceWorker,sub)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof sourceWorker==="object"){return sourceWorker.run("unsubscribe",[sourceRoute,sub])}};this.connections={workers:this.workers};if(options?.services)this.addServices(options.services);this.load(this);this.setLoaders(this.workerloader);if(options)this.init(options);if(typeof WorkerGlobalScope!=="undefined"&&globalThis instanceof WorkerGlobalScope){this.addDefaultMessageListener()}}getTransferable(message){let transfer;if(typeof message==="object"){if(message.args){if(message.args?.constructor?.name==="Object"){for(const key in message.args){if(ArrayBuffer.isView(message.args[key])){if(!transfer)transfer=[message.args[key].buffer];else transfer.push(message.args[key].buffer)}else if(message.args[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message.args[key]];else transfer.push(message.args[key])}}}else if(Array.isArray(message.args)&&message.args.length<11){message.args.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg?.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message.args)){transfer=[message.args.buffer]}else if(message.args?.constructor?.name==="ArrayBuffer"){transfer=[message]}}else if(message?.constructor?.name==="Object"){for(const key in message){if(ArrayBuffer.isView(message[key])){if(!transfer)transfer=[message[key].buffer];else transfer.push(message[key].buffer)}else if(message[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message[key]];else transfer.push(message[key])}}}else if(Array.isArray(message)&&message.length<11){message.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message)){transfer=[message.buffer]}else if(message.constructor?.name==="ArrayBuffer"){transfer=[message]}}return transfer}};var mouseEventHandler2=makeSendPropertiesHandler2(["ctrlKey","metaKey","shiftKey","button","pointerType","clientX","clientY","pageX","pageY","movementX","movementY","x","y","timeStamp"]);var wheelEventHandlerImpl2=makeSendPropertiesHandler2(["deltaX","deltaY"]);var keydownEventHandler2=makeSendPropertiesHandler2(["ctrlKey","metaKey","shiftKey","altKey","isComposing","keyCode","key","code","repeat","timeStamp"]);function focusEventHandler2(event,sendFn){const data={type:event.type};data.isTrusted=event.isTrusted;data.bubbles=event.bubbles;data.cancelBubble=event.cancelBubble;data.cancelable=event.cancelable;data.composed=event.composed;data.defaultPrevent=event.defaultPrevented;data.eventPhase=event.eventPhase;data.returnValue=event.returnValue;data.currentTarget=event.currentTarget.id?event.currentTarget.id:event.currentTarget.constructor.name;data.target=data.currentTarget;data.srcElement=data.currentTarget;sendFn(data)}function wheelEventHandler2(event,sendFn){event.preventDefault();wheelEventHandlerImpl2(event,sendFn)}function preventDefaultHandler2(event){event.preventDefault()}function copyProperties2(src,properties,dst){for(const name2 of properties){dst[name2]=src[name2]}}function makeSendPropertiesHandler2(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties2(event,properties,data);sendFn(data)}}function touchEventHandler2(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i22=0;i22<event.touches.length;++i22){const touch=event.touches[i22];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var i2=1;var keys2={};while(i2<222){keys2[i2]=true;i2++}function filteredKeydownEventHandler2(event,sendFn){let{keyCode}=event;if(keys2[keyCode]){if(event.preventDefault&&(keyCode<110||keyCode>123))event.preventDefault();keydownEventHandler2(event,sendFn)}}var eventHandlers2={contextmenu:preventDefaultHandler2,mousedown:mouseEventHandler2,mousemove:mouseEventHandler2,mouseup:mouseEventHandler2,pointerdown:mouseEventHandler2,pointermove:mouseEventHandler2,pointerup:mouseEventHandler2,pointerlockchange:mouseEventHandler2,webkitpointerlockchange:mouseEventHandler2,focus:focusEventHandler2,blur:focusEventHandler2,pointerout:mouseEventHandler2,touchstart:touchEventHandler2,touchmove:touchEventHandler2,touchend:touchEventHandler2,wheel:wheelEventHandler2,keydown:filteredKeydownEventHandler2,keyup:filteredKeydownEventHandler2};function initProxyElement2(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{if(!worker){handleProxyEvent2(data,id)}else worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers2);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}if(eventHandlers2.keydown){globalThis.addEventListener("keydown",function(ev2){eventHandlers2.keydown(ev2,sendEvent)})}if(eventHandlers2.keyup){globalThis.addEventListener("keyup",function(ev2){eventHandlers2.keyup(ev2,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher2=class{addEventListener(type,listener){if(this.__listeners===void 0)this.__listeners={};const listeners=this.__listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this.__listeners===void 0)return false;const listeners=this.__listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i22=0,l=array.length;i22<l;i22++){array[i22].call(this,event)}}}};function noop2(){}var ElementProxyReceiver2=class extends EventDispatcher2{constructor(){super();this.__listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.style.width=this.width+"px";this.proxied.style.height=this.height+"px";this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop2;data.stopPropagation=noop2;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}blur(){}};var ProxyManager2=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver2;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;if(typeof WorkerGlobalScope!=="undefined")addTo.style=proxy.style;if(proxy.width){addTo.style.width=proxy.width+"px";addTo.clientWidth=proxy.width}if(proxy.height){addTo.style.height=proxy.height+"px";addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy);addTo.blur=proxy.blur.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={elementFromPoint:(...args)=>{return this.targets[Object.keys(this.targets)[0]].proxied}}}};function makeProxy2(id,elm){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager2;this.__node.graph.ProxyManager.makeProxy(id,elm)}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager2;globalThis.ProxyManager.makeProxy(id,elm)}return id}function handleProxyEvent2(data,id){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager2;if(this.__node.graph.ProxyManager.handleEvent(data,id))return data}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager2;if(globalThis.ProxyManager.handleEvent(data,id))return data}}var proxyElementWorkerRoutes2={initProxyElement:initProxyElement2,makeProxy:makeProxy2,handleProxyEvent:handleProxyEvent2};function Renderer2(options){if(options.worker){let worker=options.worker;let route=options.route;if(worker instanceof Blob||typeof worker==="string"){worker=new Worker(worker)}delete options.worker;delete options.route;return transferCanvas2(worker,options,route)}else{initProxyElement2(options.canvas,void 0,options._id);return setupCanvas2(options)}}function transferCanvas2(worker,options,route){console.log(options);if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();if(!options.width)options.width=options.canvas.clientWidth;if(!options.height)options.height=options.canvas.clientHeight;let message={route:route?route:"setupCanvas",args:{...options,canvas:offscreen}};if(this?.__node?.graph)this.__node.graph.run("initProxyElement",options.canvas,worker,options._id);else initProxyElement2(options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let tr=[offscreen];if(options.transfer){tr.push(...options.transfer);delete options.transfer}worker.postMessage(message,tr);const canvascontrols={_id:options._id,width:options.width,height:options.height,worker,draw:(props,transfer)=>{worker.postMessage({route:"drawFrame",args:[props,options._id]},transfer)},update:(props,transfer)=>{worker.postMessage({route:"updateCanvas",args:[props,options._id]},transfer)},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:(newDrawProps,transfer)=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]},transfer)},terminate:()=>{worker.terminate()}};return canvascontrols}function setDraw2(settings,_id){let canvasopts;if(this?.__node?.graph){if(_id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]]}else{if(_id)canvasopts=globalThis.CANVASES?.[settings._id];else if(settings._id)canvasopts=globalThis.CANVASES?.[settings._id];else canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]]}if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasopts._id,canvasopts.canvas);else proxyElementWorkerRoutes2.makeProxy(canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText32(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw.bind(settings)}if(typeof settings.update==="string")settings.update=parseFunctionFromText32(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update.bind(settings)}if(typeof settings.init==="string")settings.init=parseFunctionFromText32(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init.bind(settings)}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText32(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear.bind(settings)}return settings._id}return void 0}function setupCanvas2(options){if(this?.__node?.graph){if(!this.__node.graph.CANVASES)this.__node.graph.CANVASES={}}else if(!globalThis.CANVASES)globalThis.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this?.__node?.graph?.CANVASES[canvasOptions._id]){this.__node.graph.run("setDraw",canvasOptions)}else if(globalThis.CANVASES?.[canvasOptions._id]){setDraw2(canvasOptions)}else{if(this?.__node?.graph){canvasOptions.graph=this.__node.graph;if(!canvasOptions.__node){canvasOptions.__node={}}if(!canvasOptions.__node.tag)canvasOptions.__node.tag=canvasOptions._id;canvasOptions=this.__node.graph.add(canvasOptions);canvasOptions.__addOndisconnected=()=>{canvasOptions.stop();delete this.__node.graph.CANVASES[canvasOptions._id]}}if(this?.__node?.graph)this.__node.graph.CANVASES[canvasOptions._id]=canvasOptions;else globalThis.CANVASES[canvasOptions._id]=canvasOptions;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);else proxyElementWorkerRoutes2.makeProxy(canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText32(canvasOptions.draw)}else if(typeof canvasOptions.draw==="function"){canvasOptions.draw=canvasOptions.draw.bind(canvasOptions)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText32(canvasOptions.update)}else if(typeof canvasOptions.update==="function"){canvasOptions.update=canvasOptions.update.bind(canvasOptions)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText32(canvasOptions.init)}else if(typeof canvasOptions.init==="function"){canvasOptions.init=canvasOptions.init.bind(canvasOptions)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText32(canvasOptions.clear)}else if(typeof canvasOptions.clear==="function"){canvasOptions.clear=canvasOptions.clear.bind(canvasOptions)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);canvasOptions.stop=()=>{stopAnim2(canvasOptions._id)};canvasOptions.start=draw=>{startAnim2(canvasOptions._id,draw)};canvasOptions.set=settings=>{setDraw2(settings,canvasOptions._id)};if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)return canvasOptions._id;else{const canvascontrols={_id:options._id,width:options.width,height:options.height,draw:props=>{drawFrame2(props,options._id)},update:props=>{updateCanvas2(props,options._id)},clear:()=>{clearCanvas2(options._id)},init:()=>{initCanvas2(options._id)},stop:()=>{stopAnim2(options._id)},start:()=>{startAnim2(options._id)},set:newDrawProps=>{setDraw2(newDrawProps,options._id)},terminate:()=>{if(this.__node?.graph)this.__node.graph.remove(options._id);else{stopAnim2(options._id);if(this?.__node?.graph)delete this.__node.graph.CANVASES[canvasOptions._id];else delete globalThis.CANVASES[canvasOptions._id]}}};return canvascontrols}}function drawFrame2(props,_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0}function clearCanvas2(_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function initCanvas2(_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function updateCanvas2(input,_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0}function setProps2(props,_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0}function startAnim2(_id,draw){let canvasopts=getCanvas2.call(this,_id);canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText32(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function stopAnim2(_id){let canvasopts=getCanvas2.call(this,_id);if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")requestAnimationFrame(canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context));return _id}return void 0}function getCanvas2(_id){let canvasopts;if(this?.__node?.graph){if(!_id)canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];else canvasopts=this.__node.graph.CANVASES?.[_id]}else{if(!_id)canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];else canvasopts=globalThis.CANVASES?.[_id]}return canvasopts}var workerCanvasRoutes2={...proxyElementWorkerRoutes2,Renderer:Renderer2,transferCanvas:transferCanvas2,setupCanvas:setupCanvas2,setDraw:setDraw2,drawFrame:drawFrame2,clearCanvas:clearCanvas2,initCanvas:initCanvas2,updateCanvas:updateCanvas2,setProps:setProps2,startAnim:startAnim2,stopAnim:stopAnim2,getCanvas:getCanvas2};function parseFunctionFromText32(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\W*(function[^{]+\\{([\\s\\S]*)\\}|[^=]+=>[^{]*\\{([\\s\\S]*)\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var url=URL.createObjectURL(new Blob([String(\'(()=>{var __require=(x=>typeof require!=="undefined"?require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof require!=="undefined"?require:a)[b]}):x)(function(x){if(typeof require!=="undefined")return require.apply(this,arguments);throw new Error(\\\'Dynamic require of "\\\'+x+\\\'" is not supported\\\')});var __create=Object.create;var __defProp=Object.defineProperty;var __getOwnPropDesc=Object.getOwnPropertyDescriptor;var __getOwnPropNames=Object.getOwnPropertyNames;var __getProtoOf=Object.getPrototypeOf;var __hasOwnProp=Object.prototype.hasOwnProperty;var __require2=(x=>typeof __require!=="undefined"?__require:typeof Proxy!=="undefined"?new Proxy(x,{get:(a,b)=>(typeof __require!=="undefined"?__require:a)[b]}):x)(function(x){if(typeof __require!=="undefined")return __require.apply(this,arguments);throw new Error(\\\'Dynamic require of "\\\'+x+\\\'" is not supported\\\')});var __commonJS=(cb,mod)=>function __require22(){return mod||(0,cb[__getOwnPropNames(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames(from))if(!__hasOwnProp.call(to,key)&&key!==except)__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable})}return to};var __toESM=(mod,isNodeMode,target)=>(target=mod!=null?__create(__getProtoOf(mod)):{},__copyProps(isNodeMode||!mod||!mod.__esModule?__defProp(target,"default",{value:mod,enumerable:true}):target,mod));var require_browser=__commonJS({"node_modules/web-worker/cjs/browser.js"(exports,module2){module2.exports=Worker}});var EventHandler=class{constructor(data){this.pushToState={};this.data={};this.triggers={};this.setState=updateObj=>{Object.assign(this.data,updateObj);let props=Object.getOwnPropertyNames(updateObj);for(const prop of props){this.triggerEvent(prop,this.data[prop])}return this.data};this.setValue=(key,value)=>{this.data[key]=value;this.triggerEvent(key,value)};this.triggerEvent=(key,value)=>{if(this.triggers[key]){let fn=obj=>obj.onchange(value);this.triggers[key].forEach(fn)}};this.subscribeEvent=(key,onchange,refObject,refKey)=>{if(key){if(refObject&&refKey&&!this.triggers[key]){Object.defineProperty(this.data,key,{get:()=>{return refObject[refKey]},set:value=>{refObject[refKey]=value},enumerable:true,configurable:true})}if(!this.triggers[key]){this.triggers[key]=[]}let l=this.triggers[key].length;this.triggers[key].push({sub:l,onchange});return this.triggers[key].length-1}else return void 0};this.unsubscribeEvent=(key,sub)=>{let triggers=this.triggers[key];if(triggers){if(!sub){delete this.triggers[key];delete this.data[key]}else{let sub2=void 0;let obj=triggers.find((o,i2)=>{if(o.sub===sub2){sub2=i2;return true}});if(obj)triggers.splice(sub2,1);if(Object.keys(triggers).length===0){delete this.triggers[key];delete this.data[key]}if(this.onRemoved)this.onRemoved(obj);return true}}};this.subscribeEventOnce=(key,onchange)=>{let sub;let changed=value=>{onchange(value);this.unsubscribeEvent(key,sub)};sub=this.subscribeEvent(key,changed)};this.getEvent=(key,sub)=>{for(const s in this.triggers[key]){if(this.triggers[key][s].sub===sub)return this.triggers[key][s]}};this.getSnapshot=()=>{const snapshot={};for(const key in this.data){snapshot[key]=this.data[key]}};if(typeof data==="object")this.data=data}};var state=new EventHandler;var GraphNode=class{constructor(properties,parent,graph){this.__node={tag:`node${Math.floor(Math.random()*1e15)}`,unique:`${Math.floor(Math.random()*1e15)}`,state};this.__setProperties=(properties2,parent2,graph2)=>{let enforceProperties=()=>{let orig=properties2;if(typeof properties2==="function"){if(isNativeClass(properties2)){properties2=new properties2}else properties2={__operator:properties2,__node:{forward:true,tag:properties2.name}}}else if(typeof properties2==="string"){if(graph2?.get(properties2)){properties2=graph2.get(properties2)}}if(!properties2.__node.initial)properties2.__node.initial=orig};enforceProperties();if(typeof properties2==="object"){let assignState=()=>{if(properties2.__node?.state)this.__node.state=properties2.__node.state};let setProps2=()=>{if(properties2.__props){if(typeof properties2.__props==="function")properties2.__props=new properties2.__props;if(typeof properties2.__props==="object"){this.__proxyObject(properties2.__props)}}};let setTag=()=>{if(!properties2.__node.tag){if(properties2.__operator?.name)properties2.__node.tag=properties2.__operator.name;else properties2.__node.tag=`node${Math.floor(Math.random()*1e15)}`}};let setNode=()=>{if(typeof properties2.__node==="string"){if(graph2?.get(properties2.__node.tag)){properties2=graph2.get(properties2.__node.tag)}else properties2.__node={}}else if(!properties2.__node)properties2.__node={};if(graph2){properties2.__node.graph=graph2}if(properties2 instanceof Graph)properties2.__node.source=properties2};let setParent=()=>{if(!properties2.__parent&&parent2)properties2.__parent=parent2;if(parent2?.__node&&!(parent2 instanceof Graph||properties2 instanceof Graph))properties2.__node.tag=parent2.__node.tag+"."+properties2.__node.tag;if(parent2 instanceof Graph&&properties2 instanceof Graph){if(properties2.__node.loaders)Object.assign(parent2.__node.loaders?parent2.__node.loaders:{},properties2.__node.loaders);if(parent2.__node.mapGraphs){properties2.__node.nodes.forEach(n=>{parent2.set(properties2.__node.tag+"."+n.__node.tag,n)});let ondelete=()=>{properties2.__node.nodes.forEach(n=>{parent2.__node.nodes.delete(properties2.__node.tag+"."+n.__node.tag)})};this.__addOndisconnected(ondelete)}}};let setOp=()=>{if(typeof properties2.default==="function"&&!properties2.__operator){properties2.__operator=properties2.default}if(properties2.__operator){if(typeof properties2.__operator==="string"){if(graph2){let n=graph2.get(properties2.__operator);if(n)properties2.__operator=n.__operator;if(!properties2.__node.tag&&properties2.__operator.name)properties2.__node.tag=properties2.__operator.name}}if(typeof properties2.__operator==="function")properties2.__operator=this.__setOperator(properties2.__operator);if(properties2.default)properties2.default=properties2.__operator}};let assignProps=()=>{properties2.__node=Object.assign(this.__node,properties2.__node);let keys2=Object.getOwnPropertyNames(properties2);for(const key of keys2){this[key]=properties2[key]}};let bindCallbacks=()=>{if(this.__onconnected){if(typeof this.__onconnected==="function"){this.__onconnected=this.__onconnected.bind(this)}else if(Array.isArray(this.__onconnected)){this.__onconnected=this.__onconnected.map(f=>{return f.bind(this)})}if(typeof this.__ondisconnected==="function"){this.__ondisconnected=this.__ondisconnected.bind(this)}else if(Array.isArray(this.__ondisconnected)){this.__ondisconnected=this.__ondisconnected.map(f=>{return f.bind(this)})}}};assignState();setTag();setProps2();setNode();setParent();assignProps();bindCallbacks();setOp()}};this.__subscribe=(callback,key,subInput,bound,target)=>{const subscribeToFunction=(k,setTarget=(callback2,target2)=>callback2,triggerCallback=callback)=>{let sub=this.__node.state.subscribeEvent(k,triggerCallback,this,key);let trigger=this.__node.state.getEvent(k,sub);trigger.source=this.__node.tag;if(key)trigger.key=key;trigger.target=setTarget(callback);if(bound)trigger.bound=bound;return sub};const subscribeToGraph=callback2=>{let fn=this.__node.graph.get(callback2);if(!fn&&callback2.includes(".")){let n=this.__node.graph.get(callback2.substring(0,callback2.lastIndexOf(".")));let key2=callback2.substring(callback2.lastIndexOf(".")+1);if(n&&typeof n[key2]==="function")callback2=(...args)=>{return n[key2](...args)}}};if(key){if(!this.__node.localState||!this.__node.localState[key]){this.__addLocalState(this,key)}if(typeof callback==="string"){if(target){if(this.__node.graph?.get(target)){let n=this.__node.graph?.get(target);if(typeof n[callback]==="function"){let fn=n[callback];callback=(...inp)=>{fn(...inp)}}else{let k2=callback;let setter=inp=>{n[k2]=inp};callback=setter}}}else if(typeof this[callback]==="function"){let fn=this[callback];callback=(...inp)=>{fn(...inp)}}else if(this.__node.graph?.get(callback))subscribeToGraph(callback);if(typeof callback!=="function")return void 0}let sub;let k=subInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}else{if(typeof callback==="string"){if(this.__node.graph.get(callback))callback=this.__node.graph.get(callback);if(typeof callback!=="object")return void 0}let sub;let k=subInput?this.__node.unique+"input":this.__node.unique;if(typeof callback==="function")sub=subscribeToFunction(k);else if(callback?.__node)sub=subscribeToFunction(k,(callback2,target2)=>target2?target2:callback2.__node.unique,(...inp)=>{if(callback.__operator)callback.__operator(...inp)});return sub}};this.__unsubscribe=(sub,key,unsubInput)=>{if(key)return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"."+key+"input":this.__node.unique+"."+key,sub);else return this.__node.state.unsubscribeEvent(unsubInput?this.__node.unique+"input":this.__node.unique,sub)};this.__setOperator=fn=>{fn=fn.bind(this);if(this.__args&&this.__node.graph){fn=wrapArgs(fn,this.__args,this.__node.graph)}let inpstr=`${this.__node.unique}input`;this.__operator=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[this.__node.unique]){if(typeof result?.then==="function"){result.then(res=>{if(res!==void 0)this.__node.state.setValue(this.__node.unique,res)}).catch(console.error)}else if(result!==void 0)this.__node.state.setValue(this.__node.unique,result)}return result};if(this.__parent instanceof GraphNode&&!this.__subscribedToParent){if(this.__parent.__operator){let sub=this.__parent.__subscribe(this);let ondelete=()=>{this.__parent?.__unsubscribe(sub);delete this.__subscribedToParent};this.__addOndisconnected(ondelete);this.__subscribedToParent=true}}return this.__operator};this.__addLocalState=(props,key)=>{if(!props)return;if(!this.__node.localState){this.__node.localState={}}const localState=this.__node.localState;const initState=(props2,k)=>{let str2=this.__node.unique+"."+k;let inpstr=`${str2}input`;if(typeof props2[k]==="function"&&k!=="__operator"){let fn=props2[k].bind(this);props2[k]=(...args)=>{if(this.__node.state.triggers[inpstr])this.__node.state.setValue(inpstr,args);let result=fn(...args);if(this.__node.state.triggers[str2]){if(typeof result?.then==="function"){result.then(res=>{this.__node.state.triggerEvent(str2,res)}).catch(console.error)}else this.__node.state.triggerEvent(str2,result)}return result}}else{let get,set;if(this.__props?.[k]){get=()=>{return this.__props[k]};set=v=>{this.__props[k]=v;if(this.__node.state.triggers[str2])this.__node.state.triggerEvent(str2,v)}}else{localState[k]=props2[k];get=()=>{return localState[k]};set=v=>{localState[k]=v;if(this.__node.state.triggers[str2])this.__node.state.triggerEvent(str2,v)}}const descriptor={get,set,enumerable:true,configurable:true};Object.defineProperty(props2,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}};if(key)initState(props,key);else{for(let k in props){initState(props,k)}}};this.__proxyObject=obj=>{const allProps=getAllProperties(obj);for(const k of allProps){if(typeof obj[k]==="function"){this[k]=(...args)=>{return obj[k](...args)}}else{const descriptor={get:()=>{return obj[k]},set:value=>{obj[k]=value},enumerable:true,configurable:true};Object.defineProperty(this,k,descriptor);if(typeof this.__node.initial==="object"){let dec=Object.getOwnPropertyDescriptor(this.__node.initial,k);if(dec===void 0||dec?.configurable){Object.defineProperty(this.__node.initial,k,descriptor)}}}}};this.__setProperties(properties,parent,graph)}__addOnconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__onconnected)){this.__onconnected.push(callback)}else if(typeof this.__onconnected==="function"){this.__onconnected=[callback,this.__onconnected]}else this.__onconnected=callback}__addOndisconnected(callback){callback=callback.bind(this);if(Array.isArray(this.__ondisconnected)){this.__ondisconnected.push(callback)}else if(typeof this.__ondisconnected==="function"){this.__ondisconnected=[callback,this.__ondisconnected]}else this.__ondisconnected=callback}__callConnected(node=this){if(typeof this.__onconnected==="function"){this.__onconnected(this)}else if(Array.isArray(this.__onconnected)){let fn=o=>{o(this)};this.__onconnected.forEach(fn)}}__callDisconnected(node=this){if(typeof this.__ondisconnected==="function")this.__ondisconnected(this);else if(Array.isArray(this.__ondisconnected)){let fn=o=>{o(this)};this.__ondisconnected.forEach(fn)}}};var Graph=class{constructor(options){this.__node={tag:`graph${Math.floor(Math.random()*1e15)}`,unique:`${Math.random()}`,nodes:new Map,state,roots:{}};this.init=options2=>{if(options2){let cpy=Object.assign({},options2);delete cpy.roots;recursivelyAssign(this.__node,cpy);if(options2.roots)this.load(options2.roots)}};this.load=roots=>{function recursivelyAssignChildren(target,obj,inChildren=true,top=true){if(top){if(target)Object.assign(target,obj);else target=Object.assign({},obj);recursivelyAssignChildren(target,obj,true,false)}if(obj.__children&&!inChildren){if(obj.__children?.constructor.name==="Object"){if(target.__children?.constructor.name==="Object")recursivelyAssignChildren(target.__children,obj.__children,true,false);else target.__children=recursivelyAssignChildren({},obj.__children,true,false)}else{target.__children=obj.__children}}else if(inChildren){for(const key in obj){target[key]=Object.assign({},obj[key]);if(obj[key].__children){recursivelyAssignChildren({},obj[key].__children,false,false)}}}return target}this.__node.roots=recursivelyAssignChildren(this.__node.roots?this.__node.roots:{},roots);let cpy=Object.assign({},roots);if(cpy.__node)delete cpy.__node;let listeners=this.recursiveSet(cpy,this,void 0,roots);if(roots.__node){if(!roots.__node.tag)roots.__node._tag=`roots${Math.floor(Math.random()*1e15)}`;else if(!this.get(roots.__node.tag)){let node=new GraphNode(roots,this,this);this.set(node.__node.tag,node);this.runLoaders(node,this,roots,roots.__node.tag);if(node.__listeners){listeners[node.__node.tag]=node.__listeners}}}else if(roots.__listeners){this.setListeners(roots.__listeners)}this.setListeners(listeners);return cpy};this.setLoaders=(loaders2,replace)=>{if(replace)this.__node.loaders=loaders2;else Object.assign(this.__node.loaders,loaders2);return this.__node.loaders};this.runLoaders=(node,parent,properties,key)=>{for(const l in this.__node.loaders){if(typeof this.__node.loaders[l]==="object"){if(this.__node.loaders[l].init)this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key);if(this.__node.loaders[l].connected)node.__addOnconnected(this.__node.loaders[l].connect);if(this.__node.loaders[l].disconnected)node.__addOndisconnected(this.__node.loaders[l].disconnect)}else if(typeof this.__node.loaders[l]==="function")this.__node.loaders[l](node,parent,this,this.__node.roots,properties,key)}};this.add=(properties,parent)=>{let listeners={};if(typeof parent==="string")parent=this.get(parent);let instanced;if(typeof properties==="function"){if(isNativeClass(properties)){if(properties.prototype instanceof GraphNode){properties=properties.prototype.constructor(properties,parent,this);instanced=true}else properties=new properties}else properties={__operator:properties}}else if(typeof properties==="string"){properties=this.__node.roots[properties]}if(!properties)return;if(!instanced){let keys2=Object.getOwnPropertyNames(properties);let cpy={};for(const key of keys2){cpy[key]=properties[key]}properties=cpy}if(!properties.__node)properties.__node={};properties.__node.initial=properties;if(typeof properties==="object"&&(!properties?.__node?.tag||!this.get(properties.__node.tag))){let node;if(instanced)node=properties;else node=new GraphNode(properties,parent,this);this.set(node.__node.tag,node);this.runLoaders(node,parent,properties,node.__node.tag);this.__node.roots[node.__node.tag]=properties;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key in node.__listeners){let listener=node.__listeners[key];if(node[key]){delete listeners[node.__node.tag][key];listeners[node.__node.tag][node.__node.tag+"."+key]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][key]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][key]=parent.__node.tag}}}}this.setListeners(listeners);node.__callConnected();return node}return};this.recursiveSet=(t2,parent,listeners={},origin)=>{let keys2=Object.getOwnPropertyNames(origin);for(const key of keys2){if(key.includes("__"))continue;let p=origin[key];if(Array.isArray(p))continue;let instanced;if(typeof p==="function"){if(isNativeClass(p)){p=new p;if(p instanceof GraphNode){p=p.prototype.constructor(p,parent,this);instanced=true}}else p={__operator:p}}else if(typeof p==="string"){if(this.__node.nodes.get(p))p=this.__node.nodes.get(p);else p=this.__node.roots[p]}else if(typeof p==="boolean"){if(this.__node.nodes.get(key))p=this.__node.nodes.get(key);else p=this.__node.roots[key]}if(typeof p==="object"){if(!instanced&&!(p instanceof GraphNode)){let keys3=Object.getOwnPropertyNames(p);let cpy={};for(const key2 of keys3){cpy[key2]=p[key2]}p=cpy}if(!p.__node)p.__node={};if(!p.__node.tag)p.__node.tag=key;if(!p.__node.initial)p.__node.initial=t2[key];if(this.get(p.__node.tag)&&!(!(parent instanceof Graph)&&parent?.__node)||parent?.__node&&this.get(parent.__node.tag+"."+p.__node.tag))continue;let node;let newnode=false;if(instanced||p instanceof GraphNode){node=p}else{node=new GraphNode(p,parent,this);newnode=true}if(!newnode&&p instanceof GraphNode&&!instanced&&parent instanceof GraphNode){let sub=this.subscribe(parent.__node.tag,node.__node.tag);let ondelete=node2=>{this.unsubscribe(parent.__node.tag,sub)};node.__addOndisconnected(ondelete)}else{this.set(node.__node.tag,node);this.runLoaders(node,parent,t2[key],key);t2[key]=node;this.__node.roots[node.__node.tag]=p;if(node.__children){node.__children=Object.assign({},node.__children);this.recursiveSet(node.__children,node,listeners,node.__children)}if(node.__listeners){listeners[node.__node.tag]=Object.assign({},node.__listeners);for(const key2 in node.__listeners){let listener=node.__listeners[key2];let k=key2;if(node[key2]){delete listeners[node.__node.tag][key2];k=node.__node.tag+"."+key2;listeners[node.__node.tag][k]=listener}if(typeof listener==="string"){if(node.__children?.[listener]){listeners[node.__node.tag][k]=node.__node.tag+"."+listener}else if(parent instanceof GraphNode&&(parent.__node.tag===listener||parent.__node.tag.includes(".")&&parent.__node.tag.split(".").pop()===listener)){listeners[node.__node.tag][k]=parent.__node.tag}}}}node.__callConnected()}}}return listeners};this.remove=(node,clearListeners=true)=>{this.unsubscribe(node);if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){this.delete(node.__node.tag);delete this.__node.roots[node.__node.tag];if(clearListeners){this.clearListeners(node)}node.__callDisconnected();const recursiveRemove=t2=>{for(const key in t2){this.unsubscribe(t2[key]);this.delete(t2[key].__node.tag);delete this.__node.roots[t2[key].__node.tag];this.delete(key);delete this.__node.roots[key];t2[key].__node.tag=t2[key].__node.tag.substring(t2[key].__node.tag.lastIndexOf(".")+1);if(clearListeners){this.clearListeners(t2[key])}console.log(key,t2[key].__listeners);t2[key].__callDisconnected();if(t2[key].__children){recursiveRemove(t2[key].__children)}}};if(node.__children){recursiveRemove(node.__children)}}if(node?.__node.tag&&node?.__parent){delete node?.__parent;node.__node.tag=node.__node.tag.substring(node.__node.tag.indexOf(".")+1)}return node};this.run=(node,...args)=>{if(typeof node==="string"){let nd=this.get(node);if(!nd&&node.includes(".")){nd=this.get(node.substring(0,node.lastIndexOf(".")));if(typeof nd?.[node.substring(node.lastIndexOf(".")+1)]==="function")return nd[node.substring(node.lastIndexOf(".")+1)](...args)}else if(nd?.__operator)return nd.__operator(...args)}if(node?.__operator){return node?.__operator(...args)}};this.setListeners=listeners=>{for(const key in listeners){let node=this.get(key);if(typeof listeners[key]==="object"){for(const k in listeners[key]){let n=this.get(k);let sub;if(typeof listeners[key][k]!=="object")listeners[key][k]={__callback:listeners[key][k]};else if(!listeners[key][k].__callback){for(const kk in listeners[key][k]){if(typeof listeners[key][k][kk]!=="object"){listeners[key][k][kk]={__callback:listeners[key][k][kk]};if(listeners[key][k][kk].__callback===true||typeof listeners[key][k][kk].__callback==="undefined")listeners[key][k][kk].__callback=node.__operator}let nn=this.get(kk);if(nn){if(!nn){let tag=k.substring(0,k.lastIndexOf("."));nn=this.get(tag);if(n){sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k][kk].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k][kk].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}else{sub=this.subscribe(nn,listeners[key][k][kk].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k][kk]!=="object")node.__listeners[k][kk]={__callback:listeners[key][k][kk].__callback,inputState:listeners[key][k][kk]?.inputState};node.__listeners[k][kk].sub=sub}}}}if("__callback"in listeners[key][k]){if(listeners[key][k].__callback===true||typeof listeners[key][k].__callback==="undefined")listeners[key][k].__callback=node.__operator;if(typeof listeners[key][k].__callback==="function")listeners[key][k].__callback=listeners[key][k].__callback.bind(node);if(typeof node.__listeners!=="object")node.__listeners={};if(!n){let tag=k.substring(0,k.lastIndexOf("."));n=this.get(tag);if(n){sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,k.substring(k.lastIndexOf(".")+1),listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}else{sub=this.subscribe(n,listeners[key][k].__callback,listeners[key][k].__args,void 0,listeners[key][k].inputState,key,k);if(typeof node.__listeners[k]!=="object")node.__listeners[k]={__callback:listeners[key][k].__callback,inputState:listeners[key][k]?.inputState};node.__listeners[k].sub=sub}}}}}};this.clearListeners=(node,listener)=>{if(typeof node==="string")node=this.get(node);if(node?.__listeners){for(const key in node.__listeners){if(listener&&key!==listener)continue;if(typeof node.__listeners[key]?.sub!=="number")continue;let n=this.get(key);if(!n){n=this.get(key.substring(0,key.lastIndexOf(".")));if(n){if(typeof node.__listeners[key]==="object"&&!node.__listeners[key]?.__callback){for(const k in node.__listeners[key]){if(typeof node.__listeners[key][k]?.sub==="number"){this.unsubscribe(n,node.__listeners[key][k].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,key.substring(key.lastIndexOf(".")+1),node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}else{if(typeof!node.__listeners[key]?.__callback==="number"){for(const k in node.__listeners[key]){if(node.__listeners[key][k]?.sub){this.unsubscribe(n,node.__listeners[key][k].sub,void 0,node.__listeners[key][k].inputState);node.__listeners[key][k].sub=void 0}}}else if(typeof node.__listeners[key]?.sub==="number"){this.unsubscribe(n,node.__listeners[key].sub,void 0,node.__listeners[key].inputState);node.__listeners[key].sub=void 0}}}}};this.get=tag=>{return this.__node.nodes.get(tag)};this.set=(tag,node)=>{return this.__node.nodes.set(tag,node)};this.delete=tag=>{return this.__node.nodes.delete(tag)};this.getProps=(node,getInitial)=>{if(typeof node==="string")node=this.get(node);if(node instanceof GraphNode){let cpy;if(getInitial)cpy=Object.assign({},this.__node.roots[node.__node.tag]);else{cpy=Object.assign({},node);for(const key in cpy){if(key.includes("__"))delete cpy[key]}}}};this.subscribe=(nodeEvent,onEvent,args,key,subInput,target,bound)=>{let nd=nodeEvent;if(typeof nodeEvent==="string"){nd=this.get(nodeEvent);if(!nd&&nodeEvent.includes(".")){nd=this.get(nodeEvent.substring(0,nodeEvent.lastIndexOf(".")));key=nodeEvent.substring(nodeEvent.lastIndexOf(".")+1)}}let sub;if(target instanceof GraphNode)target=target.__node.tag;if(typeof onEvent==="string"){let key2=onEvent;let setOnEventFromString=onEvent2=>{if(this.get(onEvent2)?.__operator){let node=this.get(onEvent2);onEvent2=function(...inp){return node.__operator(...inp)}}else if(onEvent2.includes(".")){let n=this.get(onEvent2.substring(0,onEvent2.lastIndexOf(".")));let key3=onEvent2.substring(onEvent2.lastIndexOf(".")+1);if(typeof n[key3]==="function"){if(n[key3]instanceof GraphNode)onEvent2=n[key3];else onEvent2=function(...inp){return n[key3](...inp)}}else{onEvent2=function(inp){n[key3]=inp;return n[key3]}}}return onEvent2};if(target){let node=this.get(target);if(typeof node?.[onEvent]==="function"){onEvent=function(...inp){return node[key2](...inp)}}else if(node[key2]){if(node[key2]instanceof GraphNode)onEvent=node[key2];else onEvent=function(inp){node[key2]=inp;return node[key2]}}else{onEvent=setOnEventFromString(onEvent)}}else{onEvent=setOnEventFromString(onEvent)}}if((typeof onEvent==="function"||onEvent instanceof GraphNode)&&args){if(onEvent instanceof GraphNode&&onEvent.__operator)onEvent=function(inp){return onEvent.__operator(inp)};onEvent=wrapArgs(onEvent,args,this)}if(nd instanceof GraphNode){sub=nd.__subscribe(onEvent,key,subInput,target,bound);let ondelete=()=>{nd.__unsubscribe(sub,key,subInput)};nd.__addOndisconnected(ondelete)}else if(typeof nodeEvent==="string"){if(this.get(nodeEvent)){if(onEvent instanceof GraphNode&&onEvent.__operator){sub=this.get(nodeEvent).__subscribe(onEvent.__operator,key,subInput,target,bound);let ondelete=()=>{this.get(nodeEvent).__unsubscribe(sub)};onEvent.__addOndisconnected(ondelete)}else if(typeof onEvent==="function"||typeof onEvent==="string"){sub=this.get(nodeEvent).__subscribe(onEvent,key,subInput,target,bound);this.__node.state.getEvent(this.get(nodeEvent).__node.unique,sub).source=nodeEvent}}else{if(typeof onEvent==="string")onEvent=this.__node.nodes.get(onEvent).__operator;if(typeof onEvent==="function")sub=this.__node.state.subscribeEvent(nodeEvent,onEvent)}}return sub};this.unsubscribe=(node,sub,key,subInput)=>{if(node instanceof GraphNode){return node.__unsubscribe(sub,key,subInput)}else return this.get(node)?.__unsubscribe(sub,key,subInput)};this.setState=update=>{this.__node.state.setState(update)};this.init(options)}};function recursivelyAssign(target,obj){for(const key in obj){if(obj[key]?.constructor.name==="Object"&&!Array.isArray(obj[key])){if(target[key]?.constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign(target[key],obj[key]);else target[key]=recursivelyAssign({},obj[key])}else{target[key]=obj[key]}}return target}function getAllProperties(obj){var allProps=[],curr=obj;do{var props=Object.getOwnPropertyNames(curr);let fn=function(prop){if(allProps.indexOf(prop)===-1)allProps.push(prop)};props.forEach(fn)}while(curr=Object.getPrototypeOf(curr));return allProps}function isNativeClass(thing){return isFunction(thing)==="class"}function isFunction(x){const res=typeof x==="function"?x.prototype?Object.getOwnPropertyDescriptor(x,"prototype")?.writable?"function":"class":x.constructor.name==="AsyncFunction"?"async":"arrow":"";return res}var wrapArgs=(callback,argOrder,graph)=>{let args=[];let getCallbackFromString=a=>{if(graph.get(a)?.__operator){let node=graph.get(a);return(...inp)=>{node.__operator(...inp)}}else if(a.includes(".")){let split=a.split(".");let popped=split.pop();let joined=split.join(".");let node=graph.get(joined);if(typeof graph.get(joined)?.[popped]==="function"){return(...inp)=>{return node[popped](...inp)}}else return()=>{return node[popped]}}else if(graph.get(a)){let node=graph.get(a);return()=>{return node}}else{let arg=a;return()=>{return arg}}};let forArg=(a,i2)=>{if(a==="__output"){args[i2]=inp=>{return inp}}else if(typeof a==="string"){args[i2]=getCallbackFromString(a)}else if(typeof a==="function"){let fn2=a;args[i2]=(...inp)=>{return fn2(...inp)}}else if(typeof a==="object"&&a.__input){let recursivelyCreateCallback=function(c){let input=c.__input;if(typeof c.__input==="string"){input=getCallbackFromString(c.__input)}if(c.__args){input=wrapArgs(input,c.__args,graph)}if(c.__output){let output=c.__output;if(typeof c.__output==="string"){output=getCallbackFromString(output)}else if(typeof a.__output==="object"){output=recursivelyCreateCallback(output)}if(typeof output==="function"){let fn2=input;input=(...inp)=>{return output(fn2(...inp))}}}return input};args[i2]=recursivelyCreateCallback(a)}else{let arg=a;args[i2]=()=>{return arg}}};argOrder.forEach(forArg);if(typeof callback==="string")callback=getCallbackFromString(callback);let fn=callback;callback=function(...inp){let mapArg=arg=>{return arg(...inp)};return fn(...args.map(mapArg))};return callback};var backprop=(node,parent,graph)=>{if(node.__node.backward&&parent instanceof GraphNode){graph.setListeners({[parent.__node.tag]:{[node.__node.tag]:parent}})}};var loop=(node,parent,graph)=>{if(node.__operator&&!node.__node.looperSet){if(typeof node.__node.delay==="number"){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{setTimeout(async()=>{res(await fn(...args))},node.__node.delay)})})}else if(node.__node.frame===true){let fn=node.__operator;node.__setOperator((...args)=>{return new Promise((res,rej)=>{requestAnimationFrame(async()=>{res(await fn(...args))})})})}if(typeof node.__node.repeat==="number"||typeof node.__node.recursive==="number"){let fn=node.__operator;node.__setOperator(async(...args)=>{let i2=node.__node.repeat?node.__node.repeat:node.__node.recursive;let result;let repeater=async(tick,...inp)=>{while(tick>0){if(node.__node.delay||node.__node.frame){fn(...inp).then(async res=>{if(node.__node.recursive){await repeater(tick,res)}else await repeater(tick,...inp)});break}else result=await fn(...args);tick--}};await repeater(i2,...args);return result})}if(node.__node.loop&&typeof node.__node.loop==="number"){node.__node.looperSet=true;let fn=node.__operator;node.__setOperator((...args)=>{if(!("looping"in node.__node))node.__node.looping=true;if(node.__node.looping){fn(...args);setTimeout(()=>{node.__operator(...args)},node.__node.loop)}});if(node.__node.looping)node.__operator();let ondelete=node2=>{if(node2.__node.looping)node2.__node.looping=false};node.__addOndisconnected(ondelete)}}};var animate=(node,parent,graph)=>{if(node.__node.animate===true||node.__animation){let fn=node.__operator;node.__setOperator((...args)=>{if(!("animating"in node.__node))node.__node.animating=true;if(node.__node.animating){if(typeof node.__animation==="function")node.__animation(...args);else fn(...args);requestAnimationFrame(()=>{node.__operator(...args)})}});if(node.__node.animating||(!("animating"in node.__node)||node.__node.animating)&&node.__animation)setTimeout(()=>{requestAnimationFrame(node.__operator)},10);let ondelete=node2=>{if(node2.__node.animating)node2.__node.animating=false};node.__addOndisconnected(ondelete)}};var branching=(node,parent,graph)=>{if(typeof node.__branch==="object"&&node.__operator&&!node.__branchApplied){let fn=node.__operator;node.__branchApplied=true;node.__operator=(...args)=>{let result=fn(...args);for(const key in node.__branch){let triggered=()=>{if(typeof node.__branch[key].then==="function"){node.__branch[key].then(result)}else if(node.__branch[key].then instanceof GraphNode&&node.__branch[key].then.__operator){node.__branch[key].then.__operator(result)}else result=node.__branch[key].then};if(typeof node.__branch[key].if==="function"){if(node.__branch[key].if(result)==true){triggered()}}else if(node.__branch[key].if===result){triggered()}}return result}}if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].branch&&!node.__listeners[key].branchApplied){let fn=node.__listeners[key].callback;node.__listeners[key].branchApplied=true;node.__listeners.callback=ret=>{let triggered=()=>{if(typeof node.__listeners[key].branch.then==="function"){ret=node.__listeners[key].branch.then(ret)}else if(node.__listeners[key].branch.then instanceof GraphNode&&node.__listeners[key].branch.then.__operator){ret=node.__listeners[key].branch.then.__operator(ret)}else ret=node.__listeners[key].branch.then};if(typeof node.__listeners[key].branch.if==="function"){if(node.__listeners[key].branch.if(ret)){triggered()}}else if(node.__listeners[key].branch.if===ret){triggered()}return fn(ret)}}}}}};var triggerListenerOncreate=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(node.__listeners[key].oncreate){node.__listeners[key].callback(node.__listeners[key].oncreate)}}}}};var bindListener=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].binding==="object"){node.__listeners.callback=node.__listeners.callback.bind(node.__listeners[key].binding)}}}}};var transformListenerResult=(node,parent,graph)=>{if(node.__listeners){for(const key in node.__listeners){if(typeof node.__listeners[key]==="object"){if(typeof node.__listeners[key].transform==="function"&&!node.__listeners[key].transformApplied){let fn=node.__listeners[key].callback;node.__listeners[key].transformApplied=true;node.__listeners.callback=ret=>{ret=node.__listeners[key].transform(ret);return fn(ret)}}}}}};var substitute__operator=(node,parent,graph)=>{if(node.post&&!node.__operator){node.__setOperator(node.post)}else if(!node.__operator&&typeof node.get=="function"){node.__setOperator(node.get)}if(!node.get&&node.__operator){node.get=node.__operator}if(node.aliases){node.aliases.forEach(a=>{graph.set(a,node);let ondelete=node2=>{graph.__node.nodes.delete(a)};node.__addOndisconnected(ondelete)})}if(typeof graph.__node.roots?.[node.__node.tag]==="object"&&node.get)graph.__node.roots[node.__node.tag].get=node.get};var loaders={backprop,loop,animate,branching,triggerListenerOncreate,bindListener,transformListenerResult,substitute__operator};var recursivelyStringifyFunctions=obj=>{let cpy={};for(const key in obj){if(typeof obj[key]==="object"){cpy[key]=recursivelyStringifyFunctions(obj[key])}else if(typeof obj[key]==="function"){cpy[key]=obj[key].toString()}else cpy[key]=obj[key]}return cpy};function parseFunctionFromText(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\\\W*(function[^{]+\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>[^{]*\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs22(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs}var stringifyFast=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p in value[prop]){if(Array.isArray(value[prop][p])){if(value[prop][p].length>20)obj[prop][p]=value[prop][p].slice(value[prop][p].length-20);else obj[prop][p]=value[prop][p]}else{if(value[prop][p]!=null){let con=value[prop][p].constructor.name;if(con.includes("Set")){obj[prop][p]=Array.from(value[prop][p])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p]="instanceof_"+con}else{obj[prop][p]=value[prop][p]}}else{obj[prop][p]=value[prop][p]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast22(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast}function methodstrings(node){if(typeof node.__methods==="object"){for(const key in node.__methods){let fstr=node.__methods[key];let fn=typeof fstr==="function"?fstr:parseFunctionFromText(fstr);if(key==="__operator"){node.__setOperator(fn)}else{node[key]=fn.bind(node)}}}}var Service=class extends Graph{constructor(options){super({...options,loaders:options?.loaders?Object.assign({...loaders},options.loaders):{...loaders}});this.name=`service${Math.floor(Math.random()*1e15)}`;this.addServices=services=>{for(const s in services){if(typeof services[s]==="function")services[s]=new services[s];if(services[s]?.__node?.loaders)Object.assign(this.__node.loaders,services[s].__node.loaders);if(services[s]?.__node?.nodes){services[s].__node.nodes.forEach((n,tag)=>{if(!this.get(tag)){this.set(tag,n)}else this.set(s+"."+tag,n)});this.__node.nodes.forEach((n,k)=>{if(!services[s].__node.nodes.get(k))services[s].__node.nodes.set(k,n)});let set=this.set;this.set=(tag,node)=>{services[s].set(tag,node);return set(tag,node)};let del=this.delete;this.delete=tag=>{services[s].delete(tag);return del(tag)}}else if(typeof services[s]==="object"){this.load(services[s])}}};this.handleMethod=(route,method,args)=>{let m=method.toLowerCase();let src=this.__node.nodes.get(route);if(!src){src=this.__node.roots[route]}if(src?.[m]){if(typeof src[m]!=="function"){if(args){if(Array.isArray(args)&&args.length===1)src[m]=args[0];else src[m]=args;return}return src[m]}else{if(Array.isArray(args))return src[m](...args);else return src[m](args)}}else return this.handleServiceMessage({route,args,method})};this.transmit=(...args)=>{if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.receive=(...args)=>{if(args[0]){if(typeof args[0]==="string"){let substr=args[0].substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\\\\\"))args[0]=args[0].replace(/\\\\\\\\/g,"");if(args[0][0]===\\\'"\\\'){args[0]=args[0].substring(1,args[0].length-1)};args[0]=JSON.parse(args[0])}}}if(typeof args[0]==="object"){if(args[0].method){return this.handleMethod(args[0].route,args[0].method,args[0].args)}else if(args[0].route){return this.handleServiceMessage(args[0])}else if(args[0].node){return this.handleGraphNodeCall(args[0].node,args[0].args)}else if(this.__node.keepState){if(args[0].route)this.setState({[args[0].route]:args[0].args});if(args[0].node)this.setState({[args[0].node]:args[0].args})}return args}else return args};this.pipe=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return this.subscribe(source,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.subscribe(source,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.pipeOnce=(source,destination,endpoint,method,callback)=>{if(source instanceof GraphNode){if(callback)return source.__node.state.subscribeEventOnce(source.__node.unique,res=>{let mod=callback(res);if(mod!==void 0)this.transmit({route:destination,args:mod,method});else this.transmit({route:destination,args:res,method},endpoint)});else return this.__node.state.subscribeEventOnce(source.__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})}else if(typeof source==="string")return this.__node.state.subscribeEventOnce(this.__node.nodes.get(source).__node.unique,res=>{this.transmit({route:destination,args:res,method},endpoint)})};this.terminate=(...args)=>{};this.isTypedArray=isTypedArray;this.recursivelyAssign=recursivelyAssign2;this.spliceTypedArray=spliceTypedArray;this.ping=()=>{console.log("pinged!");return"pong"};this.echo=(...args)=>{this.transmit(...args);return args};if(options?.services)this.addServices(options.services);this.load(this)}handleServiceMessage(message){let call;if(typeof message==="object"){if(message.route)call=message.route;else if(message.node)call=message.node}if(call){if(Array.isArray(message.args))return this.run(call,...message.args);else return this.run(call,message.args)}else return message}handleGraphNodeCall(route,args){if(!route)return args;if(args?.args){this.handleServiceMessage(args)}else if(Array.isArray(args))return this.run(route,...args);else return this.run(route,args)}};function isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}var recursivelyAssign2=(target,obj)=>{for(const key in obj){if(obj[key].constructor.name==="Object"&&!Array.isArray(obj[key])){if(obj[key].constructor.name==="Object"&&!Array.isArray(target[key]))recursivelyAssign2(target[key],obj[key]);else target[key]=recursivelyAssign2({},obj[key])}else target[key]=obj[key]}return target};function spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let ta;if(s.length>0||e?.length>0)ta=new arr.constructor(s.length+e.length);if(ta){if(s.length>0)ta.set(s);if(e&&e.length>0)ta.set(e,s.length)}return ta}var nodeTemplates={};var remoteGraphRoutes={transferNode:(properties,connection,name2)=>{let str2;if(typeof properties==="object"){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}str2=recursivelyStringifyFunctions(properties)}else if(typeof properties==="function")str2=properties.toString();else if(typeof properties==="string")str2=properties;if(str2){if(connection.run)return connection.run("setNode",[str2]);else if(connection.postMessage){connection.postMessage({route:"setNode",args:str2},void 0);return new Promise(r=>r(name2))}else if(connection.send){connection.send(JSON.stringify({route:"setNode",args:str2}));return new Promise(r=>r(name2))}}},setNode:function(properties){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function")properties={__operator:f,__node:{tag:f.name}};else{f=JSON.parse(properties);if(typeof f==="object")properties=f}}if(typeof properties==="object"||typeof properties==="function"){let template=Object.assign({},properties);let node=this.__node.graph.add(properties);nodeTemplates[node.__node.tag]=template;return node.__node.tag}else return false},proxyRemoteNode:function(name2,connection){return new Promise((res,rej)=>{connection.run("getNodeProperties",name2).then(props=>{let proxy={};if(typeof props==="object"){for(const key in props){if(props[key]==="function"){proxy[key]=(...args)=>{return new Promise(r=>{connection.run(name2,args,key).then(r)})}}else{Object.defineProperty(proxy,key,{get:()=>{return new Promise(r=>{connection.run(name2,void 0,key).then(r)})},set:value=>{connection.post(name2,value,key)},configurable:true,enumerable:true})}}}res(proxy)})})},makeNodeTransferrable:function(properties,name2){if(!properties.__node){properties.__node={}}if(name2)properties.__node.tag=name2;for(const key in properties){if(typeof properties[key]==="function"){if(!properties.__methods)properties.__methods={};properties.__methods[key]=properties[key].toString()}}const str2=recursivelyStringifyFunctions(properties);return str2},setTemplate:function(properties,name2){if(typeof properties==="object"){if(properties.__methods){if(!this.__node.graph.__node.loaders.methodstrings){this.__node.graph.__node.loaders.methodstrings=methodstrings}}}if(typeof properties==="string"){let f=parseFunctionFromText(properties);if(typeof f==="function"){if(!name2)name2=f.name;properties={__operator:f,__node:{tag:name2}}}else{f=JSON.parse(properties);if(typeof f==="object"){properties=f;if(!name2&&f.__node?.tag)name2=f.__node.tag}}}if(!name2)name2=`node${Math.floor(Math.random()*1e15)}`;if(typeof properties==="object"||typeof properties==="function"){nodeTemplates[name2]=properties;return name2}else return false},loadFromTemplate:function(templateName,name2,properties){if(nodeTemplates[templateName]){let cpy=recursivelyAssign2({},nodeTemplates[templateName]);if(name2){if(!cpy.__node)cpy.__node={};cpy.__node.tag=name2}if(properties)Object.assign(cpy,properties);let node=this.__node.graph.add(cpy);return node.__node.tag}},setMethod:function(route,fn,methodKey){if(typeof fn==="string"){let f=parseFunctionFromText(fn);if(typeof f==="function")fn=f}if(!methodKey&&typeof fn==="function")methodKey=fn.name;if(this.__node.graph.get(route)){this.__node.graph.get(route)[methodKey]=fn}else this.__node.graph.add({__node:{tag:methodKey,[methodKey]:fn}});return true},assignNode:function(nodeTag,source){if(this.__node.graph.get(nodeTag)&&typeof source==="object"){Object.assign(this.__node.graph.get(nodeTag),source)}},getNodeProperties:function(nodeTag){let node=this.__node.graph.get(nodeTag);if(node){let properties=Object.getOwnPropertyNames(node);let result={};for(const key in properties){result[key]=typeof node[key]}return result}return void 0},transferClass:(classObj,connection,className)=>{if(typeof classObj==="object"){let str2=classObj.toString();let message={route:"receiveClass",args:[str2,className]};if(connection.run)return connection.run("receiveClass",[str2,className]);else if(connection.postMessage){connection.postMessage({route:"receiveClass",args:[str2,className]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"receiveClass",args:[str2,className]}));return new Promise(r=>r(name))}return message}return false},receiveClass:function(stringified,className){if(typeof stringified==="string"){if(stringified.indexOf("class")===0){let cls=(0,eval)("("+stringified+")");let name2=className;if(!name2)name2=cls.name;this.__node.graph[name2]=cls;return true}}return false},transferFunction:(fn,connection,fnName)=>{if(!fnName)fnName=fn.name;let str2=fn.toString();let message={route:"receiveClass",args:[str2,fnName]};if(connection.run)return connection.run("setFunction",[str2,fnName]);else if(connection.postMessage){connection.postMessage({route:"setFunction",args:[str2,fnName]},void 0);return new Promise(r=>r(name))}else if(connection.send){connection.send(JSON.stringify({route:"setFunction",args:[str2,fnName]}));return new Promise(r=>r(name))}return message},setGlobal:(key,value)=>{globalThis[key]=value;return true},assignGlobalObject:(target,source)=>{if(!globalThis[target])return false;if(typeof source==="object")Object.assign(globalThis[target],source);return true},setValue:function(key,value){this.__node.graph[key]=value;return true},assignObject:function(target,source){if(!this.__node.graph[target])return false;if(typeof source==="object")Object.assign(this.__node.graph[target],source);return true},setGlobalFunction:(fn,fnName)=>{if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;globalThis[fnName]=fn;return true}return false},setGraphFunction:function(fn,fnName){if(typeof fn==="string")fn=parseFunctionFromText(fn);if(typeof fn==="function"){if(!fnName)fnName=fn.name;this.__node.graph[fnName]=fn;return true}return false}};var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message};this.message=a},invalid:function(a){this.toString=function(){return"INVALID: "+this.message};this.message=a},bug:function(a){this.toString=function(){return"BUG: "+this.message};this.message=a},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message};this.message=a}}};sjcl.cipher.aes=function(a){this.s[0][0][0]||this.O();var b,c,d,e,f=this.s[0][4],g=this.s[1];b=a.length;var h=1;if(4!==b&&6!==b&&8!==b)throw new sjcl.exception.invalid("invalid aes key size");this.b=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(0===a%b||8===b&&4===a%b)c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255],0===a%b&&(c=c<<8^c>>>24^h<<24,h=h<<1^283*(h>>7));d[a]=d[a-b]^c}for(b=0;a;b++,a--)c=d[b&3?a:a-4],e[b]=4>=a||4>b?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]]};sjcl.cipher.aes.prototype={encrypt:function(a){return t(this,a,0)},decrypt:function(a){return t(this,a,1)},s:[[[],[],[],[],[]],[[],[],[],[],[]]],O:function(){var a=this.s[0],b=this.s[1],c=a[4],d=b[4],e,f,g,h=[],k=[],l,n,m,p;for(e=0;256>e;e++)k[(h[e]=e<<1^283*(e>>7))^e]=e;for(f=g=0;!c[f];f^=l||1,g=k[g]||1)for(m=g^g<<1^g<<2^g<<3^g<<4,m=m>>8^m&255^99,c[f]=m,d[m]=f,n=h[e=h[l=h[f]]],p=16843009*n^65537*e^257*l^16843008*f,n=257*h[m]^16843008*m,e=0;4>e;e++)a[e][f]=n=n<<24^n>>>8,b[e][m]=p=p<<24^p>>>8;for(e=0;5>e;e++)a[e]=a[e].slice(0),b[e]=b[e].slice(0)}};function t(a,b,c){if(4!==b.length)throw new sjcl.exception.invalid("invalid aes block size");var d=a.b[c],e=b[0]^d[0],f=b[c?3:1]^d[1],g=b[2]^d[2];b=b[c?1:3]^d[3];var h,k,l,n=d.length/4-2,m,p=4,r=[0,0,0,0];h=a.s[c];a=h[0];var q=h[1],v=h[2],w=h[3],x=h[4];for(m=0;m<n;m++)h=a[e>>>24]^q[f>>16&255]^v[g>>8&255]^w[b&255]^d[p],k=a[f>>>24]^q[g>>16&255]^v[b>>8&255]^w[e&255]^d[p+1],l=a[g>>>24]^q[b>>16&255]^v[e>>8&255]^w[f&255]^d[p+2],b=a[b>>>24]^q[e>>16&255]^v[f>>8&255]^w[g&255]^d[p+3],p+=4,e=h,f=k,g=l;for(m=0;4>m;m++)r[c?3&-m:m]=x[e>>>24]<<24^x[f>>16&255]<<16^x[g>>8&255]<<8^x[b&255]^d[p++],h=e,e=f,f=g,g=b,b=h;return r}sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.$(a.slice(b/32),32-(b&31)).slice(1);return void 0===c?a:sjcl.bitArray.clamp(a,c-b)},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1},concat:function(a,b){if(0===a.length||0===b.length)return a.concat(b);var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return 32===d?a.concat(b):sjcl.bitArray.$(b,d,c|0,a.slice(0,a.length-1))},bitLength:function(a){var b=a.length;return 0===b?0:32*(b-1)+sjcl.bitArray.getPartial(a[b-1])},clamp:function(a,b){if(32*a.length<b)return a;a=a.slice(0,Math.ceil(b/32));var c=a.length;b=b&31;0<c&&b&&(a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1));return a},partial:function(a,b,c){return 32===a?b:(c?b|0:b<<32-a)+1099511627776*a},getPartial:function(a){return Math.round(a/1099511627776)||32},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b))return false;var c=0,d;for(d=0;d<a.length;d++)c|=a[d]^b[d];return 0===c},$:function(a,b,c,d){var e;e=0;for(void 0===d&&(d=[]);32<=b;b-=32)d.push(c),c=0;if(0===b)return d.concat(a);for(e=0;e<a.length;e++)d.push(c|a[e]>>>b),c=a[e]<<32-b;e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,32<b+a?c:d.pop(),1));return d},i:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]]},byteswapM:function(a){var b,c;for(b=0;b<a.length;++b)c=a[b],a[b]=c>>>24|c>>>8&65280|(c&65280)<<8|c<<24;return a}};sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++)0===(d&3)&&(e=a[d/4]),b+=String.fromCharCode(e>>>8>>>8>>>8),e<<=8;return decodeURIComponent(escape(b))},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++)d=d<<8|a.charCodeAt(c),3===(c&3)&&(b.push(d),d=0);c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b}};sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++)b+=((a[c]|0)+0xf00000000000).toString(16).substr(4);return b.substr(0,sjcl.bitArray.bitLength(a)/4)},toBits:function(a){var b,c=[],d;a=a.replace(/\\\\s|0x/g,"");d=a.length;a=a+"00000000";for(b=0;b<a.length;b+=8)c.push(parseInt(a.substr(b,8),16)^0);return sjcl.bitArray.clamp(c,4*d)}};sjcl.codec.base32={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",X:"0123456789ABCDEFGHIJKLMNOPQRSTUV",BITS:32,BASE:5,REMAINING:27,fromBits:function(a,b,c){var d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f="",g=0,h=sjcl.codec.base32.B,k=0,l=sjcl.bitArray.bitLength(a);c&&(h=sjcl.codec.base32.X);for(c=0;f.length*d<l;)f+=h.charAt((k^a[c]>>>g)>>>e),g<d?(k=a[c]<<d-g,g+=e,c++):(k<<=d,g-=d);for(;f.length&7&&!b;)f+="=";return f},toBits:function(a,b){a=a.replace(/\\\\s|=/g,"").toUpperCase();var c=sjcl.codec.base32.BITS,d=sjcl.codec.base32.BASE,e=sjcl.codec.base32.REMAINING,f=[],g,h=0,k=sjcl.codec.base32.B,l=0,n,m="base32";b&&(k=sjcl.codec.base32.X,m="base32hex");for(g=0;g<a.length;g++){n=k.indexOf(a.charAt(g));if(0>n){if(!b)try{return sjcl.codec.base32hex.toBits(a)}catch(p){}throw new sjcl.exception.invalid("this isn\\\'t "+m+"!")}h>e?(h-=e,f.push(l^n>>>h),l=n<<c-h):(h+=d,l^=n<<c-h)}h&56&&f.push(sjcl.bitArray.partial(h&56,l,1));return f}};sjcl.codec.base32hex={fromBits:function(a,b){return sjcl.codec.base32.fromBits(a,b,1)},toBits:function(a){return sjcl.codec.base32.toBits(a,1)}};sjcl.codec.base64={B:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d="",e=0,f=sjcl.codec.base64.B,g=0,h=sjcl.bitArray.bitLength(a);c&&(f=f.substr(0,62)+"-_");for(c=0;6*d.length<h;)d+=f.charAt((g^a[c]>>>e)>>>26),6>e?(g=a[c]<<6-e,e+=26,c++):(g<<=6,e-=6);for(;d.length&3&&!b;)d+="=";return d},toBits:function(a,b){a=a.replace(/\\\\s|=/g,"");var c=[],d,e=0,f=sjcl.codec.base64.B,g=0,h;b&&(f=f.substr(0,62)+"-_");for(d=0;d<a.length;d++){h=f.indexOf(a.charAt(d));if(0>h)throw new sjcl.exception.invalid("this isn\\\'t base64!");26<e?(e-=26,c.push(g^h>>>e),g=h<<32-e):(e+=6,g^=h<<32-e)}e&56&&c.push(sjcl.bitArray.partial(e&56,g,1));return c}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1)},toBits:function(a){return sjcl.codec.base64.toBits(a,1)}};sjcl.hash.sha256=function(a){this.b[0]||this.O();a?(this.F=a.F.slice(0),this.A=a.A.slice(0),this.l=a.l):this.reset()};sjcl.hash.sha256.hash=function(a){return new sjcl.hash.sha256().update(a).finalize()};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.F=this.Y.slice(0);this.A=[];this.l=0;return this},update:function(a){"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));var b,c=this.A=sjcl.bitArray.concat(this.A,a);b=this.l;a=this.l=b+sjcl.bitArray.bitLength(a);if(9007199254740991<a)throw new sjcl.exception.invalid("Cannot hash more than 2^53 - 1 bits");if("undefined"!==typeof Uint32Array){var d=new Uint32Array(c),e=0;for(b=512+b-(512+b&511);b<=a;b+=512)u(this,d.subarray(16*e,16*(e+1))),e+=1;c.splice(0,16*e)}else for(b=512+b-(512+b&511);b<=a;b+=512)u(this,c.splice(0,16));return this},finalize:function(){var a,b=this.A,c=this.F,b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++)b.push(0);b.push(Math.floor(this.l/4294967296));for(b.push(this.l|0);b.length;)u(this,b.splice(0,16));this.reset();return c},Y:[],b:[],O:function(){function a(a2){return 4294967296*(a2-Math.floor(a2))|0}for(var b=0,c=2,d,e;64>b;c++){e=true;for(d=2;d*d<=c;d++)if(0===c%d){e=false;break}e&&(8>b&&(this.Y[b]=a(Math.pow(c,.5))),this.b[b]=a(Math.pow(c,1/3)),b++)}}};function u(a,b){var c,d,e,f=a.F,g=a.b,h=f[0],k=f[1],l=f[2],n=f[3],m=f[4],p=f[5],r=f[6],q=f[7];for(c=0;64>c;c++)16>c?d=b[c]:(d=b[c+1&15],e=b[c+14&15],d=b[c&15]=(d>>>7^d>>>18^d>>>3^d<<25^d<<14)+(e>>>17^e>>>19^e>>>10^e<<15^e<<13)+b[c&15]+b[c+9&15]|0),d=d+q+(m>>>6^m>>>11^m>>>25^m<<26^m<<21^m<<7)+(r^m&(p^r))+g[c],q=r,r=p,p=m,m=n+d|0,n=l,l=k,k=h,h=d+(k&l^n&(k^l))+(k>>>2^k>>>13^k>>>22^k<<30^k<<19^k<<10)|0;f[0]=f[0]+h|0;f[1]=f[1]+k|0;f[2]=f[2]+l|0;f[3]=f[3]+n|0;f[4]=f[4]+m|0;f[5]=f[5]+p|0;f[6]=f[6]+r|0;f[7]=f[7]+q|0}sjcl.mode.ccm={name:"ccm",G:[],listenProgress:function(a){sjcl.mode.ccm.G.push(a)},unListenProgress:function(a){a=sjcl.mode.ccm.G.indexOf(a);-1<a&&sjcl.mode.ccm.G.splice(a,1)},fa:function(a){var b=sjcl.mode.ccm.G.slice(),c;for(c=0;c<b.length;c+=1)b[c](a)},encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,k=h.bitLength(c)/8,l=h.bitLength(g)/8;e=e||64;d=d||[];if(7>k)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(f=2;4>f&&l>>>8*f;f++);f<15-k&&(f=15-k);c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.V(a,b,c,d,e,f);g=sjcl.mode.ccm.C(a,g,c,b,e,f);return h.concat(g.data,g.tag)},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),k=f.clamp(b,h-e),l=f.bitSlice(b,h-e),h=(h-e)/8;if(7>g)throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");for(b=2;4>b&&h>>>8*b;b++);b<15-g&&(b=15-g);c=f.clamp(c,8*(15-b));k=sjcl.mode.ccm.C(a,k,c,l,e,b);a=sjcl.mode.ccm.V(a,k.data,c,d,e,b);if(!f.equal(k.tag,a))throw new sjcl.exception.corrupt("ccm: tag doesn\\\'t match");return k.data},na:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,k=h.i;d=[h.partial(8,(b.length?64:0)|d-2<<2|f-1)];d=h.concat(d,c);d[3]|=e;d=a.encrypt(d);if(b.length)for(c=h.bitLength(b)/8,65279>=c?g=[h.partial(16,c)]:4294967295>=c&&(g=h.concat([h.partial(16,65534)],[c])),g=h.concat(g,b),b=0;b<g.length;b+=4)d=a.encrypt(k(d,g.slice(b,b+4).concat([0,0,0])));return d},V:function(a,b,c,d,e,f){var g=sjcl.bitArray,h=g.i;e/=8;if(e%2||4>e||16<e)throw new sjcl.exception.invalid("ccm: invalid tag length");if(4294967295<d.length||4294967295<b.length)throw new sjcl.exception.bug("ccm: can\\\'t deal with 4GiB or more data");c=sjcl.mode.ccm.na(a,d,c,e,g.bitLength(b)/8,f);for(d=0;d<b.length;d+=4)c=a.encrypt(h(c,b.slice(d,d+4).concat([0,0,0])));return g.clamp(c,8*e)},C:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.i;var k=b.length,l=h.bitLength(b),n=k/50,m=n;c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!k)return{tag:d,data:[]};for(g=0;g<k;g+=4)g>n&&(sjcl.mode.ccm.fa(g/k),n+=m),c[3]++,e=a.encrypt(c),b[g]^=e[0],b[g+1]^=e[1],b[g+2]^=e[2],b[g+3]^=e[3];return{tag:d,data:h.clamp(b,l)}}};sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");var g,h=sjcl.mode.ocb2.S,k=sjcl.bitArray,l=k.i,n=[0,0,0,0];c=h(a.encrypt(c));var m,p=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4)m=b.slice(g,g+4),n=l(n,m),p=p.concat(l(c,a.encrypt(l(c,m)))),c=h(c);m=b.slice(g);b=k.bitLength(m);g=a.encrypt(l(c,[0,0,0,b]));m=k.clamp(l(m.concat([0,0,0]),g),b);n=l(n,l(m.concat([0,0,0]),g));n=a.encrypt(l(n,l(c,h(c))));d.length&&(n=l(n,f?d:sjcl.mode.ocb2.pmac(a,d)));return p.concat(k.concat(m,k.clamp(n,e)))},decrypt:function(a,b,c,d,e,f){if(128!==sjcl.bitArray.bitLength(c))throw new sjcl.exception.invalid("ocb iv must be 128 bits");e=e||64;var g=sjcl.mode.ocb2.S,h=sjcl.bitArray,k=h.i,l=[0,0,0,0],n=g(a.encrypt(c)),m,p,r=sjcl.bitArray.bitLength(b)-e,q=[];d=d||[];for(c=0;c+4<r/32;c+=4)m=k(n,a.decrypt(k(n,b.slice(c,c+4)))),l=k(l,m),q=q.concat(m),n=g(n);p=r-32*c;m=a.encrypt(k(n,[0,0,0,p]));m=k(m,h.clamp(b.slice(c),p).concat([0,0,0]));l=k(l,m);l=a.encrypt(k(l,k(n,g(n))));d.length&&(l=k(l,f?d:sjcl.mode.ocb2.pmac(a,d)));if(!h.equal(h.clamp(l,e),h.bitSlice(b,r)))throw new sjcl.exception.corrupt("ocb: tag doesn\\\'t match");return q.concat(h.clamp(m,p))},pmac:function(a,b){var c,d=sjcl.mode.ocb2.S,e=sjcl.bitArray,f=e.i,g=[0,0,0,0],h=a.encrypt([0,0,0,0]),h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4)h=d(h),g=f(g,a.encrypt(f(h,b.slice(c,c+4))));c=b.slice(c);128>e.bitLength(c)&&(h=f(h,d(h)),c=e.concat(c,[-2147483648,0,0,0]));g=f(g,c);return a.encrypt(f(d(f(h,d(h))),g))},S:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^135*(a[0]>>>31)]}};sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;d=d||[];a=sjcl.mode.gcm.C(true,a,f,d,c,e||128);return b.concat(a.data,a.tag)},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];e<=h?(b=g.bitSlice(f,h-e),f=g.bitSlice(f,0,h-e)):(b=f,f=[]);a=sjcl.mode.gcm.C(false,a,f,d,c,e);if(!g.equal(a.tag,b))throw new sjcl.exception.corrupt("gcm: tag doesn\\\'t match");return a.data},ka:function(a,b){var c,d,e,f,g,h=sjcl.bitArray.i;e=[0,0,0,0];f=b.slice(0);for(c=0;128>c;c++){(d=0!==(a[Math.floor(c/32)]&1<<31-c%32))&&(e=h(e,f));g=0!==(f[3]&1);for(d=3;0<d;d--)f[d]=f[d]>>>1|(f[d-1]&1)<<31;f[0]>>>=1;g&&(f[0]^=-520093696)}return e},j:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4)b[0]^=4294967295&c[d],b[1]^=4294967295&c[d+1],b[2]^=4294967295&c[d+2],b[3]^=4294967295&c[d+3],b=sjcl.mode.gcm.ka(b,a);return b},C:function(a,b,c,d,e,f){var g,h,k,l,n,m,p,r,q=sjcl.bitArray;m=c.length;p=q.bitLength(c);r=q.bitLength(d);h=q.bitLength(e);g=b.encrypt([0,0,0,0]);96===h?(e=e.slice(0),e=q.concat(e,[1])):(e=sjcl.mode.gcm.j(g,[0,0,0,0],e),e=sjcl.mode.gcm.j(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]));h=sjcl.mode.gcm.j(g,[0,0,0,0],d);n=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.j(g,h,c));for(l=0;l<m;l+=4)n[3]++,k=b.encrypt(n),c[l]^=k[0],c[l+1]^=k[1],c[l+2]^=k[2],c[l+3]^=k[3];c=q.clamp(c,p);a&&(d=sjcl.mode.gcm.j(g,h,c));a=[Math.floor(r/4294967296),r&4294967295,Math.floor(p/4294967296),p&4294967295];d=sjcl.mode.gcm.j(g,d,a);k=b.encrypt(e);d[0]^=k[0];d[1]^=k[1];d[2]^=k[2];d[3]^=k[3];return{tag:q.bitSlice(d,0,f),data:c}}};sjcl.misc.hmac=function(a,b){this.W=b=b||sjcl.hash.sha256;var c=[[],[]],d,e=b.prototype.blockSize/32;this.w=[new b,new b];a.length>e&&(a=b.hash(a));for(d=0;d<e;d++)c[0][d]=a[d]^909522486,c[1][d]=a[d]^1549556828;this.w[0].update(c[0]);this.w[1].update(c[1]);this.R=new b(this.w[0])};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){if(this.aa)throw new sjcl.exception.invalid("encrypt on already updated hmac called!");this.update(a);return this.digest(a)};sjcl.misc.hmac.prototype.reset=function(){this.R=new this.W(this.w[0]);this.aa=false};sjcl.misc.hmac.prototype.update=function(a){this.aa=true;this.R.update(a)};sjcl.misc.hmac.prototype.digest=function(){var a=this.R.finalize(),a=new this.W(this.w[1]).update(a).finalize();this.reset();return a};sjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1e4;if(0>d||0>c)throw new sjcl.exception.invalid("invalid params to pbkdf2");"string"===typeof a&&(a=sjcl.codec.utf8String.toBits(a));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,k,l=[],n=sjcl.bitArray;for(k=1;32*l.length<(d||1);k++){e=f=a.encrypt(n.concat(b,[k]));for(g=1;g<c;g++)for(f=a.encrypt(f),h=0;h<f.length;h++)e[h]^=f[h];l=l.concat(e)}d&&(l=n.clamp(l,d));return l};sjcl.prng=function(a){this.c=[new sjcl.hash.sha256];this.m=[0];this.P=0;this.H={};this.N=0;this.U={};this.Z=this.f=this.o=this.ha=0;this.b=[0,0,0,0,0,0,0,0];this.h=[0,0,0,0];this.L=void 0;this.M=a;this.D=false;this.K={progress:{},seeded:{}};this.u=this.ga=0;this.I=1;this.J=2;this.ca=65536;this.T=[0,48,64,96,128,192,256,384,512,768,1024];this.da=3e4;this.ba=80};sjcl.prng.prototype={randomWords:function(a,b){var c=[],d;d=this.isReady(b);var e;if(d===this.u)throw new sjcl.exception.notReady("generator isn\\\'t seeded");if(d&this.J){d=!(d&this.I);e=[];var f=0,g;this.Z=e[0]=new Date().valueOf()+this.da;for(g=0;16>g;g++)e.push(4294967296*Math.random()|0);for(g=0;g<this.c.length&&(e=e.concat(this.c[g].finalize()),f+=this.m[g],this.m[g]=0,d||!(this.P&1<<g));g++);this.P>=1<<this.c.length&&(this.c.push(new sjcl.hash.sha256),this.m.push(0));this.f-=f;f>this.o&&(this.o=f);this.P++;this.b=sjcl.hash.sha256.hash(this.b.concat(e));this.L=new sjcl.cipher.aes(this.b);for(d=0;4>d&&(this.h[d]=this.h[d]+1|0,!this.h[d]);d++);}for(d=0;d<a;d+=4)0===(d+1)%this.ca&&y(this),e=z(this),c.push(e[0],e[1],e[2],e[3]);y(this);return c.slice(0,a)},setDefaultParanoia:function(a,b){if(0===a&&"Setting paranoia=0 will ruin your security; use it only for testing"!==b)throw new sjcl.exception.invalid("Setting paranoia=0 will ruin your security; use it only for testing");this.M=a},addEntropy:function(a,b,c){c=c||"user";var d,e,f=new Date().valueOf(),g=this.H[c],h=this.isReady(),k=0;d=this.U[c];void 0===d&&(d=this.U[c]=this.ha++);void 0===g&&(g=this.H[c]=0);this.H[c]=(this.H[c]+1)%this.c.length;switch(typeof a){case"number":void 0===b&&(b=1);this.c[g].update([d,this.N++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if("[object Uint32Array]"===c){e=[];for(c=0;c<a.length;c++)e.push(a[c]);a=e}else for("[object Array]"!==c&&(k=1),c=0;c<a.length&&!k;c++)"number"!==typeof a[c]&&(k=1);if(!k){if(void 0===b)for(c=b=0;c<a.length;c++)for(e=a[c];0<e;)b++,e=e>>>1;this.c[g].update([d,this.N++,2,b,f,a.length].concat(a))}break;case"string":void 0===b&&(b=a.length);this.c[g].update([d,this.N++,3,b,f,a.length]);this.c[g].update(a);break;default:k=1}if(k)throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");this.m[g]+=b;this.f+=b;h===this.u&&(this.isReady()!==this.u&&A("seeded",Math.max(this.o,this.f)),A("progress",this.getProgress()))},isReady:function(a){a=this.T[void 0!==a?a:this.M];return this.o&&this.o>=a?this.m[0]>this.ba&&new Date().valueOf()>this.Z?this.J|this.I:this.I:this.f>=a?this.J|this.u:this.u},getProgress:function(a){a=this.T[a?a:this.M];return this.o>=a?1:this.f>a?1:this.f/a},startCollectors:function(){if(!this.D){this.a={loadTimeCollector:B(this,this.ma),mouseCollector:B(this,this.oa),keyboardCollector:B(this,this.la),accelerometerCollector:B(this,this.ea),touchCollector:B(this,this.qa)};if(window.addEventListener)window.addEventListener("load",this.a.loadTimeCollector,false),window.addEventListener("mousemove",this.a.mouseCollector,false),window.addEventListener("keypress",this.a.keyboardCollector,false),window.addEventListener("devicemotion",this.a.accelerometerCollector,false),window.addEventListener("touchmove",this.a.touchCollector,false);else if(document.attachEvent)document.attachEvent("onload",this.a.loadTimeCollector),document.attachEvent("onmousemove",this.a.mouseCollector),document.attachEvent("keypress",this.a.keyboardCollector);else throw new sjcl.exception.bug("can\\\'t attach event");this.D=true}},stopCollectors:function(){this.D&&(window.removeEventListener?(window.removeEventListener("load",this.a.loadTimeCollector,false),window.removeEventListener("mousemove",this.a.mouseCollector,false),window.removeEventListener("keypress",this.a.keyboardCollector,false),window.removeEventListener("devicemotion",this.a.accelerometerCollector,false),window.removeEventListener("touchmove",this.a.touchCollector,false)):document.detachEvent&&(document.detachEvent("onload",this.a.loadTimeCollector),document.detachEvent("onmousemove",this.a.mouseCollector),document.detachEvent("keypress",this.a.keyboardCollector)),this.D=false)},addEventListener:function(a,b){this.K[a][this.ga++]=b},removeEventListener:function(a,b){var c,d,e=this.K[a],f=[];for(d in e)e.hasOwnProperty(d)&&e[d]===b&&f.push(d);for(c=0;c<f.length;c++)d=f[c],delete e[d]},la:function(){C(this,1)},oa:function(a){var b,c;try{b=a.x||a.clientX||a.offsetX||0,c=a.y||a.clientY||a.offsetY||0}catch(d){c=b=0}0!=b&&0!=c&&this.addEntropy([b,c],2,"mouse");C(this,0)},qa:function(a){a=a.touches[0]||a.changedTouches[0];this.addEntropy([a.pageX||a.clientX,a.pageY||a.clientY],1,"touch");C(this,0)},ma:function(){C(this,2)},ea:function(a){a=a.accelerationIncludingGravity.x||a.accelerationIncludingGravity.y||a.accelerationIncludingGravity.z;if(window.orientation){var b=window.orientation;"number"===typeof b&&this.addEntropy(b,1,"accelerometer")}a&&this.addEntropy(a,2,"accelerometer");C(this,0)}};function A(a,b){var c,d=sjcl.random.K[a],e=[];for(c in d)d.hasOwnProperty(c)&&e.push(d[c]);for(c=0;c<e.length;c++)e[c](b)}function C(a,b){"undefined"!==typeof window&&window.performance&&"function"===typeof window.performance.now?a.addEntropy(window.performance.now(),b,"loadtime"):a.addEntropy(new Date().valueOf(),b,"loadtime")}function y(a){a.b=z(a).concat(z(a));a.L=new sjcl.cipher.aes(a.b)}function z(a){for(var b=0;4>b&&(a.h[b]=a.h[b]+1|0,!a.h[b]);b++);return a.L.encrypt(a.h)}function B(a,b){return function(){b.apply(a,arguments)}}sjcl.random=new sjcl.prng(6);a:try{if(G="undefined"!==typeof module&&module.exports){try{H=__require2("crypto")}catch(a){H=null}G=E=H}if(G&&E.randomBytes)D=E.randomBytes(128),D=new Uint32Array(new Uint8Array(D).buffer),sjcl.random.addEntropy(D,1024,"crypto[\\\'randomBytes\\\']");else if("undefined"!==typeof window&&"undefined"!==typeof Uint32Array){F=new Uint32Array(32);if(window.crypto&&window.crypto.getRandomValues)window.crypto.getRandomValues(F);else if(window.msCrypto&&window.msCrypto.getRandomValues)window.msCrypto.getRandomValues(F);else break a;sjcl.random.addEntropy(F,1024,"crypto[\\\'getRandomValues\\\']")}}catch(a){"undefined"!==typeof window&&window.console&&(console.log("There was an error collecting entropy from the browser:"),console.log(a))}var D;var E;var F;var G;var H;sjcl.json={defaults:{v:1,iter:1e4,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},ja:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.g({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.g(f,c);c=f.adata;"string"===typeof f.salt&&(f.salt=sjcl.codec.base64.toBits(f.salt));"string"===typeof f.iv&&(f.iv=sjcl.codec.base64.toBits(f.iv));if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||"string"===typeof a&&100>=f.iter||64!==f.ts&&96!==f.ts&&128!==f.ts||128!==f.ks&&192!==f.ks&&256!==f.ks||2>f.iv.length||4<f.iv.length)throw new sjcl.exception.invalid("json encrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,f),a=g.key.slice(0,f.ks/32),f.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.publicKey&&(g=a.kem(),f.kemtag=g.tag,a=g.key.slice(0,f.ks/32));"string"===typeof b&&(b=sjcl.codec.utf8String.toBits(b));"string"===typeof c&&(f.adata=c=sjcl.codec.utf8String.toBits(c));g=new sjcl.cipher[f.cipher](a);e.g(d,f);d.key=a;f.ct="ccm"===f.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.encrypt(g,b,f.iv,c,f.ts):sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return f},encrypt:function(a,b,c,d){var e=sjcl.json,f=e.ja.apply(e,arguments);return e.encode(f)},ia:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.g(e.g(e.g({},e.defaults),b),c,true);var f,g;f=b.adata;"string"===typeof b.salt&&(b.salt=sjcl.codec.base64.toBits(b.salt));"string"===typeof b.iv&&(b.iv=sjcl.codec.base64.toBits(b.iv));if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||"string"===typeof a&&100>=b.iter||64!==b.ts&&96!==b.ts&&128!==b.ts||128!==b.ks&&192!==b.ks&&256!==b.ks||!b.iv||2>b.iv.length||4<b.iv.length)throw new sjcl.exception.invalid("json decrypt: invalid parameters");"string"===typeof a?(g=sjcl.misc.cachedPbkdf2(a,b),a=g.key.slice(0,b.ks/32),b.salt=g.salt):sjcl.ecc&&a instanceof sjcl.ecc.elGamal.secretKey&&(a=a.unkem(sjcl.codec.base64.toBits(b.kemtag)).slice(0,b.ks/32));"string"===typeof f&&(f=sjcl.codec.utf8String.toBits(f));g=new sjcl.cipher[b.cipher](a);f="ccm"===b.mode&&sjcl.arrayBuffer&&sjcl.arrayBuffer.ccm&&b.ct instanceof ArrayBuffer?sjcl.arrayBuffer.ccm.decrypt(g,b.ct,b.iv,b.tag,f,b.ts):sjcl.mode[b.mode].decrypt(g,b.ct,b.iv,f,b.ts);e.g(d,b);d.key=a;return 1===c.raw?f:sjcl.codec.utf8String.fromBits(f)},decrypt:function(a,b,c,d){var e=sjcl.json;return e.ia(a,e.decode(b),c,d)},encode:function(a){var b,c="{",d="";for(b in a)if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i))throw new sjcl.exception.invalid("json encode: invalid property name");c+=d+\\\'"\\\'+b+\\\'":\\\';d=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+=\\\'"\\\'+escape(a[b])+\\\'"\\\';break;case"object":c+=\\\'"\\\'+sjcl.codec.base64.fromBits(a[b],0)+\\\'"\\\';break;default:throw new sjcl.exception.bug("json encode: unsupported type")}}return c+"}"},decode:function(a){a=a.replace(/\\\\s/g,"");if(!a.match(/^\\\\{.*\\\\}$/))throw new sjcl.exception.invalid("json decode: this isn\\\'t json!");a=a.replace(/^\\\\{|\\\\}$/g,"").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^\\\\s*(?:(["\\\']?)([a-z][a-z0-9]*)\\\\1)\\\\s*:\\\\s*(?:(-?\\\\d+)|"([a-z0-9+\\\\/%*_.@=\\\\-]*)"|(true|false))$/i)))throw new sjcl.exception.invalid("json decode: this isn\\\'t json!");null!=d[3]?b[d[2]]=parseInt(d[3],10):null!=d[4]?b[d[2]]=d[2].match(/^(ct|adata|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]):null!=d[5]&&(b[d[2]]="true"===d[5])}return b},g:function(a,b,c){void 0===a&&(a={});if(void 0===b)return a;for(var d in b)if(b.hasOwnProperty(d)){if(c&&void 0!==a[d]&&a[d]!==b[d])throw new sjcl.exception.invalid("required parameter overridden");a[d]=b[d]}return a},sa:function(a,b){var c={},d;for(d in a)a.hasOwnProperty(d)&&a[d]!==b[d]&&(c[d]=a[d]);return c},ra:function(a,b){var c={},d;for(d=0;d<b.length;d++)void 0!==a[b[d]]&&(c[b[d]]=a[b[d]]);return c}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.pa={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.pa,d;b=b||{};d=b.iter||1e3;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=void 0===b.salt?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)}};var _HTTPfrontend=class extends Service{constructor(options,path,fetched){super(options);this.name="http";this.fetchProxied=false;this.listening={};this.GET=(url="http://localhost:8080/ping",type="",mimeType)=>{if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"GET",url,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.POST=(message,url="http://localhost:8080/echo",type="",mimeType)=>{if(typeof message==="object"&&(type==="json"||type==="text"||!type)){message=JSON.stringify(message)}if(type==="json")mimeType="application/json";return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method:"POST",url,data:message,responseType:type,mimeType,onload:ev=>{let data;if(xhr.responseType===""||xhr.responseType==="text")data=xhr.responseText;else data=xhr.response;if(url instanceof URL)url=url.toString();this.setState({[url]:data});resolve(data)},onabort:er=>{reject(er)}})}).catch(console.error)};this.transmit=(message,url)=>{let obj=message;if(typeof obj==="object"){message=JSON.stringify(obj)}if(obj?.method?.toLowerCase()=="get"||message?.toLowerCase()==="get")return this.GET(url);return this.POST(message,url)};this.transponder=(url,message,type="",mimeType)=>{if(typeof message==="object")message=JSON.stringify(message);let method="GET";if(message){method="POST"}if(type==="json")mimeType="application/json";else return new Promise((resolve,reject)=>{let xhr=_HTTPfrontend.request({method,url,data:message,responseType:type,onload:ev=>{let body=xhr.response;if(typeof body==="string"){let substr=body.substring(0,8);if(substr.includes("{")||substr.includes("[")){if(substr.includes("\\\\\\\\"))body=body.replace(/\\\\\\\\/g,"");if(body[0]===\\\'"\\\'){body=body.substring(1,body.length-1)};body=JSON.parse(body)}}if(typeof body?.method==="string"){return resolve(this.handleMethod(body.route,body.method,body.args))}else if(typeof body?.route==="string"){return resolve(this.handleServiceMessage(body))}else if(typeof body?.node==="string"||body.node instanceof GraphNode){return resolve(this.handleGraphNodeCall(body.node,body.args))}else return resolve(body)},onabort:er=>{reject(er)}})}).catch(console.error)};this.listen=(path2="0",fetched2=async(clone,args,response)=>{const result=await clone.text();const returned=this.receive(result);this.setState({[response.url]:returned})})=>{this.listening[path2]={};let listenerId=`${path2}${Math.floor(Math.random()*1e15)}`;this.listening[path2][listenerId]=fetched2;if(!this.fetchProxied){globalThis.fetch=new Proxy(globalThis.fetch,{apply(fetch,that,args){const result=fetch.apply(that,args);result.then(response=>{if(!response.ok)return;if(this.listening["0"]){for(const key in this.listeners){const clone=response.clone();this.listening["0"][key](clone,args,response)}}else{for(const key in this.listening){if(response.url.includes(key)){for(const key2 in this.listening[path2]){const clone=response.clone();this.listening[path2][key2](clone,args,response)}break}}}}).catch(er=>{console.error(er)});return result}});this.fetchProxied=true}return listenerId};this.stopListening=(path2,listener)=>{if(!path2&&path2!==0){for(const key in this.listening)delete this.listening[key]}else{if(!listener)delete this.listening[path2];else delete this.listening[listener]}};this.load(this);this.listen(path,fetched)}};var HTTPfrontend=_HTTPfrontend;HTTPfrontend.request=options=>{const xhr=new XMLHttpRequest;if(options.responseType)xhr.responseType=options.responseType;else options.responseType="json";if(options.mimeType){xhr.overrideMimeType(options.mimeType)}if(options.onload)xhr.addEventListener("load",options.onload,false);if(options.onprogress)xhr.addEventListener("progress",options.onprogress,false);if(options.onabort)xhr.addEventListener("abort",options.onabort,false);if(options.onloadend)xhr.addEventListener("loadend",options.onloadend,false);if(options.onerror)xhr.addEventListener("error",options.onerror,false);xhr.open(options.method,options.url,true,options.user,options.pass);if(!options.onerror)xhr.onerror=function(){xhr.abort()};xhr.send(options.data);return xhr};var import_web_worker=__toESM(require_browser());var WorkerService=class extends Service{constructor(options){super();this.name="worker";this.workers={};this.threadRot=0;this.loadWorkerRoute=(rt,routeKey)=>{if(rt.workerUrl)rt.url=rt.workerUrl;if(rt.workerId)rt.__node.tag=rt.workerId;if(!rt.__node.tag)rt.__node.tag=routeKey;rt._id=rt.__node.tag;let worker;if(this.workers[rt._id])worker=this.workers[rt._id];else if(rt.worker)worker=rt.worker;if(!worker){worker=this.addWorker(rt)}rt.worker=worker;if(!rt.worker.__ondisconnected){let ondelete=rt2=>{rt2.worker?.terminate()};rt.__addOndisconnected(ondelete)}if(rt.transferFunctions){for(const prop in rt.transferFunctions){this.transferFunction(worker,rt.transferFunctions[prop],prop)}}if(rt.transferClasses){for(const prop in rt.transferClasses){this.transferClass(worker,rt.transferClasses[prop],prop)}}if(worker){if(!rt.__operator){rt.__operator=(...args)=>{if(rt.callback){if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.post(rt.callback,args);else return worker.run(rt.callback,args)}else{if(!this.__node.nodes.get(rt.__node.tag)?.__children)worker.send(args);else return worker.request(args)}}}if(rt.init){worker.run(rt.init,rt.initArgs,void 0,rt.initTransfer)}return worker}};this.workerloader={"workers":(node,parent,graph,roots)=>{let rt=node;if(!node.parentRoute&&(parent?.callback&&parent?.worker))node.parentRoute=parent?.callback;if(rt?.worker||rt?.workerId||rt?.workerUrl){let worker=this.loadWorkerRoute(rt,rt.__node.tag);if(worker){if(!rt.parentRoute&&rt.__parent?.callback)rt.parentRoute=rt.__parent.callback;if(rt.__parent&&!rt.portId){if(typeof rt.__parent==="string"){if(rt.__node.tag!==rt.__parent&&worker._id!==rt.__parent)rt.portId=this.establishMessageChannel(worker,rt.__parent)}else if(rt.__node.tag!==rt.__parent?.__node?.tag&&worker._id!==rt.__parent?.tag){rt.portId=this.establishMessageChannel(worker,rt.__parent.worker)}};if(rt.parentRoute){if(!rt.stopped){if(typeof rt.__parent==="string"&&rt.__parent===worker._id){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else if(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag){worker.run("subscribe",[rt.parentRoute,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.parentRoute,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.parentRoute+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id)&&!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.parentRoute+rt.portId]={sub:null,route:rt.parentRoute,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent){if(typeof rt.__parent==="string"){if(!rt.stopped){if(rt.__parent===worker._id){worker.run("subscribe",[rt.__parent,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent+rt.portId].sub=sub})}if(!(typeof rt.__parent==="string"&&rt.__parent===worker._id))worker.workerSubs[rt.__parent+rt.portId]={sub:null,route:worker._id,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}else if(rt.__parent?.__node?.tag&&rt.__parent?.worker){if(!rt.stopped){if(rt.__node.tag===rt.__parent.__node.tag||worker._id===rt.__parent.__node.tag){worker.run("subscribe",[rt.__parent.__node.tag,void 0,void 0,rt.callback])}else worker.run("subscribeToWorker",[rt.__parent.__node.tag,rt.portId,void 0,rt.callback,void 0,void 0,rt.blocking]).then(sub=>{worker.workerSubs[rt.__parent.__node.tag+rt.portId].sub=sub})}if(!(rt.__node.tag===rt.__parent?.__node?.tag||worker._id===rt.__parent?.__node?.tag))worker.workerSubs[rt.__parent.__node.tag+rt.portId]={sub:null,route:rt.__parent.__node.tag,portId:rt.portId,callback:rt.callback,blocking:rt.blocking}}}}}else if(rt.__parent&&rt.parentRoute){if(typeof rt.__parent==="string"&&roots[rt.__parent]?.worker){roots[rt.__parent].worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}else if(rt.__parent?.worker){rt.__parent.worker.subscribe(rt.parentRoute,rt.__operator,void 0,void 0,void 0,rt.blocking)}}return rt}};this.addDefaultMessageListener=()=>{globalThis.onmessage=ev=>{let result=this.receive(ev.data);if(this.__node.keepState)this.setState({[this.name]:result})}};this.postMessage=(message,target,transfer)=>{if(this.workers[target]){this.workers[target].send(message,transfer)}else{globalThis.postMessage(message,target,transfer)}};this.addWorker=options2=>{let worker;if(!options2._id)options2._id=`worker${Math.floor(Math.random()*1e15)}`;if(options2.url)worker=new import_web_worker.default(options2.url);else if(options2.port){worker=options2.port}else if(this.workers[options2._id]){if(this.workers[options2._id].port)worker=this.workers[options2._id].port;else worker=this.workers[options2._id].worker}if(!worker)return;let send=(message,transfer)=>{return this.transmit(message,worker,transfer)};let post=(route,args,method,transfer)=>{let message={route,args};if(method)message.method=method;return this.transmit(message,worker,transfer)};let run=(route,args,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[{route,args},options2._id,callbackId]};if(method)req.args[0].method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let request=(message,method,transfer)=>{return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,options2._id,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};let workerSubs={};let subscribe=(route,callback,args,key,subInput,blocking)=>{return this.subscribeToWorker(route,options2._id,callback,args,key,subInput,blocking)};let unsubscribe=(route,sub)=>{return run("unsubscribe",[route,sub])};let start=async(route,portId,callback,blocking)=>{if(route)await run("subscribeToWorker",[route,portId,void 0,callback,blocking]).then(sub=>{if(sub)workerSubs[route+portId]={sub,route,portId,callback,blocking}});else for(const key in workerSubs){if(typeof workerSubs[key].sub!=="number")await run("subscribeToWorker",[workerSubs[key].route,workerSubs[key].portId,void 0,workerSubs[key].callback,void 0,workerSubs[key].blocking]).then(sub=>{workerSubs[key].sub=sub});console.log(JSON.stringify(workerSubs))}return true};let stop=async(route,portId)=>{if(route&&portId&&workerSubs[route+portId]){await run("unsubscribe",[route,workerSubs[route+portId].sub]);workerSubs[route+portId].sub=false}else{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){await run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub]).then(console.log)}workerSubs[key].sub=false}}return true};let terminate=()=>{for(const key in workerSubs){if(typeof workerSubs[key].sub==="number"){run("unpipeWorkers",[workerSubs[key].route,workerSubs[key].portId,workerSubs[key].sub])}workerSubs[key].sub=false}return this.terminate(options2._id)};if(!options2.onmessage)options2.onmessage=ev=>{this.receive(ev.data);this.setState({[options2._id]:ev.data})};if(!options2.onerror){options2.onerror=ev=>{console.error(ev.data)}}worker.onmessage=options2.onmessage;worker.onerror=options2.onerror;this.workers[options2._id]={worker,send,post,run,request,subscribe,unsubscribe,terminate,start,stop,postMessage:worker.postMessage,workerSubs,graph:this,...options2};return this.workers[options2._id]};this.open=this.addWorker;this.toObjectURL=scriptTemplate=>{let blob=new Blob([scriptTemplate],{type:"text/javascript"});return URL.createObjectURL(blob)};this.transmit=(message,worker,transfer)=>{if(!transfer){transfer=this.getTransferable(message)}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){worker.postMessage(message,transfer)}else if(typeof worker==="string"){if(this.workers[worker]){if(this.workers[worker].port)this.workers[worker].port.postMessage(message,transfer);else if(this.workers[worker].worker)this.workers[worker].worker.postMessage(message,transfer)}}else{let keys2=Object.keys(this.workers);this.workers[keys2[this.threadRot]].worker.postMessage(message,transfer);this.threadRot++;if(this.threadRot===keys2.length)this.threadRot=0}return message};this.terminate=worker=>{let onclose;if(typeof worker==="string"){let obj=this.workers[worker];if(obj){delete this.workers[worker];worker=obj.worker;if(obj.onclose)onclose=obj.onclose}}else if(typeof worker==="object"){if(worker?._id){worker=worker.worker;delete this.workers[worker?._id]}}if(worker instanceof import_web_worker.default){worker.terminate();if(onclose)onclose(worker);return true}if(worker instanceof MessagePort){worker.close();if(onclose)onclose(worker);return true}return false};this.establishMessageChannel=(worker,worker2)=>{let workerId;if(typeof worker==="string"){workerId=worker;if(this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker2=this.workers[worker].worker}}else if(worker?.worker){worker=worker.worker}if(typeof worker2==="string"){if(this.workers[worker2]){if(this.workers[worker2].port)worker2=this.workers[worker2].port;else worker2=this.workers[worker2].worker}}else if(worker2?.worker){worker2=worker2.worker}if(worker instanceof import_web_worker.default||worker instanceof MessagePort){let channel=new MessageChannel;let portId=`port${Math.floor(Math.random()*1e15)}`;worker.postMessage({route:"addWorker",args:{port:channel.port1,_id:portId}},[channel.port1]);if(worker2 instanceof import_web_worker.default||worker2 instanceof MessagePort){worker2.postMessage({route:"addWorker",args:{port:channel.port2,_id:portId}},[channel.port2])}else if(workerId&&this.workers[workerId]){channel.port2.onmessage=this.workers[workerId].onmessage;this.workers[workerId].port=channel.port2}return portId}return false};this.request=(message,workerId,transfer,method)=>{let worker=this.workers[workerId].worker;return new Promise((res,rej)=>{let callbackId=Math.random();let req={route:"runRequest",args:[message,callbackId]};if(method)req.method=method;let onmessage=ev=>{if(typeof ev.data==="object"){if(ev.data.callbackId===callbackId){worker.removeEventListener("message",onmessage);res(ev.data.args)}}};worker.addEventListener("message",onmessage);this.transmit(req,worker,transfer)})};this.runRequest=(message,worker,callbackId)=>{let res=this.receive(message);if(typeof worker==="string"&&this.workers[worker]){if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}if(res instanceof Promise){res.then(r=>{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:r,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:r,callbackId})})}else{if(worker instanceof import_web_worker.default||worker instanceof MessagePort)worker.postMessage({args:res,callbackId});else if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)globalThis.postMessage({args:res,callbackId})}return res};this.subscribeWorker=(route,worker,args,key,subInput,blocking)=>{let callback;if(blocking){let blocked=false;callback=res=>{if(!blocked){blocked=true;if(res instanceof Promise){res.then(r=>{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,r]).then(ret=>{blocked=false})})}else{if(worker?.run)worker.run("triggerSubscription",[route,worker._id,res]).then(ret=>{blocked=false})}}}}else{callback=res=>{if(res instanceof Promise){res.then(r=>{if(worker?.postMessage)worker.postMessage({args:r,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:r,callbackId:route})})}else{if(worker?.postMessage)worker.postMessage({args:res,callbackId:route});else if(globalThis.postMessage)globalThis.postMessage({args:res,callbackId:route})}}}if(!blocking&&worker?.port){worker=worker.port}else if(!blocking&&worker?.worker){worker=worker.worker}else if(typeof worker==="string"&&this.workers[worker]){if(blocking)worker=this.workers[worker];else if(this.workers[worker].port)worker=this.workers[worker].port;else worker=this.workers[worker].worker}return this.subscribe(route,callback,args,key,subInput)};this.subscribeToWorker=(route,workerId,callback,args,key,subInput,blocking)=>{if(typeof workerId==="string"&&this.workers[workerId]){this.__node.state.subscribeEvent(workerId,res=>{if(res?.callbackId===route){if(!callback)this.setState({[workerId]:res.args});else if(typeof callback==="string"){this.run(callback,res.args)}else callback(res.args)}});return this.workers[workerId].run("subscribeWorker",[route,workerId,args,key,subInput,blocking])}};this.triggerSubscription=async(route,workerId,result)=>{if(this.__node.state.triggers[workerId])for(let i2=0;i2<this.__node.state.triggers[workerId].length;i2++){await this.__node.state.triggers[workerId][i2].onchange({args:result,callbackId:route})}return true};this.pipeWorkers=(sourceWorker,listenerWorker,sourceRoute,listenerRoute,portId,args,key,subInput,blocking)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof listenerWorker==="string")listenerWorker=this.workers[listenerWorker];if(!portId){portId=this.establishMessageChannel(sourceWorker.worker,listenerWorker.worker)}return listenerWorker.run("subscribeToWorker",[sourceRoute,portId,listenerRoute,args,key,subInput,blocking])};this.unpipeWorkers=(sourceRoute,sourceWorker,sub)=>{if(typeof sourceWorker==="string")sourceWorker=this.workers[sourceWorker];if(typeof sourceWorker==="object"){return sourceWorker.run("unsubscribe",[sourceRoute,sub])}};this.connections={workers:this.workers};if(options?.services)this.addServices(options.services);this.load(this);this.setLoaders(this.workerloader);if(options)this.init(options);if(typeof WorkerGlobalScope!=="undefined"&&globalThis instanceof WorkerGlobalScope){this.addDefaultMessageListener()}}getTransferable(message){let transfer;if(typeof message==="object"){if(message.args){if(message.args?.constructor?.name==="Object"){for(const key in message.args){if(ArrayBuffer.isView(message.args[key])){if(!transfer)transfer=[message.args[key].buffer];else transfer.push(message.args[key].buffer)}else if(message.args[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message.args[key]];else transfer.push(message.args[key])}}}else if(Array.isArray(message.args)&&message.args.length<11){message.args.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg?.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message.args)){transfer=[message.args.buffer]}else if(message.args?.constructor?.name==="ArrayBuffer"){transfer=[message]}}else if(message?.constructor?.name==="Object"){for(const key in message){if(ArrayBuffer.isView(message[key])){if(!transfer)transfer=[message[key].buffer];else transfer.push(message[key].buffer)}else if(message[key]?.constructor?.name==="ArrayBuffer"){if(!transfer)transfer=[message[key]];else transfer.push(message[key])}}}else if(Array.isArray(message)&&message.length<11){message.forEach(arg=>{if(ArrayBuffer.isView(arg)){transfer=[arg.buffer]}else if(arg.constructor?.name==="ArrayBuffer")transfer=[arg]})}else if(ArrayBuffer.isView(message)){transfer=[message.buffer]}else if(message.constructor?.name==="ArrayBuffer"){transfer=[message]}}return transfer}};var mouseEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","button","pointerType","clientX","clientY","pageX","pageY","movementX","movementY","x","y","timeStamp"]);var wheelEventHandlerImpl=makeSendPropertiesHandler(["deltaX","deltaY"]);var keydownEventHandler=makeSendPropertiesHandler(["ctrlKey","metaKey","shiftKey","altKey","isComposing","keyCode","key","code","repeat","timeStamp"]);function focusEventHandler(event,sendFn){const data={type:event.type};data.isTrusted=event.isTrusted;data.bubbles=event.bubbles;data.cancelBubble=event.cancelBubble;data.cancelable=event.cancelable;data.composed=event.composed;data.defaultPrevent=event.defaultPrevented;data.eventPhase=event.eventPhase;data.returnValue=event.returnValue;data.currentTarget=event.currentTarget.id?event.currentTarget.id:event.currentTarget.constructor.name;data.target=data.currentTarget;data.srcElement=data.currentTarget;sendFn(data)}function wheelEventHandler(event,sendFn){event.preventDefault();wheelEventHandlerImpl(event,sendFn)}function preventDefaultHandler(event){event.preventDefault()}function copyProperties(src,properties,dst){for(const name2 of properties){dst[name2]=src[name2]}}function makeSendPropertiesHandler(properties){return function sendProperties(event,sendFn){const data={type:event.type};copyProperties(event,properties,data);sendFn(data)}}function touchEventHandler(event,sendFn){const touches=[];const data={type:event.type,touches};for(let i2=0;i2<event.touches.length;++i2){const touch=event.touches[i2];touches.push({pageX:touch.pageX,pageY:touch.pageY})}sendFn(data)}var i=1;var keys={};while(i<222){keys[i]=true;i++}function filteredKeydownEventHandler(event,sendFn){let{keyCode}=event;if(keys[keyCode]){if(event.preventDefault&&(keyCode<110||keyCode>123))event.preventDefault();keydownEventHandler(event,sendFn)}}var eventHandlers={contextmenu:preventDefaultHandler,mousedown:mouseEventHandler,mousemove:mouseEventHandler,mouseup:mouseEventHandler,pointerdown:mouseEventHandler,pointermove:mouseEventHandler,pointerup:mouseEventHandler,pointerlockchange:mouseEventHandler,webkitpointerlockchange:mouseEventHandler,focus:focusEventHandler,blur:focusEventHandler,pointerout:mouseEventHandler,touchstart:touchEventHandler,touchmove:touchEventHandler,touchend:touchEventHandler,wheel:wheelEventHandler,keydown:filteredKeydownEventHandler,keyup:filteredKeydownEventHandler};function initProxyElement(element,worker,id){if(!id)id="proxy"+Math.floor(Math.random()*1e15);const sendEvent=data=>{if(!worker){handleProxyEvent(data,id)}else worker.postMessage({route:"handleProxyEvent",args:[data,id]})};let entries=Object.entries(eventHandlers);for(const[eventName,handler]of entries){element.addEventListener(eventName,function(event){handler(event,sendEvent)})}if(eventHandlers.keydown){globalThis.addEventListener("keydown",function(ev){eventHandlers.keydown(ev,sendEvent)})}if(eventHandlers.keyup){globalThis.addEventListener("keyup",function(ev){eventHandlers.keyup(ev,sendEvent)})}const sendSize=()=>{const rect=element.getBoundingClientRect();sendEvent({type:"resize",left:rect.left,top:rect.top,width:element.clientWidth,height:element.clientHeight})};sendSize();globalThis.addEventListener("resize",sendSize);return id}var EventDispatcher=class{addEventListener(type,listener){if(this.__listeners===void 0)this.__listeners={};const listeners=this.__listeners;if(listeners[type]===void 0){listeners[type]=[]}if(listeners[type].indexOf(listener)===-1){listeners[type].push(listener)}}hasEventListener(type,listener){if(this.__listeners===void 0)return false;const listeners=this.__listeners;return listeners[type]!==void 0&&listeners[type].indexOf(listener)!==-1}removeEventListener(type,listener){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[type];if(listenerArray!==void 0){const index=listenerArray.indexOf(listener);if(index!==-1){listenerArray.splice(index,1)}}}dispatchEvent(event,target){if(this.__listeners===void 0)return;const listeners=this.__listeners;const listenerArray=listeners[event.type];if(listenerArray!==void 0){if(!target)event.target=this;else event.target=target;const array=listenerArray.slice(0);for(let i2=0,l=array.length;i2<l;i2++){array[i2].call(this,event)}}}};function noop(){}var ElementProxyReceiver=class extends EventDispatcher{constructor(){super();this.__listeners={};this.style={};this.setPointerCapture=()=>{};this.releasePointerCapture=()=>{};this.getBoundingClientRect=()=>{return{left:this.left,top:this.top,width:this.width,height:this.height,right:this.left+this.width,bottom:this.top+this.height}};this.handleEvent=data=>{if(data.type==="resize"){this.left=data.left;this.top=data.top;this.width=data.width;this.height=data.height;if(typeof this.proxied==="object"){this.proxied.style.width=this.width+"px";this.proxied.style.height=this.height+"px";this.proxied.clientWidth=this.width;this.proxied.clientHeight=this.height}}data.preventDefault=noop;data.stopPropagation=noop;this.dispatchEvent(data,this.proxied)};this.style={}}get clientWidth(){return this.width}get clientHeight(){return this.height}focus(){}blur(){}};var ProxyManager=class{constructor(){this.targets={};this.makeProxy=(id,addTo=void 0)=>{if(!id)id=`proxyReceiver${Math.floor(Math.random()*1e15)}`;let proxy;if(this.targets[id])proxy=this.targets[id];else{proxy=new ElementProxyReceiver;this.targets[id]=proxy}if(typeof addTo==="object"){addTo.proxy=proxy;proxy.proxied=addTo;if(typeof WorkerGlobalScope!=="undefined")addTo.style=proxy.style;if(proxy.width){addTo.style.width=proxy.width+"px";addTo.clientWidth=proxy.width}if(proxy.height){addTo.style.height=proxy.height+"px";addTo.clientHeight=proxy.height}addTo.setPointerCapture=proxy.setPointerCapture.bind(proxy);addTo.releasePointerCapture=proxy.releasePointerCapture.bind(proxy);addTo.getBoundingClientRect=proxy.getBoundingClientRect.bind(proxy);addTo.addEventListener=proxy.addEventListener.bind(proxy);addTo.removeEventListener=proxy.removeEventListener.bind(proxy);addTo.handleEvent=proxy.handleEvent.bind(proxy);addTo.dispatchEvent=proxy.dispatchEvent.bind(proxy);addTo.focus=proxy.focus.bind(proxy);addTo.blur=proxy.blur.bind(proxy)}};this.getProxy=id=>{return this.targets[id]};this.handleEvent=(data,id)=>{if(!this.targets[id])this.makeProxy(id);if(this.targets[id]){this.targets[id].handleEvent(data);return true}return void 0};if(!globalThis.document)globalThis.document={elementFromPoint:(...args)=>{return this.targets[Object.keys(this.targets)[0]].proxied}}}};function makeProxy(id,elm){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;this.__node.graph.ProxyManager.makeProxy(id,elm)}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;globalThis.ProxyManager.makeProxy(id,elm)}return id}function handleProxyEvent(data,id){if(this?.__node?.graph){if(!this.__node.graph.ProxyManager)this.__node.graph.ProxyManager=new ProxyManager;if(this.__node.graph.ProxyManager.handleEvent(data,id))return data}else{if(!globalThis.ProxyManager)globalThis.ProxyManager=new ProxyManager;if(globalThis.ProxyManager.handleEvent(data,id))return data}}var proxyElementWorkerRoutes={initProxyElement,makeProxy,handleProxyEvent};function Renderer(options){if(options.worker){let worker=options.worker;let route=options.route;if(worker instanceof Blob||typeof worker==="string"){worker=new Worker(worker)}delete options.worker;delete options.route;return transferCanvas(worker,options,route)}else{initProxyElement(options.canvas,void 0,options._id);return setupCanvas(options)}}function transferCanvas(worker,options,route){console.log(options);if(!options)return void 0;if(!options._id)options._id=`canvas${Math.floor(Math.random()*1e15)}`;let offscreen=options.canvas.transferControlToOffscreen();if(!options.width)options.width=options.canvas.clientWidth;if(!options.height)options.height=options.canvas.clientHeight;let message={route:route?route:"setupCanvas",args:{...options,canvas:offscreen}};if(this?.__node?.graph)this.__node.graph.run("initProxyElement",options.canvas,worker,options._id);else initProxyElement(options.canvas,worker,options._id);if(options.draw){if(typeof options.draw==="function")message.args.draw=options.draw.toString();else message.args.draw=options.draw}if(options.update){if(typeof options.update==="function")message.args.update=options.update.toString();else message.args.update=options.update}if(options.init){if(typeof options.init==="function")message.args.init=options.init.toString();else message.args.init=options.init}if(options.clear){if(typeof options.clear==="function")message.args.clear=options.clear.toString();else message.args.clear=options.clear}let tr=[offscreen];if(options.transfer){tr.push(...options.transfer);delete options.transfer}worker.postMessage(message,tr);const canvascontrols={_id:options._id,width:options.width,height:options.height,worker,draw:(props,transfer)=>{worker.postMessage({route:"drawFrame",args:[props,options._id]},transfer)},update:(props,transfer)=>{worker.postMessage({route:"updateCanvas",args:[props,options._id]},transfer)},clear:()=>{worker.postMessage({route:"clearCanvas",args:options._id})},init:()=>{worker.postMessage({route:"initCanvas",args:options._id})},stop:()=>{worker.postMessage({route:"stopAnim",args:options._id})},start:()=>{worker.postMessage({route:"startAnim",args:options._id})},set:(newDrawProps,transfer)=>{worker.postMessage({route:"setDraw",args:[newDrawProps,options._id]},transfer)},terminate:()=>{worker.terminate()}};return canvascontrols}function setDraw(settings,_id){let canvasopts;if(this?.__node?.graph){if(_id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else if(settings._id)canvasopts=this.__node.graph.CANVASES?.[settings._id];else canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]]}else{if(_id)canvasopts=globalThis.CANVASES?.[settings._id];else if(settings._id)canvasopts=globalThis.CANVASES?.[settings._id];else canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]]}if(canvasopts){if(settings.canvas){canvasopts.canvas=settings.canvas;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasopts._id,canvasopts.canvas);else proxyElementWorkerRoutes.makeProxy(canvasopts._id,canvasopts.canvas)}if(typeof settings.context==="string")canvasopts.context=canvasopts.canvas.getContext(settings.context);else if(settings.context)canvasopts.context=settings.context;if(settings.width)canvasopts.canvas.width=settings.width;if(settings.height)canvasopts.canvas.height=settings.height;if(typeof settings.draw==="string")settings.draw=parseFunctionFromText3(settings.draw);if(typeof settings.draw==="function"){canvasopts.draw=settings.draw.bind(settings)}if(typeof settings.update==="string")settings.update=parseFunctionFromText3(settings.update);if(typeof settings.update==="function"){canvasopts.update=settings.update.bind(settings)}if(typeof settings.init==="string")settings.init=parseFunctionFromText3(settings.init);if(typeof settings.init==="function"){canvasopts.init=settings.init.bind(settings)}if(typeof settings.clear==="string")settings.clear=parseFunctionFromText3(settings.clear);if(typeof settings.clear==="function"){canvasopts.clear=settings.clear.bind(settings)}return settings._id}return void 0}function setupCanvas(options){if(this?.__node?.graph){if(!this.__node.graph.CANVASES)this.__node.graph.CANVASES={}}else if(!globalThis.CANVASES)globalThis.CANVASES={};let canvasOptions=options;options._id?canvasOptions._id=options._id:canvasOptions._id=`canvas${Math.floor(Math.random()*1e15)}`;typeof options.context==="string"?canvasOptions.context=options.canvas.getContext(options.context):canvasOptions.context=options.context;"animating"in options?canvasOptions.animating=options.animating:canvasOptions.animating=true;if(this?.__node?.graph?.CANVASES[canvasOptions._id]){this.__node.graph.run("setDraw",canvasOptions)}else if(globalThis.CANVASES?.[canvasOptions._id]){setDraw(canvasOptions)}else{if(this?.__node?.graph){canvasOptions.graph=this.__node.graph;if(!canvasOptions.__node){canvasOptions.__node={}}if(!canvasOptions.__node.tag)canvasOptions.__node.tag=canvasOptions._id;canvasOptions=this.__node.graph.add(canvasOptions);canvasOptions.__addOndisconnected=()=>{canvasOptions.stop();delete this.__node.graph.CANVASES[canvasOptions._id]}}if(this?.__node?.graph)this.__node.graph.CANVASES[canvasOptions._id]=canvasOptions;else globalThis.CANVASES[canvasOptions._id]=canvasOptions;if(this?.__node?.graph)this.__node.graph.run("makeProxy",canvasOptions._id,canvasOptions.canvas);else proxyElementWorkerRoutes.makeProxy(canvasOptions._id,canvasOptions.canvas);if(options.width)canvasOptions.canvas.width=options.width;if(options.height)canvasOptions.canvas.height=options.height;if(typeof canvasOptions.draw==="string"){canvasOptions.draw=parseFunctionFromText3(canvasOptions.draw)}else if(typeof canvasOptions.draw==="function"){canvasOptions.draw=canvasOptions.draw.bind(canvasOptions)}if(typeof canvasOptions.update==="string"){canvasOptions.update=parseFunctionFromText3(canvasOptions.update)}else if(typeof canvasOptions.update==="function"){canvasOptions.update=canvasOptions.update.bind(canvasOptions)}if(typeof canvasOptions.init==="string"){canvasOptions.init=parseFunctionFromText3(canvasOptions.init)}else if(typeof canvasOptions.init==="function"){canvasOptions.init=canvasOptions.init.bind(canvasOptions)}if(typeof canvasOptions.clear==="string"){canvasOptions.clear=parseFunctionFromText3(canvasOptions.clear)}else if(typeof canvasOptions.clear==="function"){canvasOptions.clear=canvasOptions.clear.bind(canvasOptions)}if(typeof canvasOptions.init==="function")canvasOptions.init(canvasOptions,canvasOptions.canvas,canvasOptions.context);canvasOptions.stop=()=>{stopAnim(canvasOptions._id)};canvasOptions.start=draw=>{startAnim(canvasOptions._id,draw)};canvasOptions.set=settings=>{setDraw(settings,canvasOptions._id)};if(typeof canvasOptions.draw==="function"&&canvasOptions.animating){let draw=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw(s,canvas,context)})}};draw(canvasOptions,canvasOptions.canvas,canvasOptions.context)}}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope)return canvasOptions._id;else{const canvascontrols={_id:options._id,width:options.width,height:options.height,draw:props=>{drawFrame(props,options._id)},update:props=>{updateCanvas(props,options._id)},clear:()=>{clearCanvas(options._id)},init:()=>{initCanvas(options._id)},stop:()=>{stopAnim(options._id)},start:()=>{startAnim(options._id)},set:newDrawProps=>{setDraw(newDrawProps,options._id)},terminate:()=>{if(this.__node?.graph)this.__node.graph.remove(options._id);else{stopAnim(options._id);if(this?.__node?.graph)delete this.__node.graph.CANVASES[canvasOptions._id];else delete globalThis.CANVASES[canvasOptions._id]}}};return canvascontrols}}function drawFrame(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){if(props)Object.assign(canvasopts,props);if(canvasopts.draw){canvasopts.draw(canvasopts,canvasopts.canvas,canvasopts.context);return _id}}return void 0}function clearCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.clear){canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function initCanvas(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.init){canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function updateCanvas(input,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts?.update){canvasopts.update(canvasopts,canvasopts.canvas,canvasopts.context,input);return _id}return void 0}function setProps(props,_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){Object.assign(canvasopts,props);if(props.width)canvasopts.canvas.width=props.width;if(props.height)canvasopts.canvas.height=props.height;return _id}return void 0}function startAnim(_id,draw){let canvasopts=getCanvas.call(this,_id);canvasopts.animating=true;if(canvasopts&&draw){if(typeof draw==="string")draw=parseFunctionFromText3(draw);if(typeof draw==="function"){canvasopts.draw=draw}return _id}if(typeof canvasopts?.draw==="function"){let draw2=(s,canvas,context)=>{if(s.animating){s.draw(s,canvas,context);requestAnimationFrame(()=>{draw2(s,canvas,context)})}};if(typeof canvasopts.clear==="function")canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context);if(typeof canvasopts.init==="function")canvasopts.init(canvasopts,canvasopts.canvas,canvasopts.context);draw2(canvasopts,canvasopts.canvas,canvasopts.context);return _id}return void 0}function stopAnim(_id){let canvasopts=getCanvas.call(this,_id);if(canvasopts){canvasopts.animating=false;if(typeof canvasopts.clear==="function")requestAnimationFrame(canvasopts.clear(canvasopts,canvasopts.canvas,canvasopts.context));return _id}return void 0}function getCanvas(_id){let canvasopts;if(this?.__node?.graph){if(!_id)canvasopts=this.__node.graph.CANVASES?.[Object.keys(this.__node.graph.CANVASES)[0]];else canvasopts=this.__node.graph.CANVASES?.[_id]}else{if(!_id)canvasopts=globalThis.CANVASES?.[Object.keys(globalThis.CANVASES)[0]];else canvasopts=globalThis.CANVASES?.[_id]}return canvasopts}var workerCanvasRoutes={...proxyElementWorkerRoutes,Renderer,transferCanvas,setupCanvas,setDraw,drawFrame,clearCanvas,initCanvas,updateCanvas,setProps,startAnim,stopAnim,getCanvas};function parseFunctionFromText3(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\\\W*(function[^{]+\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>[^{]*\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(newFuncHead+newFuncBody+"}")}catch{}}}return newFunc}var _ArrayManip=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y2=>{if(clamp){if(y2<min)y2=min;if(y2>max)y2=max}return y2*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y2=>{if(clamp){if(y2<min)y2=min;if(y2>max)y2=max}return 2*((y2-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps9){let now=Date.now();let toInterp=[now-ct*1e3/sps9,now];return _ArrayManip.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i2=incr;i2<array.length;i2+=incr){let rounded=Math.round(i2);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i2=1;i2<fitCount-1;i2++){var tmp=i2*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i2]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x;b=0}else if(60<=h&&h<120){r=x;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x}else if(180<=h&&h<240){r=0;g=x;b=c}else if(240<=h&&h<300){r=x;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d={};data.forEach((arr,i2)=>{d[i2]=arr});data=d;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\\\r\\\\n")){let lines=data.split("\\\\r\\\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}if(Array.isArray(split)){split.forEach((val,i2)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl=parseFloat(v);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i2]=[fl];else return void 0}})}})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(Array.isArray(split)){split.forEach((val,i2)=>{if(val.includes(":")){let[key2,v]=val.split(":");let fl=parseFloat(v);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i2]=[fl];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_,i2)=>lastValue+slopeIncr*(i2+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x){return ArrayBuffer.isView(x)&&Object.prototype.toString.call(x)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip=_ArrayManip;ArrayManip.bufferValues=(objects,property,keys2,buffer)=>{if(!Array.isArray(keys2)&&typeof keys2==="object")keys2=Object.keys(keys2);if(!buffer){let object_keys=Object.keys(objects);if(keys2)buffer=new Float32Array(object_keys.length*keys2.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys2=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys2.length)}else buffer=new Float32Array(object_keys.length)}}let i2=0;for(const key in objects){if(objects[key][property]){if(keys2){for(let j=0;j<keys2.length;j++){buffer[i2]=objects[key][property][keys2[j]];i2++}}else{buffer[i2]=objects[key][property];i2++}}}return buffer};var rechk=/^([<>])?(([1-9]\\\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt=/([1-9]\\\\d*)?([xcbB?hHiIfdsp])/g;var str=(v,o,c)=>String.fromCharCode(...new Uint8Array(v.buffer,v.byteOffset+o,c));var rts=(v,o,c,s)=>new Uint8Array(v.buffer,v.byteOffset+o,c).set(s.split("").map(str2=>str2.charCodeAt(0)));var pst=(v,o,c)=>str(v,o+1,Math.min(v.getUint8(o),c-1));var tsp=(v,o,c,s)=>{v.setUint8(o,s.length);rts(v,o+1,c-1,s)};var lut=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v=>str(v,o,1),p:(v,c2)=>rts(v,o,1,c2)})],"?":c=>[c,1,o=>({u:v=>Boolean(v.getUint8(o)),p:(v,B2)=>v.setUint8(o,B2)})],b:c=>[c,1,o=>({u:v=>v.getInt8(o),p:(v,b)=>v.setInt8(o,b)})],B:c=>[c,1,o=>({u:v=>v.getUint8(o),p:(v,B2)=>v.setUint8(o,B2)})],h:c=>[c,2,o=>({u:v=>v.getInt16(o,le),p:(v,h)=>v.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v=>v.getUint16(o,le),p:(v,H2)=>v.setUint16(o,H2,le)})],i:c=>[c,4,o=>({u:v=>v.getInt32(o,le),p:(v,i2)=>v.setInt32(o,i2,le)})],I:c=>[c,4,o=>({u:v=>v.getUint32(o,le),p:(v,I)=>v.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v=>v.getFloat32(o,le),p:(v,f)=>v.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v=>v.getFloat64(o,le),p:(v,d)=>v.setFloat64(o,d,le)})],s:c=>[1,c,o=>({u:v=>str(v,o,c),p:(v,s)=>rts(v,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v=>pst(v,o,c),p:(v,s)=>tsp(v,o,c,s.slice(0,c-1))})]});var errbuf=new RangeError("Structure larger than remaining buffer");var errval=new RangeError("Not enough values for structure");var _ByteParser=class extends ArrayManip{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i2=search(haystack);i2!==-1;i2=search(haystack,i2+skip)){indices.push(i2);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y2){return[y2&255,y2>>8&255]}static bytesToInt24(x0,x1,x2){let int24=(255&x0)<<16|(255&x1)<<8|255&x2;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x2){return x0*65536+x1*256+x2}static Uint24ToBytes(y2){return[y2&255,y2>>8&255,y2>>16&255]}static bytesToInt32(x0,x1,x2,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x2)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x2,x3){return x0*16777216+x1*65536+x2*256+x3}static Uint32ToBytes(y2){return[y2&255,y2>>8&255,y2>>16&255,y2>>24&255]}static get2sCompliment(val,nbits3){if(val>4294967296)return null;return val<<32-nbits3>>32-nbits3}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i2=0;i2<input.length;i2++){var c=input.charCodeAt(i2);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i2]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser.asUint8Array(patternBuffer);var M=pattern.length;if(M===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R=256;var rightmost_positions=new Int32Array(R);for(var c=0;c<R;c++){rightmost_positions[c]=-1}for(var j=0;j<M;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i2=start;i2<=lastIndex;i2+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i2+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i2}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk.exec(format);if(!m){throw new RangeError("Invalid format string")}const t2=lut("<"===m[1]),lu=(n,c)=>t2[c](n?parseInt(n,10):1);while(m=refmt.exec(format)){((r,s,f)=>{for(let i2=0;i2<r;++i2,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf}let v=new DataView(arrb,offs|0);return fns.map(f=>f.u(v))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval}if(arrb.byteLength<offs+size){throw errbuf}const v=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i2)=>f.p(v,values[i2]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser=_ByteParser;ByteParser.codes={"\\\\\\\\n":10,"\\\\\\\\r":13,"\\\\\\\\t":9,"\\\\\\\\s":32,"\\\\\\\\b":8,"\\\\\\\\f":12,"\\\\\\\\":92};var WebSerial=class extends ByteParser{constructor(){super(...arguments);this.streams={};this.createStream=options=>{let stream={_id:options._id?options._id:`stream${Math.floor(Math.random()*1e15)}`,info:options.port.getInfo(),running:false,...options};if(options.port?.readable){if(options.transforms){stream.reader=WebSerial.setStreamTransforms(options.port.readable,options.transforms).getReader()}else{stream.reader=options.port.readable.getReader()}}this.streams[stream._id]=stream;return stream}}getPorts(){return navigator.serial.getPorts()}requestPort(usbVendorId,usbProductId){let options={};if(usbVendorId){options.usbVendorId=usbVendorId}if(usbProductId){options.usbProductId=usbProductId}if(options.usbVendorId)return navigator.serial.requestPort({filters:[options]});else return navigator.serial.requestPort()}openPort(port,options){if(options)options=Object.assign({},options);if(options?.ondisconnect){port.ondisconnect=options.ondisconnect;delete options.ondisconnect}return port.open(options).then(()=>{if(options?.onconnect)options.onconnect(port)})}async readWithTimeout(port,timeout){const reader=port.readable.getReader();const timer=setTimeout(()=>{reader.releaseLock()},timeout);const result=await reader.read();clearTimeout(timer);reader.releaseLock();return result}async writePort(port,message){const writer=port.writable.getWriter();await writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}getSignals(port){return port.getSignals()}setSignals(port,signals){return port.setSignals(signals)}readStream(stream){if(stream.reader&&!stream.running){let reader=stream.reader;if(stream.buffering){if(typeof stream.buffering!=="object")stream.buffering={};if(!stream.buffering.buffer){stream.buffering.buffer=[]}if(!stream.buffering.searchBytes)stream.buffering.searchBytes=new Uint8Array([13,10])}let readLoop=()=>{if(stream.port.readable&&stream.running){reader.read().then(result=>{if(result.done)reader.releaseLock();else{if(stream.buffering){stream.buffering.buffer.push(...result.value);const needle=stream.buffering.searchBytes;const haystack=stream.buffering.buffer;const search=WebSerial.boyerMoore(needle);const skip=search.byteLength;let nextIndex=-1;let used=stream.buffering.lockIdx??0;for(var i2=search(haystack);i2!==-1;i2=search(haystack,i2+skip)){if(!stream.buffering.locked&&!("lockIdx"in stream.buffering))used=stream.buffering.lockIdx=i2;else{nextIndex=i2;if(nextIndex>=0){const len=nextIndex-used;if(!stream.buffering.locked){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(data);stream.buffering.locked=true}else if(len>0){const line=stream.buffering.buffer.splice(stream.buffering.lockIdx,len);const data=new Uint8Array(line.slice(stream.buffering.searchBytes.length));stream.ondata(new Uint8Array(data))}used=nextIndex}}}}else stream.ondata(result.value);setTimeout(()=>{readLoop()},stream.frequency)}}).catch(er=>{console.error(stream._id," Read error:",er);if(er.message.includes("overrun")||er.message.includes("framing")){delete stream.reader;this.reconnect(stream)}})}else if(!stream.running&&stream.port.readable){try{reader.releaseLock()}catch(er){console.error(er)}}};stream.running=true;readLoop();return stream}return void 0}writeStream(stream,message){if(typeof stream==="string")stream=this.streams[stream];if(stream.port.writable){let writer=stream.port.writable.getWriter();writer.write(WebSerial.toDataView(message));writer.releaseLock();return true}return void 0}closeStream(stream,onclose){if(typeof stream==="string")stream=this.streams[stream];stream.running=false;return new Promise((res,rej)=>{if(stream.settings.beforedisconnect){stream.settings.beforedisconnect(this,stream.port)}setTimeout(async()=>{if(stream.port.readable&&stream.reader){try{stream.reader.releaseLock()}catch(er){console.error(er)}if(stream.transforms)try{await stream.reader.cancel()}catch(err){console.error(err)}}try{await stream.port.close().then(()=>{if(onclose)onclose(this.streams[stream._id])});delete this.streams[stream._id];res(true)}catch(er){rej(er)}},300)})}reconnect(stream,options){if(typeof stream==="string")stream=this.streams[stream];return new Promise((res,rej)=>{if(typeof stream!=="object"){rej(void 0);return}let info=stream.port.getInfo();this.closeStream(stream._id).then(closed=>{setTimeout(()=>{this.getPorts().then(ports=>{for(let i2=0;i2<ports.length;i2++){if(ports[i2].getInfo().usbVendorId===info.usbVendorId&&ports[i2].getInfo().usbProductId===info.usbProductId){if(!options)options=stream;else options._id=stream._id;delete options.port;this.openPort(ports[i2],options.settings).then(()=>{const stream2=this.createStream({...options,port:ports[i2]});this.readStream(stream2);res(stream2)}).catch(rej)}}}).catch(rej)},100)})})}static setStreamTransforms(stream,transforms){let transform=[];Object.keys(transforms).forEach(t2=>{let opt=transforms[t2];if(opt instanceof TransformStream){transform.push(opt)}else{if(!opt.start)opt.start=function start(){};if(!opt.flush)opt.flush=function flush(){};let transformer=new TransformStream({start:opt.start,transform:opt.transform,flush:opt.flush},opt.writableStrategy,opt.readableStrategy);transform.push(transformer)}});let str2=stream;transform.forEach(transform2=>{str2=str2.pipeThrough(transform2)});return str2}};function ads131m08codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array(9),1:new Array(9),2:new Array(9),3:new Array(9),4:new Array(9),5:new Array(9),6:new Array(9),7:new Array(9),timestamp:Date.now()};for(let i2=0;i2<9;i2++){let j=i2*25;output[0][i2]=ByteParser.bytesToInt24(arr[j],arr[j+1],arr[j+2]);output[1][i2]=ByteParser.bytesToInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i2]=ByteParser.bytesToInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i2]=ByteParser.bytesToInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i2]=ByteParser.bytesToInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i2]=ByteParser.bytesToInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i2]=ByteParser.bytesToInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i2]=ByteParser.bytesToInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var decoder=new TextDecoder;function ads131m08_arduinocodec(data){const parsed=decoder.decode(data);let split;if(parsed.includes("|"))split=parsed.split("|");else if(split.includes(","))split=parsed.split(",");else split=parsed.split("	");return{"0":parseInt(split[0]),"1":parseInt(split[1]),"2":parseInt(split[2]),"3":parseInt(split[3]),"4":parseInt(split[4]),"5":parseInt(split[5]),"6":parseInt(split[6]),"7":parseInt(split[7]),timestamp:Date.now()}}var sps=250;var defaultChartSetting={nSec:10,sps,units:"mV"};var ads131m08ChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting)),"1":JSON.parse(JSON.stringify(defaultChartSetting)),"2":JSON.parse(JSON.stringify(defaultChartSetting)),"3":JSON.parse(JSON.stringify(defaultChartSetting)),"4":JSON.parse(JSON.stringify(defaultChartSetting)),"5":JSON.parse(JSON.stringify(defaultChartSetting)),"6":JSON.parse(JSON.stringify(defaultChartSetting)),"7":JSON.parse(JSON.stringify(defaultChartSetting))}};var gain=32;var nbits=24;var vref=1.2;var defaultsetting={sps,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref/(gain*(Math.pow(2,nbits)-1))};var ads131m08FilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting)),"1":JSON.parse(JSON.stringify(defaultsetting)),"2":JSON.parse(JSON.stringify(defaultsetting)),"3":JSON.parse(JSON.stringify(defaultsetting)),"4":JSON.parse(JSON.stringify(defaultsetting)),"5":JSON.parse(JSON.stringify(defaultsetting)),"6":JSON.parse(JSON.stringify(defaultsetting)),"7":JSON.parse(JSON.stringify(defaultsetting))};var accScale=.002/Math.pow(2,4);var getAcc=(arr,output,channels=8)=>{const accIdx=channels*3+1;const sum=(a,b)=>a+b;const accSum=arr.slice(accIdx).reduce(sum,0);if(accSum!==0){output.ax=accScale*ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output.ay=accScale*ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output.az=accScale*ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5])}};function cytoncodec(data){let arr;if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<8;i2++){let idx=1+3*i2;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);output.timestamp=Date.now();return output}function daisycytoncodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<8;i2++){let idx=1+3*i2;if(arr[0]%2===0)output[i2+7]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2]);else output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc(arr,output);return output}var sps2=250;var cytonSerialSettings={deviceType:"USB",deviceName:"cyton",baudRate:115200,codec:cytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var daisycytonSerialSettings={deviceType:"USB",deviceName:"cyton_daisy",baudRate:115200,codec:daisycytoncodec,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps2};var defaultChartSetting2={nSec:10,sps:sps2,units:"mV"};var defaultChartSetting22={nSec:10,sps:sps2};var cytonChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting2)),"1":JSON.parse(JSON.stringify(defaultChartSetting2)),"2":JSON.parse(JSON.stringify(defaultChartSetting2)),"3":JSON.parse(JSON.stringify(defaultChartSetting2)),"4":JSON.parse(JSON.stringify(defaultChartSetting2)),"5":JSON.parse(JSON.stringify(defaultChartSetting2)),"6":JSON.parse(JSON.stringify(defaultChartSetting2)),"7":JSON.parse(JSON.stringify(defaultChartSetting2)),"ax":JSON.parse(JSON.stringify(defaultChartSetting22)),"ay":JSON.parse(JSON.stringify(defaultChartSetting22)),"az":JSON.parse(JSON.stringify(defaultChartSetting22))},generateNewLines:true};var defaultsetting2={sps:sps2,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*4.5/(24*(Math.pow(2,23)-1))};var cytonFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting2)),"1":JSON.parse(JSON.stringify(defaultsetting2)),"2":JSON.parse(JSON.stringify(defaultsetting2)),"3":JSON.parse(JSON.stringify(defaultsetting2)),"4":JSON.parse(JSON.stringify(defaultsetting2)),"5":JSON.parse(JSON.stringify(defaultsetting2)),"6":JSON.parse(JSON.stringify(defaultsetting2)),"7":JSON.parse(JSON.stringify(defaultsetting2)),"8":JSON.parse(JSON.stringify(defaultsetting2)),"9":JSON.parse(JSON.stringify(defaultsetting2)),"10":JSON.parse(JSON.stringify(defaultsetting2)),"11":JSON.parse(JSON.stringify(defaultsetting2)),"12":JSON.parse(JSON.stringify(defaultsetting2)),"13":JSON.parse(JSON.stringify(defaultsetting2)),"14":JSON.parse(JSON.stringify(defaultsetting2)),"15":JSON.parse(JSON.stringify(defaultsetting2))};function freeeeg128codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<128;i2++){let idx=i2*3+1;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=385;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps3=250;var freeeeg128SerialSettings={deviceType:"USB",deviceName:"freeeeg128",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg128codec,sps:sps3,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg128ChartSettings={lines:{"ax":{nSec:10,sps:sps3},"ay":{nSec:10,sps:sps3},"az":{nSec:10,sps:sps3},"gx":{nSec:10,sps:sps3},"gy":{nSec:10,sps:sps3},"gz":{nSec:10,sps:sps3}}};var freeeeg128FilterSettings={};for(let i2=0;i2<128;i2++){freeeeg128ChartSettings.lines[i2]={sps:sps3,nSec:10,units:"mV"};freeeeg128FilterSettings[i2]={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,scalar:1e3*2.5/(32*(Math.pow(2,24)-1))}}function freeeeg32codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i2=0;i2<32;i2++){let idx=i2*3+1;output[i2]=ByteParser.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=97;output["ax"]=ByteParser.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps4=512;var freeeeg32SerialSettings={deviceType:"USB",deviceName:"freeeeg32",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg32_optical_SerialSettings={deviceType:"USB",deviceName:"freeeeg32_optical",baudRate:1e6,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec,sps:sps4,buffering:{searchBytes:new Uint8Array([192,160])}};var defaultChartSetting3={nSec:10,sps:sps4};var freeeeg32ChartSettings={lines:{"ax":JSON.parse(JSON.stringify(defaultChartSetting3)),"ay":JSON.parse(JSON.stringify(defaultChartSetting3)),"az":JSON.parse(JSON.stringify(defaultChartSetting3)),"gx":JSON.parse(JSON.stringify(defaultChartSetting3)),"gy":JSON.parse(JSON.stringify(defaultChartSetting3)),"gz":JSON.parse(JSON.stringify(defaultChartSetting3))}};var freeeeg32FilterSettings={};for(let i2=0;i2<32;i2++){freeeeg32ChartSettings.lines[i2]={sps:sps4,nSec:10,units:"mV"};freeeeg32FilterSettings[i2]={sps:sps4,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*2.5/(8*(Math.pow(2,24)-1))}}var textdecoder=new TextDecoder;function hegduinocodec(value){let output={timestamp:0,red:0,infrared:0,heg:0,ambient:0,temperature:0};let txt=textdecoder.decode(value);let line=txt.split("|");if(line.length===3){output.timestamp=Date.now();output.red=parseInt(line[0]);output.infrared=parseInt(line[1]);output.heg=parseFloat(line[2])}else if(line.length>=2){output.timestamp=Date.now();output.red=parseInt(line[1]);output.infrared=parseInt(line[2]);output.heg=parseFloat(line[3]);if(line[4])output.ambient=parseFloat(line[4]);if(line[5])output.temperature=parseFloat(line[5]);return output}else return txt}var sps5=40;var hegduinoSerialSettings={deviceType:"USB",deviceName:"hegduino",baudRate:115200,write:"t\\\\n",codec:hegduinocodec,sps:sps5};var hegduinoV1SerialSettings=Object.assign({},hegduinoSerialSettings);hegduinoV1SerialSettings.sps=19;var hegduinoBLESettings={deviceType:"BLE",deviceName:"hegduino",sps:sps5,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:hegduinocodec,sps:sps5}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};var hegduinoV1BLESettings=Object.assign({},hegduinoSerialSettings);hegduinoV1BLESettings.sps=19;function max3010xcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let pktCt=32;const output={"red":new Array(pktCt),"ir":new Array(pktCt),"max_dietemp":ByteParser.get2sCompliment(arr[193],8)+.0625*arr[194],"timestamp":Date.now()};let i2=0;while(i2<pktCt){let idx=i2*6;if(i2%2===0){output["ir"][i2]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["ir"][i2+1]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}else{output["red"][i2-1]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["red"][i2]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}i2++}return output}function mpu6050codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={"ax":new Array(20),"ay":new Array(20),"az":new Array(20),"gx":new Array(20),"gy":new Array(20),"gz":new Array(20),"mpu_dietemp":(ByteParser.bytesToInt16(arr[241],arr[242])+521)/340+35,timestamp:Date.now()};for(let i2=0;i2<20;i2++){let idx=i2*12;output.ax[i2]=ByteParser.bytesToInt16(arr[idx+1],arr[idx+2]);output.ay[i2]=ByteParser.bytesToInt16(arr[idx+3],arr[idx+4]);output.az[i2]=ByteParser.bytesToInt16(arr[idx+5],arr[idx+6]);output.gx[i2]=ByteParser.bytesToInt16(arr[idx+7],arr[idx+8]);output.gy[i2]=ByteParser.bytesToInt16(arr[idx+9],arr[idx+10]);output.gz[i2]=ByteParser.bytesToInt16(arr[idx+11],arr[idx+12])}return output}function cognixionONE_EEG_codec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array,1:new Array,2:new Array,3:new Array,4:new Array,5:new Array,6:new Array,7:new Array,timestamp:Date.now()};for(let i2=0;i2<7;i2++){let j=i2*26+1;if(!arr[j+23])break;output[0][i2]=ByteParser.bytesToUInt24(arr[j],arr[j+1],arr[j+2]);output[1][i2]=ByteParser.bytesToUInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i2]=ByteParser.bytesToUInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i2]=ByteParser.bytesToUInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i2]=ByteParser.bytesToUInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i2]=ByteParser.bytesToUInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i2]=ByteParser.bytesToUInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i2]=ByteParser.bytesToUInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var sps6=250;var cognixionONEBLESettings={deviceType:"BLE",deviceName:"cognixionONE",services:{["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{notify:true,notifyCallback:void 0,codec:cognixionONE_EEG_codec,sps:sps6}},["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{write:void 0},["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{read:true}}},sps:sps6};var cognixionONESerialSettings=Object.assign({},cytonSerialSettings);cognixionONESerialSettings.sps=sps6;cognixionONESerialSettings.deviceName="cognixionONE";var defaultChartSetting4={nSec:10,sps:sps6,units:"mV"};var cognixionONEChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting4)),"1":JSON.parse(JSON.stringify(defaultChartSetting4)),"2":JSON.parse(JSON.stringify(defaultChartSetting4)),"3":JSON.parse(JSON.stringify(defaultChartSetting4)),"4":JSON.parse(JSON.stringify(defaultChartSetting4)),"5":JSON.parse(JSON.stringify(defaultChartSetting4)),"6":JSON.parse(JSON.stringify(defaultChartSetting4)),"7":JSON.parse(JSON.stringify(defaultChartSetting4))}};var PeanutCodes={2:{type:"POOR_SIGNAL",format:"<B",byteLength:1},144:{type:"heg",format:"<i",byteLength:4},145:{type:"filteredHEG",format:"<i",byteLength:4},147:{type:"rawdata4",format:"<iiii",byteLength:4*4},148:{type:"rawdata6",format:"<iiiiii",byteLength:4*6},160:{type:"sampleNumber",format:"<i",byteLength:4},176:{type:"debug0",format:"<i",byteLength:4},177:{type:"debug1",format:"<i",byteLength:4},178:{type:"debug2",format:"<i",byteLength:4},179:{type:"debug3",format:"<i",byteLength:4},180:{type:"debug4",format:"<iiiiii",byteLength:4*6},181:{type:"debug4",format:"<iiiiii",byteLength:4*6},182:{type:"rawdata27",format:"<B"+"i".repeat(26),byteLength:1+4*26}};function peanutcodec(data){let result={};let i2=0;while(i2<data.length){if(PeanutCodes[data[i2]]&&i2+1+PeanutCodes[data[i2]].byteLength<=data.length){let slice=data.slice(i2+1,i2+1+PeanutCodes[data[i2]].byteLength).buffer;let unpacked=ByteParser.struct(PeanutCodes[data[i2]].format).unpack(slice);let code=PeanutCodes[data[i2]].type;if(code==="unfilteredHEG"||code==="heg")unpacked=unpacked[0]/256;else if(code==="POOR_SIGNAL"||code==="sampleNumber"||code==="debug0"||code==="debug1"||code==="debug2"||code==="debug3")unpacked=unpacked[0];if(!result[PeanutCodes[data[i2]].type]){if(Array.isArray(unpacked))result[PeanutCodes[data[i2]].type]=unpacked;else result[PeanutCodes[data[i2]].type]=[unpacked]}else{if(Array.isArray(unpacked))result[PeanutCodes[data[i2]].type].push(...unpacked);else result[PeanutCodes[data[i2]].type].push(unpacked)}i2+=PeanutCodes[data[i2]].byteLength+1}else i2++}result.timestamp=Date.now();return result}var peanutSerialSettings={deviceType:"USB",deviceName:"peanut",baudRate:38400,bufferSize:400,write:"protocol 3\\\\n",buffering:{searchBytes:new Uint8Array([170,170])},codec:peanutcodec,sps:10.101};var sealevel_hpa=1013.25;var bme280codec=data=>{let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={timestamp:Date.now(),temp:[],pressure:[],altitude:[]};let mode=0;if(arr[0].length===74)mode=1;if(!mode){for(let j=0;j<3;j++){let i2=j*16+2;let tint=ByteParser.bytesToInt32(arr[3+i2],arr[2+i2],arr[1+i2],arr[0+i2]);let tfrac=ByteParser.bytesToInt32(arr[7+i2],arr[6+i2],arr[5+i2],arr[4+i2]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser.bytesToInt32(arr[11+i2],arr[10+i2],arr[9+i2],arr[8+i2]);let pfrac=ByteParser.bytesToInt32(arr[15+i2],arr[14+i2],arr[13+i2],arr[12+i2]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}else{output.humidity=[];for(let j=0;j<3;j++){let i2=j*24+2;let tint=ByteParser.bytesToInt32(arr[3+i2],arr[2+i2],arr[1+i2],arr[0+i2]);let tfrac=ByteParser.bytesToInt32(arr[7+i2],arr[6+i2],arr[5+i2],arr[4+i2]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser.bytesToInt32(arr[11+i2],arr[10+i2],arr[9+i2],arr[8+i2]);let pfrac=ByteParser.bytesToInt32(arr[15+i2],arr[14+i2],arr[13+i2],arr[12+i2]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));let hint=ByteParser.bytesToInt32(arr[19+i2],arr[18+i2],arr[17+i2],arr[16+i2]);let hfrac=ByteParser.bytesToInt32(arr[23+i2],arr[22+i2],arr[21+i2],arr[20+i2]);output.humidity.push(hint+hfrac/Math.pow(10,Math.ceil(Math.log10(hfrac))));output.altitude.push(altitude(output.pressure[j],output.temp[j]))}}return output};function altitude(pressure,temperature){return 44330*(1-Math.pow(pressure/sealevel_hpa,.1903))}function nrf5x_usbcodec(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={};if(arr[0]===2){Object.assign(output,ads131m08codec(arr.subarray(2)))}else if(arr[0]===3){let result=ads131m08codec(arr.subarray(2));Object.keys(result).forEach((key,i2)=>{output[i2+8]=result[key]})}else if(arr[0]===4){Object.assign(output,mpu6050codec(arr.subarray(2)))}else if(arr[0]===5){Object.assign(output,max3010xcodec(arr.subarray(2)))}else if(arr[0]===6){Object.assign(output,bme280codec(arr.subarray(2)))}else{Object.assign(output,ads131m08codec(arr))}return output}var nrf5xSerialSettings={deviceType:"USB",deviceName:"nrf5x",baudRate:115200,buffering:{searchBytes:new Uint8Array([240,240])},codec:nrf5x_usbcodec,sps:250};var nrf5xBLESettings={deviceType:"BLE",deviceName:"nrf5x",sps:250,services:{"0000cafe-b0ba-8bad-f00d-deadbeef0000":{"0001cafe-b0ba-8bad-f00d-deadbeef0000":{write:void 0},"0002cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0003cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:max3010xcodec,sps:100},"0004cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:mpu6050codec,sps:100},"0005cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec,sps:250},"0006cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:bme280codec,sps:3.33}}}};var defaultChartSetting5={nSec:10,sps:250,units:"mV"};var nrf5x_usbChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting5)),"1":JSON.parse(JSON.stringify(defaultChartSetting5)),"2":JSON.parse(JSON.stringify(defaultChartSetting5)),"3":JSON.parse(JSON.stringify(defaultChartSetting5)),"4":JSON.parse(JSON.stringify(defaultChartSetting5)),"5":JSON.parse(JSON.stringify(defaultChartSetting5)),"6":JSON.parse(JSON.stringify(defaultChartSetting5)),"7":JSON.parse(JSON.stringify(defaultChartSetting5))},generateNewLines:true,cleanGeneration:false};var gain2=32;var nbits2=24;var vref2=1.2;var defaultsetting3={sps:250,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref2/(gain2*(Math.pow(2,nbits2)-1))};var nrf5x_usbFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting3)),"1":JSON.parse(JSON.stringify(defaultsetting3)),"2":JSON.parse(JSON.stringify(defaultsetting3)),"3":JSON.parse(JSON.stringify(defaultsetting3)),"4":JSON.parse(JSON.stringify(defaultsetting3)),"5":JSON.parse(JSON.stringify(defaultsetting3)),"6":JSON.parse(JSON.stringify(defaultsetting3)),"7":JSON.parse(JSON.stringify(defaultsetting3)),"8":JSON.parse(JSON.stringify(defaultsetting3)),"9":JSON.parse(JSON.stringify(defaultsetting3)),"10":JSON.parse(JSON.stringify(defaultsetting3)),"11":JSON.parse(JSON.stringify(defaultsetting3)),"12":JSON.parse(JSON.stringify(defaultsetting3)),"13":JSON.parse(JSON.stringify(defaultsetting3)),"14":JSON.parse(JSON.stringify(defaultsetting3)),"15":JSON.parse(JSON.stringify(defaultsetting3))};var textdecoder2=new TextDecoder;function statechangercodec(value){let output={timestamp:0,left_red:0,left_infrared:0,left_heg:0,center_red:0,center_infrared:0,center_heg:0,right_red:0,right_infrared:0,right_heg:0};let txt=textdecoder2.decode(value);let line=txt.split("|");if(line.length>=5){output.timestamp=Date.now();output.left_red=parseInt(line[1]);output.left_infrared=parseInt(line[2]);output.left_heg=parseFloat(line[3]);output.center_red=parseInt(line[4]);output.center_infrared=parseInt(line[5]);output.center_heg=parseFloat(line[6]);output.right_red=parseInt(line[7]);output.right_infrared=parseInt(line[8]);output.right_heg=parseFloat(line[9]);return output}else return txt}var statechangerSerialSettings={deviceType:"USB",deviceName:"statechanger",baudRate:115200,codec:statechangercodec,sps:20};var statechangerBLESettings={deviceType:"BLE",deviceName:"statechanger",sps:20,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:statechangercodec}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};function blueberrycodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.red/(.5*(output.ir+output.ir2));return output}var sps7=40;var blueberryBLESettings={deviceType:"BLE",deviceName:"blueberry",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"3f3e3d3c-3b3a-3938-3736-353433323130":{notify:true,notifyCallback:void 0,codec:blueberrycodec,sps:sps7}}},sps:sps7};function blueberryshortcodec(value){let output={sred:value.getInt32(2),sir:value.getInt32(6),sir2:value.getInt32(10),timestamp:Date.now()};output.sheg=output.sred/(.5*(output.sir+output.sir2));return output}function blueberrylongcodec(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.sred/(.5*(output.ir+output.ir2));return output}var sps8=40;var blueberry2BLESettings={deviceType:"BLE",deviceName:"blueberry2",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"4f4e4d4c-4b6a-6968-6766-656463426160":{notify:true,notifyCallback:void 0,codec:blueberrylongcodec,sps:sps8},"4f4e4d4c-4b5a-5958-5756-555453425150":{notify:true,notifyCallback:void 0,codec:blueberryshortcodec,sps:sps8}}},sps:sps8};var defaultsetting1={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var ganglionFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting1)),"1":JSON.parse(JSON.stringify(defaultsetting1)),"2":JSON.parse(JSON.stringify(defaultsetting1)),"3":JSON.parse(JSON.stringify(defaultsetting1))};var defaultChartSetting6={nSec:10,sps:250,units:"mV"};var ganglionChartSettings={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting6)),"1":JSON.parse(JSON.stringify(defaultChartSetting6)),"2":JSON.parse(JSON.stringify(defaultChartSetting6)),"3":JSON.parse(JSON.stringify(defaultChartSetting6)),"ax":{nSec:10,sps:250,units:"mg"},"ay":{nSec:10,sps:250,units:"mg"},"az":{nSec:10,sps:250,units:"mg"}},generateNewLines:true};var defaultsetting4={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var museFilterSettings={"0":JSON.parse(JSON.stringify(defaultsetting4)),"1":JSON.parse(JSON.stringify(defaultsetting4)),"2":JSON.parse(JSON.stringify(defaultsetting4)),"3":JSON.parse(JSON.stringify(defaultsetting4)),"4":JSON.parse(JSON.stringify(defaultsetting4))};function hrcodec(data){return{hr:data.getInt8(1),timestamp:Date.now()}}var heartRateBLESettings={deviceType:"BLE",deviceName:"heartrate",services:{"heart_rate":{"heart_rate_measurement":{notify:true,notifyCallback:void 0,codec:hrcodec}}}};var simulatorSettings={sps:250,deviceType:"CUSTOM",deviceName:"simulator",simulate:{"0":{sps:250,freq:1,amplitude:1,offset:0},"1":{sps:250,freq:10,amplitude:1,offset:0},"2":{sps:250,freq:100,amplitude:.5,offset:.5},"3":{sps:250,freq:25,amplitude:1,offset:0}},connect:(settings={})=>{return new Promise(async(res,rej)=>{let _id=`simulated${Math.floor(Math.random()*1e15)}`;let info={_id,settings:Object.assign(Object.assign({},simulatorSettings),settings)};info.settings.looping=true;let loopTime=50;let lastTime=Date.now();let loop2=()=>{if(info.settings.looping){let newData={};let now=Date.now();let frame=now-lastTime;for(const key in info.settings.simulate){let newPoints=Math.floor(info.settings.simulate[key].sps*frame/1e3);newData[key]=new Array(newPoints).fill(0);newData[key]=newData[key].map((v,i2)=>{return Math.sin(2*Math.PI*info.settings.simulate[key].freq*.001*(lastTime+frame*(i2+1)/newPoints))*info.settings.simulate[key].amplitude+info.settings.simulate[key].offset})}lastTime=now;newData.timestamp=lastTime;info.settings.ondata(newData);setTimeout(()=>{loop2()},loopTime)}};loop2();if(info.settings.onconnect)info.settings.onconnect(info);res(info)})},codec:reading=>{return reading},disconnect:info=>{console.log(info);info.settings.looping=false;info.settings.ondisconnect(info)},onconnect:info=>{console.log("simulator connected!",info)},ondisconnect:info=>{console.log("simulator disconnected!",info)},ondata:data=>{}};var Devices={BLE:{"nrf5x":nrf5xBLESettings,"hegduino":hegduinoBLESettings,"hegduinoV1":hegduinoV1BLESettings,"cognixionONE":cognixionONEBLESettings,"statechanger":statechangerBLESettings,"blueberry":blueberryBLESettings,"blueberry2":blueberry2BLESettings,"heart_rate":heartRateBLESettings},USB:{"nrf5x":nrf5xSerialSettings,"freeEEG32":freeeeg32SerialSettings,"freeEEG32_optical":freeeeg32_optical_SerialSettings,"freeEEG128":freeeeg128SerialSettings,"hegduino":hegduinoSerialSettings,"hegduinoV1":hegduinoV1SerialSettings,"cyton":cytonSerialSettings,"cyton_daisy":daisycytonSerialSettings,"peanut":peanutSerialSettings,"statechanger":statechangerSerialSettings,"cognixionONE":cytonSerialSettings},BLE_CUSTOM:{},USB_CUSTOM:{},CUSTOM:{"simulator":simulatorSettings}};var textdecoder3=new TextDecoder;var decoders={"raw":data=>{if(data?.buffer)return Array.from(new Uint8Array(data));else return data},"utf8":data=>{return textdecoder3.decode(data)},"console-f12":data=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(data);return data},"debug":(data,debugmessage)=>{if(data?.buffer)data=Array.from(new Uint8Array(data));console.log(debugmessage,data);return data},"ads131m08":ads131m08codec,"arduino_ads131m08":ads131m08_arduinocodec,"max3010x":max3010xcodec,"mpu6050":mpu6050codec,"bme280":bme280codec,"freeeeg32":freeeeg32codec,"freeeeg128":freeeeg128codec,"cyton":cytoncodec,"cognixionONE_BLE":cognixionONE_EEG_codec,"hegduino":hegduinocodec,"nrf5x":nrf5x_usbcodec,"peanut":peanutcodec,"statechanger":statechangercodec,"blueberry":blueberrycodec,"heart_rate":hrcodec};var BiquadChannelFilterer=class{constructor(options={sps:512,useSMA4:false,useNotch50:true,useNotch60:true,useLowpass:false,lowpassHz:100,useBandpass:false,bandpassLower:3,bandpassUpper:45,useDCBlock:true,DCBresonance:.995,trimOutliers:false,outlierTolerance:.2,useScaling:false,scalar:1}){this.idx=0;this.sps=options.sps;this.bandpassLower=options.bandpassLower?options.bandpassLower:3;this.bandpassUpper=options.bandpassUpper?options.bandpassUpper:45;this.useSMA4=options.useSMA4;this.last4=[];this.useNotch50=options.useNotch50;this.useNotch60=options.useNotch60;this.useLowpass=options.useLowpass;this.lowpassHz=options.lowpassHz?options.lowpassHz:100;this.useBandpass=options.useBandpass;this.useDCBlock=options.useDCBlock;this.DCBresonance=options.DCBresonance?options.DCBresonance:.995;this.useScaling=options.useScaling;this.scalar=options.scalar;this.trimOutliers=options.trimOutliers;this.outlierTolerance=options.outlierTolerance;let sps9=this.sps;this.notch50=[makeNotchFilter(50,sps9,2),makeNotchFilter(100,sps9,2)];this.notch60=[makeNotchFilter(60,sps9,2),makeNotchFilter(120,sps9,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1)];this.dcb=new DCBlocker(options.DCBresonance?options.DCBresonance:.995)}reset(sps9=this.sps){this.notch50=[makeNotchFilter(50,sps9,2),makeNotchFilter(100,sps9,2)];this.notch60=[makeNotchFilter(60,sps9,2),makeNotchFilter(120,sps9,2)];this.lp1=[new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9),new Biquad("lowpass",this.lowpassHz,sps9)];this.bp1=[makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1),makeBandpassFilter(this.bandpassLower,this.bandpassUpper,sps9,1)];this.dcb=new DCBlocker(this.DCBresonance)}setBandpass(bandpassLower=this.bandpassLower,bandpassUpper=this.bandpassUpper,sps9=this.sps){this.bandpassLower=bandpassLower;this.bandpassUpper=bandpassUpper;this.bp1=[makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9),makeBandpassFilter(bandpassLower,bandpassUpper,sps9)]}apply(latestData=0){let out=latestData;if(this.useScaling===true){out*=this.scalar}if(this.filtered&&this.trimOutliers&&this.outlierTolerance){if(Math.abs(out-this.filtered)>this.outlierTolerance){out=this.filtered}}if(this.useDCBlock===true){out=this.dcb.applyFilter(out)}if(this.useSMA4===true){if(this.last4.length<4){this.last4.push(out)}else{out=this.last4.reduce((accumulator,currentValue)=>accumulator+currentValue)/this.last4.length;this.last4.shift();this.last4.push(out)}}if(this.useNotch50===true){this.notch50.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useNotch60===true){this.notch60.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useLowpass===true){this.lp1.forEach((f,i2)=>{out=f.applyFilter(out)})}if(this.useBandpass===true){this.bp1.forEach((f,i2)=>{out=f.applyFilter(out)})}this.filtered=out;this.idx++;return out}};var Biquad=class{constructor(type,freq,sps9,Q=1/Math.sqrt(2),dbGain=0){this.a0=0;this.a1=0;this.a2=0;this.b0=0;this.b1=0;this.b2=0;this.x1=0;this.x2=0;this.y1=0;this.y2=0;let types=["lowpass","highpass","bandpass","notch","peak","lowshelf","highshelf"];if(types.indexOf(type)<0){console.error("Valid types: \\\'lowpass\\\',\\\'highpass\\\',\\\'bandpass\\\',\\\'notch\\\',\\\'peak\\\',\\\'lowshelf\\\',\\\'highshelf\\\'");return}this.type=type;this.freq=freq;this.sps=sps9;this.Q=Q;this.dbGain=dbGain;let A2=Math.pow(10,dbGain/40);let omega=2*Math.PI*freq/sps9;let sn=Math.sin(omega);let cs=Math.cos(omega);let alpha=sn/(2*Q);let beta=Math.sqrt(A2+A2);this[type](A2,sn,cs,alpha,beta);this.b0/=this.a0;this.b1/=this.a0;this.b2/=this.a0;this.a1/=this.a0;this.a2/=this.a0}lowpass(A2,sn,cs,alpha,beta){this.b0=(1-cs)*.5;this.b1=1-cs;this.b2=(1-cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}highpass(A2,sn,cs,alpha,beta){this.b0=(1+cs)*.5;this.b1=-(1+cs);this.b2=(1+cs)*.5;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}bandpass(A2,sn,cs,alpha,beta){this.b0=alpha;this.b1=0;this.b2=-alpha;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}notch(A2,sn,cs,alpha,beta){this.b0=1;this.b1=-2*cs;this.b2=1;this.a0=1+alpha;this.a1=-2*cs;this.a2=1-alpha}peak(A2,sn,cs,alpha,beta){this.b0=1+alpha*A2;this.b1=-2*cs;this.b2=1-alpha*A2;this.a0=1+alpha/A2;this.a1=-2*cs;this.a2=1-alpha/A2}lowshelf(A2,sn,cs,alpha,beta){this.b0=A2*(A2+1-(A2-1)*cs+beta*sn);this.b1=2*A2*(A2-1-(A2+1)*cs);this.b2=A2*(A2+1-(A2-1)*cs-beta*sn);this.a0=A2+1+(A2+1)*cs+beta*sn;this.a1=2*(A2-1+(A2+1)*cs);this.a2=A2+1+(A2-1)*cs-beta*sn}highshelf(A2,sn,cs,alpha,beta){this.b0=A2*(A2+1+(A2-1)*cs+beta*sn);this.b1=2*A2*(A2-1+(A2+1)*cs);this.b2=A2*(A2+1-(A2-1)*cs-beta*sn);this.a0=A2+1-(A2+1)*cs-beta*sn;this.a1=2*(A2-1-(A2+1)*cs);this.a2=A2+1-(A2-1)*cs-beta*sn}applyFilter(signal_step){let y2=this.b0*signal_step+this.b1*this.x1+this.b2*this.x2-this.a1*this.y1-this.a2*this.y2;this.x2=this.x1;this.x1=signal_step;this.y2=this.y1;this.y1=y2;return y2}zResult(freq){try{let phi=Math.pow(Math.sin(Math.PI*freq*2/(2*this.sps)),2);let result=(Math.pow(this.b0+this.b1+this.b2,2)-4*(this.b0*this.b1+4*this.b0*this.b2+this.b1*this.b2)*phi+16*this.b0*this.b2*phi*phi)/(Math.pow(1+this.a1+this.a2,2)-4*(this.a1+4*this.a2+this.a1*this.a2)*phi+16*this.a2*phi*phi);return result}catch(err){return-200}}static calcCenterFrequency(freqStart,freqEnd){return(freqStart+freqEnd)/2}static calcBandwidth(freqStart,freqEnd){return freqEnd-this.calcCenterFrequency(freqStart,freqEnd)}static calcBandpassQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*Math.sqrt((frequency-bandwidth)*(frequency+bandwidth))/(2*bandwidth);return Q}static calcNotchQ(frequency,bandwidth,resonance=Math.pow(10,Math.floor(Math.log10(frequency)))){let Q=resonance*frequency*bandwidth/Math.sqrt((frequency-bandwidth)*(frequency+bandwidth));return Q}};var DCBlocker=class{constructor(r=.995){this.r=r;this.y1=this.y2=this.x1=this.x2=0}applyFilter(signal_step){this.x2=this.x1;this.x1=signal_step;let y2=this.x1-this.x2+this.r*this.y1;this.y2=this.y1;this.y1=y2;return y2}};var makeNotchFilter=(frequency,sps9,bandwidth)=>{return new Biquad("notch",frequency,sps9,Biquad.calcNotchQ(frequency,bandwidth),0)};var makeBandpassFilter=(freqStart,freqEnd,sps9,resonance=Math.pow(10,Math.floor(Math.log10(Biquad.calcCenterFrequency(freqStart,freqEnd)))))=>{return new Biquad("bandpass",Biquad.calcCenterFrequency(freqStart,freqEnd),sps9,Biquad.calcBandpassQ(Biquad.calcCenterFrequency(freqStart,freqEnd),Biquad.calcBandwidth(freqStart,freqEnd),resonance),0)};function parseFunctionFromText2(method=""){let getFunctionBody=methodString=>{return methodString.replace(/^\\\\W*(function[^{]+\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>[^{]*\\\\{([\\\\s\\\\S]*)\\\\}|[^=]+=>(.+))/i,"$2$3$4")};let getFunctionHead=methodString=>{let startindex=methodString.indexOf("=>")+1;if(startindex<=0){startindex=methodString.indexOf("){")}if(startindex<=0){startindex=methodString.indexOf(") {")}return methodString.slice(0,methodString.indexOf("{",startindex)+1)};let newFuncHead=getFunctionHead(method);let newFuncBody=getFunctionBody(method);let newFunc;if(newFuncHead.includes("function")){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody)}else{if(newFuncHead.substring(0,6)===newFuncBody.substring(0,6)){let varName=newFuncHead.split("(")[1].split(")")[0];newFunc=new Function(varName,newFuncBody.substring(newFuncBody.indexOf("{")+1,newFuncBody.length-1))}else{try{newFunc=(0,eval)(method)}catch{}}}return newFunc}var stringifyWithCircularRefs2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx--}}}}function checkCircular(key,value){if(value!=null){if(typeof value==="object"){if(key){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}}}return value}return function stringifyWithCircularRefs3(obj,space){try{parents.push(obj);return JSON.stringify(obj,checkCircular,space)}finally{clear()}}}();if(JSON.stringifyWithCircularRefs===void 0){JSON.stringifyWithCircularRefs=stringifyWithCircularRefs2}var stringifyFast2=function(){const refs=new Map;const parents=[];const path=["this"];function clear(){refs.clear();parents.length=0;path.length=1}function updateParents(key,value){var idx=parents.length-1;if(parents[idx]){var prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value||idx===0){path.push(key);parents.push(value.pushed)}else{while(idx-->=0){prev=parents[idx];if(typeof prev==="object"){if(prev[key]===value){idx+=2;parents.length=idx;path.length=idx;--idx;parents[idx]=value;path[idx]=key;break}}idx++}}}}}function checkValues(key,value){let val;if(value!=null){if(typeof value==="object"){let c=value.constructor.name;if(key&&c==="Object"){updateParents(key,value)}let other=refs.get(value);if(other){return"[Circular Reference]"+other}else{refs.set(value,path.join("."))}if(c==="Array"){if(value.length>20){val=value.slice(value.length-20)}else val=value}else if(c.includes("Set")){val=Array.from(value)}else if(c!=="Object"&&c!=="Number"&&c!=="String"&&c!=="Boolean"){val="instanceof_"+c}else if(c==="Object"){let obj={};for(const prop in value){if(value[prop]==null){obj[prop]=value[prop]}else if(Array.isArray(value[prop])){if(value[prop].length>20)obj[prop]=value[prop].slice(value[prop].length-20);else obj[prop]=value[prop]}else if(value[prop].constructor.name==="Object"){obj[prop]={};for(const p in value[prop]){if(Array.isArray(value[prop][p])){if(value[prop][p].length>20)obj[prop][p]=value[prop][p].slice(value[prop][p].length-20);else obj[prop][p]=value[prop][p]}else{if(value[prop][p]!=null){let con=value[prop][p].constructor.name;if(con.includes("Set")){obj[prop][p]=Array.from(value[prop][p])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop][p]="instanceof_"+con}else{obj[prop][p]=value[prop][p]}}else{obj[prop][p]=value[prop][p]}}}}else{let con=value[prop].constructor.name;if(con.includes("Set")){obj[prop]=Array.from(value[prop])}else if(con!=="Number"&&con!=="String"&&con!=="Boolean"){obj[prop]="instanceof_"+con}else{obj[prop]=value[prop]}}}val=obj}else{val=value}}else{val=value}}return val}return function stringifyFast3(obj,space){parents.push(obj);let res=JSON.stringify(obj,checkValues,space);clear();return res}}();if(JSON.stringifyFast===void 0){JSON.stringifyFast=stringifyFast2}function loadStreamWorkerGlobals(){globalThis.Devices=Devices;globalThis.WebSerial=WebSerial;globalThis.decoders=decoders;globalThis.decoder="raw";globalThis.ByteParser=ByteParser;globalThis.filtering=true;globalThis.filters={};globalThis.BiquadChannelFilterer=BiquadChannelFilterer;globalThis.ArrayManip=ArrayManip}if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){loadStreamWorkerGlobals()}var streamWorkerRoutes={"transferDevice":function transferDevice(device,worker){let cpy=Object.assign({},device);for(const key in cpy){if(typeof cpy[key]==="function")cpy[key]=cpy[key].toString()}worker.send({route:"receiveDevice",args:cpy})},"receiveDevice":function receiveDevice(device){for(const key in device){if(typeof device[key]==="string"){let fn=parseFunctionFromText2(device[key]);if(typeof fn==="function"){device[key]=fn}}}if(!globalThis.Devices[device.deviceType])globalThis.Devices[device.deviceType]={};globalThis.Devices[device.deviceType][device.deviceName]=device},"receiveDecoder":function receiveDecoder(decoder2,decoderName){globalThis.decoders[decoderName]=(0,eval)("("+decoder2+")")},"receiveCodec":function receiveDeviceCodec(decoder2,deviceType,device,service,characteristic){let codec=parseFunctionFromText2(decoder2);if(codec){if(deviceType==="BLE"&&service&&characteristic){if(globalThis.Devices[deviceType][device]){if(globalThis.Devices[deviceType][device][service]){if(globalThis.Devices[deviceType][device][characteristic]){globalThis.Devices[deviceType][device][characteristic].codec=codec}else{globalThis.Devices[deviceType][device][characteristic]={codec}}}else{globalThis.Devices[deviceType][device]={[characteristic]:{codec}}}}}else if(globalThis.Devices[deviceType][device]?.codec){if(globalThis.Devices[deviceType][device])globalThis.Devices[deviceType][device].codec=codec;else{globalThis.Devices[deviceType][device]={codec}}}}},"decode":function decode(data){return globalThis.decoder(data)},"decodeAndParse":function decodeAndParse(data){let decoded=this.__node.graph.run("decode",data);if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}}}}return parsed}}return decoded},"setActiveDecoder":function setActiveDecoder(deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device]?.codec;else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)globalThis.decoder=globalThis.Devices[deviceType][device][service][characteristic].codec;return true},"decodeDevice":function decodeDevice(data,deviceType,device,service,characteristic){if(globalThis.Devices[deviceType][device]?.codec)return globalThis.Devices[deviceType][device].codec(data);else if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][device]?.[service]?.[characteristic]?.codec)return globalThis.Devices[deviceType][device][service][characteristic].codec(data)},"decodeAndParseDevice":function decodeAndParseDevice(data,deviceType,deviceName,service,characteristic){let decoded;if(deviceType==="BLE"&&service&&characteristic&&globalThis.Devices[deviceType][deviceName]?.services[service]?.[characteristic]?.codec)decoded=globalThis.Devices[deviceType][deviceName].services[service][characteristic].codec(data);else if(globalThis.Devices[deviceType][deviceName]?.codec)decoded=globalThis.Devices[deviceType][deviceName].codec(data);else decoded=data;if(decoded){let parsed=globalThis.ArrayManip.reformatData(decoded);if(parsed){if(globalThis.filtering){for(const prop in parsed){if(globalThis.filters[prop]){let filter=globalThis.filters[prop];if(Array.isArray(parsed[prop])){parsed[prop]=parsed[prop].map(v=>filter.apply(v))}else if(parsed[prop]?.values){parsed[prop].values=parsed[prop].values.map(v=>filter.apply(v))}else if(typeof parsed[prop]==="number"){parsed[prop]=filter.apply(parsed[prop])}}}}return parsed}}return decoded},"toggleAnim":function toggleAnim(){globalThis.runningAnim=!globalThis.runningAnim;return globalThis.runningAnim},"setFilters":function setFilters(filters,clearFilters=false){if(!globalThis.filters||clearFilters)globalThis.filters={};for(const key in filters){globalThis.filters[key]=new BiquadChannelFilterer(filters[key])}return true},"getFilterSettings":function getFilterSettings(){if(globalThis.filters){let filters={};for(const key in globalThis.filters){filters[key]={sps:globalThis.filters[key].sps,useScaling:globalThis.filters[key].useScaling,scalar:globalThis.filters[key].scalar,useNotch50:globalThis.filters[key].useNotch50,useNotch60:globalThis.filters[key].useNotch60,useDCBlock:globalThis.filters[key].useDCBlock,useLowpass:globalThis.filters[key].useLowpass,lowpassHz:globalThis.filters[key].lowpassHz,useBandpass:globalThis.filters[key].useBandpass,bandpassLower:globalThis.filters[key].bandpassLower,bandpassUpper:globalThis.filters[key].bandpassUpper}}return filters}return void 0},"setupSerial":function setupSerial(){globalThis.Serial=new globalThis.WebSerial;globalThis.decoder="raw";console.log("worker: Setting up Serial",globalThis.Serial);return true},"openPort":function openPort(settings){const WorkerService2=this.__node.graph;if(!globalThis.Serial)WorkerService2.run("setupSerial");return new Promise((res,rej)=>{globalThis.Serial.getPorts().then(ports=>{const Serial=globalThis.Serial;let port=ports.find(port2=>{return port2.getInfo().usbVendorId===settings.usbVendorId&&port2.getInfo().usbProductId===settings.usbProductId});if(port){let options=Object.assign({},settings);if(typeof settings.pipeTo==="object"&&settings.pipeTo.extraArgs&&globalThis.Devices?.[settings.pipeTo.extraArgs[0]]?.[settings.pipeTo.extraArgs[1]]){options.onconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].onconnect;options.ondisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].ondisconnect;options.beforedisconnect=globalThis.Devices[settings.pipeTo.extraArgs[0]][settings.pipeTo.extraArgs[1]].beforedisconnect}Serial.openPort(port,options).then(()=>{const stream=Serial.createStream({port,settings:options,frequency:settings.frequency?settings.frequency:10,buffering:settings.buffering,ondata:value=>{if(stream.settings.pipeTo){if(typeof stream.settings.pipeTo==="string")WorkerService2.transmit(value,stream.settings.pipeTo,[value.buffer]);else if(stream.settings.pipeTo?.route){let args=value;if(stream.settings.pipeTo.extraArgs)args=[value,...stream.settings.pipeTo.extraArgs];WorkerService2.transmit({route:stream.settings.pipeTo.route,args},stream.settings.pipeTo._id,[value.buffer])}}else{WorkerService2.transmit(value,void 0,[value.buffer])}}});Serial.readStream(stream);port.ondisconnect=()=>{postMessage(`${stream._id} disconnected`)};res({_id:stream._id,settings,info:stream.info})}).catch(()=>{postMessage(`disconnected`)});;}else{rej(false)}})})},"closeStream":function closeStream(streamId){return new Promise((res,rej)=>{const Serial=globalThis.Serial;let ondisconnect;if(Serial.streams[streamId].port?.ondisconnect)ondisconnect=Serial.streams[streamId].port.ondisconnect;Serial.closeStream(Serial.streams[streamId]).then(resolved=>{if(ondisconnect)ondisconnect(void 0);res(resolved)}).catch(rej)})},"writeStream":function writeStream(streamId,message){globalThis.Serial.writeStream(globalThis.Serial.streams[streamId],message);return true},"updateStreamSettings":function updateStreamSettings(streamId,settings){if(globalThis.Serial?.streams[streamId]){for(const key in settings){if(typeof settings[key]==="object"){Object.assign(globalThis.Serial.streams[streamId].settings[key],settings[key])}else globalThis.Serial.streams[streamId][key]=settings[key]}}}};if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){globalThis.Devices=Devices;const worker=new WorkerService({roots:{...workerCanvasRoutes,...remoteGraphRoutes,...streamWorkerRoutes}})}var stream_worker_default=self;})();\\n\')],{type:"text/javascript"}));var _ArrayManip3=class{constructor(){this.recursivelyAssign=(target,obj)=>{for(const key in obj){if(typeof obj[key]==="object"){if(typeof target[key]==="object")this.recursivelyAssign(target[key],obj[key]);else target[key]=this.recursivelyAssign({},obj[key])}else target[key]=obj[key]}return target}}static autoscale(array,lineIdx=0,nLines=1,centerZero=false,ymin,ymax,clamp){if(array?.length===0)return array;let max=ymax?ymax:Math.max(...array);let min=ymin?ymin:Math.min(...array);let _lines=1/nLines;let scalar=1;if(centerZero){let absmax=Math.max(Math.abs(min),Math.abs(max));if(absmax!==0)scalar=_lines/absmax;return array.map(y22=>{if(clamp){if(y22<min)y22=min;if(y22>max)y22=max}return y22*scalar+(_lines*(lineIdx+1)*2-1-_lines)})}else{if(max===min){if(max!==0){scalar=_lines/max}else if(min!==0){scalar=_lines/Math.abs(min)}}else scalar=_lines/(max-min);return array.map(y22=>{if(clamp){if(y22<min)y22=min;if(y22>max)y22=max}return 2*((y22-min)*scalar-1/(2*nLines))+(_lines*(lineIdx+1)*2-1-_lines)})}}static genTimestamps(ct,sps10){let now=Date.now();let toInterp=[now-ct*1e3/sps10,now];return _ArrayManip3.upsample(toInterp,ct)}static absmax(array){return Math.max(Math.abs(Math.min(...array)),Math.max(...array))}static downsample(array,fitCount,scalar=1){if(array.length>fitCount){let output=new Array(fitCount);let incr=array.length/fitCount;let lastIdx=array.length-1;let last=0;let counter=0;for(let i22=incr;i22<array.length;i22+=incr){let rounded=Math.round(i22);if(rounded>lastIdx)rounded=lastIdx;for(let j=last;j<rounded;j++){output[counter]+=array[j]}output[counter]/=(rounded-last)*scalar;counter++;last=rounded}return output}else return array}static upsample(array,fitCount,scalar=1){var linearInterpolate=function(before2,after2,atPoint2){return(before2+(after2-before2)*atPoint2)*scalar};var newData=new Array(fitCount);var springFactor=(array.length-1)/(fitCount-1);newData[0]=array[0];for(var i22=1;i22<fitCount-1;i22++){var tmp=i22*springFactor;var before=Math.floor(tmp);var after=Math.ceil(tmp);var atPoint=tmp-before;newData[i22]=linearInterpolate(array[before],array[after],atPoint)}newData[fitCount-1]=array[array.length-1];return newData}static interpolate(array,fitCount,scalar=1){if(array.length>fitCount){return _ArrayManip3.downsample(array,fitCount,scalar)}else if(array.length<fitCount){return _ArrayManip3.upsample(array,fitCount,scalar)}return array}static HSLToRGB(h,s,l,scalar=255){s/=100;l/=100;let c=(1-Math.abs(2*l-1))*s,x3=c*(1-Math.abs(h/60%2-1)),m=l-c/2,r=0,g=0,b=0;if(0<=h&&h<60){r=c;g=x3;b=0}else if(60<=h&&h<120){r=x3;g=c;b=0}else if(120<=h&&h<180){r=0;g=c;b=x3}else if(180<=h&&h<240){r=0;g=x3;b=c}else if(240<=h&&h<300){r=x3;g=0;b=c}else if(300<=h&&h<360){r=c;g=0;b=x3}r=(r+m)*scalar;g=(g+m)*scalar;b=(b+m)*scalar;return[r,g,b]}static circularBuffer(arr,newEntries){if(newEntries.length<arr.length){let slice=arr.slice(newEntries.length);let len=arr.length;arr.splice(0,len,...slice,...newEntries)}else if(newEntries.length>arr.length){let len=arr.length;arr.splice(0,len,newEntries.slice(len-newEntries.length))}else{arr.splice(0,arr.length,...newEntries)}return arr}static reformatData(data,key){if(Array.isArray(data)){if(Array.isArray(data[0])){let d2={};data.forEach((arr,i22)=>{d2[i22]=arr});data=d2;if(isNaN(data[0][0]))return void 0}else if(key){data={[key]:data};if(isNaN(data[key][0]))return void 0}else{data={0:data};if(isNaN(data[0][0]))return void 0}}else if(typeof data==="object"){for(const key2 in data){if(typeof data[key2]==="number")data[key2]=[data[key2]];else if(data[key2]?.values){if(typeof data[key2].values==="number")data[key2].values=[data[key2].values]}if(isNaN(data[key2][0]))return void 0}}else if(typeof data==="string"){let split;if(data.includes("\\r\\n")){let lines=data.split("\\r\\n");data={};lines.forEach((l,j)=>{if(l.includes("	")){split=l.split("	")}else if(l.includes(",")){split=l.split(",")}else if(l.includes("|")){split=l.split("|")}if(Array.isArray(split)){split.forEach((val,i22)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i22]=[fl];else return void 0}})}})}else if(data.includes("	")){split=data.split("	")}else if(data.includes(",")){split=data.split(",")}else if(data.includes("|")){split=data.split("|")}data={};if(Array.isArray(split)){split.forEach((val,i22)=>{if(val.includes(":")){let[key2,v2]=val.split(":");let fl=parseFloat(v2);if(fl)data[key2]=[fl];else return void 0}else{let fl=parseFloat(val);if(fl)data[i22]=[fl];else return void 0}})}}else if(typeof data==="number"){if(key)data={[key]:[data]};else data={0:[data]}}return data}static padTime(data,lastValue,time,targetFit){let slopeIncr=(data[0]-lastValue)/time/targetFit;let padded=[...new Array(targetFit-data.length).map((_,i22)=>lastValue+slopeIncr*(i22+1)),...data];return padded}static interpolateForTime(data,time,targetSPS){return _ArrayManip3.interpolate(data,Math.ceil(targetSPS*time))}isTypedArray(x3){return ArrayBuffer.isView(x3)&&Object.prototype.toString.call(x3)!=="[object DataView]"}spliceTypedArray(arr,start,end){let s=arr.subarray(0,start);let e;if(end){e=arr.subarray(end+1)}let n;if(s.length>0||e?.length>0)n=new arr.constructor(s.length+e.length);if(s.length>0)n.set(s);if(e&&e.length>0)n.set(e,s.length);return n}};var ArrayManip3=_ArrayManip3;ArrayManip3.bufferValues=(objects,property,keys22,buffer)=>{if(!Array.isArray(keys22)&&typeof keys22==="object")keys22=Object.keys(keys22);if(!buffer){let object_keys=Object.keys(objects);if(keys22)buffer=new Float32Array(object_keys.length*keys22.length);else{if(typeof objects[object_keys[0]][property]==="object"){keys22=Object.keys(objects[object_keys[0]][property]);buffer=new Float32Array(object_keys.length*keys22.length)}else buffer=new Float32Array(object_keys.length)}}let i22=0;for(const key in objects){if(objects[key][property]){if(keys22){for(let j=0;j<keys22.length;j++){buffer[i22]=objects[key][property][keys22[j]];i22++}}else{buffer[i22]=objects[key][property];i22++}}}return buffer};var rechk3=/^([<>])?(([1-9]\\d*)?([xcbB?hHiIfdsp]))*$/;var refmt3=/([1-9]\\d*)?([xcbB?hHiIfdsp])/g;var str3=(v2,o,c)=>String.fromCharCode(...new Uint8Array(v2.buffer,v2.byteOffset+o,c));var rts3=(v2,o,c,s)=>new Uint8Array(v2.buffer,v2.byteOffset+o,c).set(s.split("").map(str22=>str22.charCodeAt(0)));var pst3=(v2,o,c)=>str3(v2,o+1,Math.min(v2.getUint8(o),c-1));var tsp3=(v2,o,c,s)=>{v2.setUint8(o,s.length);rts3(v2,o+1,c-1,s)};var lut3=le=>({x:c=>[1,c,0],c:c=>[c,1,o=>({u:v2=>str3(v2,o,1),p:(v2,c2)=>rts3(v2,o,1,c2)})],"?":c=>[c,1,o=>({u:v2=>Boolean(v2.getUint8(o)),p:(v2,B22)=>v2.setUint8(o,B22)})],b:c=>[c,1,o=>({u:v2=>v2.getInt8(o),p:(v2,b)=>v2.setInt8(o,b)})],B:c=>[c,1,o=>({u:v2=>v2.getUint8(o),p:(v2,B22)=>v2.setUint8(o,B22)})],h:c=>[c,2,o=>({u:v2=>v2.getInt16(o,le),p:(v2,h)=>v2.setInt16(o,h,le)})],H:c=>[c,2,o=>({u:v2=>v2.getUint16(o,le),p:(v2,H22)=>v2.setUint16(o,H22,le)})],i:c=>[c,4,o=>({u:v2=>v2.getInt32(o,le),p:(v2,i22)=>v2.setInt32(o,i22,le)})],I:c=>[c,4,o=>({u:v2=>v2.getUint32(o,le),p:(v2,I)=>v2.setUint32(o,I,le)})],f:c=>[c,4,o=>({u:v2=>v2.getFloat32(o,le),p:(v2,f)=>v2.setFloat32(o,f,le)})],d:c=>[c,8,o=>({u:v2=>v2.getFloat64(o,le),p:(v2,d2)=>v2.setFloat64(o,d2,le)})],s:c=>[1,c,o=>({u:v2=>str3(v2,o,c),p:(v2,s)=>rts3(v2,o,c,s.slice(0,c))})],p:c=>[1,c,o=>({u:v2=>pst3(v2,o,c),p:(v2,s)=>tsp3(v2,o,c,s.slice(0,c-1))})]});var errbuf3=new RangeError("Structure larger than remaining buffer");var errval3=new RangeError("Not enough values for structure");var _ByteParser3=class extends ArrayManip3{static toDataView(value){if(!(value instanceof DataView)){if(typeof value==="string"&&parseInt(value))value=parseInt(value);if(typeof value==="string"){let enc=new TextEncoder;let hascodes={};for(const code in _ByteParser3.codes){while(value.indexOf(code)>-1){let idx=value.indexOf(code);value=value.replace(code,"");hascodes[idx]=code}}let encoded=Array.from(enc.encode(value));for(const key in hascodes){encoded.splice(parseInt(key),0,_ByteParser3.codes[hascodes[key]])}value=new DataView(new Uint8Array(encoded).buffer)}else if(typeof value==="number"){let tmp=value;if(value<256){value=new DataView(new ArrayBuffer(1));value.setUint8(0,tmp)}else if(value<65536){value=new DataView(new ArrayBuffer(2));value.setInt16(0,tmp)}else{value=new DataView(new ArrayBuffer(4));value.setUint32(0,tmp)}}else if(value instanceof ArrayBuffer||typeof SharedArrayBuffer!=="undefined"&&value instanceof SharedArrayBuffer){value=new DataView(value)}else if(Array.isArray(value)){value=new DataView(Uint8Array.from(value).buffer)}else if(typeof value==="object"){value=new TextEncoder().encode(JSON.stringify(value))}}return value}static searchBuffer(buffer,searchString,limit){var needle=searchString;var haystack=buffer;var search=_ByteParser3.boyerMoore(needle);var skip=search.byteLength;var indices=[];for(var i22=search(haystack);i22!==-1;i22=search(haystack,i22+skip)){indices.push(i22);if(limit){if(indices.length>=limit)break}}return indices}static bytesToInt16(x0,x1){let int16=(255&x0)<<8|255&x1;if((int16&32768)>0){int16|=4294901760}else{int16&=65535}return int16}static bytesToUInt16(x0,x1){return x0*256+x1}static Uint16ToBytes(y22){return[y22&255,y22>>8&255]}static bytesToInt24(x0,x1,x22){let int24=(255&x0)<<16|(255&x1)<<8|255&x22;if((int24&8388608)>0){int24|=4278190080}else{int24&=16777215}return int24}static bytesToUInt24(x0,x1,x22){return x0*65536+x1*256+x22}static Uint24ToBytes(y22){return[y22&255,y22>>8&255,y22>>16&255]}static bytesToInt32(x0,x1,x22,x3){let int32=(255&x0)<<24|(255&x1)<<16|(255&x22)<<8|255&x3;if((int32&2147483648)>0){int32|=0}else{int32&=4294967295}return int32}static bytesToUInt32(x0,x1,x22,x3){return x0*16777216+x1*65536+x22*256+x3}static Uint32ToBytes(y22){return[y22&255,y22>>8&255,y22>>16&255,y22>>24&255]}static get2sCompliment(val,nbits32){if(val>4294967296)return null;return val<<32-nbits32>>32-nbits32}static getSignedInt(...args){let pos=0;function getInt(size){var value=0;var first=true;while(size--){if(first){let byte=args[pos++];value+=byte&127;if(byte&128){value-=128}first=false}else{value*=256;value+=args[pos++]}}return value}return getInt(args.length)}static asUint8Array(input){if(input instanceof Uint8Array){return input}else if(typeof input==="string"){var arr=new Uint8Array(input.length);for(var i22=0;i22<input.length;i22++){var c=input.charCodeAt(i22);if(c>127){throw new TypeError("Only ASCII patterns are supported")}arr[i22]=c}return arr}else{return new Uint8Array(input)}}static boyerMoore(patternBuffer){var pattern=_ByteParser3.asUint8Array(patternBuffer);var M2=pattern.length;if(M2===0){throw new TypeError("patternBuffer must be at least 1 byte long")}var R2=256;var rightmost_positions=new Int32Array(R2);for(var c=0;c<R2;c++){rightmost_positions[c]=-1}for(var j=0;j<M2;j++){rightmost_positions[pattern[j]]=j}var boyerMooreSearch=(txtBuffer,start,end)=>{var txt=_ByteParser3.asUint8Array(txtBuffer);if(start===void 0)start=0;if(end===void 0)end=txt.length;var pat=pattern;var right=rightmost_positions;var lastIndex=end-pat.length;var lastPatIndex=pat.length-1;var skip;for(var i22=start;i22<=lastIndex;i22+=skip){skip=0;for(var j2=lastPatIndex;j2>=0;j2--){var c2=txt[i22+j2];if(pat[j2]!==c2){skip=Math.max(1,j2-right[c2]);break}}if(skip===0){return i22}}return-1};boyerMooreSearch.byteLength=pattern.byteLength;return boyerMooreSearch}static struct(format){let fns=[],size=0,m=rechk3.exec(format);if(!m){throw new RangeError("Invalid format string")}const t22=lut3("<"===m[1]),lu=(n,c)=>t22[c](n?parseInt(n,10):1);while(m=refmt3.exec(format)){((r,s,f)=>{for(let i22=0;i22<r;++i22,size+=s){if(f){fns.push(f(size))}}})(...lu(...m.slice(1)))}const unpack_from=(arrb,offs)=>{if(arrb.byteLength<(offs|0)+size){throw errbuf3}let v2=new DataView(arrb,offs|0);return fns.map(f=>f.u(v2))};const pack_into=(arrb,offs,...values)=>{if(values.length<fns.length){throw errval3}if(arrb.byteLength<offs+size){throw errbuf3}const v2=new DataView(arrb,offs);new Uint8Array(arrb,offs,size).fill(0);fns.forEach((f,i22)=>f.p(v2,values[i22]))};const pack=(...values)=>{let b=new ArrayBuffer(size);pack_into(b,0,...values);return b};const unpack=arrb=>unpack_from(arrb,0);function*iter_unpack(arrb){for(let offs=0;offs+size<=arrb.byteLength;offs+=size){yield unpack_from(arrb,offs)}}return Object.freeze({unpack,pack,unpack_from,pack_into,iter_unpack,format,size})}};var ByteParser3=_ByteParser3;ByteParser3.codes={"\\\\n":10,"\\\\r":13,"\\\\t":9,"\\\\s":32,"\\\\b":8,"\\\\f":12,"\\\\":92};var ScanMode;(function(ScanMode2){ScanMode2[ScanMode2["SCAN_MODE_LOW_POWER"]=0]="SCAN_MODE_LOW_POWER";ScanMode2[ScanMode2["SCAN_MODE_BALANCED"]=1]="SCAN_MODE_BALANCED";ScanMode2[ScanMode2["SCAN_MODE_LOW_LATENCY"]=2]="SCAN_MODE_LOW_LATENCY"})(ScanMode||(ScanMode={}));init_dist();init_conversion();init_dist();var BluetoothLe=registerPlugin("BluetoothLe",{web:()=>Promise.resolve().then(()=>(init_web(),web_exports)).then(m=>new m.BluetoothLeWeb)});var import_throat=__toESM3(require_throat());function getQueue(enabled){if(enabled){return(0,import_throat.default)(1)}else{return fn=>fn()}}function validateUUID(uuid){if(typeof uuid!=="string"){throw new Error(`Invalid UUID type ${typeof uuid}. Expected string.`)}uuid=uuid.toLowerCase();const is128BitUuid=uuid.search(/^[0-9a-f]{8}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{4}\\b-[0-9a-f]{12}$/)>=0;if(!is128BitUuid){throw new Error(`Invalid UUID format ${uuid}. Expected 128 bit string (e.g. "0000180d-0000-1000-8000-00805f9b34fb").`)}return uuid}var BleClientClass=class{constructor(){this.scanListener=null;this.eventListeners=new Map;this.queue=getQueue(true)}enableQueue(){this.queue=getQueue(true)}disableQueue(){this.queue=getQueue(false)}async initialize(options){await this.queue(async()=>{await BluetoothLe.initialize(options)})}async getEnabled(){return this.isEnabled()}async isEnabled(){const enabled=await this.queue(async()=>{const result=await BluetoothLe.isEnabled();return result.value});return enabled}async enable(){await this.queue(async()=>{await BluetoothLe.enable()})}async disable(){await this.queue(async()=>{await BluetoothLe.disable()})}async startEnabledNotifications(callback){await this.queue(async()=>{var _a;const key=`onEnabledChanged`;await((_a=this.eventListeners.get(key))===null||_a===void 0?void 0:_a.remove());const listener=await BluetoothLe.addListener(key,result=>{callback(result.value)});this.eventListeners.set(key,listener);await BluetoothLe.startEnabledNotifications()})}async stopEnabledNotifications(){await this.queue(async()=>{var _a;const key=`onEnabledChanged`;await((_a=this.eventListeners.get(key))===null||_a===void 0?void 0:_a.remove());this.eventListeners.delete(key);await BluetoothLe.stopEnabledNotifications()})}async isLocationEnabled(){const enabled=await this.queue(async()=>{const result=await BluetoothLe.isLocationEnabled();return result.value});return enabled}async openLocationSettings(){await this.queue(async()=>{await BluetoothLe.openLocationSettings()})}async openBluetoothSettings(){await this.queue(async()=>{await BluetoothLe.openBluetoothSettings()})}async openAppSettings(){await this.queue(async()=>{await BluetoothLe.openAppSettings()})}async setDisplayStrings(displayStrings){await this.queue(async()=>{await BluetoothLe.setDisplayStrings(displayStrings)})}async requestDevice(options){options=options?this.validateRequestBleDeviceOptions(options):void 0;const result=await this.queue(async()=>{const device=await BluetoothLe.requestDevice(options);return device});return result}async requestLEScan(options,callback){options=this.validateRequestBleDeviceOptions(options);await this.queue(async()=>{var _a;await((_a=this.scanListener)===null||_a===void 0?void 0:_a.remove());this.scanListener=await BluetoothLe.addListener("onScanResult",resultInternal=>{const result=Object.assign(Object.assign({},resultInternal),{manufacturerData:this.convertObject(resultInternal.manufacturerData),serviceData:this.convertObject(resultInternal.serviceData),rawAdvertisement:resultInternal.rawAdvertisement?this.convertValue(resultInternal.rawAdvertisement):void 0});callback(result)});await BluetoothLe.requestLEScan(options)})}async stopLEScan(){await this.queue(async()=>{var _a;await((_a=this.scanListener)===null||_a===void 0?void 0:_a.remove());this.scanListener=null;await BluetoothLe.stopLEScan()})}async getDevices(deviceIds){return this.queue(async()=>{const result=await BluetoothLe.getDevices({deviceIds});return result.devices})}async getConnectedDevices(services){return this.queue(async()=>{const result=await BluetoothLe.getConnectedDevices({services});return result.devices})}async connect(deviceId,onDisconnect,options){await this.queue(async()=>{var _a;if(onDisconnect){const key=`disconnected|${deviceId}`;await((_a=this.eventListeners.get(key))===null||_a===void 0?void 0:_a.remove());const listener=await BluetoothLe.addListener(key,()=>{onDisconnect(deviceId)});this.eventListeners.set(key,listener)}await BluetoothLe.connect(Object.assign({deviceId},options))})}async createBond(deviceId){await this.queue(async()=>{await BluetoothLe.createBond({deviceId})})}async isBonded(deviceId){const isBonded=await this.queue(async()=>{const result=await BluetoothLe.isBonded({deviceId});return result.value});return isBonded}async disconnect(deviceId){await this.queue(async()=>{await BluetoothLe.disconnect({deviceId})})}async getServices(deviceId){const services=await this.queue(async()=>{const result=await BluetoothLe.getServices({deviceId});return result.services});return services}async discoverServices(deviceId){await this.queue(async()=>{await BluetoothLe.discoverServices({deviceId})})}async readRssi(deviceId){const value=await this.queue(async()=>{const result=await BluetoothLe.readRssi({deviceId});return parseFloat(result.value)});return value}async read(deviceId,service,characteristic,options){service=validateUUID(service);characteristic=validateUUID(characteristic);const value=await this.queue(async()=>{const result=await BluetoothLe.read(Object.assign({deviceId,service,characteristic},options));return this.convertValue(result.value)});return value}async write(deviceId,service,characteristic,value,options){service=validateUUID(service);characteristic=validateUUID(characteristic);return this.queue(async()=>{if(!(value===null||value===void 0?void 0:value.buffer)){throw new Error("Invalid data.")}let writeValue=value;if(Capacitor.getPlatform()!=="web"){writeValue=dataViewToHexString(value)}await BluetoothLe.write(Object.assign({deviceId,service,characteristic,value:writeValue},options))})}async writeWithoutResponse(deviceId,service,characteristic,value,options){service=validateUUID(service);characteristic=validateUUID(characteristic);await this.queue(async()=>{if(!(value===null||value===void 0?void 0:value.buffer)){throw new Error("Invalid data.")}let writeValue=value;if(Capacitor.getPlatform()!=="web"){writeValue=dataViewToHexString(value)}await BluetoothLe.writeWithoutResponse(Object.assign({deviceId,service,characteristic,value:writeValue},options))})}async readDescriptor(deviceId,service,characteristic,descriptor,options){service=validateUUID(service);characteristic=validateUUID(characteristic);descriptor=validateUUID(descriptor);const value=await this.queue(async()=>{const result=await BluetoothLe.readDescriptor(Object.assign({deviceId,service,characteristic,descriptor},options));return this.convertValue(result.value)});return value}async writeDescriptor(deviceId,service,characteristic,descriptor,value,options){service=validateUUID(service);characteristic=validateUUID(characteristic);descriptor=validateUUID(descriptor);return this.queue(async()=>{if(!(value===null||value===void 0?void 0:value.buffer)){throw new Error("Invalid data.")}let writeValue=value;if(Capacitor.getPlatform()!=="web"){writeValue=dataViewToHexString(value)}await BluetoothLe.writeDescriptor(Object.assign({deviceId,service,characteristic,descriptor,value:writeValue},options))})}async startNotifications(deviceId,service,characteristic,callback){service=validateUUID(service);characteristic=validateUUID(characteristic);await this.queue(async()=>{var _a;const key=`notification|${deviceId}|${service}|${characteristic}`;await((_a=this.eventListeners.get(key))===null||_a===void 0?void 0:_a.remove());const listener=await BluetoothLe.addListener(key,event=>{callback(this.convertValue(event===null||event===void 0?void 0:event.value))});this.eventListeners.set(key,listener);await BluetoothLe.startNotifications({deviceId,service,characteristic})})}async stopNotifications(deviceId,service,characteristic){service=validateUUID(service);characteristic=validateUUID(characteristic);await this.queue(async()=>{var _a;const key=`notification|${deviceId}|${service}|${characteristic}`;await((_a=this.eventListeners.get(key))===null||_a===void 0?void 0:_a.remove());this.eventListeners.delete(key);await BluetoothLe.stopNotifications({deviceId,service,characteristic})})}validateRequestBleDeviceOptions(options){if(options.services){options.services=options.services.map(validateUUID)}if(options.optionalServices){options.optionalServices=options.optionalServices.map(validateUUID)}return options}convertValue(value){if(typeof value==="string"){return hexStringToDataView(value)}else if(value===void 0){return new DataView(new ArrayBuffer(0))}return value}convertObject(obj){if(obj===void 0){return void 0}const result={};for(const key of Object.keys(obj)){result[key]=this.convertValue(obj[key])}return result}};var BleClient=new BleClientClass;init_conversion();var BLEClient=class extends ByteParser3{constructor(options,location){super();this.client=BleClient;this.devices={};this.location=false;this.initialized=false;this.setupDevice=(device,options2)=>{return new Promise(async(res,rej)=>{this.devices[device.deviceId]={device,deviceId:device.deviceId,...options2};this.client.connect(device.deviceId,deviceId=>{if(this.devices[device.deviceId]?.ondisconnect)this.devices[device.deviceId].ondisconnect(deviceId)},options2?.connectOptions).then(async()=>{let services=await this.getServices(device.deviceId);for(const service in options2?.services){let svc=services.find(o=>{if(o.uuid===service)return true});if(svc)for(const characteristic in options2.services[service]){if(!svc.characteristics.find(o=>{if(o.uuid===characteristic)return true}))continue;let opt=options2.services[service][characteristic];if(opt.write){await this.write(device,service,characteristic,opt.write,opt.writeCallback,opt.writeOptions)}if(opt.read){await this.read(device,service,characteristic,opt.readCallback,opt.readOptions)}if(opt.notify&&opt.notifyCallback){await this.subscribe(device,service,characteristic,opt.notifyCallback);opt.notifying=true}}}}).catch(rej);res(this.devices[device.deviceId])})};this.triangulate=(device,duration=1500,sampleRate=60)=>{return new Promise((res,rej)=>{if("Accelerometer"in globalThis){if(typeof globalThis.Accelerometer==="function"){let acl=new globalThis.Accelerometer({frequency:sampleRate});let start=performance.now();let now=start;let result={samples:[],vector:{}};let onread=()=>{if(now-start<duration){this.readRssi(device).then(rssi=>{let x3=acl.x;let y22=acl.y;let z22=acl.z;now=performance.now();result.samples.push({x:x3,y:y22,z:z22,rssi,timestamp:now})})}else{let vector={x:0,y:0,z:0,rssiAvg:0};result.samples.forEach(s=>{});acl.removeEventListener("reading",onread)}};acl.addEventListener("reading",onread)}}else rej(new Error("No Accelerometer API detected"))})};if(location)this.location=location;if(options){this.setup(options)}}setup(options,location=this.location){let services=[];if(options){for(const serviceuuid in options.services){services.push(serviceuuid)}}let opts={};if(!location)opts.androidNeverForLocation=false;return new Promise(async(res,rej)=>{if(!this.initialized){await this.client.initialize(opts);this.initialized=true}if(options?.deviceId){res(await this.reconnect(options.deviceId))}else{if(options){let services2=Array.from(Object.keys(options.services));let deviceRequest={};if(!this.isMobile()){deviceRequest.optionalServices=services2}if(options.name)deviceRequest.name=options.name;if(options.namePrefix)deviceRequest.namePrefix=options.namePrefix;this.client.requestDevice(deviceRequest).then(device=>{res(this.setupDevice(device,options))}).catch(rej)}else{this.client.requestDevice().then(device=>{res(this.setupDevice(device,options))}).catch(rej)}}})}initialize(options){return new Promise((res,rej)=>{this.client.initialize(options).then(()=>{res(true)}).catch(rej)})}requestDevice(request,options){return new Promise((res,rej)=>{this.client.requestDevice(request).then(device=>{this.devices[device.deviceId]={device,deviceId:device.deviceId,...options};res(device)}).catch(rej)})}getServices(deviceId){return this.client.getServices(deviceId)}connect(device,options){return new Promise((res,rej)=>{this.client.connect(device.deviceId,deviceId=>{if(options?.ondisconnect)options.ondisconnect(deviceId)},options?.connectOptions).then(connected=>{res(device)}).catch(rej)})}reconnect(deviceId,options){return new Promise((res,rej)=>{let android=this.isAndroid();let mobile=this.isMobile();console.log(deviceId);let opts=options;if(this.devices[deviceId])opts=Object.assign(Object.assign({},this.devices[deviceId]),opts);if(opts?.deviceId)delete opts.deviceId;if(!mobile&&!navigator.bluetooth?.getDevices){this.setup(opts).then(device=>{res(device)})}if(android){this.client.getDevices([deviceId]).then(devices=>{this.setupDevice(devices[0],opts).then(device=>{res(device)})}).catch(rej)}})}disconnect(device){if(typeof device==="object"){if(device?.deviceId){device=device.deviceId};}if(typeof device==="string"){let info=this.devices[device];if(info.beforedisconnect)info.beforedisconnect(this,info);delete this.devices[device];return this.client.disconnect(device)}}write(device,service,characteristic,value,callback,options){if(typeof device==="object")device=device.deviceId;if(callback){return this.client.write(device,service,characteristic,BLEClient.toDataView(value)).then(callback)}else return this.client.writeWithoutResponse(device,service,characteristic,BLEClient.toDataView(value),options)}read(device,service,characteristic,ondata,options){if(typeof device==="object")device=device.deviceId;if(ondata)return this.client.read(device,service,characteristic,options).then(ondata);else return this.client.read(device,service,characteristic,options)}subscribe(device,service,characteristic,ondata){if(typeof device==="object")device=device.deviceId;return this.client.startNotifications(device,service,characteristic,ondata)}unsubscribe(device,service,characteristic){if(typeof device==="object")device=device.deviceId;return this.client.stopNotifications(device,service,characteristic)}scan(options,callback){return this.client.requestLEScan(options,callback)}stopScanning(){return this.client.stopLEScan()}readDescriptor(device,service,characteristic,descriptor,options){return this.client.readDescriptor(device.deviceId,service,characteristic,descriptor,options)}writeDescriptor(device,service,characteristic,descriptor,value,options){return this.client.writeDescriptor(device.deviceId,service,characteristic,descriptor,BLEClient.toDataView(value),options)}readRssi(device){return this.client.readRssi(device.deviceId)}isMobile(){let check=false;(function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))check=true})(navigator.userAgent||navigator.vendor||window.opera);return check}isAndroid(){const device=navigator.userAgent.toLowerCase();return device.indexOf("android")>-1}async distance(device,txPower,x3,exp,c){let rssi=await this.readRssi(device);if(rssi==0)return void 0;let ratio=rssi/txPower;if(ratio<1){return Math.pow(ratio,10)}else{return x3*Math.pow(ratio,exp)+c}}async distanceFromPhone(device,txPower,model){let x3,exp,c;if(model){if(model==="nexus5"){x3=.42093;exp=6.9476;c=.54992}else if(model==="motoX"){x3=.9401940951;exp=6.170094565;c=0}else if(model==="iphone5"){x3=.89976;exp=7.7095;c=.111}}return await this.distance(device,txPower,x3,exp,c)}};function ads131m08codec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array(9),1:new Array(9),2:new Array(9),3:new Array(9),4:new Array(9),5:new Array(9),6:new Array(9),7:new Array(9),timestamp:Date.now()};for(let i22=0;i22<9;i22++){let j=i22*25;output[0][i22]=ByteParser3.bytesToInt24(arr[j],arr[j+1],arr[j+2]);output[1][i22]=ByteParser3.bytesToInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i22]=ByteParser3.bytesToInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i22]=ByteParser3.bytesToInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i22]=ByteParser3.bytesToInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i22]=ByteParser3.bytesToInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i22]=ByteParser3.bytesToInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i22]=ByteParser3.bytesToInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var decoder2=new TextDecoder;var sps9=250;var defaultChartSetting7={nSec:10,sps:sps9,units:"mV"};var ads131m08ChartSettings2={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting7)),"1":JSON.parse(JSON.stringify(defaultChartSetting7)),"2":JSON.parse(JSON.stringify(defaultChartSetting7)),"3":JSON.parse(JSON.stringify(defaultChartSetting7)),"4":JSON.parse(JSON.stringify(defaultChartSetting7)),"5":JSON.parse(JSON.stringify(defaultChartSetting7)),"6":JSON.parse(JSON.stringify(defaultChartSetting7)),"7":JSON.parse(JSON.stringify(defaultChartSetting7))}};var gain3=32;var nbits3=24;var vref3=1.2;var defaultsetting5={sps:sps9,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref3/(gain3*(Math.pow(2,nbits3)-1))};var ads131m08FilterSettings2={"0":JSON.parse(JSON.stringify(defaultsetting5)),"1":JSON.parse(JSON.stringify(defaultsetting5)),"2":JSON.parse(JSON.stringify(defaultsetting5)),"3":JSON.parse(JSON.stringify(defaultsetting5)),"4":JSON.parse(JSON.stringify(defaultsetting5)),"5":JSON.parse(JSON.stringify(defaultsetting5)),"6":JSON.parse(JSON.stringify(defaultsetting5)),"7":JSON.parse(JSON.stringify(defaultsetting5))};var accScale2=.002/Math.pow(2,4);var getAcc2=(arr,output,channels=8)=>{const accIdx=channels*3+1;const sum=(a,b)=>a+b;const accSum=arr.slice(accIdx).reduce(sum,0);if(accSum!==0){output.ax=accScale2*ByteParser3.bytesToInt16(arr[accIdx],arr[accIdx+1]);output.ay=accScale2*ByteParser3.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output.az=accScale2*ByteParser3.bytesToInt16(arr[accIdx+4],arr[accIdx+5])}};function cytoncodec2(data){let arr;if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i22=0;i22<8;i22++){let idx=1+3*i22;output[i22]=ByteParser3.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc2(arr,output);output.timestamp=Date.now();return output}function daisycytoncodec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i22=0;i22<8;i22++){let idx=1+3*i22;if(arr[0]%2===0)output[i22+7]=ByteParser3.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2]);else output[i22]=ByteParser3.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}getAcc2(arr,output);return output}var sps22=250;var cytonSerialSettings2={deviceType:"USB",deviceName:"cyton",baudRate:115200,codec:cytoncodec2,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps22};var daisycytonSerialSettings2={deviceType:"USB",deviceName:"cyton_daisy",baudRate:115200,codec:daisycytoncodec2,write:"b",beforedisconnect:(client,port)=>{client.writePort(port,"s")},buffering:{searchBytes:new Uint8Array([192,160])},sps:sps22};var defaultChartSetting23={nSec:10,sps:sps22,units:"mV"};var defaultChartSetting222={nSec:10,sps:sps22};var cytonChartSettings2={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting23)),"1":JSON.parse(JSON.stringify(defaultChartSetting23)),"2":JSON.parse(JSON.stringify(defaultChartSetting23)),"3":JSON.parse(JSON.stringify(defaultChartSetting23)),"4":JSON.parse(JSON.stringify(defaultChartSetting23)),"5":JSON.parse(JSON.stringify(defaultChartSetting23)),"6":JSON.parse(JSON.stringify(defaultChartSetting23)),"7":JSON.parse(JSON.stringify(defaultChartSetting23)),"ax":JSON.parse(JSON.stringify(defaultChartSetting222)),"ay":JSON.parse(JSON.stringify(defaultChartSetting222)),"az":JSON.parse(JSON.stringify(defaultChartSetting222))},generateNewLines:true};var defaultsetting22={sps:sps22,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*4.5/(24*(Math.pow(2,23)-1))};var cytonFilterSettings2={"0":JSON.parse(JSON.stringify(defaultsetting22)),"1":JSON.parse(JSON.stringify(defaultsetting22)),"2":JSON.parse(JSON.stringify(defaultsetting22)),"3":JSON.parse(JSON.stringify(defaultsetting22)),"4":JSON.parse(JSON.stringify(defaultsetting22)),"5":JSON.parse(JSON.stringify(defaultsetting22)),"6":JSON.parse(JSON.stringify(defaultsetting22)),"7":JSON.parse(JSON.stringify(defaultsetting22)),"8":JSON.parse(JSON.stringify(defaultsetting22)),"9":JSON.parse(JSON.stringify(defaultsetting22)),"10":JSON.parse(JSON.stringify(defaultsetting22)),"11":JSON.parse(JSON.stringify(defaultsetting22)),"12":JSON.parse(JSON.stringify(defaultsetting22)),"13":JSON.parse(JSON.stringify(defaultsetting22)),"14":JSON.parse(JSON.stringify(defaultsetting22)),"15":JSON.parse(JSON.stringify(defaultsetting22))};function freeeeg128codec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i22=0;i22<128;i22++){let idx=i22*3+1;output[i22]=ByteParser3.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=385;output["ax"]=ByteParser3.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser3.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser3.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser3.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser3.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser3.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps32=250;var freeeeg128SerialSettings2={deviceType:"USB",deviceName:"freeeeg128",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg128codec2,sps:sps32,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg128ChartSettings2={lines:{"ax":{nSec:10,sps:sps32},"ay":{nSec:10,sps:sps32},"az":{nSec:10,sps:sps32},"gx":{nSec:10,sps:sps32},"gy":{nSec:10,sps:sps32},"gz":{nSec:10,sps:sps32}}};var freeeeg128FilterSettings2={};for(let i22=0;i22<128;i22++){freeeeg128ChartSettings2.lines[i22]={sps:sps32,nSec:10,units:"mV"};freeeeg128FilterSettings2[i22]={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,scalar:1e3*2.5/(32*(Math.pow(2,24)-1))}}function freeeeg32codec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={};for(let i22=0;i22<32;i22++){let idx=i22*3+1;output[i22]=ByteParser3.bytesToInt24(arr[idx],arr[idx+1],arr[idx+2])}let accIdx=97;output["ax"]=ByteParser3.bytesToInt16(arr[accIdx],arr[accIdx+1]);output["ay"]=ByteParser3.bytesToInt16(arr[accIdx+2],arr[accIdx+3]);output["az"]=ByteParser3.bytesToInt16(arr[accIdx+4],arr[accIdx+5]);output["gx"]=ByteParser3.bytesToInt16(arr[accIdx+6],arr[accIdx+7]);output["gy"]=ByteParser3.bytesToInt16(arr[accIdx+8],arr[accIdx+9]);output["gz"]=ByteParser3.bytesToInt16(arr[accIdx+10],arr[accIdx+11]);output.timestamp=Date.now();return output}var sps42=512;var freeeeg32SerialSettings2={deviceType:"USB",deviceName:"freeeeg32",baudRate:921600,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec2,sps:sps42,buffering:{searchBytes:new Uint8Array([192,160])}};var freeeeg32_optical_SerialSettings2={deviceType:"USB",deviceName:"freeeeg32_optical",baudRate:1e6,bufferSize:2e3,frequency:1.9,codec:freeeeg32codec2,sps:sps42,buffering:{searchBytes:new Uint8Array([192,160])}};var defaultChartSetting32={nSec:10,sps:sps42};var freeeeg32ChartSettings2={lines:{"ax":JSON.parse(JSON.stringify(defaultChartSetting32)),"ay":JSON.parse(JSON.stringify(defaultChartSetting32)),"az":JSON.parse(JSON.stringify(defaultChartSetting32)),"gx":JSON.parse(JSON.stringify(defaultChartSetting32)),"gy":JSON.parse(JSON.stringify(defaultChartSetting32)),"gz":JSON.parse(JSON.stringify(defaultChartSetting32))}};var freeeeg32FilterSettings2={};for(let i22=0;i22<32;i22++){freeeeg32ChartSettings2.lines[i22]={sps:sps42,nSec:10,units:"mV"};freeeeg32FilterSettings2[i22]={sps:sps42,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:1e3*2.5/(8*(Math.pow(2,24)-1))}}var textdecoder4=new TextDecoder;function hegduinocodec2(value){let output={timestamp:0,red:0,infrared:0,heg:0,ambient:0,temperature:0};let txt=textdecoder4.decode(value);let line=txt.split("|");if(line.length===3){output.timestamp=Date.now();output.red=parseInt(line[0]);output.infrared=parseInt(line[1]);output.heg=parseFloat(line[2])}else if(line.length>=2){output.timestamp=Date.now();output.red=parseInt(line[1]);output.infrared=parseInt(line[2]);output.heg=parseFloat(line[3]);if(line[4])output.ambient=parseFloat(line[4]);if(line[5])output.temperature=parseFloat(line[5]);return output}else return txt}var sps52=40;var hegduinoSerialSettings2={deviceType:"USB",deviceName:"hegduino",baudRate:115200,write:"t\\n",codec:hegduinocodec2,sps:sps52};var hegduinoV1SerialSettings2=Object.assign({},hegduinoSerialSettings2);hegduinoV1SerialSettings2.sps=19;var hegduinoBLESettings2={deviceType:"BLE",deviceName:"hegduino",sps:sps52,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:hegduinocodec2,sps:sps52}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};var hegduinoV1BLESettings2=Object.assign({},hegduinoSerialSettings2);hegduinoV1BLESettings2.sps=19;function max3010xcodec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let pktCt=32;const output={"red":new Array(pktCt),"ir":new Array(pktCt),"max_dietemp":ByteParser3.get2sCompliment(arr[193],8)+.0625*arr[194],"timestamp":Date.now()};let i22=0;while(i22<pktCt){let idx=i22*6;if(i22%2===0){output["ir"][i22]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["ir"][i22+1]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}else{output["red"][i22-1]=(arr[idx+1]<<16|arr[idx+2]<<8|arr[idx+3])&524287;output["red"][i22]=(arr[idx+4]<<16|arr[idx+5]<<8|arr[idx+6])&524287}i22++}return output}function mpu6050codec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={"ax":new Array(20),"ay":new Array(20),"az":new Array(20),"gx":new Array(20),"gy":new Array(20),"gz":new Array(20),"mpu_dietemp":(ByteParser3.bytesToInt16(arr[241],arr[242])+521)/340+35,timestamp:Date.now()};for(let i22=0;i22<20;i22++){let idx=i22*12;output.ax[i22]=ByteParser3.bytesToInt16(arr[idx+1],arr[idx+2]);output.ay[i22]=ByteParser3.bytesToInt16(arr[idx+3],arr[idx+4]);output.az[i22]=ByteParser3.bytesToInt16(arr[idx+5],arr[idx+6]);output.gx[i22]=ByteParser3.bytesToInt16(arr[idx+7],arr[idx+8]);output.gy[i22]=ByteParser3.bytesToInt16(arr[idx+9],arr[idx+10]);output.gz[i22]=ByteParser3.bytesToInt16(arr[idx+11],arr[idx+12])}return output}function cognixionONE_EEG_codec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={0:new Array,1:new Array,2:new Array,3:new Array,4:new Array,5:new Array,6:new Array,7:new Array,timestamp:Date.now()};for(let i22=0;i22<7;i22++){let j=i22*26+1;if(!arr[j+23])break;output[0][i22]=ByteParser3.bytesToUInt24(arr[j],arr[j+1],arr[j+2]);output[1][i22]=ByteParser3.bytesToUInt24(arr[j+3],arr[j+4],arr[j+5]);output[2][i22]=ByteParser3.bytesToUInt24(arr[j+6],arr[j+7],arr[j+8]);output[3][i22]=ByteParser3.bytesToUInt24(arr[j+9],arr[j+10],arr[j+11]);output[4][i22]=ByteParser3.bytesToUInt24(arr[j+12],arr[j+13],arr[j+14]);output[5][i22]=ByteParser3.bytesToUInt24(arr[j+15],arr[j+16],arr[j+17]);output[6][i22]=ByteParser3.bytesToUInt24(arr[j+18],arr[j+19],arr[j+20]);output[7][i22]=ByteParser3.bytesToUInt24(arr[j+21],arr[j+22],arr[j+23])}return output}var sps72=250;var cognixionONEBLESettings2={deviceType:"BLE",deviceName:"cognixionONE",services:{["82046698-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{["8204669A-6313-4BB1-9645-6BA28BF86DF5".toLowerCase()]:{notify:true,notifyCallback:void 0,codec:cognixionONE_EEG_codec2,sps:sps72}},["82E12914-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{["82E12915-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{write:void 0},["82E12916-9AFA-4648-BD1B-8E2B3DC6DAAF".toLowerCase()]:{read:true}}},sps:sps72};var cognixionONESerialSettings2=Object.assign({},cytonSerialSettings2);cognixionONESerialSettings2.sps=sps72;cognixionONESerialSettings2.deviceName="cognixionONE";var defaultChartSetting42={nSec:10,sps:sps72,units:"mV"};var cognixionONEChartSettings2={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting42)),"1":JSON.parse(JSON.stringify(defaultChartSetting42)),"2":JSON.parse(JSON.stringify(defaultChartSetting42)),"3":JSON.parse(JSON.stringify(defaultChartSetting42)),"4":JSON.parse(JSON.stringify(defaultChartSetting42)),"5":JSON.parse(JSON.stringify(defaultChartSetting42)),"6":JSON.parse(JSON.stringify(defaultChartSetting42)),"7":JSON.parse(JSON.stringify(defaultChartSetting42))}};var PeanutCodes2={2:{type:"POOR_SIGNAL",format:"<B",byteLength:1},144:{type:"heg",format:"<i",byteLength:4},145:{type:"filteredHEG",format:"<i",byteLength:4},147:{type:"rawdata4",format:"<iiii",byteLength:4*4},148:{type:"rawdata6",format:"<iiiiii",byteLength:4*6},160:{type:"sampleNumber",format:"<i",byteLength:4},176:{type:"debug0",format:"<i",byteLength:4},177:{type:"debug1",format:"<i",byteLength:4},178:{type:"debug2",format:"<i",byteLength:4},179:{type:"debug3",format:"<i",byteLength:4},180:{type:"debug4",format:"<iiiiii",byteLength:4*6},181:{type:"debug4",format:"<iiiiii",byteLength:4*6},182:{type:"rawdata27",format:"<B"+"i".repeat(26),byteLength:1+4*26}};function peanutcodec2(data){let result={};let i22=0;while(i22<data.length){if(PeanutCodes2[data[i22]]&&i22+1+PeanutCodes2[data[i22]].byteLength<=data.length){let slice=data.slice(i22+1,i22+1+PeanutCodes2[data[i22]].byteLength).buffer;let unpacked=ByteParser3.struct(PeanutCodes2[data[i22]].format).unpack(slice);let code=PeanutCodes2[data[i22]].type;if(code==="unfilteredHEG"||code==="heg")unpacked=unpacked[0]/256;else if(code==="POOR_SIGNAL"||code==="sampleNumber"||code==="debug0"||code==="debug1"||code==="debug2"||code==="debug3")unpacked=unpacked[0];if(!result[PeanutCodes2[data[i22]].type]){if(Array.isArray(unpacked))result[PeanutCodes2[data[i22]].type]=unpacked;else result[PeanutCodes2[data[i22]].type]=[unpacked]}else{if(Array.isArray(unpacked))result[PeanutCodes2[data[i22]].type].push(...unpacked);else result[PeanutCodes2[data[i22]].type].push(unpacked)}i22+=PeanutCodes2[data[i22]].byteLength+1}else i22++}result.timestamp=Date.now();return result}var peanutSerialSettings2={deviceType:"USB",deviceName:"peanut",baudRate:38400,bufferSize:400,write:"protocol 3\\n",buffering:{searchBytes:new Uint8Array([170,170])},codec:peanutcodec2,sps:10.101};var sealevel_hpa2=1013.25;var bme280codec2=data=>{let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;let output={timestamp:Date.now(),temp:[],pressure:[],altitude:[]};let mode=0;if(arr[0].length===74)mode=1;if(!mode){for(let j=0;j<3;j++){let i22=j*16+2;let tint=ByteParser3.bytesToInt32(arr[3+i22],arr[2+i22],arr[1+i22],arr[0+i22]);let tfrac=ByteParser3.bytesToInt32(arr[7+i22],arr[6+i22],arr[5+i22],arr[4+i22]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser3.bytesToInt32(arr[11+i22],arr[10+i22],arr[9+i22],arr[8+i22]);let pfrac=ByteParser3.bytesToInt32(arr[15+i22],arr[14+i22],arr[13+i22],arr[12+i22]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));output.altitude.push(altitude2(output.pressure[j],output.temp[j]))}}else{output.humidity=[];for(let j=0;j<3;j++){let i22=j*24+2;let tint=ByteParser3.bytesToInt32(arr[3+i22],arr[2+i22],arr[1+i22],arr[0+i22]);let tfrac=ByteParser3.bytesToInt32(arr[7+i22],arr[6+i22],arr[5+i22],arr[4+i22]);output.temp.push(tint+tfrac/Math.pow(10,Math.ceil(Math.log10(tfrac))));let pint=10*ByteParser3.bytesToInt32(arr[11+i22],arr[10+i22],arr[9+i22],arr[8+i22]);let pfrac=ByteParser3.bytesToInt32(arr[15+i22],arr[14+i22],arr[13+i22],arr[12+i22]);output.pressure.push(pint+pfrac/Math.pow(10,Math.ceil(Math.log10(pfrac))));let hint=ByteParser3.bytesToInt32(arr[19+i22],arr[18+i22],arr[17+i22],arr[16+i22]);let hfrac=ByteParser3.bytesToInt32(arr[23+i22],arr[22+i22],arr[21+i22],arr[20+i22]);output.humidity.push(hint+hfrac/Math.pow(10,Math.ceil(Math.log10(hfrac))));output.altitude.push(altitude2(output.pressure[j],output.temp[j]))}}return output};function altitude2(pressure,temperature){return 44330*(1-Math.pow(pressure/sealevel_hpa2,.1903))}function nrf5x_usbcodec2(data){let arr;if(data.getInt8)arr=new Uint8Array(data.buffer);else if(!data.buffer)arr=new Uint8Array(data);else arr=data;const output={};if(arr[0]===2){Object.assign(output,ads131m08codec2(arr.subarray(2)))}else if(arr[0]===3){let result=ads131m08codec2(arr.subarray(2));Object.keys(result).forEach((key,i22)=>{output[i22+8]=result[key]})}else if(arr[0]===4){Object.assign(output,mpu6050codec2(arr.subarray(2)))}else if(arr[0]===5){Object.assign(output,max3010xcodec2(arr.subarray(2)))}else if(arr[0]===6){Object.assign(output,bme280codec2(arr.subarray(2)))}else{Object.assign(output,ads131m08codec2(arr))}return output}var nrf5xSerialSettings2={deviceType:"USB",deviceName:"nrf5x",baudRate:115200,buffering:{searchBytes:new Uint8Array([240,240])},codec:nrf5x_usbcodec2,sps:250};var nrf5xBLESettings2={deviceType:"BLE",deviceName:"nrf5x",sps:250,services:{"0000cafe-b0ba-8bad-f00d-deadbeef0000":{"0001cafe-b0ba-8bad-f00d-deadbeef0000":{write:void 0},"0002cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec2,sps:250},"0003cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:max3010xcodec2,sps:100},"0004cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:mpu6050codec2,sps:100},"0005cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:ads131m08codec2,sps:250},"0006cafe-b0ba-8bad-f00d-deadbeef0000":{notify:true,notifyCallback:void 0,codec:bme280codec2,sps:3.33}}}};var defaultChartSetting52={nSec:10,sps:250,units:"mV"};var nrf5x_usbChartSettings2={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting52)),"1":JSON.parse(JSON.stringify(defaultChartSetting52)),"2":JSON.parse(JSON.stringify(defaultChartSetting52)),"3":JSON.parse(JSON.stringify(defaultChartSetting52)),"4":JSON.parse(JSON.stringify(defaultChartSetting52)),"5":JSON.parse(JSON.stringify(defaultChartSetting52)),"6":JSON.parse(JSON.stringify(defaultChartSetting52)),"7":JSON.parse(JSON.stringify(defaultChartSetting52))},generateNewLines:true,cleanGeneration:false};var gain22=32;var nbits22=24;var vref22=1.2;var defaultsetting32={sps:250,useDCBlock:false,useBandpass:false,bandpassLower:3,bandpassUpper:45,useScaling:true,scalar:.96*1e3*vref22/(gain22*(Math.pow(2,nbits22)-1))};var nrf5x_usbFilterSettings2={"0":JSON.parse(JSON.stringify(defaultsetting32)),"1":JSON.parse(JSON.stringify(defaultsetting32)),"2":JSON.parse(JSON.stringify(defaultsetting32)),"3":JSON.parse(JSON.stringify(defaultsetting32)),"4":JSON.parse(JSON.stringify(defaultsetting32)),"5":JSON.parse(JSON.stringify(defaultsetting32)),"6":JSON.parse(JSON.stringify(defaultsetting32)),"7":JSON.parse(JSON.stringify(defaultsetting32)),"8":JSON.parse(JSON.stringify(defaultsetting32)),"9":JSON.parse(JSON.stringify(defaultsetting32)),"10":JSON.parse(JSON.stringify(defaultsetting32)),"11":JSON.parse(JSON.stringify(defaultsetting32)),"12":JSON.parse(JSON.stringify(defaultsetting32)),"13":JSON.parse(JSON.stringify(defaultsetting32)),"14":JSON.parse(JSON.stringify(defaultsetting32)),"15":JSON.parse(JSON.stringify(defaultsetting32))};var textdecoder22=new TextDecoder;function statechangercodec2(value){let output={timestamp:0,left_red:0,left_infrared:0,left_heg:0,center_red:0,center_infrared:0,center_heg:0,right_red:0,right_infrared:0,right_heg:0};let txt=textdecoder22.decode(value);let line=txt.split("|");if(line.length>=5){output.timestamp=Date.now();output.left_red=parseInt(line[1]);output.left_infrared=parseInt(line[2]);output.left_heg=parseFloat(line[3]);output.center_red=parseInt(line[4]);output.center_infrared=parseInt(line[5]);output.center_heg=parseFloat(line[6]);output.right_red=parseInt(line[7]);output.right_infrared=parseInt(line[8]);output.right_heg=parseFloat(line[9]);return output}else return txt}var statechangerSerialSettings2={deviceType:"USB",deviceName:"statechanger",baudRate:115200,codec:statechangercodec2,sps:20};var statechangerBLESettings2={deviceType:"BLE",deviceName:"statechanger",sps:20,services:{["6E400001-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{"6e400002-b5a3-f393-e0a9-e50e24dcca9e":{write:"t"},"6e400003-b5a3-f393-e0a9-e50e24dcca9e":{notify:true,notifyCallback:void 0,codec:statechangercodec2}},["6E400004-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{["6E400005-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true},["6E400006-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{write:void 0,notify:true,notifyCallback:void 0},["6E400007-B5A3-F393-E0A9-E50E24DCCA9E".toLowerCase()]:{read:true}}},androidWebBLE:"o"};function blueberrycodec2(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.red/(.5*(output.ir+output.ir2));return output}var sps82=40;var blueberryBLESettings2={deviceType:"BLE",deviceName:"blueberry",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"3f3e3d3c-3b3a-3938-3736-353433323130":{notify:true,notifyCallback:void 0,codec:blueberrycodec2,sps:sps82}}},sps:sps82};function blueberryshortcodec2(value){let output={sred:value.getInt32(2),sir:value.getInt32(6),sir2:value.getInt32(10),timestamp:Date.now()};output.sheg=output.sred/(.5*(output.sir+output.sir2));return output}function blueberrylongcodec2(value){let output={red:value.getInt32(2),ir:value.getInt32(6),ir2:value.getInt32(10),timestamp:Date.now()};output.heg=output.sred/(.5*(output.ir+output.ir2));return output}var sps92=40;var blueberry2BLESettings2={deviceType:"BLE",deviceName:"blueberry2",namePrefix:"blueberry",services:{"0f0e0d0c-0b0a-0908-0706-050403020100":{"1f1e1d1c-1b1a-1918-1716-151413121110":{write:void 0},"4f4e4d4c-4b6a-6968-6766-656463426160":{notify:true,notifyCallback:void 0,codec:blueberrylongcodec2,sps:sps92},"4f4e4d4c-4b5a-5958-5756-555453425150":{notify:true,notifyCallback:void 0,codec:blueberryshortcodec2,sps:sps92}}},sps:sps92};var defaultsetting12={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var ganglionFilterSettings2={"0":JSON.parse(JSON.stringify(defaultsetting12)),"1":JSON.parse(JSON.stringify(defaultsetting12)),"2":JSON.parse(JSON.stringify(defaultsetting12)),"3":JSON.parse(JSON.stringify(defaultsetting12))};var defaultChartSetting62={nSec:10,sps:250,units:"mV"};var ganglionChartSettings2={lines:{"0":JSON.parse(JSON.stringify(defaultChartSetting62)),"1":JSON.parse(JSON.stringify(defaultChartSetting62)),"2":JSON.parse(JSON.stringify(defaultChartSetting62)),"3":JSON.parse(JSON.stringify(defaultChartSetting62)),"ax":{nSec:10,sps:250,units:"mg"},"ay":{nSec:10,sps:250,units:"mg"},"az":{nSec:10,sps:250,units:"mg"}},generateNewLines:true};var defaultsetting42={sps:250,useDCBlock:true,useBandpass:true,bandpassLower:3,bandpassUpper:45};var museFilterSettings2={"0":JSON.parse(JSON.stringify(defaultsetting42)),"1":JSON.parse(JSON.stringify(defaultsetting42)),"2":JSON.parse(JSON.stringify(defaultsetting42)),"3":JSON.parse(JSON.stringify(defaultsetting42)),"4":JSON.parse(JSON.stringify(defaultsetting42))};function hrcodec2(data){return{hr:data.getInt8(1),timestamp:Date.now()}}var heartRateBLESettings2={deviceType:"BLE",deviceName:"heartrate",services:{"heart_rate":{"heart_rate_measurement":{notify:true,notifyCallback:void 0,codec:hrcodec2}}}};var simulatorSettings2={sps:250,deviceType:"CUSTOM",deviceName:"simulator",simulate:{"0":{sps:250,freq:1,amplitude:1,offset:0},"1":{sps:250,freq:10,amplitude:1,offset:0},"2":{sps:250,freq:100,amplitude:.5,offset:.5},"3":{sps:250,freq:25,amplitude:1,offset:0}},connect:(settings={})=>{return new Promise(async(res,rej)=>{let _id=`simulated${Math.floor(Math.random()*1e15)}`;let info={_id,settings:Object.assign(Object.assign({},simulatorSettings2),settings)};info.settings.looping=true;let loopTime=50;let lastTime=Date.now();let loop22=()=>{if(info.settings.looping){let newData={};let now=Date.now();let frame=now-lastTime;for(const key in info.settings.simulate){let newPoints=Math.floor(info.settings.simulate[key].sps*frame/1e3);newData[key]=new Array(newPoints).fill(0);newData[key]=newData[key].map((v2,i22)=>{return Math.sin(2*Math.PI*info.settings.simulate[key].freq*.001*(lastTime+frame*(i22+1)/newPoints))*info.settings.simulate[key].amplitude+info.settings.simulate[key].offset})}lastTime=now;newData.timestamp=lastTime;info.settings.ondata(newData);setTimeout(()=>{loop22()},loopTime)}};loop22();if(info.settings.onconnect)info.settings.onconnect(info);res(info)})},codec:reading=>{return reading},disconnect:info=>{console.log(info);info.settings.looping=false;info.settings.ondisconnect(info)},onconnect:info=>{console.log("simulator connected!",info)},ondisconnect:info=>{console.log("simulator disconnected!",info)},ondata:data=>{}};var Devices2={BLE:{"nrf5x":nrf5xBLESettings2,"hegduino":hegduinoBLESettings2,"hegduinoV1":hegduinoV1BLESettings2,"cognixionONE":cognixionONEBLESettings2,"statechanger":statechangerBLESettings2,"blueberry":blueberryBLESettings2,"blueberry2":blueberry2BLESettings2,"heart_rate":heartRateBLESettings2},USB:{"nrf5x":nrf5xSerialSettings2,"freeEEG32":freeeeg32SerialSettings2,"freeEEG32_optical":freeeeg32_optical_SerialSettings2,"freeEEG128":freeeeg128SerialSettings2,"hegduino":hegduinoSerialSettings2,"hegduinoV1":hegduinoV1SerialSettings2,"cyton":cytonSerialSettings2,"cyton_daisy":daisycytonSerialSettings2,"peanut":peanutSerialSettings2,"statechanger":statechangerSerialSettings2,"cognixionONE":cytonSerialSettings2},BLE_CUSTOM:{},USB_CUSTOM:{},CUSTOM:{"simulator":simulatorSettings2}};var textdecoder32=new TextDecoder;var BLE=new BLEClient;var workers=new WorkerService2({roots:{...workerCanvasRoutes2,...remoteGraphRoutes2}});var __create4=Object.create;var __defProp4=Object.defineProperty;var __getOwnPropDesc4=Object.getOwnPropertyDescriptor;var __getOwnPropNames4=Object.getOwnPropertyNames;var __getProtoOf4=Object.getPrototypeOf;var __hasOwnProp4=Object.prototype.hasOwnProperty;var __commonJS4=(cb,mod)=>function __require4(){return mod||(0,cb[__getOwnPropNames4(cb)[0]])((mod={exports:{}}).exports,mod),mod.exports};var __copyProps4=(to,from,except,desc)=>{if(from&&typeof from==="object"||typeof from==="function"){for(let key of __getOwnPropNames4(from))if(!__hasOwnProp4.call(to,key)&&key!==except)__defProp4(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc4(from,key))||desc.enumerable})}return to};var __toESM4=(mod,isNodeMode,target)=>(target=mod!=null?__create4(__getProtoOf4(mod)):{},__copyProps4(isNodeMode||!mod||!mod.__esModule?__defProp4(target,"default",{value:mod,enumerable:true}):target,mod));var require_browserfs=__commonJS4({"node_modules/browserfs/dist/browserfs.js"(exports,module2){(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module2==="object")module2.exports=factory();else if(typeof define==="function"&&define.amd)define([],factory);else if(typeof exports==="object")exports["BrowserFS"]=factory();else root["BrowserFS"]=factory()})(exports,function(){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module22=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module22.exports,module22,module22.exports,__webpack_require__);module22.loaded=true;return module22.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}([function(module22,exports2,__webpack_require__){(function(Buffer2,global2,module3,process2){"use strict";Object.defineProperty(exports2,"__esModule",{value:true});var buffer=__webpack_require__(2);var path=__webpack_require__(9);var ErrorCode;(function(ErrorCode2){ErrorCode2[ErrorCode2["EPERM"]=1]="EPERM";ErrorCode2[ErrorCode2["ENOENT"]=2]="ENOENT";ErrorCode2[ErrorCode2["EIO"]=5]="EIO";ErrorCode2[ErrorCode2["EBADF"]=9]="EBADF";ErrorCode2[ErrorCode2["EACCES"]=13]="EACCES";ErrorCode2[ErrorCode2["EBUSY"]=16]="EBUSY";ErrorCode2[ErrorCode2["EEXIST"]=17]="EEXIST";ErrorCode2[ErrorCode2["ENOTDIR"]=20]="ENOTDIR";ErrorCode2[ErrorCode2["EISDIR"]=21]="EISDIR";ErrorCode2[ErrorCode2["EINVAL"]=22]="EINVAL";ErrorCode2[ErrorCode2["EFBIG"]=27]="EFBIG";ErrorCode2[ErrorCode2["ENOSPC"]=28]="ENOSPC";ErrorCode2[ErrorCode2["EROFS"]=30]="EROFS";ErrorCode2[ErrorCode2["ENOTEMPTY"]=39]="ENOTEMPTY";ErrorCode2[ErrorCode2["ENOTSUP"]=95]="ENOTSUP"})(ErrorCode||(ErrorCode={}));var ErrorStrings={};ErrorStrings[ErrorCode.EPERM]="Operation not permitted.";ErrorStrings[ErrorCode.ENOENT]="No such file or directory.";ErrorStrings[ErrorCode.EIO]="Input/output error.";ErrorStrings[ErrorCode.EBADF]="Bad file descriptor.";ErrorStrings[ErrorCode.EACCES]="Permission denied.";ErrorStrings[ErrorCode.EBUSY]="Resource busy or locked.";ErrorStrings[ErrorCode.EEXIST]="File exists.";ErrorStrings[ErrorCode.ENOTDIR]="File is not a directory.";ErrorStrings[ErrorCode.EISDIR]="File is a directory.";ErrorStrings[ErrorCode.EINVAL]="Invalid argument.";ErrorStrings[ErrorCode.EFBIG]="File is too big.";ErrorStrings[ErrorCode.ENOSPC]="No space left on disk.";ErrorStrings[ErrorCode.EROFS]="Cannot modify a read-only file system.";ErrorStrings[ErrorCode.ENOTEMPTY]="Directory is not empty.";ErrorStrings[ErrorCode.ENOTSUP]="Operation is not supported.";var ApiError=function(Error2){function ApiError2(type,message,path$$1){if(message===void 0)message=ErrorStrings[type];Error2.call(this,message);this.syscall="";this.errno=type;this.code=ErrorCode[type];this.path=path$$1;this.stack=new Error2().stack;this.message="Error: "+this.code+": "+message+(this.path?", \'"+this.path+"\'":"")}if(Error2)ApiError2.__proto__=Error2;ApiError2.prototype=Object.create(Error2&&Error2.prototype);ApiError2.prototype.constructor=ApiError2;ApiError2.fromJSON=function fromJSON(json){var err=new ApiError2(0);err.errno=json.errno;err.code=json.code;err.path=json.path;err.stack=json.stack;err.message=json.message;return err};ApiError2.fromBuffer=function fromBuffer(buffer$$1,i22){if(i22===void 0)i22=0;return ApiError2.fromJSON(JSON.parse(buffer$$1.toString("utf8",i22+4,i22+4+buffer$$1.readUInt32LE(i22))))};ApiError2.FileError=function FileError(code,p2){return new ApiError2(code,ErrorStrings[code],p2)};ApiError2.ENOENT=function ENOENT(path$$1){return this.FileError(ErrorCode.ENOENT,path$$1)};ApiError2.EEXIST=function EEXIST(path$$1){return this.FileError(ErrorCode.EEXIST,path$$1)};ApiError2.EISDIR=function EISDIR(path$$1){return this.FileError(ErrorCode.EISDIR,path$$1)};ApiError2.ENOTDIR=function ENOTDIR(path$$1){return this.FileError(ErrorCode.ENOTDIR,path$$1)};ApiError2.EPERM=function EPERM(path$$1){return this.FileError(ErrorCode.EPERM,path$$1)};ApiError2.ENOTEMPTY=function ENOTEMPTY(path$$1){return this.FileError(ErrorCode.ENOTEMPTY,path$$1)};ApiError2.prototype.toString=function toString(){return this.message};ApiError2.prototype.toJSON=function toJSON(){return{errno:this.errno,code:this.code,path:this.path,stack:this.stack,message:this.message}};ApiError2.prototype.writeToBuffer=function writeToBuffer(buffer$$1,i22){if(buffer$$1===void 0)buffer$$1=Buffer2.alloc(this.bufferSize());if(i22===void 0)i22=0;var bytesWritten=buffer$$1.write(JSON.stringify(this.toJSON()),i22+4);buffer$$1.writeUInt32LE(bytesWritten,i22);return buffer$$1};ApiError2.prototype.bufferSize=function bufferSize(){return 4+Buffer2.byteLength(JSON.stringify(this.toJSON()))};return ApiError2}(Error);var api_error=Object.freeze({get ErrorCode(){return ErrorCode},ErrorStrings,ApiError});var ActionType;(function(ActionType2){ActionType2[ActionType2["NOP"]=0]="NOP";ActionType2[ActionType2["THROW_EXCEPTION"]=1]="THROW_EXCEPTION";ActionType2[ActionType2["TRUNCATE_FILE"]=2]="TRUNCATE_FILE";ActionType2[ActionType2["CREATE_FILE"]=3]="CREATE_FILE"})(ActionType||(ActionType={}));var FileFlag=function FileFlag2(flagStr){this.flagStr=flagStr;if(FileFlag2.validFlagStrs.indexOf(flagStr)<0){throw new ApiError(ErrorCode.EINVAL,"Invalid flag: "+flagStr)}};FileFlag.getFileFlag=function getFileFlag(flagStr){if(FileFlag.flagCache.hasOwnProperty(flagStr)){return FileFlag.flagCache[flagStr]}return FileFlag.flagCache[flagStr]=new FileFlag(flagStr)};FileFlag.prototype.getFlagString=function getFlagString(){return this.flagStr};FileFlag.prototype.isReadable=function isReadable(){return this.flagStr.indexOf("r")!==-1||this.flagStr.indexOf("+")!==-1};FileFlag.prototype.isWriteable=function isWriteable(){return this.flagStr.indexOf("w")!==-1||this.flagStr.indexOf("a")!==-1||this.flagStr.indexOf("+")!==-1};FileFlag.prototype.isTruncating=function isTruncating(){return this.flagStr.indexOf("w")!==-1};FileFlag.prototype.isAppendable=function isAppendable(){return this.flagStr.indexOf("a")!==-1};FileFlag.prototype.isSynchronous=function isSynchronous(){return this.flagStr.indexOf("s")!==-1};FileFlag.prototype.isExclusive=function isExclusive(){return this.flagStr.indexOf("x")!==-1};FileFlag.prototype.pathExistsAction=function pathExistsAction(){if(this.isExclusive()){return ActionType.THROW_EXCEPTION}else if(this.isTruncating()){return ActionType.TRUNCATE_FILE}else{return ActionType.NOP}};FileFlag.prototype.pathNotExistsAction=function pathNotExistsAction(){if((this.isWriteable()||this.isAppendable())&&this.flagStr!=="r+"){return ActionType.CREATE_FILE}else{return ActionType.THROW_EXCEPTION}};FileFlag.flagCache={};FileFlag.validFlagStrs=["r","r+","rs","rs+","w","wx","w+","wx+","a","ax","a+","ax+"];var FileType;(function(FileType2){FileType2[FileType2["FILE"]=32768]="FILE";FileType2[FileType2["DIRECTORY"]=16384]="DIRECTORY";FileType2[FileType2["SYMLINK"]=40960]="SYMLINK"})(FileType||(FileType={}));var Stats=function Stats2(itemType,size,mode,atime,mtime,ctime){if(atime===void 0)atime=new Date;if(mtime===void 0)mtime=new Date;if(ctime===void 0)ctime=new Date;this.size=size;this.atime=atime;this.mtime=mtime;this.ctime=ctime;this.dev=0;this.ino=0;this.rdev=0;this.nlink=1;this.blksize=4096;this.uid=0;this.gid=0;this.birthtime=new Date(0);this.fileData=null;if(!mode){switch(itemType){case FileType.FILE:this.mode=420;break;case FileType.DIRECTORY:default:this.mode=511}}else{this.mode=mode}this.blocks=Math.ceil(size/512);if(this.mode<4096){this.mode|=itemType}};Stats.fromBuffer=function fromBuffer(buffer$$1){var size=buffer$$1.readUInt32LE(0),mode=buffer$$1.readUInt32LE(4),atime=buffer$$1.readDoubleLE(8),mtime=buffer$$1.readDoubleLE(16),ctime=buffer$$1.readDoubleLE(24);return new Stats(mode&61440,size,mode&4095,new Date(atime),new Date(mtime),new Date(ctime))};Stats.prototype.toBuffer=function toBuffer(){var buffer$$1=Buffer2.alloc(32);buffer$$1.writeUInt32LE(this.size,0);buffer$$1.writeUInt32LE(this.mode,4);buffer$$1.writeDoubleLE(this.atime.getTime(),8);buffer$$1.writeDoubleLE(this.mtime.getTime(),16);buffer$$1.writeDoubleLE(this.ctime.getTime(),24);return buffer$$1};Stats.prototype.clone=function clone(){return new Stats(this.mode&61440,this.size,this.mode&4095,this.atime,this.mtime,this.ctime)};Stats.prototype.isFile=function isFile(){return(this.mode&61440)===FileType.FILE};Stats.prototype.isDirectory=function isDirectory(){return(this.mode&61440)===FileType.DIRECTORY};Stats.prototype.isSymbolicLink=function isSymbolicLink(){return(this.mode&61440)===FileType.SYMLINK};Stats.prototype.chmod=function chmod(mode){this.mode=this.mode&61440|mode};Stats.prototype.isSocket=function isSocket(){return false};Stats.prototype.isBlockDevice=function isBlockDevice(){return false};Stats.prototype.isCharacterDevice=function isCharacterDevice(){return false};Stats.prototype.isFIFO=function isFIFO(){return false};var wrapCb=function(cb,numArgs){return cb};function assertRoot(fs4){if(fs4){return fs4}throw new ApiError(ErrorCode.EIO,"Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)")}function normalizeMode(mode,def){switch(typeof mode){case"number":return mode;case"string":var trueMode=parseInt(mode,8);if(!isNaN(trueMode)){return trueMode}return def;default:return def}}function normalizeTime(time){if(time instanceof Date){return time}else if(typeof time==="number"){return new Date(time*1e3)}else{throw new ApiError(ErrorCode.EINVAL,"Invalid time.")}}function normalizePath(p2){if(p2.indexOf("\\0")>=0){throw new ApiError(ErrorCode.EINVAL,"Path must be a string without null bytes.")}else if(p2===""){throw new ApiError(ErrorCode.EINVAL,"Path must not be empty.")}return path.resolve(p2)}function normalizeOptions(options,defEnc,defFlag,defMode){switch(typeof options){case"object":return{encoding:typeof options["encoding"]!=="undefined"?options["encoding"]:defEnc,flag:typeof options["flag"]!=="undefined"?options["flag"]:defFlag,mode:normalizeMode(options["mode"],defMode)};case"string":return{encoding:options,flag:defFlag,mode:defMode};default:return{encoding:defEnc,flag:defFlag,mode:defMode}}}function nopCb(){}var FS=function FS2(){this.F_OK=0;this.R_OK=4;this.W_OK=2;this.X_OK=1;this.root=null;this.fdMap={};this.nextFd=100};FS.prototype.initialize=function initialize3(rootFS){if(!rootFS.constructor.isAvailable()){throw new ApiError(ErrorCode.EINVAL,"Tried to instantiate BrowserFS with an unavailable file system.")}return this.root=rootFS};FS.prototype._toUnixTimestamp=function _toUnixTimestamp(time){if(typeof time==="number"){return time}else if(time instanceof Date){return time.getTime()/1e3}throw new Error("Cannot parse time: "+time)};FS.prototype.getRootFS=function getRootFS(){if(this.root){return this.root}else{return null}};FS.prototype.rename=function rename(oldPath,newPath,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{assertRoot(this.root).rename(normalizePath(oldPath),normalizePath(newPath),newCb)}catch(e){newCb(e)}};FS.prototype.renameSync=function renameSync(oldPath,newPath){assertRoot(this.root).renameSync(normalizePath(oldPath),normalizePath(newPath))};FS.prototype.exists=function exists2(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{return assertRoot(this.root).exists(normalizePath(path$$1),newCb)}catch(e){return newCb(false)}};FS.prototype.existsSync=function existsSync(path$$1){try{return assertRoot(this.root).existsSync(normalizePath(path$$1))}catch(e){return false}};FS.prototype.stat=function stat(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,2);try{return assertRoot(this.root).stat(normalizePath(path$$1),false,newCb)}catch(e){return newCb(e)}};FS.prototype.statSync=function statSync(path$$1){return assertRoot(this.root).statSync(normalizePath(path$$1),false)};FS.prototype.lstat=function lstat(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,2);try{return assertRoot(this.root).stat(normalizePath(path$$1),true,newCb)}catch(e){return newCb(e)}};FS.prototype.lstatSync=function lstatSync(path$$1){return assertRoot(this.root).statSync(normalizePath(path$$1),true)};FS.prototype.truncate=function truncate(path$$1,arg2,cb){if(arg2===void 0)arg2=0;if(cb===void 0)cb=nopCb;var len=0;if(typeof arg2==="function"){cb=arg2}else if(typeof arg2==="number"){len=arg2}var newCb=wrapCb(cb,1);try{if(len<0){throw new ApiError(ErrorCode.EINVAL)}return assertRoot(this.root).truncate(normalizePath(path$$1),len,newCb)}catch(e){return newCb(e)}};FS.prototype.truncateSync=function truncateSync(path$$1,len){if(len===void 0)len=0;if(len<0){throw new ApiError(ErrorCode.EINVAL)}return assertRoot(this.root).truncateSync(normalizePath(path$$1),len)};FS.prototype.unlink=function unlink(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{return assertRoot(this.root).unlink(normalizePath(path$$1),newCb)}catch(e){return newCb(e)}};FS.prototype.unlinkSync=function unlinkSync(path$$1){return assertRoot(this.root).unlinkSync(normalizePath(path$$1))};FS.prototype.open=function open(path$$1,flag,arg2,cb){var this$1=this;if(cb===void 0)cb=nopCb;var mode=normalizeMode(arg2,420);cb=typeof arg2==="function"?arg2:cb;var newCb=wrapCb(cb,2);try{assertRoot(this.root).open(normalizePath(path$$1),FileFlag.getFileFlag(flag),mode,function(e,file){if(file){newCb(e,this$1.getFdForFile(file))}else{newCb(e)}})}catch(e){newCb(e)}};FS.prototype.openSync=function openSync(path$$1,flag,mode){if(mode===void 0)mode=420;return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1),FileFlag.getFileFlag(flag),normalizeMode(mode,420)))};FS.prototype.readFile=function readFile2(filename,arg2,cb){if(arg2===void 0)arg2={};if(cb===void 0)cb=nopCb;var options=normalizeOptions(arg2,null,"r",null);cb=typeof arg2==="function"?arg2:cb;var newCb=wrapCb(cb,2);try{var flag=FileFlag.getFileFlag(options["flag"]);if(!flag.isReadable()){return newCb(new ApiError(ErrorCode.EINVAL,"Flag passed to readFile must allow for reading."))}return assertRoot(this.root).readFile(normalizePath(filename),options.encoding,flag,newCb)}catch(e){return newCb(e)}};FS.prototype.readFileSync=function readFileSync(filename,arg2){if(arg2===void 0)arg2={};var options=normalizeOptions(arg2,null,"r",null);var flag=FileFlag.getFileFlag(options.flag);if(!flag.isReadable()){throw new ApiError(ErrorCode.EINVAL,"Flag passed to readFile must allow for reading.")}return assertRoot(this.root).readFileSync(normalizePath(filename),options.encoding,flag)};FS.prototype.writeFile=function writeFile2(filename,data,arg3,cb){if(arg3===void 0)arg3={};if(cb===void 0)cb=nopCb;var options=normalizeOptions(arg3,"utf8","w",420);cb=typeof arg3==="function"?arg3:cb;var newCb=wrapCb(cb,1);try{var flag=FileFlag.getFileFlag(options.flag);if(!flag.isWriteable()){return newCb(new ApiError(ErrorCode.EINVAL,"Flag passed to writeFile must allow for writing."))}return assertRoot(this.root).writeFile(normalizePath(filename),data,options.encoding,flag,options.mode,newCb)}catch(e){return newCb(e)}};FS.prototype.writeFileSync=function writeFileSync(filename,data,arg3){var options=normalizeOptions(arg3,"utf8","w",420);var flag=FileFlag.getFileFlag(options.flag);if(!flag.isWriteable()){throw new ApiError(ErrorCode.EINVAL,"Flag passed to writeFile must allow for writing.")}return assertRoot(this.root).writeFileSync(normalizePath(filename),data,options.encoding,flag,options.mode)};FS.prototype.appendFile=function appendFile3(filename,data,arg3,cb){if(cb===void 0)cb=nopCb;var options=normalizeOptions(arg3,"utf8","a",420);cb=typeof arg3==="function"?arg3:cb;var newCb=wrapCb(cb,1);try{var flag=FileFlag.getFileFlag(options.flag);if(!flag.isAppendable()){return newCb(new ApiError(ErrorCode.EINVAL,"Flag passed to appendFile must allow for appending."))}assertRoot(this.root).appendFile(normalizePath(filename),data,options.encoding,flag,options.mode,newCb)}catch(e){newCb(e)}};FS.prototype.appendFileSync=function appendFileSync(filename,data,arg3){var options=normalizeOptions(arg3,"utf8","a",420);var flag=FileFlag.getFileFlag(options.flag);if(!flag.isAppendable()){throw new ApiError(ErrorCode.EINVAL,"Flag passed to appendFile must allow for appending.")}return assertRoot(this.root).appendFileSync(normalizePath(filename),data,options.encoding,flag,options.mode)};FS.prototype.fstat=function fstat(fd,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,2);try{var file=this.fd2file(fd);file.stat(newCb)}catch(e){newCb(e)}};FS.prototype.fstatSync=function fstatSync(fd){return this.fd2file(fd).statSync()};FS.prototype.close=function close(fd,cb){var this$1=this;if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{this.fd2file(fd).close(function(e){if(!e){this$1.closeFd(fd)}newCb(e)})}catch(e){newCb(e)}};FS.prototype.closeSync=function closeSync(fd){this.fd2file(fd).closeSync();this.closeFd(fd)};FS.prototype.ftruncate=function ftruncate(fd,arg2,cb){if(cb===void 0)cb=nopCb;var length=typeof arg2==="number"?arg2:0;cb=typeof arg2==="function"?arg2:cb;var newCb=wrapCb(cb,1);try{var file=this.fd2file(fd);if(length<0){throw new ApiError(ErrorCode.EINVAL)}file.truncate(length,newCb)}catch(e){newCb(e)}};FS.prototype.ftruncateSync=function ftruncateSync(fd,len){if(len===void 0)len=0;var file=this.fd2file(fd);if(len<0){throw new ApiError(ErrorCode.EINVAL)}file.truncateSync(len)};FS.prototype.fsync=function fsync(fd,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{this.fd2file(fd).sync(newCb)}catch(e){newCb(e)}};FS.prototype.fsyncSync=function fsyncSync(fd){this.fd2file(fd).syncSync()};FS.prototype.fdatasync=function fdatasync(fd,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{this.fd2file(fd).datasync(newCb)}catch(e){newCb(e)}};FS.prototype.fdatasyncSync=function fdatasyncSync(fd){this.fd2file(fd).datasyncSync()};FS.prototype.write=function write(fd,arg2,arg3,arg4,arg5,cb){if(cb===void 0)cb=nopCb;var buffer$$1,offset,length,position=null;if(typeof arg2==="string"){var encoding="utf8";switch(typeof arg3){case"function":cb=arg3;break;case"number":position=arg3;encoding=typeof arg4==="string"?arg4:"utf8";cb=typeof arg5==="function"?arg5:cb;break;default:cb=typeof arg4==="function"?arg4:typeof arg5==="function"?arg5:cb;return cb(new ApiError(ErrorCode.EINVAL,"Invalid arguments."))}buffer$$1=Buffer2.from(arg2,encoding);offset=0;length=buffer$$1.length}else{buffer$$1=arg2;offset=arg3;length=arg4;position=typeof arg5==="number"?arg5:null;cb=typeof arg5==="function"?arg5:cb}var newCb=wrapCb(cb,3);try{var file=this.fd2file(fd);if(position===void 0||position===null){position=file.getPos()}file.write(buffer$$1,offset,length,position,newCb)}catch(e){newCb(e)}};FS.prototype.writeSync=function writeSync(fd,arg2,arg3,arg4,arg5){var buffer$$1,offset=0,length,position;if(typeof arg2==="string"){position=typeof arg3==="number"?arg3:null;var encoding=typeof arg4==="string"?arg4:"utf8";offset=0;buffer$$1=Buffer2.from(arg2,encoding);length=buffer$$1.length}else{buffer$$1=arg2;offset=arg3;length=arg4;position=typeof arg5==="number"?arg5:null}var file=this.fd2file(fd);if(position===void 0||position===null){position=file.getPos()}return file.writeSync(buffer$$1,offset,length,position)};FS.prototype.read=function read(fd,arg2,arg3,arg4,arg5,cb){if(cb===void 0)cb=nopCb;var position,offset,length,buffer$$1,newCb;if(typeof arg2==="number"){length=arg2;position=arg3;var encoding=arg4;cb=typeof arg5==="function"?arg5:cb;offset=0;buffer$$1=Buffer2.alloc(length);newCb=wrapCb(function(err,bytesRead,buf){if(err){return cb(err)}cb(err,buf.toString(encoding),bytesRead)},3)}else{buffer$$1=arg2;offset=arg3;length=arg4;position=arg5;newCb=wrapCb(cb,3)}try{var file=this.fd2file(fd);if(position===void 0||position===null){position=file.getPos()}file.read(buffer$$1,offset,length,position,newCb)}catch(e){newCb(e)}};FS.prototype.readSync=function readSync(fd,arg2,arg3,arg4,arg5){var shenanigans=false;var buffer$$1,offset,length,position,encoding="utf8";if(typeof arg2==="number"){length=arg2;position=arg3;encoding=arg4;offset=0;buffer$$1=Buffer2.alloc(length);shenanigans=true}else{buffer$$1=arg2;offset=arg3;length=arg4;position=arg5}var file=this.fd2file(fd);if(position===void 0||position===null){position=file.getPos()}var rv=file.readSync(buffer$$1,offset,length,position);if(!shenanigans){return rv}else{return[buffer$$1.toString(encoding),rv]}};FS.prototype.fchown=function fchown(fd,uid,gid,callback){if(callback===void 0)callback=nopCb;var newCb=wrapCb(callback,1);try{this.fd2file(fd).chown(uid,gid,newCb)}catch(e){newCb(e)}};FS.prototype.fchownSync=function fchownSync(fd,uid,gid){this.fd2file(fd).chownSync(uid,gid)};FS.prototype.fchmod=function fchmod(fd,mode,cb){var newCb=wrapCb(cb,1);try{var numMode=typeof mode==="string"?parseInt(mode,8):mode;this.fd2file(fd).chmod(numMode,newCb)}catch(e){newCb(e)}};FS.prototype.fchmodSync=function fchmodSync(fd,mode){var numMode=typeof mode==="string"?parseInt(mode,8):mode;this.fd2file(fd).chmodSync(numMode)};FS.prototype.futimes=function futimes(fd,atime,mtime,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{var file=this.fd2file(fd);if(typeof atime==="number"){atime=new Date(atime*1e3)}if(typeof mtime==="number"){mtime=new Date(mtime*1e3)}file.utimes(atime,mtime,newCb)}catch(e){newCb(e)}};FS.prototype.futimesSync=function futimesSync(fd,atime,mtime){this.fd2file(fd).utimesSync(normalizeTime(atime),normalizeTime(mtime))};FS.prototype.rmdir=function rmdir(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{path$$1=normalizePath(path$$1);assertRoot(this.root).rmdir(path$$1,newCb)}catch(e){newCb(e)}};FS.prototype.rmdirSync=function rmdirSync(path$$1){path$$1=normalizePath(path$$1);return assertRoot(this.root).rmdirSync(path$$1)};FS.prototype.mkdir=function mkdir(path$$1,mode,cb){if(cb===void 0)cb=nopCb;if(typeof mode==="function"){cb=mode;mode=511}var newCb=wrapCb(cb,1);try{path$$1=normalizePath(path$$1);assertRoot(this.root).mkdir(path$$1,mode,newCb)}catch(e){newCb(e)}};FS.prototype.mkdirSync=function mkdirSync(path$$1,mode){assertRoot(this.root).mkdirSync(normalizePath(path$$1),normalizeMode(mode,511))};FS.prototype.readdir=function readdir(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,2);try{path$$1=normalizePath(path$$1);assertRoot(this.root).readdir(path$$1,newCb)}catch(e){newCb(e)}};FS.prototype.readdirSync=function readdirSync(path$$1){path$$1=normalizePath(path$$1);return assertRoot(this.root).readdirSync(path$$1)};FS.prototype.link=function link(srcpath,dstpath,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{srcpath=normalizePath(srcpath);dstpath=normalizePath(dstpath);assertRoot(this.root).link(srcpath,dstpath,newCb)}catch(e){newCb(e)}};FS.prototype.linkSync=function linkSync(srcpath,dstpath){srcpath=normalizePath(srcpath);dstpath=normalizePath(dstpath);return assertRoot(this.root).linkSync(srcpath,dstpath)};FS.prototype.symlink=function symlink(srcpath,dstpath,arg3,cb){if(cb===void 0)cb=nopCb;var type=typeof arg3==="string"?arg3:"file";cb=typeof arg3==="function"?arg3:cb;var newCb=wrapCb(cb,1);try{if(type!=="file"&&type!=="dir"){return newCb(new ApiError(ErrorCode.EINVAL,"Invalid type: "+type))}srcpath=normalizePath(srcpath);dstpath=normalizePath(dstpath);assertRoot(this.root).symlink(srcpath,dstpath,type,newCb)}catch(e){newCb(e)}};FS.prototype.symlinkSync=function symlinkSync(srcpath,dstpath,type){if(!type){type="file"}else if(type!=="file"&&type!=="dir"){throw new ApiError(ErrorCode.EINVAL,"Invalid type: "+type)}srcpath=normalizePath(srcpath);dstpath=normalizePath(dstpath);return assertRoot(this.root).symlinkSync(srcpath,dstpath,type)};FS.prototype.readlink=function readlink(path$$1,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,2);try{path$$1=normalizePath(path$$1);assertRoot(this.root).readlink(path$$1,newCb)}catch(e){newCb(e)}};FS.prototype.readlinkSync=function readlinkSync(path$$1){path$$1=normalizePath(path$$1);return assertRoot(this.root).readlinkSync(path$$1)};FS.prototype.chown=function chown(path$$1,uid,gid,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{path$$1=normalizePath(path$$1);assertRoot(this.root).chown(path$$1,false,uid,gid,newCb)}catch(e){newCb(e)}};FS.prototype.chownSync=function chownSync(path$$1,uid,gid){path$$1=normalizePath(path$$1);assertRoot(this.root).chownSync(path$$1,false,uid,gid)};FS.prototype.lchown=function lchown(path$$1,uid,gid,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{path$$1=normalizePath(path$$1);assertRoot(this.root).chown(path$$1,true,uid,gid,newCb)}catch(e){newCb(e)}};FS.prototype.lchownSync=function lchownSync(path$$1,uid,gid){path$$1=normalizePath(path$$1);assertRoot(this.root).chownSync(path$$1,true,uid,gid)};FS.prototype.chmod=function chmod(path$$1,mode,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{var numMode=normalizeMode(mode,-1);if(numMode<0){throw new ApiError(ErrorCode.EINVAL,"Invalid mode.")}assertRoot(this.root).chmod(normalizePath(path$$1),false,numMode,newCb)}catch(e){newCb(e)}};FS.prototype.chmodSync=function chmodSync(path$$1,mode){var numMode=normalizeMode(mode,-1);if(numMode<0){throw new ApiError(ErrorCode.EINVAL,"Invalid mode.")}path$$1=normalizePath(path$$1);assertRoot(this.root).chmodSync(path$$1,false,numMode)};FS.prototype.lchmod=function lchmod(path$$1,mode,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{var numMode=normalizeMode(mode,-1);if(numMode<0){throw new ApiError(ErrorCode.EINVAL,"Invalid mode.")}assertRoot(this.root).chmod(normalizePath(path$$1),true,numMode,newCb)}catch(e){newCb(e)}};FS.prototype.lchmodSync=function lchmodSync(path$$1,mode){var numMode=normalizeMode(mode,-1);if(numMode<1){throw new ApiError(ErrorCode.EINVAL,"Invalid mode.")}assertRoot(this.root).chmodSync(normalizePath(path$$1),true,numMode)};FS.prototype.utimes=function utimes(path$$1,atime,mtime,cb){if(cb===void 0)cb=nopCb;var newCb=wrapCb(cb,1);try{assertRoot(this.root).utimes(normalizePath(path$$1),normalizeTime(atime),normalizeTime(mtime),newCb)}catch(e){newCb(e)}};FS.prototype.utimesSync=function utimesSync(path$$1,atime,mtime){assertRoot(this.root).utimesSync(normalizePath(path$$1),normalizeTime(atime),normalizeTime(mtime))};FS.prototype.realpath=function realpath(path$$1,arg2,cb){if(cb===void 0)cb=nopCb;var cache=typeof arg2==="object"?arg2:{};cb=typeof arg2==="function"?arg2:nopCb;var newCb=wrapCb(cb,2);try{path$$1=normalizePath(path$$1);assertRoot(this.root).realpath(path$$1,cache,newCb)}catch(e){newCb(e)}};FS.prototype.realpathSync=function realpathSync(path$$1,cache){if(cache===void 0)cache={};path$$1=normalizePath(path$$1);return assertRoot(this.root).realpathSync(path$$1,cache)};FS.prototype.watchFile=function watchFile(filename,arg2,listener){if(listener===void 0)listener=nopCb;throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.unwatchFile=function unwatchFile(filename,listener){if(listener===void 0)listener=nopCb;throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.watch=function watch(filename,arg2,listener){if(listener===void 0)listener=nopCb;throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.access=function access(path$$1,arg2,cb){if(cb===void 0)cb=nopCb;throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.accessSync=function accessSync(path$$1,mode){throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.createReadStream=function createReadStream(path$$1,options){throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.createWriteStream=function createWriteStream(path$$1,options){throw new ApiError(ErrorCode.ENOTSUP)};FS.prototype.wrapCallbacks=function wrapCallbacks(cbWrapper){wrapCb=cbWrapper};FS.prototype.getFdForFile=function getFdForFile(file){var fd=this.nextFd++;this.fdMap[fd]=file;return fd};FS.prototype.fd2file=function fd2file(fd){var rv=this.fdMap[fd];if(rv){return rv}else{throw new ApiError(ErrorCode.EBADF,"Invalid file descriptor.")}};FS.prototype.closeFd=function closeFd(fd){delete this.fdMap[fd]};FS.Stats=Stats;var fs3=new FS;var _fsMock={};var fsProto=FS.prototype;Object.keys(fsProto).forEach(function(key){if(typeof fs3[key]==="function"){_fsMock[key]=function(){return fs3[key].apply(fs3,arguments)}}else{_fsMock[key]=fs3[key]}});_fsMock["changeFSModule"]=function(newFs){fs3=newFs};_fsMock["getFSModule"]=function(){return fs3};_fsMock["FS"]=FS;function _min(d0,d1,d2,bx,ay){return d0<d1||d2<d1?d0>d2?d2+1:d0+1:bx===ay?d1:d1+1}function levenshtein(a,b){if(a===b){return 0}if(a.length>b.length){var tmp=a;a=b;b=tmp}var la=a.length;var lb=b.length;while(la>0&&a.charCodeAt(la-1)===b.charCodeAt(lb-1)){la--;lb--}var offset=0;while(offset<la&&a.charCodeAt(offset)===b.charCodeAt(offset)){offset++}la-=offset;lb-=offset;if(la===0||lb===1){return lb}var vector=new Array(la<<1);for(var y4=0;y4<la;){vector[la+y4]=a.charCodeAt(offset+y4);vector[y4]=++y4}var x3;var d0;var d1;var d2;var d3;for(x3=0;x3+3<lb;){var bx0=b.charCodeAt(offset+(d0=x3));var bx1=b.charCodeAt(offset+(d1=x3+1));var bx2=b.charCodeAt(offset+(d2=x3+2));var bx3=b.charCodeAt(offset+(d3=x3+3));var dd$1=x3+=4;for(var y$1=0;y$1<la;){var ay=vector[la+y$1];var dy=vector[y$1];d0=_min(dy,d0,d1,bx0,ay);d1=_min(d0,d1,d2,bx1,ay);d2=_min(d1,d2,d3,bx2,ay);dd$1=_min(d2,d3,dd$1,bx3,ay);vector[y$1++]=dd$1;d3=d2;d2=d1;d1=d0;d0=dy}}var dd=0;for(;x3<lb;){var bx0$1=b.charCodeAt(offset+(d0=x3));dd=++x3;for(var y$2=0;y$2<la;y$2++){var dy$1=vector[y$2];vector[y$2]=dd=dy$1<d0||dd<d0?dy$1>dd?dd+1:dy$1+1:bx0$1===vector[la+y$2]?d0:d0+1;d0=dy$1}}return dd}function deprecationMessage(print,fsName,opts){if(print){console.warn("["+fsName+"] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the \'"+fsName+".Create("+JSON.stringify(opts)+", callback)\' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.")}}var isIE=typeof navigator!=="undefined"&&!!(/(msie) ([\\w.]+)/.exec(navigator.userAgent.toLowerCase())||navigator.userAgent.indexOf("Trident")!==-1);var isWebWorker=typeof window==="undefined";function fail(){throw new Error("BFS has reached an impossible code path; please file a bug.")}function mkdirpSync(p2,mode,fs4){if(!fs4.existsSync(p2)){mkdirpSync(path.dirname(p2),mode,fs4);fs4.mkdirSync(p2,mode)}}function buffer2ArrayBuffer(buff){var u8=buffer2Uint8array(buff),u8offset=u8.byteOffset,u8Len=u8.byteLength;if(u8offset===0&&u8Len===u8.buffer.byteLength){return u8.buffer}else{return u8.buffer.slice(u8offset,u8offset+u8Len)}}function buffer2Uint8array(buff){if(buff instanceof Uint8Array){return buff}else{return new Uint8Array(buff)}}function arrayish2Buffer(arr){if(arr instanceof Buffer2){return arr}else if(arr instanceof Uint8Array){return uint8Array2Buffer(arr)}else{return Buffer2.from(arr)}}function uint8Array2Buffer(u8){if(u8 instanceof Buffer2){return u8}else if(u8.byteOffset===0&&u8.byteLength===u8.buffer.byteLength){return arrayBuffer2Buffer(u8.buffer)}else{return Buffer2.from(u8.buffer,u8.byteOffset,u8.byteLength)}}function arrayBuffer2Buffer(ab){return Buffer2.from(ab)}function copyingSlice(buff,start,end){if(start===void 0)start=0;if(end===void 0)end=buff.length;if(start<0||end<0||end>buff.length||start>end){throw new TypeError("Invalid slice bounds on buffer of length "+buff.length+": ["+start+", "+end+"]")}if(buff.length===0){return emptyBuffer()}else{var u8=buffer2Uint8array(buff),s0=buff[0],newS0=(s0+1)%255;buff[0]=newS0;if(u8[0]===newS0){u8[0]=s0;return uint8Array2Buffer(u8.slice(start,end))}else{buff[0]=s0;return uint8Array2Buffer(u8.subarray(start,end))}}}var emptyBuff=null;function emptyBuffer(){if(emptyBuff){return emptyBuff}return emptyBuff=Buffer2.alloc(0)}function bufferValidator(v2,cb){if(Buffer2.isBuffer(v2)){cb()}else{cb(new ApiError(ErrorCode.EINVAL,"option must be a Buffer."))}}function checkOptions(fsType,opts,cb){var optsInfo=fsType.Options;var fsName=fsType.Name;var pendingValidators=0;var callbackCalled=false;var loopEnded=false;function validatorCallback(e){if(!callbackCalled){if(e){callbackCalled=true;cb(e)}pendingValidators--;if(pendingValidators===0&&loopEnded){cb()}}}var loop3=function(optName2){if(optsInfo.hasOwnProperty(optName2)){var opt=optsInfo[optName2];var providedValue=opts[optName2];if(providedValue===void 0||providedValue===null){if(!opt.optional){var incorrectOptions=Object.keys(opts).filter(function(o){return!(o in optsInfo)}).map(function(a){return{str:a,distance:levenshtein(optName2,a)}}).filter(function(o){return o.distance<5}).sort(function(a,b){return a.distance-b.distance});if(callbackCalled){return{}}callbackCalled=true;return{v:cb(new ApiError(ErrorCode.EINVAL,"["+fsName+"] Required option \'"+optName2+"\' not provided."+(incorrectOptions.length>0?" You provided unrecognized option \'"+incorrectOptions[0].str+"\'; perhaps you meant to type \'"+optName2+"\'.":"")+"\\nOption description: "+opt.description))}}}else{var typeMatches=false;if(Array.isArray(opt.type)){typeMatches=opt.type.indexOf(typeof providedValue)!==-1}else{typeMatches=typeof providedValue===opt.type}if(!typeMatches){if(callbackCalled){return{}}callbackCalled=true;return{v:cb(new ApiError(ErrorCode.EINVAL,"["+fsName+"] Value provided for option "+optName2+" is not the proper type. Expected "+(Array.isArray(opt.type)?"one of {"+opt.type.join(", ")+"}":opt.type)+", but received "+typeof providedValue+"\\nOption description: "+opt.description))}}else if(opt.validator){pendingValidators++;opt.validator(providedValue,validatorCallback)}}}};for(var optName in optsInfo){var returned=loop3(optName);if(returned)return returned.v}loopEnded=true;if(pendingValidators===0&&!callbackCalled){cb()}}var BFSUtils=Object.freeze({deprecationMessage,isIE,isWebWorker,fail,mkdirpSync,buffer2ArrayBuffer,buffer2Uint8array,arrayish2Buffer,uint8Array2Buffer,arrayBuffer2Buffer,copyingSlice,emptyBuffer,bufferValidator,checkOptions});var BFSEmscriptenStreamOps=function BFSEmscriptenStreamOps2(fs4){this.fs=fs4;this.nodefs=fs4.getNodeFS();this.FS=fs4.getFS();this.PATH=fs4.getPATH();this.ERRNO_CODES=fs4.getERRNO_CODES()};BFSEmscriptenStreamOps.prototype.open=function open(stream){var path$$1=this.fs.realPath(stream.node);var FS2=this.FS;try{if(FS2.isFile(stream.node.mode)){stream.nfd=this.nodefs.openSync(path$$1,this.fs.flagsToPermissionString(stream.flags))}}catch(e){if(!e.code){throw e}throw new FS2.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenStreamOps.prototype.close=function close(stream){var FS2=this.FS;try{if(FS2.isFile(stream.node.mode)&&stream.nfd){this.nodefs.closeSync(stream.nfd)}}catch(e){if(!e.code){throw e}throw new FS2.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenStreamOps.prototype.read=function read(stream,buffer$$1,offset,length,position){try{return this.nodefs.readSync(stream.nfd,uint8Array2Buffer(buffer$$1),offset,length,position)}catch(e){throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenStreamOps.prototype.write=function write(stream,buffer$$1,offset,length,position){try{return this.nodefs.writeSync(stream.nfd,uint8Array2Buffer(buffer$$1),offset,length,position)}catch(e){throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenStreamOps.prototype.llseek=function llseek(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(this.FS.isFile(stream.node.mode)){try{var stat=this.nodefs.fstatSync(stream.nfd);position+=stat.size}catch(e){throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}}}if(position<0){throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL)}stream.position=position;return position};var BFSEmscriptenNodeOps=function BFSEmscriptenNodeOps2(fs4){this.fs=fs4;this.nodefs=fs4.getNodeFS();this.FS=fs4.getFS();this.PATH=fs4.getPATH();this.ERRNO_CODES=fs4.getERRNO_CODES()};BFSEmscriptenNodeOps.prototype.getattr=function getattr(node){var path$$1=this.fs.realPath(node);var stat;try{stat=this.nodefs.lstatSync(path$$1)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}return{dev:stat.dev,ino:stat.ino,mode:stat.mode,nlink:stat.nlink,uid:stat.uid,gid:stat.gid,rdev:stat.rdev,size:stat.size,atime:stat.atime,mtime:stat.mtime,ctime:stat.ctime,blksize:stat.blksize,blocks:stat.blocks}};BFSEmscriptenNodeOps.prototype.setattr=function setattr(node,attr){var path$$1=this.fs.realPath(node);try{if(attr.mode!==void 0){this.nodefs.chmodSync(path$$1,attr.mode);node.mode=attr.mode}if(attr.timestamp!==void 0){var date=new Date(attr.timestamp);this.nodefs.utimesSync(path$$1,date,date)}}catch(e){if(!e.code){throw e}if(e.code!=="ENOTSUP"){throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}}if(attr.size!==void 0){try{this.nodefs.truncateSync(path$$1,attr.size)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}}};BFSEmscriptenNodeOps.prototype.lookup=function lookup(parent,name2){var path$$1=this.PATH.join2(this.fs.realPath(parent),name2);var mode=this.fs.getMode(path$$1);return this.fs.createNode(parent,name2,mode)};BFSEmscriptenNodeOps.prototype.mknod=function mknod(parent,name2,mode,dev){var node=this.fs.createNode(parent,name2,mode,dev);var path$$1=this.fs.realPath(node);try{if(this.FS.isDir(node.mode)){this.nodefs.mkdirSync(path$$1,node.mode)}else{this.nodefs.writeFileSync(path$$1,"",{mode:node.mode})}}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}return node};BFSEmscriptenNodeOps.prototype.rename=function rename(oldNode,newDir,newName){var oldPath=this.fs.realPath(oldNode);var newPath=this.PATH.join2(this.fs.realPath(newDir),newName);try{this.nodefs.renameSync(oldPath,newPath);oldNode.name=newName;oldNode.parent=newDir}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenNodeOps.prototype.unlink=function unlink(parent,name2){var path$$1=this.PATH.join2(this.fs.realPath(parent),name2);try{this.nodefs.unlinkSync(path$$1)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenNodeOps.prototype.rmdir=function rmdir(parent,name2){var path$$1=this.PATH.join2(this.fs.realPath(parent),name2);try{this.nodefs.rmdirSync(path$$1)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenNodeOps.prototype.readdir=function readdir(node){var path$$1=this.fs.realPath(node);try{var contents=this.nodefs.readdirSync(path$$1);contents.push(".","..");return contents}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenNodeOps.prototype.symlink=function symlink(parent,newName,oldPath){var newPath=this.PATH.join2(this.fs.realPath(parent),newName);try{this.nodefs.symlinkSync(oldPath,newPath)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};BFSEmscriptenNodeOps.prototype.readlink=function readlink(node){var path$$1=this.fs.realPath(node);try{return this.nodefs.readlinkSync(path$$1)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}};var BFSEmscriptenFS=function BFSEmscriptenFS2(_FS,_PATH,_ERRNO_CODES,nodefs){if(_FS===void 0)_FS=self["FS"];if(_PATH===void 0)_PATH=self["PATH"];if(_ERRNO_CODES===void 0)_ERRNO_CODES=self["ERRNO_CODES"];if(nodefs===void 0)nodefs=_fsMock;this.flagsToPermissionStringMap={0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"};this.nodefs=nodefs;this.FS=_FS;this.PATH=_PATH;this.ERRNO_CODES=_ERRNO_CODES;this.node_ops=new BFSEmscriptenNodeOps(this);this.stream_ops=new BFSEmscriptenStreamOps(this)};BFSEmscriptenFS.prototype.mount=function mount(m){return this.createNode(null,"/",this.getMode(m.opts.root),0)};BFSEmscriptenFS.prototype.createNode=function createNode(parent,name2,mode,dev){var FS2=this.FS;if(!FS2.isDir(mode)&&!FS2.isFile(mode)&&!FS2.isLink(mode)){throw new FS2.ErrnoError(this.ERRNO_CODES.EINVAL)}var node=FS2.createNode(parent,name2,mode);node.node_ops=this.node_ops;node.stream_ops=this.stream_ops;return node};BFSEmscriptenFS.prototype.getMode=function getMode(path$$1){var stat;try{stat=this.nodefs.lstatSync(path$$1)}catch(e){if(!e.code){throw e}throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code])}return stat.mode};BFSEmscriptenFS.prototype.realPath=function realPath(node){var parts=[];while(node.parent!==node){parts.push(node.name);node=node.parent}parts.push(node.mount.opts.root);parts.reverse();return this.PATH.join.apply(null,parts)};BFSEmscriptenFS.prototype.flagsToPermissionString=function flagsToPermissionString(flags){var parsedFlags=typeof flags==="string"?parseInt(flags,10):flags;parsedFlags&=8191;if(parsedFlags in this.flagsToPermissionStringMap){return this.flagsToPermissionStringMap[parsedFlags]}else{return flags}};BFSEmscriptenFS.prototype.getNodeFS=function getNodeFS(){return this.nodefs};BFSEmscriptenFS.prototype.getFS=function getFS(){return this.FS};BFSEmscriptenFS.prototype.getPATH=function getPATH(){return this.PATH};BFSEmscriptenFS.prototype.getERRNO_CODES=function getERRNO_CODES(){return this.ERRNO_CODES};var BaseFileSystem=function BaseFileSystem2(){};BaseFileSystem.prototype.supportsLinks=function supportsLinks(){return false};BaseFileSystem.prototype.diskSpace=function diskSpace(p2,cb){cb(0,0)};BaseFileSystem.prototype.openFile=function openFile(p2,flag,cb){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.createFile=function createFile(p2,flag,mode,cb){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.open=function open(p2,flag,mode,cb){var this$1=this;var mustBeFile=function(e,stats){if(e){switch(flag.pathNotExistsAction()){case ActionType.CREATE_FILE:return this$1.stat(path.dirname(p2),false,function(e2,parentStats){if(e2){cb(e2)}else if(parentStats&&!parentStats.isDirectory()){cb(ApiError.ENOTDIR(path.dirname(p2)))}else{this$1.createFile(p2,flag,mode,cb)}});case ActionType.THROW_EXCEPTION:return cb(ApiError.ENOENT(p2));default:return cb(new ApiError(ErrorCode.EINVAL,"Invalid FileFlag object."))}}else{if(stats&&stats.isDirectory()){return cb(ApiError.EISDIR(p2))}switch(flag.pathExistsAction()){case ActionType.THROW_EXCEPTION:return cb(ApiError.EEXIST(p2));case ActionType.TRUNCATE_FILE:return this$1.openFile(p2,flag,function(e2,fd){if(e2){cb(e2)}else if(fd){fd.truncate(0,function(){fd.sync(function(){cb(null,fd)})})}else{fail()}});case ActionType.NOP:return this$1.openFile(p2,flag,cb);default:return cb(new ApiError(ErrorCode.EINVAL,"Invalid FileFlag object."))}}};this.stat(p2,false,mustBeFile)};BaseFileSystem.prototype.rename=function rename(oldPath,newPath,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.renameSync=function renameSync(oldPath,newPath){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.stat=function stat(p2,isLstat,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.statSync=function statSync(p2,isLstat){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.openFileSync=function openFileSync(p2,flag,mode){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.createFileSync=function createFileSync(p2,flag,mode){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.openSync=function openSync(p2,flag,mode){var stats;try{stats=this.statSync(p2,false)}catch(e){switch(flag.pathNotExistsAction()){case ActionType.CREATE_FILE:var parentStats=this.statSync(path.dirname(p2),false);if(!parentStats.isDirectory()){throw ApiError.ENOTDIR(path.dirname(p2))}return this.createFileSync(p2,flag,mode);case ActionType.THROW_EXCEPTION:throw ApiError.ENOENT(p2);default:throw new ApiError(ErrorCode.EINVAL,"Invalid FileFlag object.")}}if(stats.isDirectory()){throw ApiError.EISDIR(p2)}switch(flag.pathExistsAction()){case ActionType.THROW_EXCEPTION:throw ApiError.EEXIST(p2);case ActionType.TRUNCATE_FILE:this.unlinkSync(p2);return this.createFileSync(p2,flag,stats.mode);case ActionType.NOP:return this.openFileSync(p2,flag,mode);default:throw new ApiError(ErrorCode.EINVAL,"Invalid FileFlag object.")}};BaseFileSystem.prototype.unlink=function unlink(p2,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.unlinkSync=function unlinkSync(p2){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.rmdir=function rmdir(p2,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.rmdirSync=function rmdirSync(p2){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.mkdir=function mkdir(p2,mode,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.mkdirSync=function mkdirSync(p2,mode){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.readdir=function readdir(p2,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.readdirSync=function readdirSync(p2){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.exists=function exists2(p2,cb){this.stat(p2,null,function(err){cb(!err)})};BaseFileSystem.prototype.existsSync=function existsSync(p2){try{this.statSync(p2,true);return true}catch(e){return false}};BaseFileSystem.prototype.realpath=function realpath(p2,cache,cb){if(this.supportsLinks()){var splitPath=p2.split(path.sep);for(var i22=0;i22<splitPath.length;i22++){var addPaths=splitPath.slice(0,i22+1);splitPath[i22]=path.join.apply(null,addPaths)}}else{this.exists(p2,function(doesExist){if(doesExist){cb(null,p2)}else{cb(ApiError.ENOENT(p2))}})}};BaseFileSystem.prototype.realpathSync=function realpathSync(p2,cache){if(this.supportsLinks()){var splitPath=p2.split(path.sep);for(var i22=0;i22<splitPath.length;i22++){var addPaths=splitPath.slice(0,i22+1);splitPath[i22]=path.join.apply(path,addPaths)}return splitPath.join(path.sep)}else{if(this.existsSync(p2)){return p2}else{throw ApiError.ENOENT(p2)}}};BaseFileSystem.prototype.truncate=function truncate(p2,len,cb){this.open(p2,FileFlag.getFileFlag("r+"),420,function(er,fd){if(er){return cb(er)}fd.truncate(len,function(er2){fd.close(function(er22){cb(er2||er22)})})})};BaseFileSystem.prototype.truncateSync=function truncateSync(p2,len){var fd=this.openSync(p2,FileFlag.getFileFlag("r+"),420);try{fd.truncateSync(len)}catch(e){throw e}finally{fd.closeSync()}};BaseFileSystem.prototype.readFile=function readFile2(fname,encoding,flag,cb){var oldCb=cb;this.open(fname,flag,420,function(err,fd){if(err){return cb(err)}cb=function(err2,arg){fd.close(function(err22){if(!err2){err2=err22}return oldCb(err2,arg)})};fd.stat(function(err2,stat){if(err2){return cb(err2)}var buf=Buffer2.alloc(stat.size);fd.read(buf,0,stat.size,0,function(err3){if(err3){return cb(err3)}else if(encoding===null){return cb(err3,buf)}try{cb(null,buf.toString(encoding))}catch(e){cb(e)}})})})};BaseFileSystem.prototype.readFileSync=function readFileSync(fname,encoding,flag){var fd=this.openSync(fname,flag,420);try{var stat=fd.statSync();var buf=Buffer2.alloc(stat.size);fd.readSync(buf,0,stat.size,0);fd.closeSync();if(encoding===null){return buf}return buf.toString(encoding)}finally{fd.closeSync()}};BaseFileSystem.prototype.writeFile=function writeFile2(fname,data,encoding,flag,mode,cb){var oldCb=cb;this.open(fname,flag,420,function(err,fd){if(err){return cb(err)}cb=function(err2){fd.close(function(err22){oldCb(err2?err2:err22)})};try{if(typeof data==="string"){data=Buffer2.from(data,encoding)}}catch(e){return cb(e)}fd.write(data,0,data.length,0,cb)})};BaseFileSystem.prototype.writeFileSync=function writeFileSync(fname,data,encoding,flag,mode){var fd=this.openSync(fname,flag,mode);try{if(typeof data==="string"){data=Buffer2.from(data,encoding)}fd.writeSync(data,0,data.length,0)}finally{fd.closeSync()}};BaseFileSystem.prototype.appendFile=function appendFile3(fname,data,encoding,flag,mode,cb){var oldCb=cb;this.open(fname,flag,mode,function(err,fd){if(err){return cb(err)}cb=function(err2){fd.close(function(err22){oldCb(err2?err2:err22)})};if(typeof data==="string"){data=Buffer2.from(data,encoding)}fd.write(data,0,data.length,null,cb)})};BaseFileSystem.prototype.appendFileSync=function appendFileSync(fname,data,encoding,flag,mode){var fd=this.openSync(fname,flag,mode);try{if(typeof data==="string"){data=Buffer2.from(data,encoding)}fd.writeSync(data,0,data.length,null)}finally{fd.closeSync()}};BaseFileSystem.prototype.chmod=function chmod(p2,isLchmod,mode,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.chmodSync=function chmodSync(p2,isLchmod,mode){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.chown=function chown(p2,isLchown,uid,gid,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.chownSync=function chownSync(p2,isLchown,uid,gid){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.utimes=function utimes(p2,atime,mtime,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.utimesSync=function utimesSync(p2,atime,mtime){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.link=function link(srcpath,dstpath,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.linkSync=function linkSync(srcpath,dstpath){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.symlink=function symlink(srcpath,dstpath,type,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.symlinkSync=function symlinkSync(srcpath,dstpath,type){throw new ApiError(ErrorCode.ENOTSUP)};BaseFileSystem.prototype.readlink=function readlink(p2,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFileSystem.prototype.readlinkSync=function readlinkSync(p2){throw new ApiError(ErrorCode.ENOTSUP)};var SynchronousFileSystem=function(BaseFileSystem2){function SynchronousFileSystem2(){BaseFileSystem2.apply(this,arguments)}if(BaseFileSystem2)SynchronousFileSystem2.__proto__=BaseFileSystem2;SynchronousFileSystem2.prototype=Object.create(BaseFileSystem2&&BaseFileSystem2.prototype);SynchronousFileSystem2.prototype.constructor=SynchronousFileSystem2;SynchronousFileSystem2.prototype.supportsSynch=function supportsSynch(){return true};SynchronousFileSystem2.prototype.rename=function rename(oldPath,newPath,cb){try{this.renameSync(oldPath,newPath);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.stat=function stat(p2,isLstat,cb){try{cb(null,this.statSync(p2,isLstat))}catch(e){cb(e)}};SynchronousFileSystem2.prototype.open=function open(p2,flags,mode,cb){try{cb(null,this.openSync(p2,flags,mode))}catch(e){cb(e)}};SynchronousFileSystem2.prototype.unlink=function unlink(p2,cb){try{this.unlinkSync(p2);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.rmdir=function rmdir(p2,cb){try{this.rmdirSync(p2);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.mkdir=function mkdir(p2,mode,cb){try{this.mkdirSync(p2,mode);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.readdir=function readdir(p2,cb){try{cb(null,this.readdirSync(p2))}catch(e){cb(e)}};SynchronousFileSystem2.prototype.chmod=function chmod(p2,isLchmod,mode,cb){try{this.chmodSync(p2,isLchmod,mode);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.chown=function chown(p2,isLchown,uid,gid,cb){try{this.chownSync(p2,isLchown,uid,gid);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.utimes=function utimes(p2,atime,mtime,cb){try{this.utimesSync(p2,atime,mtime);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.link=function link(srcpath,dstpath,cb){try{this.linkSync(srcpath,dstpath);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.symlink=function symlink(srcpath,dstpath,type,cb){try{this.symlinkSync(srcpath,dstpath,type);cb()}catch(e){cb(e)}};SynchronousFileSystem2.prototype.readlink=function readlink(p2,cb){try{cb(null,this.readlinkSync(p2))}catch(e){cb(e)}};return SynchronousFileSystem2}(BaseFileSystem);var BaseFile=function BaseFile2(){};BaseFile.prototype.sync=function sync(cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFile.prototype.syncSync=function syncSync(){throw new ApiError(ErrorCode.ENOTSUP)};BaseFile.prototype.datasync=function datasync(cb){this.sync(cb)};BaseFile.prototype.datasyncSync=function datasyncSync(){return this.syncSync()};BaseFile.prototype.chown=function chown(uid,gid,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFile.prototype.chownSync=function chownSync(uid,gid){throw new ApiError(ErrorCode.ENOTSUP)};BaseFile.prototype.chmod=function chmod(mode,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFile.prototype.chmodSync=function chmodSync(mode){throw new ApiError(ErrorCode.ENOTSUP)};BaseFile.prototype.utimes=function utimes(atime,mtime,cb){cb(new ApiError(ErrorCode.ENOTSUP))};BaseFile.prototype.utimesSync=function utimesSync(atime,mtime){throw new ApiError(ErrorCode.ENOTSUP)};var PreloadFile=function(BaseFile$$1){function PreloadFile2(_fs,_path,_flag,_stat,contents){BaseFile$$1.call(this);this._pos=0;this._dirty=false;this._fs=_fs;this._path=_path;this._flag=_flag;this._stat=_stat;if(contents){this._buffer=contents}else{this._buffer=emptyBuffer()}if(this._stat.size!==this._buffer.length&&this._flag.isReadable()){throw new Error("Invalid buffer: Buffer is "+this._buffer.length+" long, yet Stats object specifies that file is "+this._stat.size+" long.")}}if(BaseFile$$1)PreloadFile2.__proto__=BaseFile$$1;PreloadFile2.prototype=Object.create(BaseFile$$1&&BaseFile$$1.prototype);PreloadFile2.prototype.constructor=PreloadFile2;PreloadFile2.prototype.getBuffer=function getBuffer(){return this._buffer};PreloadFile2.prototype.getStats=function getStats(){return this._stat};PreloadFile2.prototype.getFlag=function getFlag2(){return this._flag};PreloadFile2.prototype.getPath=function getPath(){return this._path};PreloadFile2.prototype.getPos=function getPos(){if(this._flag.isAppendable()){return this._stat.size}return this._pos};PreloadFile2.prototype.advancePos=function advancePos(delta){return this._pos+=delta};PreloadFile2.prototype.setPos=function setPos(newPos){return this._pos=newPos};PreloadFile2.prototype.sync=function sync(cb){try{this.syncSync();cb()}catch(e){cb(e)}};PreloadFile2.prototype.syncSync=function syncSync(){throw new ApiError(ErrorCode.ENOTSUP)};PreloadFile2.prototype.close=function close(cb){try{this.closeSync();cb()}catch(e){cb(e)}};PreloadFile2.prototype.closeSync=function closeSync(){throw new ApiError(ErrorCode.ENOTSUP)};PreloadFile2.prototype.stat=function stat(cb){try{cb(null,this._stat.clone())}catch(e){cb(e)}};PreloadFile2.prototype.statSync=function statSync(){return this._stat.clone()};PreloadFile2.prototype.truncate=function truncate(len,cb){try{this.truncateSync(len);if(this._flag.isSynchronous()&&!_fsMock.getRootFS().supportsSynch()){this.sync(cb)}cb()}catch(e){return cb(e)}};PreloadFile2.prototype.truncateSync=function truncateSync(len){this._dirty=true;if(!this._flag.isWriteable()){throw new ApiError(ErrorCode.EPERM,"File not opened with a writeable mode.")}this._stat.mtime=new Date;if(len>this._buffer.length){var buf=Buffer2.alloc(len-this._buffer.length,0);this.writeSync(buf,0,buf.length,this._buffer.length);if(this._flag.isSynchronous()&&_fsMock.getRootFS().supportsSynch()){this.syncSync()}return}this._stat.size=len;var newBuff=Buffer2.alloc(len);this._buffer.copy(newBuff,0,0,len);this._buffer=newBuff;if(this._flag.isSynchronous()&&_fsMock.getRootFS().supportsSynch()){this.syncSync()}};PreloadFile2.prototype.write=function write(buffer$$1,offset,length,position,cb){try{cb(null,this.writeSync(buffer$$1,offset,length,position),buffer$$1)}catch(e){cb(e)}};PreloadFile2.prototype.writeSync=function writeSync(buffer$$1,offset,length,position){this._dirty=true;if(position===void 0||position===null){position=this.getPos()}if(!this._flag.isWriteable()){throw new ApiError(ErrorCode.EPERM,"File not opened with a writeable mode.")}var endFp=position+length;if(endFp>this._stat.size){this._stat.size=endFp;if(endFp>this._buffer.length){var newBuff=Buffer2.alloc(endFp);this._buffer.copy(newBuff);this._buffer=newBuff}}var len=buffer$$1.copy(this._buffer,position,offset,offset+length);this._stat.mtime=new Date;if(this._flag.isSynchronous()){this.syncSync();return len}this.setPos(position+len);return len};PreloadFile2.prototype.read=function read(buffer$$1,offset,length,position,cb){try{cb(null,this.readSync(buffer$$1,offset,length,position),buffer$$1)}catch(e){cb(e)}};PreloadFile2.prototype.readSync=function readSync(buffer$$1,offset,length,position){if(!this._flag.isReadable()){throw new ApiError(ErrorCode.EPERM,"File not opened with a readable mode.")}if(position===void 0||position===null){position=this.getPos()}var endRead=position+length;if(endRead>this._stat.size){length=this._stat.size-position}var rv=this._buffer.copy(buffer$$1,offset,position,position+length);this._stat.atime=new Date;this._pos=position+length;return rv};PreloadFile2.prototype.chmod=function chmod(mode,cb){try{this.chmodSync(mode);cb()}catch(e){cb(e)}};PreloadFile2.prototype.chmodSync=function chmodSync(mode){if(!this._fs.supportsProps()){throw new ApiError(ErrorCode.ENOTSUP)}this._dirty=true;this._stat.chmod(mode);this.syncSync()};PreloadFile2.prototype.isDirty=function isDirty(){return this._dirty};PreloadFile2.prototype.resetDirty=function resetDirty(){this._dirty=false};return PreloadFile2}(BaseFile);var NoSyncFile=function(PreloadFile2){function NoSyncFile2(_fs,_path,_flag,_stat,contents){PreloadFile2.call(this,_fs,_path,_flag,_stat,contents)}if(PreloadFile2)NoSyncFile2.__proto__=PreloadFile2;NoSyncFile2.prototype=Object.create(PreloadFile2&&PreloadFile2.prototype);NoSyncFile2.prototype.constructor=NoSyncFile2;NoSyncFile2.prototype.sync=function sync(cb){cb()};NoSyncFile2.prototype.syncSync=function syncSync(){};NoSyncFile2.prototype.close=function close(cb){cb()};NoSyncFile2.prototype.closeSync=function closeSync(){};return NoSyncFile2}(PreloadFile);var MirrorFile=function(PreloadFile$$1){function MirrorFile2(fs4,path$$1,flag,stat,data){PreloadFile$$1.call(this,fs4,path$$1,flag,stat,data)}if(PreloadFile$$1)MirrorFile2.__proto__=PreloadFile$$1;MirrorFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);MirrorFile2.prototype.constructor=MirrorFile2;MirrorFile2.prototype.syncSync=function syncSync(){if(this.isDirty()){this._fs._syncSync(this);this.resetDirty()}};MirrorFile2.prototype.closeSync=function closeSync(){this.syncSync()};return MirrorFile2}(PreloadFile);var AsyncMirror=function(SynchronousFileSystem$$1){function AsyncMirror2(sync,async,deprecateMsg){if(deprecateMsg===void 0)deprecateMsg=true;SynchronousFileSystem$$1.call(this);this._queue=[];this._queueRunning=false;this._isInitialized=false;this._initializeCallbacks=[];this._sync=sync;this._async=async;if(!sync.supportsSynch()){throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.")}deprecationMessage(deprecateMsg,AsyncMirror2.Name,{sync:"sync file system instance",async:"async file system instance"})}if(SynchronousFileSystem$$1)AsyncMirror2.__proto__=SynchronousFileSystem$$1;AsyncMirror2.prototype=Object.create(SynchronousFileSystem$$1&&SynchronousFileSystem$$1.prototype);AsyncMirror2.prototype.constructor=AsyncMirror2;AsyncMirror2.Create=function Create(opts,cb){try{var fs4=new AsyncMirror2(opts.sync,opts.async,false);fs4.initialize(function(e){if(e){cb(e)}else{cb(null,fs4)}},false)}catch(e){cb(e)}};AsyncMirror2.isAvailable=function isAvailable(){return true};AsyncMirror2.prototype.getName=function getName(){return AsyncMirror2.Name};AsyncMirror2.prototype._syncSync=function _syncSync(fd){this._sync.writeFileSync(fd.getPath(),fd.getBuffer(),null,FileFlag.getFileFlag("w"),fd.getStats().mode);this.enqueueOp({apiMethod:"writeFile",arguments:[fd.getPath(),fd.getBuffer(),null,fd.getFlag(),fd.getStats().mode]})};AsyncMirror2.prototype.initialize=function initialize3(userCb,deprecateMsg){var this$1=this;if(deprecateMsg===void 0)deprecateMsg=true;if(deprecateMsg){console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use \'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)\' to create and initialize AsyncMirror instances.")}var callbacks=this._initializeCallbacks;var end=function(e){this$1._isInitialized=!e;this$1._initializeCallbacks=[];callbacks.forEach(function(cb){return cb(e)})};if(!this._isInitialized){if(callbacks.push(userCb)===1){var copyDirectory=function(p2,mode,cb){if(p2!=="/"){this$1._sync.mkdirSync(p2,mode)}this$1._async.readdir(p2,function(err,files){var i22=0;function copyNextFile(err2){if(err2){cb(err2)}else if(i22<files.length){copyItem(path.join(p2,files[i22]),copyNextFile);i22++}else{cb()}}if(err){cb(err)}else{copyNextFile()}})},copyFile=function(p2,mode,cb){this$1._async.readFile(p2,null,FileFlag.getFileFlag("r"),function(err,data){if(err){cb(err)}else{try{this$1._sync.writeFileSync(p2,data,null,FileFlag.getFileFlag("w"),mode)}catch(e){err=e}finally{cb(err)}}})},copyItem=function(p2,cb){this$1._async.stat(p2,false,function(err,stats){if(err){cb(err)}else if(stats.isDirectory()){copyDirectory(p2,stats.mode,cb)}else{copyFile(p2,stats.mode,cb)}})};copyDirectory("/",0,end)}}else{userCb()}};AsyncMirror2.prototype.isReadOnly=function isReadOnly(){return false};AsyncMirror2.prototype.supportsSynch=function supportsSynch(){return true};AsyncMirror2.prototype.supportsLinks=function supportsLinks(){return false};AsyncMirror2.prototype.supportsProps=function supportsProps(){return this._sync.supportsProps()&&this._async.supportsProps()};AsyncMirror2.prototype.renameSync=function renameSync(oldPath,newPath){this.checkInitialized();this._sync.renameSync(oldPath,newPath);this.enqueueOp({apiMethod:"rename",arguments:[oldPath,newPath]})};AsyncMirror2.prototype.statSync=function statSync(p2,isLstat){this.checkInitialized();return this._sync.statSync(p2,isLstat)};AsyncMirror2.prototype.openSync=function openSync(p2,flag,mode){this.checkInitialized();var fd=this._sync.openSync(p2,flag,mode);fd.closeSync();return new MirrorFile(this,p2,flag,this._sync.statSync(p2,false),this._sync.readFileSync(p2,null,FileFlag.getFileFlag("r")))};AsyncMirror2.prototype.unlinkSync=function unlinkSync(p2){this.checkInitialized();this._sync.unlinkSync(p2);this.enqueueOp({apiMethod:"unlink",arguments:[p2]})};AsyncMirror2.prototype.rmdirSync=function rmdirSync(p2){this.checkInitialized();this._sync.rmdirSync(p2);this.enqueueOp({apiMethod:"rmdir",arguments:[p2]})};AsyncMirror2.prototype.mkdirSync=function mkdirSync(p2,mode){this.checkInitialized();this._sync.mkdirSync(p2,mode);this.enqueueOp({apiMethod:"mkdir",arguments:[p2,mode]})};AsyncMirror2.prototype.readdirSync=function readdirSync(p2){this.checkInitialized();return this._sync.readdirSync(p2)};AsyncMirror2.prototype.existsSync=function existsSync(p2){this.checkInitialized();return this._sync.existsSync(p2)};AsyncMirror2.prototype.chmodSync=function chmodSync(p2,isLchmod,mode){this.checkInitialized();this._sync.chmodSync(p2,isLchmod,mode);this.enqueueOp({apiMethod:"chmod",arguments:[p2,isLchmod,mode]})};AsyncMirror2.prototype.chownSync=function chownSync(p2,isLchown,uid,gid){this.checkInitialized();this._sync.chownSync(p2,isLchown,uid,gid);this.enqueueOp({apiMethod:"chown",arguments:[p2,isLchown,uid,gid]})};AsyncMirror2.prototype.utimesSync=function utimesSync(p2,atime,mtime){this.checkInitialized();this._sync.utimesSync(p2,atime,mtime);this.enqueueOp({apiMethod:"utimes",arguments:[p2,atime,mtime]})};AsyncMirror2.prototype.checkInitialized=function checkInitialized(){if(!this._isInitialized){throw new ApiError(ErrorCode.EPERM,"AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.")}};AsyncMirror2.prototype.enqueueOp=function enqueueOp(op){var this$1=this;this._queue.push(op);if(!this._queueRunning){this._queueRunning=true;var doNextOp=function(err){if(err){console.error("WARNING: File system has desynchronized. Received following error: "+err+"\\n$")}if(this$1._queue.length>0){var op2=this$1._queue.shift(),args=op2.arguments;args.push(doNextOp);this$1._async[op2.apiMethod].apply(this$1._async,args)}else{this$1._queueRunning=false}};doNextOp()}};return AsyncMirror2}(SynchronousFileSystem);AsyncMirror.Name="AsyncMirror";AsyncMirror.Options={sync:{type:"object",description:"The synchronous file system to mirror the asynchronous file system to."},async:{type:"object",description:"The asynchronous file system to mirror."}};function apply(func,thisArg,args){switch(args.length){case 0:return func.call(thisArg);case 1:return func.call(thisArg,args[0]);case 2:return func.call(thisArg,args[0],args[1]);case 3:return func.call(thisArg,args[0],args[1],args[2])}return func.apply(thisArg,args)}var nativeMax=Math.max;function overRest$1(func,start,transform){start=nativeMax(start===void 0?func.length-1:start,0);return function(){var args=arguments,index=-1,length=nativeMax(args.length-start,0),array=Array(length);while(++index<length){array[index]=args[start+index]}index=-1;var otherArgs=Array(start+1);while(++index<start){otherArgs[index]=args[index]}otherArgs[start]=transform(array);return apply(func,this,otherArgs)}}function identity(value){return value}function rest(func,start){return overRest$1(func,start,identity)}var initialParams=function(fn){return rest(function(args){var callback=args.pop();fn.call(this,args,callback)})};function applyEach$1(eachfn){return rest(function(fns,args){var go=initialParams(function(args2,callback){var that=this;return eachfn(fns,function(fn,cb){fn.apply(that,args2.concat(cb))},callback)});if(args.length){return go.apply(this,args)}else{return go}})}var freeGlobal=typeof global2=="object"&&global2&&global2.Object===Object&&global2;var freeSelf=typeof self=="object"&&self&&self.Object===Object&&self;var root=freeGlobal||freeSelf||Function("return this")();var Symbol$1=root.Symbol;var objectProto=Object.prototype;var hasOwnProperty=objectProto.hasOwnProperty;var nativeObjectToString=objectProto.toString;var symToStringTag$1=Symbol$1?Symbol$1.toStringTag:void 0;function getRawTag(value){var isOwn=hasOwnProperty.call(value,symToStringTag$1),tag=value[symToStringTag$1];try{value[symToStringTag$1]=void 0;var unmasked=true}catch(e){}var result=nativeObjectToString.call(value);if(unmasked){if(isOwn){value[symToStringTag$1]=tag}else{delete value[symToStringTag$1]}}return result}var objectProto$1=Object.prototype;var nativeObjectToString$1=objectProto$1.toString;function objectToString(value){return nativeObjectToString$1.call(value)}var nullTag="[object Null]";var undefinedTag="[object Undefined]";var symToStringTag=Symbol$1?Symbol$1.toStringTag:void 0;function baseGetTag(value){if(value==null){return value===void 0?undefinedTag:nullTag}return symToStringTag&&symToStringTag in Object(value)?getRawTag(value):objectToString(value)}function isObject(value){var type=typeof value;return value!=null&&(type=="object"||type=="function")}var asyncTag="[object AsyncFunction]";var funcTag="[object Function]";var genTag="[object GeneratorFunction]";var proxyTag="[object Proxy]";function isFunction3(value){if(!isObject(value)){return false}var tag=baseGetTag(value);return tag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag}var MAX_SAFE_INTEGER=9007199254740991;function isLength(value){return typeof value=="number"&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER}function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction3(value)}var breakLoop={};function noop3(){}function once(fn){return function(){if(fn===null){return}var callFn=fn;fn=null;callFn.apply(this,arguments)}}var iteratorSymbol=typeof Symbol==="function"&&Symbol.iterator;var getIterator=function(coll){return iteratorSymbol&&coll[iteratorSymbol]&&coll[iteratorSymbol]()};function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index)}return result}function isObjectLike(value){return value!=null&&typeof value=="object"}var argsTag="[object Arguments]";function baseIsArguments(value){return isObjectLike(value)&&baseGetTag(value)==argsTag}var objectProto$3=Object.prototype;var hasOwnProperty$2=objectProto$3.hasOwnProperty;var propertyIsEnumerable=objectProto$3.propertyIsEnumerable;var isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(value){return isObjectLike(value)&&hasOwnProperty$2.call(value,"callee")&&!propertyIsEnumerable.call(value,"callee")};var isArray=Array.isArray;function stubFalse(){return false}var freeExports=typeof exports2=="object"&&exports2&&!exports2.nodeType&&exports2;var freeModule=freeExports&&typeof module3=="object"&&module3&&!module3.nodeType&&module3;var moduleExports=freeModule&&freeModule.exports===freeExports;var Buffer$1=moduleExports?root.Buffer:void 0;var nativeIsBuffer=Buffer$1?Buffer$1.isBuffer:void 0;var isBuffer=nativeIsBuffer||stubFalse;var MAX_SAFE_INTEGER$1=9007199254740991;var reIsUint=/^(?:0|[1-9]\\d*)$/;function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER$1:length;return!!length&&(typeof value=="number"||reIsUint.test(value))&&(value>-1&&value%1==0&&value<length)}var argsTag$1="[object Arguments]";var arrayTag="[object Array]";var boolTag="[object Boolean]";var dateTag="[object Date]";var errorTag="[object Error]";var funcTag$1="[object Function]";var mapTag="[object Map]";var numberTag="[object Number]";var objectTag="[object Object]";var regexpTag="[object RegExp]";var setTag="[object Set]";var stringTag="[object String]";var weakMapTag="[object WeakMap]";var arrayBufferTag="[object ArrayBuffer]";var dataViewTag="[object DataView]";var float32Tag="[object Float32Array]";var float64Tag="[object Float64Array]";var int8Tag="[object Int8Array]";var int16Tag="[object Int16Array]";var int32Tag="[object Int32Array]";var uint8Tag="[object Uint8Array]";var uint8ClampedTag="[object Uint8ClampedArray]";var uint16Tag="[object Uint16Array]";var uint32Tag="[object Uint32Array]";var typedArrayTags={};typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=true;typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=false;function baseIsTypedArray(value){return isObjectLike(value)&&isLength(value.length)&&!!typedArrayTags[baseGetTag(value)]}function baseUnary(func){return function(value){return func(value)}}var freeExports$1=typeof exports2=="object"&&exports2&&!exports2.nodeType&&exports2;var freeModule$1=freeExports$1&&typeof module3=="object"&&module3&&!module3.nodeType&&module3;var moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1;var freeProcess=moduleExports$1&&freeGlobal.process;var nodeUtil=function(){try{return freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}();var nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;var isTypedArray3=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;var objectProto$2=Object.prototype;var hasOwnProperty$1=objectProto$2.hasOwnProperty;function arrayLikeKeys(value,inherited){var isArr=isArray(value),isArg=!isArr&&isArguments(value),isBuff=!isArr&&!isArg&&isBuffer(value),isType=!isArr&&!isArg&&!isBuff&&isTypedArray3(value),skipIndexes=isArr||isArg||isBuff||isType,result=skipIndexes?baseTimes(value.length,String):[],length=result.length;for(var key in value){if((inherited||hasOwnProperty$1.call(value,key))&&!(skipIndexes&&(key=="length"||isBuff&&(key=="offset"||key=="parent")||isType&&(key=="buffer"||key=="byteLength"||key=="byteOffset")||isIndex(key,length)))){result.push(key)}}return result}var objectProto$5=Object.prototype;function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=="function"&&Ctor.prototype||objectProto$5;return value===proto}function overArg(func,transform){return function(arg){return func(transform(arg))}}var nativeKeys=overArg(Object.keys,Object);var objectProto$4=Object.prototype;var hasOwnProperty$3=objectProto$4.hasOwnProperty;function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object)}var result=[];for(var key in Object(object)){if(hasOwnProperty$3.call(object,key)&&key!="constructor"){result.push(key)}}return result}function keys3(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object)}function createArrayIterator(coll){var i22=-1;var len=coll.length;return function next(){return++i22<len?{value:coll[i22],key:i22}:null}}function createES2015Iterator(iterator2){var i22=-1;return function next(){var item=iterator2.next();if(item.done){return null}i22++;return{value:item.value,key:i22}}}function createObjectIterator(obj){var okeys=keys3(obj);var i22=-1;var len=okeys.length;return function next(){var key=okeys[++i22];return i22<len?{value:obj[key],key}:null}}function iterator(coll){if(isArrayLike(coll)){return createArrayIterator(coll)}var iterator2=getIterator(coll);return iterator2?createES2015Iterator(iterator2):createObjectIterator(coll)}function onlyOnce(fn){return function(){if(fn===null){throw new Error("Callback was already called.")}var callFn=fn;fn=null;callFn.apply(this,arguments)}}function _eachOfLimit(limit){return function(obj,iteratee,callback){callback=once(callback||noop3);if(limit<=0||!obj){return callback(null)}var nextElem=iterator(obj);var done=false;var running=0;function iterateeCallback(err,value){running-=1;if(err){done=true;callback(err)}else if(value===breakLoop||done&&running<=0){done=true;return callback(null)}else{replenish()}}function replenish(){while(running<limit&&!done){var elem=nextElem();if(elem===null){done=true;if(running<=0){callback(null)}return}running+=1;iteratee(elem.value,elem.key,onlyOnce(iterateeCallback))}}replenish()}}function eachOfLimit(coll,limit,iteratee,callback){_eachOfLimit(limit)(coll,iteratee,callback)}function doLimit(fn,limit){return function(iterable,iteratee,callback){return fn(iterable,limit,iteratee,callback)}}function eachOfArrayLike(coll,iteratee,callback){callback=once(callback||noop3);var index=0,completed=0,length=coll.length;if(length===0){callback(null)}function iteratorCallback(err,value){if(err){callback(err)}else if(++completed===length||value===breakLoop){callback(null)}}for(;index<length;index++){iteratee(coll[index],index,onlyOnce(iteratorCallback))}}var eachOfGeneric=doLimit(eachOfLimit,Infinity);var eachOf=function(coll,iteratee,callback){var eachOfImplementation=isArrayLike(coll)?eachOfArrayLike:eachOfGeneric;eachOfImplementation(coll,iteratee,callback)};function doParallel(fn){return function(obj,iteratee,callback){return fn(eachOf,obj,iteratee,callback)}}function _asyncMap(eachfn,arr,iteratee,callback){callback=callback||noop3;arr=arr||[];var results=[];var counter=0;eachfn(arr,function(value,_,callback2){var index=counter++;iteratee(value,function(err,v2){results[index]=v2;callback2(err)})},function(err){callback(err,results)})}var map=doParallel(_asyncMap);applyEach$1(map);function doParallelLimit(fn){return function(obj,limit,iteratee,callback){return fn(_eachOfLimit(limit),obj,iteratee,callback)}}var mapLimit=doParallelLimit(_asyncMap);var mapSeries=doLimit(mapLimit,1);applyEach$1(mapSeries);rest(function(fn,args){return rest(function(callArgs){return fn.apply(null,args.concat(callArgs))})});function arrayEach(array,iteratee){var index=-1,length=array==null?0:array.length;while(++index<length){if(iteratee(array[index],index,array)===false){break}}return array}function createBaseFor(fromRight){return function(object,iteratee,keysFunc){var index=-1,iterable=Object(object),props=keysFunc(object),length=props.length;while(length--){var key=props[fromRight?length:++index];if(iteratee(iterable[key],key,iterable)===false){break}}return object}}var baseFor=createBaseFor();function baseForOwn(object,iteratee){return object&&baseFor(object,iteratee,keys3)}function baseFindIndex(array,predicate,fromIndex,fromRight){var length=array.length,index=fromIndex+(fromRight?1:-1);while(fromRight?index--:++index<length){if(predicate(array[index],index,array)){return index}}return-1}function baseIsNaN(value){return value!==value}function strictIndexOf(array,value,fromIndex){var index=fromIndex-1,length=array.length;while(++index<length){if(array[index]===value){return index}}return-1}function baseIndexOf(array,value,fromIndex){return value===value?strictIndexOf(array,value,fromIndex):baseFindIndex(array,baseIsNaN,fromIndex)}var rsAstralRange$1="\\\\ud800-\\\\udfff";var rsComboMarksRange$1="\\\\u0300-\\\\u036f";var reComboHalfMarksRange$1="\\\\ufe20-\\\\ufe2f";var rsComboSymbolsRange$1="\\\\u20d0-\\\\u20ff";var rsComboRange$1=rsComboMarksRange$1+reComboHalfMarksRange$1+rsComboSymbolsRange$1;var rsVarRange$1="\\\\ufe0e\\\\ufe0f";var rsAstral="["+rsAstralRange$1+"]";var rsCombo="["+rsComboRange$1+"]";var rsFitz="\\\\ud83c[\\\\udffb-\\\\udfff]";var rsModifier="(?:"+rsCombo+"|"+rsFitz+")";var rsNonAstral="[^"+rsAstralRange$1+"]";var rsRegional="(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}";var rsSurrPair="[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]";var rsZWJ$1="\\\\u200d";var reOptMod=rsModifier+"?";var rsOptVar="["+rsVarRange$1+"]?";var rsOptJoin="(?:"+rsZWJ$1+"(?:"+[rsNonAstral,rsRegional,rsSurrPair].join("|")+")"+rsOptVar+reOptMod+")*";var rsSeq=rsOptVar+reOptMod+rsOptJoin;var rsSymbol="(?:"+[rsNonAstral+rsCombo+"?",rsCombo,rsRegional,rsSurrPair,rsAstral].join("|")+")";var hasSetImmediate=typeof setImmediate==="function"&&setImmediate;var hasNextTick=typeof process2==="object"&&typeof process2.nextTick==="function";function fallback(fn){setTimeout(fn,0)}function wrap(defer){return rest(function(fn,args){defer(function(){fn.apply(null,args)})})}var _defer;if(hasSetImmediate){_defer=setImmediate}else if(hasNextTick){_defer=process2.nextTick}else{_defer=fallback}wrap(_defer);var eachOfSeries=doLimit(eachOfLimit,1);function reduce(coll,memo,iteratee,callback){callback=once(callback||noop3);eachOfSeries(coll,function(x3,i22,callback2){iteratee(memo,x3,function(err,v2){memo=v2;callback2(err)})},function(err){callback(err,memo)})}var seq=rest(function seq2(functions){return rest(function(args){var that=this;var cb=args[args.length-1];if(typeof cb=="function"){args.pop()}else{cb=noop3}reduce(functions,args,function(newargs,fn,cb2){fn.apply(that,newargs.concat(rest(function(err,nextargs){cb2(err,nextargs)})))},function(err,results){cb.apply(that,[err].concat(results))})})});rest(function(args){return seq.apply(null,args.reverse())});rest(function(values){var args=[null].concat(values);return initialParams(function(ignoredArgs,callback){return callback.apply(this,args)})});function consoleFunc(name2){return rest(function(fn,args){fn.apply(null,args.concat(rest(function(err,args2){if(typeof console==="object"){if(err){if(console.error){console.error(err)}}else if(console[name2]){arrayEach(args2,function(x3){console[name2](x3)})}}})))})}consoleFunc("dir");function _withoutIndex(iteratee){return function(value,index,callback){return iteratee(value,callback)}}function eachLimit(coll,iteratee,callback){eachOf(coll,_withoutIndex(iteratee),callback)}consoleFunc("log");var _defer$1;if(hasNextTick){_defer$1=process2.nextTick}else if(hasSetImmediate){_defer$1=setImmediate}else{_defer$1=fallback}wrap(_defer$1);var nativeCeil=Math.ceil;var nativeMax$1=Math.max;var errorCodeLookup;function constructErrorCodeLookup(){if(errorCodeLookup){return}errorCodeLookup={};errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR]=ErrorCode.EIO;errorCodeLookup[Dropbox.ApiError.INVALID_PARAM]=ErrorCode.EINVAL;errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN]=ErrorCode.EPERM;errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR]=ErrorCode.EPERM;errorCodeLookup[Dropbox.ApiError.NOT_FOUND]=ErrorCode.ENOENT;errorCodeLookup[Dropbox.ApiError.INVALID_METHOD]=ErrorCode.EINVAL;errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE]=ErrorCode.EINVAL;errorCodeLookup[Dropbox.ApiError.CONFLICT]=ErrorCode.EINVAL;errorCodeLookup[Dropbox.ApiError.RATE_LIMITED]=ErrorCode.EBUSY;errorCodeLookup[Dropbox.ApiError.SERVER_ERROR]=ErrorCode.EBUSY;errorCodeLookup[Dropbox.ApiError.OVER_QUOTA]=ErrorCode.ENOSPC}function isFileInfo(cache){return cache&&cache.stat.isFile}function isDirInfo(cache){return cache&&cache.stat.isFolder}function isArrayBuffer(ab){return ab===null||ab===void 0||typeof ab==="object"&&typeof ab["byteLength"]==="number"}var CachedDropboxClient=function CachedDropboxClient2(client){this._cache={};this._client=client};CachedDropboxClient.prototype.readdir=function readdir(p2,cb){var this$1=this;var cacheInfo=this.getCachedDirInfo(p2);this._wrap(function(interceptCb){if(cacheInfo!==null&&cacheInfo.contents){this$1._client.readdir(p2,{contentHash:cacheInfo.stat.contentHash},interceptCb)}else{this$1._client.readdir(p2,interceptCb)}},function(err,filenames,stat,folderEntries){if(err){if(err.status===Dropbox.ApiError.NO_CONTENT&&cacheInfo!==null){cb(null,cacheInfo.contents.slice(0))}else{cb(err)}}else{this$1.updateCachedDirInfo(p2,stat,filenames.slice(0));folderEntries.forEach(function(entry){this$1.updateCachedInfo(path.join(p2,entry.name),entry)});cb(null,filenames)}})};CachedDropboxClient.prototype.remove=function remove(p2,cb){var this$1=this;this._wrap(function(interceptCb){this$1._client.remove(p2,interceptCb)},function(err,stat){if(!err){this$1.updateCachedInfo(p2,stat)}cb(err)})};CachedDropboxClient.prototype.move=function move(src,dest,cb){var this$1=this;this._wrap(function(interceptCb){this$1._client.move(src,dest,interceptCb)},function(err,stat){if(!err){this$1.deleteCachedInfo(src);this$1.updateCachedInfo(dest,stat)}cb(err)})};CachedDropboxClient.prototype.stat=function stat(p2,cb){var this$1=this;this._wrap(function(interceptCb){this$1._client.stat(p2,interceptCb)},function(err,stat2){if(!err){this$1.updateCachedInfo(p2,stat2)}cb(err,stat2)})};CachedDropboxClient.prototype.readFile=function readFile2(p2,cb){var this$1=this;var cacheInfo=this.getCachedFileInfo(p2);if(cacheInfo!==null&&cacheInfo.contents!==null){this.stat(p2,function(error,stat){if(error){cb(error)}else if(stat.contentHash===cacheInfo.stat.contentHash){cb(error,cacheInfo.contents.slice(0),cacheInfo.stat)}else{this$1.readFile(p2,cb)}})}else{this._wrap(function(interceptCb){this$1._client.readFile(p2,{arrayBuffer:true},interceptCb)},function(err,contents,stat){if(!err){this$1.updateCachedInfo(p2,stat,contents.slice(0))}cb(err,contents,stat)})}};CachedDropboxClient.prototype.writeFile=function writeFile2(p2,contents,cb){var this$1=this;this._wrap(function(interceptCb){this$1._client.writeFile(p2,contents,interceptCb)},function(err,stat){if(!err){this$1.updateCachedInfo(p2,stat,contents.slice(0))}cb(err,stat)})};CachedDropboxClient.prototype.mkdir=function mkdir(p2,cb){var this$1=this;this._wrap(function(interceptCb){this$1._client.mkdir(p2,interceptCb)},function(err,stat){if(!err){this$1.updateCachedInfo(p2,stat,[])}cb(err)})};CachedDropboxClient.prototype._wrap=function _wrap(performOp,cb){var numRun=0;var interceptCb=function(error){var timeoutDuration=2;if(error&&3>++numRun){switch(error.status){case Dropbox.ApiError.SERVER_ERROR:case Dropbox.ApiError.NETWORK_ERROR:case Dropbox.ApiError.RATE_LIMITED:setTimeout(function(){performOp(interceptCb)},timeoutDuration*1e3);break;default:cb.apply(null,arguments);break}}else{cb.apply(null,arguments)}};performOp(interceptCb)};CachedDropboxClient.prototype.getCachedInfo=function getCachedInfo(p2){return this._cache[p2.toLowerCase()]};CachedDropboxClient.prototype.putCachedInfo=function putCachedInfo(p2,cache){this._cache[p2.toLowerCase()]=cache};CachedDropboxClient.prototype.deleteCachedInfo=function deleteCachedInfo(p2){delete this._cache[p2.toLowerCase()]};CachedDropboxClient.prototype.getCachedDirInfo=function getCachedDirInfo(p2){var info=this.getCachedInfo(p2);if(isDirInfo(info)){return info}else{return null}};CachedDropboxClient.prototype.getCachedFileInfo=function getCachedFileInfo(p2){var info=this.getCachedInfo(p2);if(isFileInfo(info)){return info}else{return null}};CachedDropboxClient.prototype.updateCachedDirInfo=function updateCachedDirInfo(p2,stat,contents){if(contents===void 0)contents=null;var cachedInfo=this.getCachedInfo(p2);if(stat.contentHash!==null&&(cachedInfo===void 0||cachedInfo.stat.contentHash!==stat.contentHash)){this.putCachedInfo(p2,{stat,contents})}};CachedDropboxClient.prototype.updateCachedFileInfo=function updateCachedFileInfo(p2,stat,contents){if(contents===void 0)contents=null;var cachedInfo=this.getCachedInfo(p2);if(stat.versionTag!==null&&(cachedInfo===void 0||cachedInfo.stat.versionTag!==stat.versionTag)){this.putCachedInfo(p2,{stat,contents})}};CachedDropboxClient.prototype.updateCachedInfo=function updateCachedInfo(p2,stat,contents){if(contents===void 0)contents=null;if(stat.isFile&&isArrayBuffer(contents)){this.updateCachedFileInfo(p2,stat,contents)}else if(stat.isFolder&&Array.isArray(contents)){this.updateCachedDirInfo(p2,stat,contents)}};var DropboxFile=function(PreloadFile$$1){function DropboxFile2(_fs,_path,_flag,_stat,contents){PreloadFile$$1.call(this,_fs,_path,_flag,_stat,contents)}if(PreloadFile$$1)DropboxFile2.__proto__=PreloadFile$$1;DropboxFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);DropboxFile2.prototype.constructor=DropboxFile2;DropboxFile2.prototype.sync=function sync(cb){var this$1=this;if(this.isDirty()){var buffer$$1=this.getBuffer(),arrayBuffer=buffer2ArrayBuffer(buffer$$1);this._fs._writeFileStrict(this.getPath(),arrayBuffer,function(e){if(!e){this$1.resetDirty()}cb(e)})}else{cb()}};DropboxFile2.prototype.close=function close(cb){this.sync(cb)};return DropboxFile2}(PreloadFile);var DropboxFileSystem=function(BaseFileSystem$$1){function DropboxFileSystem2(client,deprecateMsg){if(deprecateMsg===void 0)deprecateMsg=true;BaseFileSystem$$1.call(this);this._client=new CachedDropboxClient(client);deprecationMessage(deprecateMsg,DropboxFileSystem2.Name,{client:"authenticated dropbox client instance"});constructErrorCodeLookup()}if(BaseFileSystem$$1)DropboxFileSystem2.__proto__=BaseFileSystem$$1;DropboxFileSystem2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);DropboxFileSystem2.prototype.constructor=DropboxFileSystem2;DropboxFileSystem2.Create=function Create(opts,cb){cb(null,new DropboxFileSystem2(opts.client,false))};DropboxFileSystem2.isAvailable=function isAvailable(){return typeof Dropbox!=="undefined"};DropboxFileSystem2.prototype.getName=function getName(){return DropboxFileSystem2.Name};DropboxFileSystem2.prototype.isReadOnly=function isReadOnly(){return false};DropboxFileSystem2.prototype.supportsSymlinks=function supportsSymlinks(){return false};DropboxFileSystem2.prototype.supportsProps=function supportsProps(){return false};DropboxFileSystem2.prototype.supportsSynch=function supportsSynch(){return false};DropboxFileSystem2.prototype.empty=function empty(mainCb){var this$1=this;this._client.readdir("/",function(error,files){if(error){mainCb(this$1.convert(error,"/"))}else{var deleteFile2=function(file,cb){var p2=path.join("/",file);this$1._client.remove(p2,function(err){cb(err?this$1.convert(err,p2):null)})};var finished=function(err){if(err){mainCb(err)}else{mainCb()}};eachLimit(files,deleteFile2,finished)}})};DropboxFileSystem2.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;this._client.move(oldPath,newPath,function(error){if(error){this$1._client.stat(newPath,function(error2,stat){if(error2||stat.isFolder){var missingPath=error.response.error.indexOf(oldPath)>-1?oldPath:newPath;cb(this$1.convert(error,missingPath))}else{this$1._client.remove(newPath,function(error22){if(error22){cb(this$1.convert(error22,newPath))}else{this$1.rename(oldPath,newPath,cb)}})}})}else{cb()}})};DropboxFileSystem2.prototype.stat=function stat(path$$1,isLstat,cb){var this$1=this;this._client.stat(path$$1,function(error,stat2){if(error){cb(this$1.convert(error,path$$1))}else if(stat2&&stat2.isRemoved){cb(ApiError.FileError(ErrorCode.ENOENT,path$$1))}else{var stats=new Stats(this$1._statType(stat2),stat2.size);return cb(null,stats)}})};DropboxFileSystem2.prototype.open=function open(path$$1,flags,mode,cb){var this$1=this;this._client.readFile(path$$1,function(error,content,dbStat){if(error){if(flags.isReadable()){cb(this$1.convert(error,path$$1))}else{switch(error.status){case Dropbox.ApiError.NOT_FOUND:var ab=new ArrayBuffer(0);return this$1._writeFileStrict(path$$1,ab,function(error2,stat){if(error2){cb(error2)}else{var file2=this$1._makeFile(path$$1,flags,stat,arrayBuffer2Buffer(ab));cb(null,file2)}});default:return cb(this$1.convert(error,path$$1))}}}else{var buffer$$1;if(content===null){buffer$$1=emptyBuffer()}else{buffer$$1=arrayBuffer2Buffer(content)}var file=this$1._makeFile(path$$1,flags,dbStat,buffer$$1);return cb(null,file)}})};DropboxFileSystem2.prototype._writeFileStrict=function _writeFileStrict(p2,data,cb){var this$1=this;var parent=path.dirname(p2);this.stat(parent,false,function(error,stat){if(error){cb(ApiError.FileError(ErrorCode.ENOENT,parent))}else{this$1._client.writeFile(p2,data,function(error2,stat2){if(error2){cb(this$1.convert(error2,p2))}else{cb(null,stat2)}})}})};DropboxFileSystem2.prototype._statType=function _statType(stat){return stat.isFile?FileType.FILE:FileType.DIRECTORY};DropboxFileSystem2.prototype._makeFile=function _makeFile(path$$1,flag,stat,buffer$$1){var type=this._statType(stat);var stats=new Stats(type,stat.size);return new DropboxFile(this,path$$1,flag,stats,buffer$$1)};DropboxFileSystem2.prototype._remove=function _remove(path$$1,cb,isFile){var this$1=this;this._client.stat(path$$1,function(error,stat){if(error){cb(this$1.convert(error,path$$1))}else{if(stat.isFile&&!isFile){cb(ApiError.FileError(ErrorCode.ENOTDIR,path$$1))}else if(!stat.isFile&&isFile){cb(ApiError.FileError(ErrorCode.EISDIR,path$$1))}else{this$1._client.remove(path$$1,function(error2){if(error2){cb(this$1.convert(error2,path$$1))}else{cb(null)}})}}})};DropboxFileSystem2.prototype.unlink=function unlink(path$$1,cb){this._remove(path$$1,cb,true)};DropboxFileSystem2.prototype.rmdir=function rmdir(path$$1,cb){this._remove(path$$1,cb,false)};DropboxFileSystem2.prototype.mkdir=function mkdir(p2,mode,cb){var this$1=this;var parent=path.dirname(p2);this._client.stat(parent,function(error,stat){if(error){cb(this$1.convert(error,parent))}else{this$1._client.mkdir(p2,function(error2){if(error2){cb(ApiError.FileError(ErrorCode.EEXIST,p2))}else{cb(null)}})}})};DropboxFileSystem2.prototype.readdir=function readdir(path$$1,cb){var this$1=this;this._client.readdir(path$$1,function(error,files){if(error){return cb(this$1.convert(error))}else{return cb(null,files)}})};DropboxFileSystem2.prototype.convert=function convert(err,path$$1){if(path$$1===void 0)path$$1=null;var errorCode=errorCodeLookup[err.status];if(errorCode===void 0){errorCode=ErrorCode.EIO}if(!path$$1){return new ApiError(errorCode)}else{return ApiError.FileError(errorCode,path$$1)}};return DropboxFileSystem2}(BaseFileSystem);DropboxFileSystem.Name="Dropbox";DropboxFileSystem.Options={client:{type:"object",description:"An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",validator:function(opt,cb){if(opt.isAuthenticated&&opt.isAuthenticated()){cb()}else{cb(new ApiError(ErrorCode.EINVAL,"\'client\' option must be an authenticated Dropbox client from the v0.10 JS SDK."))}}}};function convertError(e,path$$1){if(path$$1===void 0)path$$1="";var errno=e.errno;var parent=e.node;var paths=[];while(parent){paths.unshift(parent.name);if(parent===parent.parent){break}parent=parent.parent}return new ApiError(errno,ErrorStrings[errno],paths.length>0?"/"+paths.join("/"):path$$1)}var EmscriptenFile=function(BaseFile$$1){function EmscriptenFile2(_fs,_FS,_path,_stream){BaseFile$$1.call(this);this._fs=_fs;this._FS=_FS;this._path=_path;this._stream=_stream}if(BaseFile$$1)EmscriptenFile2.__proto__=BaseFile$$1;EmscriptenFile2.prototype=Object.create(BaseFile$$1&&BaseFile$$1.prototype);EmscriptenFile2.prototype.constructor=EmscriptenFile2;EmscriptenFile2.prototype.getPos=function getPos(){return void 0};EmscriptenFile2.prototype.close=function close(cb){var err=null;try{this.closeSync()}catch(e){err=e}finally{cb(err)}};EmscriptenFile2.prototype.closeSync=function closeSync(){try{this._FS.close(this._stream)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.stat=function stat(cb){try{cb(null,this.statSync())}catch(e){cb(e)}};EmscriptenFile2.prototype.statSync=function statSync(){try{return this._fs.statSync(this._path,false)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.truncate=function truncate(len,cb){var err=null;try{this.truncateSync(len)}catch(e){err=e}finally{cb(err)}};EmscriptenFile2.prototype.truncateSync=function truncateSync(len){try{this._FS.ftruncate(this._stream.fd,len)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.write=function write(buffer$$1,offset,length,position,cb){try{cb(null,this.writeSync(buffer$$1,offset,length,position),buffer$$1)}catch(e){cb(e)}};EmscriptenFile2.prototype.writeSync=function writeSync(buffer$$1,offset,length,position){try{var u8=buffer2Uint8array(buffer$$1);var emPosition=position===null?void 0:position;return this._FS.write(this._stream,u8,offset,length,emPosition)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.read=function read(buffer$$1,offset,length,position,cb){try{cb(null,this.readSync(buffer$$1,offset,length,position),buffer$$1)}catch(e){cb(e)}};EmscriptenFile2.prototype.readSync=function readSync(buffer$$1,offset,length,position){try{var u8=buffer2Uint8array(buffer$$1);var emPosition=position===null?void 0:position;return this._FS.read(this._stream,u8,offset,length,emPosition)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.sync=function sync(cb){cb()};EmscriptenFile2.prototype.syncSync=function syncSync(){};EmscriptenFile2.prototype.chown=function chown(uid,gid,cb){var err=null;try{this.chownSync(uid,gid)}catch(e){err=e}finally{cb(err)}};EmscriptenFile2.prototype.chownSync=function chownSync(uid,gid){try{this._FS.fchown(this._stream.fd,uid,gid)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.chmod=function chmod(mode,cb){var err=null;try{this.chmodSync(mode)}catch(e){err=e}finally{cb(err)}};EmscriptenFile2.prototype.chmodSync=function chmodSync(mode){try{this._FS.fchmod(this._stream.fd,mode)}catch(e){throw convertError(e,this._path)}};EmscriptenFile2.prototype.utimes=function utimes(atime,mtime,cb){var err=null;try{this.utimesSync(atime,mtime)}catch(e){err=e}finally{cb(err)}};EmscriptenFile2.prototype.utimesSync=function utimesSync(atime,mtime){this._fs.utimesSync(this._path,atime,mtime)};return EmscriptenFile2}(BaseFile);var EmscriptenFileSystem=function(SynchronousFileSystem$$1){function EmscriptenFileSystem2(_FS){SynchronousFileSystem$$1.call(this);this._FS=_FS}if(SynchronousFileSystem$$1)EmscriptenFileSystem2.__proto__=SynchronousFileSystem$$1;EmscriptenFileSystem2.prototype=Object.create(SynchronousFileSystem$$1&&SynchronousFileSystem$$1.prototype);EmscriptenFileSystem2.prototype.constructor=EmscriptenFileSystem2;EmscriptenFileSystem2.Create=function Create(opts,cb){cb(null,new EmscriptenFileSystem2(opts.FS))};EmscriptenFileSystem2.isAvailable=function isAvailable(){return true};EmscriptenFileSystem2.prototype.getName=function getName(){return this._FS.DB_NAME()};EmscriptenFileSystem2.prototype.isReadOnly=function isReadOnly(){return false};EmscriptenFileSystem2.prototype.supportsLinks=function supportsLinks(){return true};EmscriptenFileSystem2.prototype.supportsProps=function supportsProps(){return true};EmscriptenFileSystem2.prototype.supportsSynch=function supportsSynch(){return true};EmscriptenFileSystem2.prototype.renameSync=function renameSync(oldPath,newPath){try{this._FS.rename(oldPath,newPath)}catch(e){if(e.errno===ErrorCode.ENOENT){throw convertError(e,this.existsSync(oldPath)?newPath:oldPath)}else{throw convertError(e)}}};EmscriptenFileSystem2.prototype.statSync=function statSync(p2,isLstat){try{var stats=isLstat?this._FS.lstat(p2):this._FS.stat(p2);var itemType=this.modeToFileType(stats.mode);return new Stats(itemType,stats.size,stats.mode,stats.atime,stats.mtime,stats.ctime)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.openSync=function openSync(p2,flag,mode){try{var stream=this._FS.open(p2,flag.getFlagString(),mode);if(this._FS.isDir(stream.node.mode)){this._FS.close(stream);throw ApiError.EISDIR(p2)}return new EmscriptenFile(this,this._FS,p2,stream)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.unlinkSync=function unlinkSync(p2){try{this._FS.unlink(p2)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.rmdirSync=function rmdirSync(p2){try{this._FS.rmdir(p2)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.mkdirSync=function mkdirSync(p2,mode){try{this._FS.mkdir(p2,mode)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.readdirSync=function readdirSync(p2){try{return this._FS.readdir(p2).filter(function(p22){return p22!=="."&&p22!==".."})}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.truncateSync=function truncateSync(p2,len){try{this._FS.truncate(p2,len)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.readFileSync=function readFileSync(p2,encoding,flag){try{var data=this._FS.readFile(p2,{flags:flag.getFlagString()});var buff=uint8Array2Buffer(data);if(encoding){return buff.toString(encoding)}else{return buff}}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.writeFileSync=function writeFileSync(p2,data,encoding,flag,mode){try{if(encoding){data=Buffer2.from(data,encoding)}var u8=buffer2Uint8array(data);this._FS.writeFile(p2,u8,{flags:flag.getFlagString(),encoding:"binary"});this._FS.chmod(p2,mode)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.chmodSync=function chmodSync(p2,isLchmod,mode){try{isLchmod?this._FS.lchmod(p2,mode):this._FS.chmod(p2,mode)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.chownSync=function chownSync(p2,isLchown,uid,gid){try{isLchown?this._FS.lchown(p2,uid,gid):this._FS.chown(p2,uid,gid)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.symlinkSync=function symlinkSync(srcpath,dstpath,type){try{this._FS.symlink(srcpath,dstpath)}catch(e){throw convertError(e)}};EmscriptenFileSystem2.prototype.readlinkSync=function readlinkSync(p2){try{return this._FS.readlink(p2)}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.utimesSync=function utimesSync(p2,atime,mtime){try{this._FS.utime(p2,atime.getTime(),mtime.getTime())}catch(e){throw convertError(e,p2)}};EmscriptenFileSystem2.prototype.modeToFileType=function modeToFileType(mode){if(this._FS.isDir(mode)){return FileType.DIRECTORY}else if(this._FS.isFile(mode)){return FileType.FILE}else if(this._FS.isLink(mode)){return FileType.SYMLINK}else{throw ApiError.EPERM("Invalid mode: "+mode)}};return EmscriptenFileSystem2}(SynchronousFileSystem);EmscriptenFileSystem.Name="EmscriptenFileSystem";EmscriptenFileSystem.Options={FS:{type:"object",description:"The Emscripten file system to use (the `FS` variable)"}};var FolderAdapter=function(BaseFileSystem$$1){function FolderAdapter2(folder,wrapped){BaseFileSystem$$1.call(this);this._folder=folder;this._wrapped=wrapped}if(BaseFileSystem$$1)FolderAdapter2.__proto__=BaseFileSystem$$1;FolderAdapter2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);FolderAdapter2.prototype.constructor=FolderAdapter2;FolderAdapter2.Create=function Create(opts,cb){cb(null,new FolderAdapter2(opts.folder,opts.wrapped))};FolderAdapter2.isAvailable=function isAvailable(){return true};FolderAdapter2.prototype.initialize=function initialize3(cb){var this$1=this;this._wrapped.exists(this._folder,function(exists2){if(exists2){cb()}else if(this$1._wrapped.isReadOnly()){cb(ApiError.ENOENT(this$1._folder))}else{this$1._wrapped.mkdir(this$1._folder,511,cb)}})};FolderAdapter2.prototype.getName=function getName(){return this._wrapped.getName()};FolderAdapter2.prototype.isReadOnly=function isReadOnly(){return this._wrapped.isReadOnly()};FolderAdapter2.prototype.supportsProps=function supportsProps(){return this._wrapped.supportsProps()};FolderAdapter2.prototype.supportsSynch=function supportsSynch(){return this._wrapped.supportsSynch()};FolderAdapter2.prototype.supportsLinks=function supportsLinks(){return false};return FolderAdapter2}(BaseFileSystem);FolderAdapter.Name="FolderAdapter";FolderAdapter.Options={folder:{type:"string",description:"The folder to use as the root directory"},wrapped:{type:"object",description:"The file system to wrap"}};function translateError(folder,e){if(e!==null&&typeof e==="object"){var err=e;var p2=err.path;if(p2){p2="/"+path.relative(folder,p2);err.message=err.message.replace(err.path,p2);err.path=p2}}return e}function wrapCallback(folder,cb){if(typeof cb==="function"){return function(err){if(arguments.length>0){arguments[0]=translateError(folder,err)}cb.apply(null,arguments)}}else{return cb}}function wrapFunction(name2,wrapFirst,wrapSecond){if(name2.slice(name2.length-4)!=="Sync"){return function(){if(arguments.length>0){if(wrapFirst){arguments[0]=path.join(this._folder,arguments[0])}if(wrapSecond){arguments[1]=path.join(this._folder,arguments[1])}arguments[arguments.length-1]=wrapCallback(this._folder,arguments[arguments.length-1])}return this._wrapped[name2].apply(this._wrapped,arguments)}}else{return function(){try{if(wrapFirst){arguments[0]=path.join(this._folder,arguments[0])}if(wrapSecond){arguments[1]=path.join(this._folder,arguments[1])}return this._wrapped[name2].apply(this._wrapped,arguments)}catch(e){throw translateError(this._folder,e)}}}}["diskSpace","stat","statSync","open","openSync","unlink","unlinkSync","rmdir","rmdirSync","mkdir","mkdirSync","readdir","readdirSync","exists","existsSync","realpath","realpathSync","truncate","truncateSync","readFile","readFileSync","writeFile","writeFileSync","appendFile","appendFileSync","chmod","chmodSync","chown","chownSync","utimes","utimesSync","readlink","readlinkSync"].forEach(function(name2){FolderAdapter.prototype[name2]=wrapFunction(name2,true,false)});["rename","renameSync","link","linkSync","symlink","symlinkSync"].forEach(function(name2){FolderAdapter.prototype[name2]=wrapFunction(name2,true,true)});var toExport;if(typeof window!=="undefined"){toExport=window}else if(typeof self!=="undefined"){toExport=self}else{toExport=global2}var global$1=toExport;function isDirectoryEntry(entry){return entry.isDirectory}var _getFS=global$1.webkitRequestFileSystem||global$1.requestFileSystem||null;function _requestQuota(type,size,success,errorCallback){if(typeof navigator["webkitPersistentStorage"]!=="undefined"){switch(type){case global$1.PERSISTENT:navigator.webkitPersistentStorage.requestQuota(size,success,errorCallback);break;case global$1.TEMPORARY:navigator.webkitTemporaryStorage.requestQuota(size,success,errorCallback);break;default:errorCallback(new TypeError("Invalid storage type: "+type));break}}else{global$1.webkitStorageInfo.requestQuota(type,size,success,errorCallback)}}function _toArray(list2){return Array.prototype.slice.call(list2||[],0)}function convertError$1(err,p2,expectedDir){switch(err.name){case"PathExistsError":return ApiError.EEXIST(p2);case"QuotaExceededError":return ApiError.FileError(ErrorCode.ENOSPC,p2);case"NotFoundError":return ApiError.ENOENT(p2);case"SecurityError":return ApiError.FileError(ErrorCode.EACCES,p2);case"InvalidModificationError":return ApiError.FileError(ErrorCode.EPERM,p2);case"TypeMismatchError":return ApiError.FileError(expectedDir?ErrorCode.ENOTDIR:ErrorCode.EISDIR,p2);case"EncodingError":case"InvalidStateError":case"NoModificationAllowedError":default:return ApiError.FileError(ErrorCode.EINVAL,p2)}}var HTML5FSFile=function(PreloadFile$$1){function HTML5FSFile2(fs4,entry,path$$1,flag,stat,contents){PreloadFile$$1.call(this,fs4,path$$1,flag,stat,contents);this._entry=entry}if(PreloadFile$$1)HTML5FSFile2.__proto__=PreloadFile$$1;HTML5FSFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);HTML5FSFile2.prototype.constructor=HTML5FSFile2;HTML5FSFile2.prototype.sync=function sync(cb){var this$1=this;if(!this.isDirty()){return cb()}this._entry.createWriter(function(writer){var buffer$$1=this$1.getBuffer();var blob=new Blob([buffer2ArrayBuffer(buffer$$1)]);var length=blob.size;writer.onwriteend=function(err){writer.onwriteend=null;writer.onerror=null;writer.truncate(length);this$1.resetDirty();cb()};writer.onerror=function(err){cb(convertError$1(err,this$1.getPath(),false))};writer.write(blob)})};HTML5FSFile2.prototype.close=function close(cb){this.sync(cb)};return HTML5FSFile2}(PreloadFile);var HTML5FS=function(BaseFileSystem$$1){function HTML5FS2(size,type,deprecateMsg){if(size===void 0)size=5;if(type===void 0)type=global$1.PERSISTENT;if(deprecateMsg===void 0)deprecateMsg=true;BaseFileSystem$$1.call(this);this.size=1024*1024*size;this.type=type;deprecationMessage(deprecateMsg,HTML5FS2.Name,{size,type})}if(BaseFileSystem$$1)HTML5FS2.__proto__=BaseFileSystem$$1;HTML5FS2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);HTML5FS2.prototype.constructor=HTML5FS2;HTML5FS2.Create=function Create(opts,cb){var fs4=new HTML5FS2(opts.size,opts.type,false);fs4.allocate(function(e){return e?cb(e):cb(null,fs4)},false)};HTML5FS2.isAvailable=function isAvailable(){return!!_getFS};HTML5FS2.prototype.getName=function getName(){return HTML5FS2.Name};HTML5FS2.prototype.isReadOnly=function isReadOnly(){return false};HTML5FS2.prototype.supportsSymlinks=function supportsSymlinks(){return false};HTML5FS2.prototype.supportsProps=function supportsProps(){return false};HTML5FS2.prototype.supportsSynch=function supportsSynch(){return false};HTML5FS2.prototype.allocate=function allocate(cb,deprecateMsg){var this$1=this;if(cb===void 0)cb=function(){};if(deprecateMsg===void 0)deprecateMsg=true;if(deprecateMsg){console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use \'HTML5FS.Create({type: "+this.type+", size: "+this.size+"}, cb)\' to create and allocate HTML5FS instances.")}var success=function(fs4){this$1.fs=fs4;cb()};var error=function(err){cb(convertError$1(err,"/",true))};if(this.type===global$1.PERSISTENT){_requestQuota(this.type,this.size,function(granted){_getFS(this$1.type,granted,success,error)},error)}else{_getFS(this.type,this.size,success,error)}};HTML5FS2.prototype.empty=function empty(mainCb){this._readdir("/",function(err,entries){if(err){console.error("Failed to empty FS");mainCb(err)}else{var finished=function(er){if(err){console.error("Failed to empty FS");mainCb(err)}else{mainCb()}};var deleteEntry=function(entry,cb){var succ=function(){cb()};var error=function(err2){cb(convertError$1(err2,entry.fullPath,!entry.isDirectory))};if(isDirectoryEntry(entry)){entry.removeRecursively(succ,error)}else{entry.remove(succ,error)}};eachLimit(entries,deleteEntry,finished)}})};HTML5FS2.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;var semaphore=2;var successCount=0;var root2=this.fs.root;var currentPath=oldPath;var error=function(err){if(--semaphore<=0){cb(convertError$1(err,currentPath,false))}};var success=function(file){if(++successCount===2){return cb(new ApiError(ErrorCode.EINVAL,"Something was identified as both a file and a directory. This should never happen."))}if(oldPath===newPath){return cb()}currentPath=path.dirname(newPath);root2.getDirectory(currentPath,{},function(parentDir){currentPath=path.basename(newPath);file.moveTo(parentDir,currentPath,function(entry){cb()},function(err){if(file.isDirectory){currentPath=newPath;this$1.unlink(newPath,function(e){if(e){error(err)}else{this$1.rename(oldPath,newPath,cb)}})}else{error(err)}})},error)};root2.getFile(oldPath,{},success,error);root2.getDirectory(oldPath,{},success,error)};HTML5FS2.prototype.stat=function stat(path$$1,isLstat,cb){var this$1=this;var opts={create:false};var loadAsFile=function(entry){var fileFromEntry=function(file){var stat2=new Stats(FileType.FILE,file.size);cb(null,stat2)};entry.file(fileFromEntry,failedToLoad)};var loadAsDir=function(dir$$1){var size=4096;var stat2=new Stats(FileType.DIRECTORY,size);cb(null,stat2)};var failedToLoad=function(err){cb(convertError$1(err,path$$1,false))};var failedToLoadAsFile=function(){this$1.fs.root.getDirectory(path$$1,opts,loadAsDir,failedToLoad)};this.fs.root.getFile(path$$1,opts,loadAsFile,failedToLoadAsFile)};HTML5FS2.prototype.open=function open(p2,flags,mode,cb){var this$1=this;var error=function(err){if(err.name==="InvalidModificationError"&&flags.isExclusive()){cb(ApiError.EEXIST(p2))}else{cb(convertError$1(err,p2,false))}};this.fs.root.getFile(p2,{create:flags.pathNotExistsAction()===ActionType.CREATE_FILE,exclusive:flags.isExclusive()},function(entry){entry.file(function(file){var reader=new FileReader;reader.onloadend=function(event){var bfsFile=this$1._makeFile(p2,entry,flags,file,reader.result);cb(null,bfsFile)};reader.onerror=function(ev2){error(reader.error)};reader.readAsArrayBuffer(file)},error)},error)};HTML5FS2.prototype.unlink=function unlink(path$$1,cb){this._remove(path$$1,cb,true)};HTML5FS2.prototype.rmdir=function rmdir(path$$1,cb){var this$1=this;this.readdir(path$$1,function(e,files){if(e){cb(e)}else if(files.length>0){cb(ApiError.ENOTEMPTY(path$$1))}else{this$1._remove(path$$1,cb,false)}})};HTML5FS2.prototype.mkdir=function mkdir(path$$1,mode,cb){var opts={create:true,exclusive:true};var success=function(dir$$1){cb()};var error=function(err){cb(convertError$1(err,path$$1,true))};this.fs.root.getDirectory(path$$1,opts,success,error)};HTML5FS2.prototype.readdir=function readdir(path$$1,cb){this._readdir(path$$1,function(e,entries){if(entries){var rv=[];for(var i22=0,list2=entries;i22<list2.length;i22+=1){var entry=list2[i22];rv.push(entry.name)}cb(null,rv)}else{return cb(e)}})};HTML5FS2.prototype._makeFile=function _makeFile(path$$1,entry,flag,stat,data){if(data===void 0)data=new ArrayBuffer(0);var stats=new Stats(FileType.FILE,stat.size);var buffer$$1=arrayBuffer2Buffer(data);return new HTML5FSFile(this,entry,path$$1,flag,stats,buffer$$1)};HTML5FS2.prototype._readdir=function _readdir(path$$1,cb){var error=function(err){cb(convertError$1(err,path$$1,true))};this.fs.root.getDirectory(path$$1,{create:false},function(dirEntry){var reader=dirEntry.createReader();var entries=[];var readEntries=function(){reader.readEntries(function(results){if(results.length){entries=entries.concat(_toArray(results));readEntries()}else{cb(null,entries)}},error)};readEntries()},error)};HTML5FS2.prototype._remove=function _remove(path$$1,cb,isFile){var success=function(entry){var succ=function(){cb()};var err=function(err2){cb(convertError$1(err2,path$$1,!isFile))};entry.remove(succ,err)};var error=function(err){cb(convertError$1(err,path$$1,!isFile))};var opts={create:false};if(isFile){this.fs.root.getFile(path$$1,opts,success,error)}else{this.fs.root.getDirectory(path$$1,opts,success,error)}};return HTML5FS2}(BaseFileSystem);HTML5FS.Name="HTML5FS";HTML5FS.Options={size:{type:"number",optional:true,description:"Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."},type:{type:"number",optional:true,description:"window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."}};var Inode=function Inode2(id,size,mode,atime,mtime,ctime){this.id=id;this.size=size;this.mode=mode;this.atime=atime;this.mtime=mtime;this.ctime=ctime};Inode.fromBuffer=function fromBuffer(buffer$$1){if(buffer$$1===void 0){throw new Error("NO")}return new Inode(buffer$$1.toString("ascii",30),buffer$$1.readUInt32LE(0),buffer$$1.readUInt16LE(4),buffer$$1.readDoubleLE(6),buffer$$1.readDoubleLE(14),buffer$$1.readDoubleLE(22))};Inode.prototype.toStats=function toStats(){return new Stats((this.mode&61440)===FileType.DIRECTORY?FileType.DIRECTORY:FileType.FILE,this.size,this.mode,new Date(this.atime),new Date(this.mtime),new Date(this.ctime))};Inode.prototype.getSize=function getSize(){return 30+this.id.length};Inode.prototype.toBuffer=function toBuffer(buff){if(buff===void 0)buff=Buffer2.alloc(this.getSize());buff.writeUInt32LE(this.size,0);buff.writeUInt16LE(this.mode,4);buff.writeDoubleLE(this.atime,6);buff.writeDoubleLE(this.mtime,14);buff.writeDoubleLE(this.ctime,22);buff.write(this.id,30,this.id.length,"ascii");return buff};Inode.prototype.update=function update(stats){var hasChanged=false;if(this.size!==stats.size){this.size=stats.size;hasChanged=true}if(this.mode!==stats.mode){this.mode=stats.mode;hasChanged=true}var atimeMs=stats.atime.getTime();if(this.atime!==atimeMs){this.atime=atimeMs;hasChanged=true}var mtimeMs=stats.mtime.getTime();if(this.mtime!==mtimeMs){this.mtime=mtimeMs;hasChanged=true}var ctimeMs=stats.ctime.getTime();if(this.ctime!==ctimeMs){this.ctime=ctimeMs;hasChanged=true}return hasChanged};Inode.prototype.isFile=function isFile(){return(this.mode&61440)===FileType.FILE};Inode.prototype.isDirectory=function isDirectory(){return(this.mode&61440)===FileType.DIRECTORY};var ROOT_NODE_ID="/";var emptyDirNode=null;function getEmptyDirNode(){if(emptyDirNode){return emptyDirNode}return emptyDirNode=Buffer2.from("{}")}function GenerateRandomID(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(c){var r=Math.random()*16|0;var v2=c==="x"?r:r&3|8;return v2.toString(16)})}function noError(e,cb){if(e){cb(e);return false}return true}function noErrorTx(e,tx,cb){if(e){tx.abort(function(){cb(e)});return false}return true}var SimpleSyncRWTransaction=function SimpleSyncRWTransaction2(store){this.store=store;this.originalData={};this.modifiedKeys=[]};SimpleSyncRWTransaction.prototype.get=function get(key){var val=this.store.get(key);this.stashOldValue(key,val);return val};SimpleSyncRWTransaction.prototype.put=function put(key,data,overwrite){this.markModified(key);return this.store.put(key,data,overwrite)};SimpleSyncRWTransaction.prototype.del=function del(key){this.markModified(key);this.store.del(key)};SimpleSyncRWTransaction.prototype.commit=function commit(){};SimpleSyncRWTransaction.prototype.abort=function abort(){var this$1=this;for(var i22=0,list2=this$1.modifiedKeys;i22<list2.length;i22+=1){var key=list2[i22];var value=this$1.originalData[key];if(!value){this$1.store.del(key)}else{this$1.store.put(key,value,true)}}};SimpleSyncRWTransaction.prototype.stashOldValue=function stashOldValue(key,value){if(!this.originalData.hasOwnProperty(key)){this.originalData[key]=value}};SimpleSyncRWTransaction.prototype.markModified=function markModified(key){if(this.modifiedKeys.indexOf(key)===-1){this.modifiedKeys.push(key);if(!this.originalData.hasOwnProperty(key)){this.originalData[key]=this.store.get(key)}}};var SyncKeyValueFile=function(PreloadFile$$1){function SyncKeyValueFile2(_fs,_path,_flag,_stat,contents){PreloadFile$$1.call(this,_fs,_path,_flag,_stat,contents)}if(PreloadFile$$1)SyncKeyValueFile2.__proto__=PreloadFile$$1;SyncKeyValueFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);SyncKeyValueFile2.prototype.constructor=SyncKeyValueFile2;SyncKeyValueFile2.prototype.syncSync=function syncSync(){if(this.isDirty()){this._fs._syncSync(this.getPath(),this.getBuffer(),this.getStats());this.resetDirty()}};SyncKeyValueFile2.prototype.closeSync=function closeSync(){this.syncSync()};return SyncKeyValueFile2}(PreloadFile);var SyncKeyValueFileSystem=function(SynchronousFileSystem$$1){function SyncKeyValueFileSystem2(options){SynchronousFileSystem$$1.call(this);this.store=options.store;this.makeRootDirectory()}if(SynchronousFileSystem$$1)SyncKeyValueFileSystem2.__proto__=SynchronousFileSystem$$1;SyncKeyValueFileSystem2.prototype=Object.create(SynchronousFileSystem$$1&&SynchronousFileSystem$$1.prototype);SyncKeyValueFileSystem2.prototype.constructor=SyncKeyValueFileSystem2;SyncKeyValueFileSystem2.isAvailable=function isAvailable(){return true};SyncKeyValueFileSystem2.prototype.getName=function getName(){return this.store.name()};SyncKeyValueFileSystem2.prototype.isReadOnly=function isReadOnly(){return false};SyncKeyValueFileSystem2.prototype.supportsSymlinks=function supportsSymlinks(){return false};SyncKeyValueFileSystem2.prototype.supportsProps=function supportsProps(){return false};SyncKeyValueFileSystem2.prototype.supportsSynch=function supportsSynch(){return true};SyncKeyValueFileSystem2.prototype.empty=function empty(){this.store.clear();this.makeRootDirectory()};SyncKeyValueFileSystem2.prototype.renameSync=function renameSync(oldPath,newPath){var tx=this.store.beginTransaction("readwrite"),oldParent=path.dirname(oldPath),oldName=path.basename(oldPath),newParent=path.dirname(newPath),newName=path.basename(newPath),oldDirNode=this.findINode(tx,oldParent),oldDirList=this.getDirListing(tx,oldParent,oldDirNode);if(!oldDirList[oldName]){throw ApiError.ENOENT(oldPath)}var nodeId=oldDirList[oldName];delete oldDirList[oldName];if((newParent+"/").indexOf(oldPath+"/")===0){throw new ApiError(ErrorCode.EBUSY,oldParent)}var newDirNode,newDirList;if(newParent===oldParent){newDirNode=oldDirNode;newDirList=oldDirList}else{newDirNode=this.findINode(tx,newParent);newDirList=this.getDirListing(tx,newParent,newDirNode)}if(newDirList[newName]){var newNameNode=this.getINode(tx,newPath,newDirList[newName]);if(newNameNode.isFile()){try{tx.del(newNameNode.id);tx.del(newDirList[newName])}catch(e){tx.abort();throw e}}else{throw ApiError.EPERM(newPath)}}newDirList[newName]=nodeId;try{tx.put(oldDirNode.id,Buffer2.from(JSON.stringify(oldDirList)),true);tx.put(newDirNode.id,Buffer2.from(JSON.stringify(newDirList)),true)}catch(e){tx.abort();throw e}tx.commit()};SyncKeyValueFileSystem2.prototype.statSync=function statSync(p2,isLstat){return this.findINode(this.store.beginTransaction("readonly"),p2).toStats()};SyncKeyValueFileSystem2.prototype.createFileSync=function createFileSync(p2,flag,mode){var tx=this.store.beginTransaction("readwrite"),data=emptyBuffer(),newFile=this.commitNewFile(tx,p2,FileType.FILE,mode,data);return new SyncKeyValueFile(this,p2,flag,newFile.toStats(),data)};SyncKeyValueFileSystem2.prototype.openFileSync=function openFileSync(p2,flag){var tx=this.store.beginTransaction("readonly"),node=this.findINode(tx,p2),data=tx.get(node.id);if(data===void 0){throw ApiError.ENOENT(p2)}return new SyncKeyValueFile(this,p2,flag,node.toStats(),data)};SyncKeyValueFileSystem2.prototype.unlinkSync=function unlinkSync(p2){this.removeEntry(p2,false)};SyncKeyValueFileSystem2.prototype.rmdirSync=function rmdirSync(p2){if(this.readdirSync(p2).length>0){throw ApiError.ENOTEMPTY(p2)}else{this.removeEntry(p2,true)}};SyncKeyValueFileSystem2.prototype.mkdirSync=function mkdirSync(p2,mode){var tx=this.store.beginTransaction("readwrite"),data=Buffer2.from("{}");this.commitNewFile(tx,p2,FileType.DIRECTORY,mode,data)};SyncKeyValueFileSystem2.prototype.readdirSync=function readdirSync(p2){var tx=this.store.beginTransaction("readonly");return Object.keys(this.getDirListing(tx,p2,this.findINode(tx,p2)))};SyncKeyValueFileSystem2.prototype._syncSync=function _syncSync(p2,data,stats){var tx=this.store.beginTransaction("readwrite"),fileInodeId=this._findINode(tx,path.dirname(p2),path.basename(p2)),fileInode=this.getINode(tx,p2,fileInodeId),inodeChanged=fileInode.update(stats);try{tx.put(fileInode.id,data,true);if(inodeChanged){tx.put(fileInodeId,fileInode.toBuffer(),true)}}catch(e){tx.abort();throw e}tx.commit()};SyncKeyValueFileSystem2.prototype.makeRootDirectory=function makeRootDirectory(){var tx=this.store.beginTransaction("readwrite");if(tx.get(ROOT_NODE_ID)===void 0){var currTime=new Date().getTime(),dirInode=new Inode(GenerateRandomID(),4096,511|FileType.DIRECTORY,currTime,currTime,currTime);tx.put(dirInode.id,getEmptyDirNode(),false);tx.put(ROOT_NODE_ID,dirInode.toBuffer(),false);tx.commit()}};SyncKeyValueFileSystem2.prototype._findINode=function _findINode(tx,parent,filename){var this$1=this;var readDirectory=function(inode){var dirList=this$1.getDirListing(tx,parent,inode);if(dirList[filename]){return dirList[filename]}else{throw ApiError.ENOENT(path.resolve(parent,filename))}};if(parent==="/"){if(filename===""){return ROOT_NODE_ID}else{return readDirectory(this.getINode(tx,parent,ROOT_NODE_ID))}}else{return readDirectory(this.getINode(tx,parent+path.sep+filename,this._findINode(tx,path.dirname(parent),path.basename(parent))))}};SyncKeyValueFileSystem2.prototype.findINode=function findINode(tx,p2){return this.getINode(tx,p2,this._findINode(tx,path.dirname(p2),path.basename(p2)))};SyncKeyValueFileSystem2.prototype.getINode=function getINode(tx,p2,id){var inode=tx.get(id);if(inode===void 0){throw ApiError.ENOENT(p2)}return Inode.fromBuffer(inode)};SyncKeyValueFileSystem2.prototype.getDirListing=function getDirListing(tx,p2,inode){if(!inode.isDirectory()){throw ApiError.ENOTDIR(p2)}var data=tx.get(inode.id);if(data===void 0){throw ApiError.ENOENT(p2)}return JSON.parse(data.toString())};SyncKeyValueFileSystem2.prototype.addNewNode=function addNewNode(tx,data){var retries=0;var currId;while(retries<5){try{currId=GenerateRandomID();tx.put(currId,data,false);return currId}catch(e){}}throw new ApiError(ErrorCode.EIO,"Unable to commit data to key-value store.")};SyncKeyValueFileSystem2.prototype.commitNewFile=function commitNewFile(tx,p2,type,mode,data){var parentDir=path.dirname(p2),fname=path.basename(p2),parentNode=this.findINode(tx,parentDir),dirListing=this.getDirListing(tx,parentDir,parentNode),currTime=new Date().getTime();if(p2==="/"){throw ApiError.EEXIST(p2)}if(dirListing[fname]){throw ApiError.EEXIST(p2)}var fileNode;try{var dataId=this.addNewNode(tx,data);fileNode=new Inode(dataId,data.length,mode|type,currTime,currTime,currTime);var fileNodeId=this.addNewNode(tx,fileNode.toBuffer());dirListing[fname]=fileNodeId;tx.put(parentNode.id,Buffer2.from(JSON.stringify(dirListing)),true)}catch(e){tx.abort();throw e}tx.commit();return fileNode};SyncKeyValueFileSystem2.prototype.removeEntry=function removeEntry(p2,isDir){var tx=this.store.beginTransaction("readwrite"),parent=path.dirname(p2),parentNode=this.findINode(tx,parent),parentListing=this.getDirListing(tx,parent,parentNode),fileName=path.basename(p2);if(!parentListing[fileName]){throw ApiError.ENOENT(p2)}var fileNodeId=parentListing[fileName];delete parentListing[fileName];var fileNode=this.getINode(tx,p2,fileNodeId);if(!isDir&&fileNode.isDirectory()){throw ApiError.EISDIR(p2)}else if(isDir&&!fileNode.isDirectory()){throw ApiError.ENOTDIR(p2)}try{tx.del(fileNode.id);tx.del(fileNodeId);tx.put(parentNode.id,Buffer2.from(JSON.stringify(parentListing)),true)}catch(e){tx.abort();throw e}tx.commit()};return SyncKeyValueFileSystem2}(SynchronousFileSystem);var AsyncKeyValueFile=function(PreloadFile$$1){function AsyncKeyValueFile2(_fs,_path,_flag,_stat,contents){PreloadFile$$1.call(this,_fs,_path,_flag,_stat,contents)}if(PreloadFile$$1)AsyncKeyValueFile2.__proto__=PreloadFile$$1;AsyncKeyValueFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);AsyncKeyValueFile2.prototype.constructor=AsyncKeyValueFile2;AsyncKeyValueFile2.prototype.sync=function sync(cb){var this$1=this;if(this.isDirty()){this._fs._sync(this.getPath(),this.getBuffer(),this.getStats(),function(e){if(!e){this$1.resetDirty()}cb(e)})}else{cb()}};AsyncKeyValueFile2.prototype.close=function close(cb){this.sync(cb)};return AsyncKeyValueFile2}(PreloadFile);var AsyncKeyValueFileSystem=function(BaseFileSystem$$1){function AsyncKeyValueFileSystem2(){BaseFileSystem$$1.apply(this,arguments)}if(BaseFileSystem$$1)AsyncKeyValueFileSystem2.__proto__=BaseFileSystem$$1;AsyncKeyValueFileSystem2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);AsyncKeyValueFileSystem2.prototype.constructor=AsyncKeyValueFileSystem2;AsyncKeyValueFileSystem2.isAvailable=function isAvailable(){return true};AsyncKeyValueFileSystem2.prototype.init=function init(store,cb){this.store=store;this.makeRootDirectory(cb)};AsyncKeyValueFileSystem2.prototype.getName=function getName(){return this.store.name()};AsyncKeyValueFileSystem2.prototype.isReadOnly=function isReadOnly(){return false};AsyncKeyValueFileSystem2.prototype.supportsSymlinks=function supportsSymlinks(){return false};AsyncKeyValueFileSystem2.prototype.supportsProps=function supportsProps(){return false};AsyncKeyValueFileSystem2.prototype.supportsSynch=function supportsSynch(){return false};AsyncKeyValueFileSystem2.prototype.empty=function empty(cb){var this$1=this;this.store.clear(function(e){if(noError(e,cb)){this$1.makeRootDirectory(cb)}})};AsyncKeyValueFileSystem2.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;var tx=this.store.beginTransaction("readwrite");var oldParent=path.dirname(oldPath),oldName=path.basename(oldPath);var newParent=path.dirname(newPath),newName=path.basename(newPath);var inodes={};var lists={};var errorOccurred=false;if((newParent+"/").indexOf(oldPath+"/")===0){return cb(new ApiError(ErrorCode.EBUSY,oldParent))}var theOleSwitcharoo=function(){if(errorOccurred||!lists.hasOwnProperty(oldParent)||!lists.hasOwnProperty(newParent)){return}var oldParentList=lists[oldParent],oldParentINode=inodes[oldParent],newParentList=lists[newParent],newParentINode=inodes[newParent];if(!oldParentList[oldName]){cb(ApiError.ENOENT(oldPath))}else{var fileId=oldParentList[oldName];delete oldParentList[oldName];var completeRename=function(){newParentList[newName]=fileId;tx.put(oldParentINode.id,Buffer2.from(JSON.stringify(oldParentList)),true,function(e){if(noErrorTx(e,tx,cb)){if(oldParent===newParent){tx.commit(cb)}else{tx.put(newParentINode.id,Buffer2.from(JSON.stringify(newParentList)),true,function(e2){if(noErrorTx(e2,tx,cb)){tx.commit(cb)}})}}})};if(newParentList[newName]){this$1.getINode(tx,newPath,newParentList[newName],function(e,inode){if(noErrorTx(e,tx,cb)){if(inode.isFile()){tx.del(inode.id,function(e2){if(noErrorTx(e2,tx,cb)){tx.del(newParentList[newName],function(e3){if(noErrorTx(e3,tx,cb)){completeRename()}})}})}else{tx.abort(function(e2){cb(ApiError.EPERM(newPath))})}}})}else{completeRename()}}};var processInodeAndListings=function(p2){this$1.findINodeAndDirListing(tx,p2,function(e,node,dirList){if(e){if(!errorOccurred){errorOccurred=true;tx.abort(function(){cb(e)})}}else{inodes[p2]=node;lists[p2]=dirList;theOleSwitcharoo()}})};processInodeAndListings(oldParent);if(oldParent!==newParent){processInodeAndListings(newParent)}};AsyncKeyValueFileSystem2.prototype.stat=function stat(p2,isLstat,cb){var tx=this.store.beginTransaction("readonly");this.findINode(tx,p2,function(e,inode){if(noError(e,cb)){cb(null,inode.toStats())}})};AsyncKeyValueFileSystem2.prototype.createFile=function createFile(p2,flag,mode,cb){var this$1=this;var tx=this.store.beginTransaction("readwrite"),data=emptyBuffer();this.commitNewFile(tx,p2,FileType.FILE,mode,data,function(e,newFile){if(noError(e,cb)){cb(null,new AsyncKeyValueFile(this$1,p2,flag,newFile.toStats(),data))}})};AsyncKeyValueFileSystem2.prototype.openFile=function openFile(p2,flag,cb){var this$1=this;var tx=this.store.beginTransaction("readonly");this.findINode(tx,p2,function(e,inode){if(noError(e,cb)){tx.get(inode.id,function(e2,data){if(noError(e2,cb)){if(data===void 0){cb(ApiError.ENOENT(p2))}else{cb(null,new AsyncKeyValueFile(this$1,p2,flag,inode.toStats(),data))}}})}})};AsyncKeyValueFileSystem2.prototype.unlink=function unlink(p2,cb){this.removeEntry(p2,false,cb)};AsyncKeyValueFileSystem2.prototype.rmdir=function rmdir(p2,cb){var this$1=this;this.readdir(p2,function(err,files){if(err){cb(err)}else if(files.length>0){cb(ApiError.ENOTEMPTY(p2))}else{this$1.removeEntry(p2,true,cb)}})};AsyncKeyValueFileSystem2.prototype.mkdir=function mkdir(p2,mode,cb){var tx=this.store.beginTransaction("readwrite"),data=Buffer2.from("{}");this.commitNewFile(tx,p2,FileType.DIRECTORY,mode,data,cb)};AsyncKeyValueFileSystem2.prototype.readdir=function readdir(p2,cb){var this$1=this;var tx=this.store.beginTransaction("readonly");this.findINode(tx,p2,function(e,inode){if(noError(e,cb)){this$1.getDirListing(tx,p2,inode,function(e2,dirListing){if(noError(e2,cb)){cb(null,Object.keys(dirListing))}})}})};AsyncKeyValueFileSystem2.prototype._sync=function _sync(p2,data,stats,cb){var this$1=this;var tx=this.store.beginTransaction("readwrite");this._findINode(tx,path.dirname(p2),path.basename(p2),function(e,fileInodeId){if(noErrorTx(e,tx,cb)){this$1.getINode(tx,p2,fileInodeId,function(e2,fileInode){if(noErrorTx(e2,tx,cb)){var inodeChanged=fileInode.update(stats);tx.put(fileInode.id,data,true,function(e3){if(noErrorTx(e3,tx,cb)){if(inodeChanged){tx.put(fileInodeId,fileInode.toBuffer(),true,function(e4){if(noErrorTx(e4,tx,cb)){tx.commit(cb)}})}else{tx.commit(cb)}}})}})}})};AsyncKeyValueFileSystem2.prototype.makeRootDirectory=function makeRootDirectory(cb){var tx=this.store.beginTransaction("readwrite");tx.get(ROOT_NODE_ID,function(e,data){if(e||data===void 0){var currTime=new Date().getTime(),dirInode=new Inode(GenerateRandomID(),4096,511|FileType.DIRECTORY,currTime,currTime,currTime);tx.put(dirInode.id,getEmptyDirNode(),false,function(e2){if(noErrorTx(e2,tx,cb)){tx.put(ROOT_NODE_ID,dirInode.toBuffer(),false,function(e3){if(e3){tx.abort(function(){cb(e3)})}else{tx.commit(cb)}})}})}else{tx.commit(cb)}})};AsyncKeyValueFileSystem2.prototype._findINode=function _findINode(tx,parent,filename,cb){var this$1=this;var handleDirectoryListings=function(e,inode,dirList){if(e){cb(e)}else if(dirList[filename]){cb(null,dirList[filename])}else{cb(ApiError.ENOENT(path.resolve(parent,filename)))}};if(parent==="/"){if(filename===""){cb(null,ROOT_NODE_ID)}else{this.getINode(tx,parent,ROOT_NODE_ID,function(e,inode){if(noError(e,cb)){this$1.getDirListing(tx,parent,inode,function(e2,dirList){handleDirectoryListings(e2,inode,dirList)})}})}}else{this.findINodeAndDirListing(tx,parent,handleDirectoryListings)}};AsyncKeyValueFileSystem2.prototype.findINode=function findINode(tx,p2,cb){var this$1=this;this._findINode(tx,path.dirname(p2),path.basename(p2),function(e,id){if(noError(e,cb)){this$1.getINode(tx,p2,id,cb)}})};AsyncKeyValueFileSystem2.prototype.getINode=function getINode(tx,p2,id,cb){tx.get(id,function(e,data){if(noError(e,cb)){if(data===void 0){cb(ApiError.ENOENT(p2))}else{cb(null,Inode.fromBuffer(data))}}})};AsyncKeyValueFileSystem2.prototype.getDirListing=function getDirListing(tx,p2,inode,cb){if(!inode.isDirectory()){cb(ApiError.ENOTDIR(p2))}else{tx.get(inode.id,function(e,data){if(noError(e,cb)){try{cb(null,JSON.parse(data.toString()))}catch(e2){cb(ApiError.ENOENT(p2))}}})}};AsyncKeyValueFileSystem2.prototype.findINodeAndDirListing=function findINodeAndDirListing(tx,p2,cb){var this$1=this;this.findINode(tx,p2,function(e,inode){if(noError(e,cb)){this$1.getDirListing(tx,p2,inode,function(e2,listing){if(noError(e2,cb)){cb(null,inode,listing)}})}})};AsyncKeyValueFileSystem2.prototype.addNewNode=function addNewNode(tx,data,cb){var retries=0,currId;var reroll=function(){if(++retries===5){cb(new ApiError(ErrorCode.EIO,"Unable to commit data to key-value store."))}else{currId=GenerateRandomID();tx.put(currId,data,false,function(e,committed){if(e||!committed){reroll()}else{cb(null,currId)}})}};reroll()};AsyncKeyValueFileSystem2.prototype.commitNewFile=function commitNewFile(tx,p2,type,mode,data,cb){var this$1=this;var parentDir=path.dirname(p2),fname=path.basename(p2),currTime=new Date().getTime();if(p2==="/"){return cb(ApiError.EEXIST(p2))}this.findINodeAndDirListing(tx,parentDir,function(e,parentNode,dirListing){if(noErrorTx(e,tx,cb)){if(dirListing[fname]){tx.abort(function(){cb(ApiError.EEXIST(p2))})}else{this$1.addNewNode(tx,data,function(e2,dataId){if(noErrorTx(e2,tx,cb)){var fileInode=new Inode(dataId,data.length,mode|type,currTime,currTime,currTime);this$1.addNewNode(tx,fileInode.toBuffer(),function(e3,fileInodeId){if(noErrorTx(e3,tx,cb)){dirListing[fname]=fileInodeId;tx.put(parentNode.id,Buffer2.from(JSON.stringify(dirListing)),true,function(e4){if(noErrorTx(e4,tx,cb)){tx.commit(function(e5){if(noErrorTx(e5,tx,cb)){cb(null,fileInode)}})}})}})}})}}})};AsyncKeyValueFileSystem2.prototype.removeEntry=function removeEntry(p2,isDir,cb){var this$1=this;var tx=this.store.beginTransaction("readwrite"),parent=path.dirname(p2),fileName=path.basename(p2);this.findINodeAndDirListing(tx,parent,function(e,parentNode,parentListing){if(noErrorTx(e,tx,cb)){if(!parentListing[fileName]){tx.abort(function(){cb(ApiError.ENOENT(p2))})}else{var fileNodeId=parentListing[fileName];delete parentListing[fileName];this$1.getINode(tx,p2,fileNodeId,function(e2,fileNode){if(noErrorTx(e2,tx,cb)){if(!isDir&&fileNode.isDirectory()){tx.abort(function(){cb(ApiError.EISDIR(p2))})}else if(isDir&&!fileNode.isDirectory()){tx.abort(function(){cb(ApiError.ENOTDIR(p2))})}else{tx.del(fileNode.id,function(e3){if(noErrorTx(e3,tx,cb)){tx.del(fileNodeId,function(e4){if(noErrorTx(e4,tx,cb)){tx.put(parentNode.id,Buffer2.from(JSON.stringify(parentListing)),true,function(e5){if(noErrorTx(e5,tx,cb)){tx.commit(cb)}})}})}})}}})}}})};return AsyncKeyValueFileSystem2}(BaseFileSystem);var InMemoryStore=function InMemoryStore2(){this.store={}};InMemoryStore.prototype.name=function name2(){return InMemoryFileSystem.Name};InMemoryStore.prototype.clear=function clear(){this.store={}};InMemoryStore.prototype.beginTransaction=function beginTransaction(type){return new SimpleSyncRWTransaction(this)};InMemoryStore.prototype.get=function get(key){return this.store[key]};InMemoryStore.prototype.put=function put(key,data,overwrite){if(!overwrite&&this.store.hasOwnProperty(key)){return false}this.store[key]=data;return true};InMemoryStore.prototype.del=function del(key){delete this.store[key]};var InMemoryFileSystem=function(SyncKeyValueFileSystem$$1){function InMemoryFileSystem2(){SyncKeyValueFileSystem$$1.call(this,{store:new InMemoryStore})}if(SyncKeyValueFileSystem$$1)InMemoryFileSystem2.__proto__=SyncKeyValueFileSystem$$1;InMemoryFileSystem2.prototype=Object.create(SyncKeyValueFileSystem$$1&&SyncKeyValueFileSystem$$1.prototype);InMemoryFileSystem2.prototype.constructor=InMemoryFileSystem2;InMemoryFileSystem2.Create=function Create(options,cb){cb(null,new InMemoryFileSystem2)};return InMemoryFileSystem2}(SyncKeyValueFileSystem);InMemoryFileSystem.Name="InMemory";InMemoryFileSystem.Options={};var indexedDB=global$1.indexedDB||global$1.mozIndexedDB||global$1.webkitIndexedDB||global$1.msIndexedDB;function convertError$2(e,message){if(message===void 0)message=e.toString();switch(e.name){case"NotFoundError":return new ApiError(ErrorCode.ENOENT,message);case"QuotaExceededError":return new ApiError(ErrorCode.ENOSPC,message);default:return new ApiError(ErrorCode.EIO,message)}}function onErrorHandler(cb,code,message){if(code===void 0)code=ErrorCode.EIO;if(message===void 0)message=null;return function(e){e.preventDefault();cb(new ApiError(code,message!==null?message:void 0))}}var IndexedDBROTransaction=function IndexedDBROTransaction2(tx,store){this.tx=tx;this.store=store};IndexedDBROTransaction.prototype.get=function get(key,cb){try{var r=this.store.get(key);r.onerror=onErrorHandler(cb);r.onsuccess=function(event){var result=event.target.result;if(result===void 0){cb(null,result)}else{cb(null,arrayBuffer2Buffer(result))}}}catch(e){cb(convertError$2(e))}};var IndexedDBRWTransaction=function(IndexedDBROTransaction2){function IndexedDBRWTransaction2(tx,store){IndexedDBROTransaction2.call(this,tx,store)}if(IndexedDBROTransaction2)IndexedDBRWTransaction2.__proto__=IndexedDBROTransaction2;IndexedDBRWTransaction2.prototype=Object.create(IndexedDBROTransaction2&&IndexedDBROTransaction2.prototype);IndexedDBRWTransaction2.prototype.constructor=IndexedDBRWTransaction2;IndexedDBRWTransaction2.prototype.put=function put(key,data,overwrite,cb){try{var arraybuffer=buffer2ArrayBuffer(data);var r;if(overwrite){r=this.store.put(arraybuffer,key)}else{r=this.store.add(arraybuffer,key)}r.onerror=onErrorHandler(cb);r.onsuccess=function(event){cb(null,true)}}catch(e){cb(convertError$2(e))}};IndexedDBRWTransaction2.prototype.del=function del(key,cb){try{var r=this.store["delete"](key);r.onerror=onErrorHandler(cb);r.onsuccess=function(event){cb()}}catch(e){cb(convertError$2(e))}};IndexedDBRWTransaction2.prototype.commit=function commit(cb){setTimeout(cb,0)};IndexedDBRWTransaction2.prototype.abort=function abort(cb){var _e=null;try{this.tx.abort()}catch(e){_e=convertError$2(e)}finally{cb(_e)}};return IndexedDBRWTransaction2}(IndexedDBROTransaction);var IndexedDBStore=function IndexedDBStore2(cb,storeName){var this$1=this;if(storeName===void 0)storeName="browserfs";this.storeName=storeName;var openReq=indexedDB.open(this.storeName,1);openReq.onupgradeneeded=function(event){var db=event.target.result;if(db.objectStoreNames.contains(this$1.storeName)){db.deleteObjectStore(this$1.storeName)}db.createObjectStore(this$1.storeName)};openReq.onsuccess=function(event){this$1.db=event.target.result;cb(null,this$1)};openReq.onerror=onErrorHandler(cb,ErrorCode.EACCES)};IndexedDBStore.prototype.name=function name2(){return IndexedDBFileSystem.Name+" - "+this.storeName};IndexedDBStore.prototype.clear=function clear(cb){try{var tx=this.db.transaction(this.storeName,"readwrite"),objectStore=tx.objectStore(this.storeName),r=objectStore.clear();r.onsuccess=function(event){setTimeout(cb,0)};r.onerror=onErrorHandler(cb)}catch(e){cb(convertError$2(e))}};IndexedDBStore.prototype.beginTransaction=function beginTransaction(type){if(type===void 0)type="readonly";var tx=this.db.transaction(this.storeName,type),objectStore=tx.objectStore(this.storeName);if(type==="readwrite"){return new IndexedDBRWTransaction(tx,objectStore)}else if(type==="readonly"){return new IndexedDBROTransaction(tx,objectStore)}else{throw new ApiError(ErrorCode.EINVAL,"Invalid transaction type.")}};var IndexedDBFileSystem=function(AsyncKeyValueFileSystem$$1){function IndexedDBFileSystem2(cb,storeName,deprecateMsg){var this$1=this;if(deprecateMsg===void 0)deprecateMsg=true;AsyncKeyValueFileSystem$$1.call(this);this.store=new IndexedDBStore(function(e){if(e){cb(e)}else{this$1.init(this$1.store,function(e2){cb(e2,this$1)})}},storeName);deprecationMessage(deprecateMsg,IndexedDBFileSystem2.Name,{storeName})}if(AsyncKeyValueFileSystem$$1)IndexedDBFileSystem2.__proto__=AsyncKeyValueFileSystem$$1;IndexedDBFileSystem2.prototype=Object.create(AsyncKeyValueFileSystem$$1&&AsyncKeyValueFileSystem$$1.prototype);IndexedDBFileSystem2.prototype.constructor=IndexedDBFileSystem2;IndexedDBFileSystem2.Create=function Create(opts,cb){new IndexedDBFileSystem2(cb,opts.storeName,false)};IndexedDBFileSystem2.isAvailable=function isAvailable(){try{return typeof indexedDB!=="undefined"&&null!==indexedDB.open("__browserfs_test__")}catch(e){return false}};return IndexedDBFileSystem2}(AsyncKeyValueFileSystem);IndexedDBFileSystem.Name="IndexedDB";IndexedDBFileSystem.Options={storeName:{type:"string",optional:true,description:"The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."}};var supportsBinaryString=false;var binaryEncoding;try{global$1.localStorage.setItem("__test__",String.fromCharCode(55296));supportsBinaryString=global$1.localStorage.getItem("__test__")===String.fromCharCode(55296)}catch(e){supportsBinaryString=false}binaryEncoding=supportsBinaryString?"binary_string":"binary_string_ie";if(!Buffer2.isEncoding(binaryEncoding)){binaryEncoding="base64"}var LocalStorageStore=function LocalStorageStore2(){};LocalStorageStore.prototype.name=function name2(){return LocalStorageFileSystem.Name};LocalStorageStore.prototype.clear=function clear(){global$1.localStorage.clear()};LocalStorageStore.prototype.beginTransaction=function beginTransaction(type){return new SimpleSyncRWTransaction(this)};LocalStorageStore.prototype.get=function get(key){try{var data=global$1.localStorage.getItem(key);if(data!==null){return Buffer2.from(data,binaryEncoding)}}catch(e){}return void 0};LocalStorageStore.prototype.put=function put(key,data,overwrite){try{if(!overwrite&&global$1.localStorage.getItem(key)!==null){return false}global$1.localStorage.setItem(key,data.toString(binaryEncoding));return true}catch(e){throw new ApiError(ErrorCode.ENOSPC,"LocalStorage is full.")}};LocalStorageStore.prototype.del=function del(key){try{global$1.localStorage.removeItem(key)}catch(e){throw new ApiError(ErrorCode.EIO,"Unable to delete key "+key+": "+e)}};var LocalStorageFileSystem=function(SyncKeyValueFileSystem$$1){function LocalStorageFileSystem2(){SyncKeyValueFileSystem$$1.call(this,{store:new LocalStorageStore})}if(SyncKeyValueFileSystem$$1)LocalStorageFileSystem2.__proto__=SyncKeyValueFileSystem$$1;LocalStorageFileSystem2.prototype=Object.create(SyncKeyValueFileSystem$$1&&SyncKeyValueFileSystem$$1.prototype);LocalStorageFileSystem2.prototype.constructor=LocalStorageFileSystem2;LocalStorageFileSystem2.Create=function Create(options,cb){cb(null,new LocalStorageFileSystem2)};LocalStorageFileSystem2.isAvailable=function isAvailable(){return typeof global$1.localStorage!=="undefined"};return LocalStorageFileSystem2}(SyncKeyValueFileSystem);LocalStorageFileSystem.Name="LocalStorage";LocalStorageFileSystem.Options={};var MountableFileSystem=function(BaseFileSystem$$1){function MountableFileSystem2(){BaseFileSystem$$1.call(this);this.mountList=[];this.mntMap={};this.rootFs=new InMemoryFileSystem}if(BaseFileSystem$$1)MountableFileSystem2.__proto__=BaseFileSystem$$1;MountableFileSystem2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);MountableFileSystem2.prototype.constructor=MountableFileSystem2;MountableFileSystem2.Create=function Create(opts,cb){var fs4=new MountableFileSystem2;Object.keys(opts).forEach(function(mountPoint){fs4.mount(mountPoint,opts[mountPoint])});cb(null,fs4)};MountableFileSystem2.isAvailable=function isAvailable(){return true};MountableFileSystem2.prototype.mount=function mount(mountPoint,fs4){if(mountPoint[0]!=="/"){mountPoint="/"+mountPoint}mountPoint=path.resolve(mountPoint);if(this.mntMap[mountPoint]){throw new ApiError(ErrorCode.EINVAL,"Mount point "+mountPoint+" is already taken.")}mkdirpSync(mountPoint,511,this.rootFs);this.mntMap[mountPoint]=fs4;this.mountList.push(mountPoint);this.mountList=this.mountList.sort(function(a,b){return b.length-a.length})};MountableFileSystem2.prototype.umount=function umount(mountPoint){var this$1=this;if(mountPoint[0]!=="/"){mountPoint="/"+mountPoint}mountPoint=path.resolve(mountPoint);if(!this.mntMap[mountPoint]){throw new ApiError(ErrorCode.EINVAL,"Mount point "+mountPoint+" is already unmounted.")}delete this.mntMap[mountPoint];this.mountList.splice(this.mountList.indexOf(mountPoint),1);while(mountPoint!=="/"){if(this$1.rootFs.readdirSync(mountPoint).length===0){this$1.rootFs.rmdirSync(mountPoint);mountPoint=path.dirname(mountPoint)}else{break}}};MountableFileSystem2.prototype._getFs=function _getFs(path$$1){var this$1=this;var mountList=this.mountList,len=mountList.length;for(var i22=0;i22<len;i22++){var mountPoint=mountList[i22];if(mountPoint.length<=path$$1.length&&path$$1.indexOf(mountPoint)===0){path$$1=path$$1.substr(mountPoint.length>1?mountPoint.length:0);if(path$$1===""){path$$1="/"}return{fs:this$1.mntMap[mountPoint],path:path$$1}}}return{fs:this.rootFs,path:path$$1}};MountableFileSystem2.prototype.getName=function getName(){return MountableFileSystem2.Name};MountableFileSystem2.prototype.diskSpace=function diskSpace(path$$1,cb){cb(0,0)};MountableFileSystem2.prototype.isReadOnly=function isReadOnly(){return false};MountableFileSystem2.prototype.supportsLinks=function supportsLinks(){return false};MountableFileSystem2.prototype.supportsProps=function supportsProps(){return false};MountableFileSystem2.prototype.supportsSynch=function supportsSynch(){return true};MountableFileSystem2.prototype.standardizeError=function standardizeError(err,path$$1,realPath){var index=err.message.indexOf(path$$1);if(index!==-1){err.message=err.message.substr(0,index)+realPath+err.message.substr(index+path$$1.length);err.path=realPath}return err};MountableFileSystem2.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;var fs1rv=this._getFs(oldPath);var fs2rv=this._getFs(newPath);if(fs1rv.fs===fs2rv.fs){return fs1rv.fs.rename(fs1rv.path,fs2rv.path,function(e){if(e){this$1.standardizeError(this$1.standardizeError(e,fs1rv.path,oldPath),fs2rv.path,newPath)}cb(e)})}return _fsMock.readFile(oldPath,function(err,data){if(err){return cb(err)}_fsMock.writeFile(newPath,data,function(err2){if(err2){return cb(err2)}_fsMock.unlink(oldPath,cb)})})};MountableFileSystem2.prototype.renameSync=function renameSync(oldPath,newPath){var fs1rv=this._getFs(oldPath);var fs2rv=this._getFs(newPath);if(fs1rv.fs===fs2rv.fs){try{return fs1rv.fs.renameSync(fs1rv.path,fs2rv.path)}catch(e){this.standardizeError(this.standardizeError(e,fs1rv.path,oldPath),fs2rv.path,newPath);throw e}}var data=_fsMock.readFileSync(oldPath);_fsMock.writeFileSync(newPath,data);return _fsMock.unlinkSync(oldPath)};MountableFileSystem2.prototype.readdirSync=function readdirSync(p2){var fsInfo=this._getFs(p2);var rv=null;if(fsInfo.fs!==this.rootFs){try{rv=this.rootFs.readdirSync(p2)}catch(e){}}try{var rv2=fsInfo.fs.readdirSync(fsInfo.path);if(rv===null){return rv2}else{return rv2.concat(rv.filter(function(val){return rv2.indexOf(val)===-1}))}}catch(e){if(rv===null){throw this.standardizeError(e,fsInfo.path,p2)}else{return rv}}};MountableFileSystem2.prototype.readdir=function readdir(p2,cb){var this$1=this;var fsInfo=this._getFs(p2);fsInfo.fs.readdir(fsInfo.path,function(err,files){if(fsInfo.fs!==this$1.rootFs){try{var rv=this$1.rootFs.readdirSync(p2);if(files){files=files.concat(rv.filter(function(val){return files.indexOf(val)===-1}))}else{files=rv}}catch(e){if(err){return cb(this$1.standardizeError(err,fsInfo.path,p2))}}}else if(err){return cb(this$1.standardizeError(err,fsInfo.path,p2))}cb(null,files)})};MountableFileSystem2.prototype.rmdirSync=function rmdirSync(p2){var fsInfo=this._getFs(p2);if(this._containsMountPt(p2)){throw ApiError.ENOTEMPTY(p2)}else{try{fsInfo.fs.rmdirSync(fsInfo.path)}catch(e){throw this.standardizeError(e,fsInfo.path,p2)}}};MountableFileSystem2.prototype.rmdir=function rmdir(p2,cb){var this$1=this;var fsInfo=this._getFs(p2);if(this._containsMountPt(p2)){cb(ApiError.ENOTEMPTY(p2))}else{fsInfo.fs.rmdir(fsInfo.path,function(err){cb(err?this$1.standardizeError(err,fsInfo.path,p2):null)})}};MountableFileSystem2.prototype._containsMountPt=function _containsMountPt(p2){var mountPoints=this.mountList,len=mountPoints.length;for(var i22=0;i22<len;i22++){var pt=mountPoints[i22];if(pt.length>=p2.length&&pt.slice(0,p2.length)===p2){return true}}return false};return MountableFileSystem2}(BaseFileSystem);MountableFileSystem.Name="MountableFileSystem";MountableFileSystem.Options={};function defineFcn(name2,isSync,numArgs){if(isSync){return function(){var args=[],len=arguments.length;while(len--)args[len]=arguments[len];var path$$1=args[0];var rv=this._getFs(path$$1);args[0]=rv.path;try{return rv.fs[name2].apply(rv.fs,args)}catch(e){this.standardizeError(e,rv.path,path$$1);throw e}}}else{return function(){var this$1=this;var args=[],len=arguments.length;while(len--)args[len]=arguments[len];var path$$1=args[0];var rv=this._getFs(path$$1);args[0]=rv.path;if(typeof args[args.length-1]==="function"){var cb=args[args.length-1];args[args.length-1]=function(){var args2=[],len2=arguments.length;while(len2--)args2[len2]=arguments[len2];if(args2.length>0&&args2[0]instanceof ApiError){this$1.standardizeError(args2[0],rv.path,path$$1)}cb.apply(null,args2)}}return rv.fs[name2].apply(rv.fs,args)}}}var fsCmdMap=[["exists","unlink","readlink"],["stat","mkdir","realpath","truncate"],["open","readFile","chmod","utimes"],["chown"],["writeFile","appendFile"]];for(var i3=0;i3<fsCmdMap.length;i3++){var cmds=fsCmdMap[i3];for(var i$1=0,list=cmds;i$1<list.length;i$1+=1){var fnName=list[i$1];MountableFileSystem.prototype[fnName]=defineFcn(fnName,false,i3+1);MountableFileSystem.prototype[fnName+"Sync"]=defineFcn(fnName+"Sync",true,i3+1)}}var bfsSetImmediate;if(typeof setImmediate!=="undefined"){bfsSetImmediate=setImmediate}else{var gScope=global$1;var timeouts=[];var messageName="zero-timeout-message";var canUsePostMessage=function(){if(typeof gScope.importScripts!=="undefined"||!gScope.postMessage){return false}var postMessageIsAsync=true;var oldOnMessage=gScope.onmessage;gScope.onmessage=function(){postMessageIsAsync=false};gScope.postMessage("","*");gScope.onmessage=oldOnMessage;return postMessageIsAsync};if(canUsePostMessage()){bfsSetImmediate=function(fn){timeouts.push(fn);gScope.postMessage(messageName,"*")};var handleMessage=function(event){if(event.source===self&&event.data===messageName){if(event.stopPropagation){event.stopPropagation()}else{event.cancelBubble=true}if(timeouts.length>0){var fn=timeouts.shift();return fn()}}};if(gScope.addEventListener){gScope.addEventListener("message",handleMessage,true)}else{gScope.attachEvent("onmessage",handleMessage)}}else if(gScope.MessageChannel){var channel=new gScope.MessageChannel;channel.port1.onmessage=function(event){if(timeouts.length>0){return timeouts.shift()()}};bfsSetImmediate=function(fn){timeouts.push(fn);channel.port2.postMessage("")}}else{bfsSetImmediate=function(fn){return setTimeout(fn,0)}}}var setImmediate$3=bfsSetImmediate;var Mutex=function Mutex2(){this._locked=false;this._waiters=[]};Mutex.prototype.lock=function lock(cb){if(this._locked){this._waiters.push(cb);return}this._locked=true;cb()};Mutex.prototype.unlock=function unlock(){if(!this._locked){throw new Error("unlock of a non-locked mutex")}var next=this._waiters.shift();if(next){setImmediate$3(next);return}this._locked=false};Mutex.prototype.tryLock=function tryLock(){if(this._locked){return false}this._locked=true;return true};Mutex.prototype.isLocked=function isLocked(){return this._locked};var LockedFS=function LockedFS2(fs4){this._fs=fs4;this._mu=new Mutex};LockedFS.prototype.getName=function getName(){return"LockedFS<"+this._fs.getName()+">"};LockedFS.prototype.getFSUnlocked=function getFSUnlocked(){return this._fs};LockedFS.prototype.initialize=function initialize3(cb){this._fs.initialize(cb)};LockedFS.prototype.diskSpace=function diskSpace(p2,cb){this._fs.diskSpace(p2,cb)};LockedFS.prototype.isReadOnly=function isReadOnly(){return this._fs.isReadOnly()};LockedFS.prototype.supportsLinks=function supportsLinks(){return this._fs.supportsLinks()};LockedFS.prototype.supportsProps=function supportsProps(){return this._fs.supportsProps()};LockedFS.prototype.supportsSynch=function supportsSynch(){return this._fs.supportsSynch()};LockedFS.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;this._mu.lock(function(){this$1._fs.rename(oldPath,newPath,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.renameSync=function renameSync(oldPath,newPath){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.renameSync(oldPath,newPath)};LockedFS.prototype.stat=function stat(p2,isLstat,cb){var this$1=this;this._mu.lock(function(){this$1._fs.stat(p2,isLstat,function(err,stat2){this$1._mu.unlock();cb(err,stat2)})})};LockedFS.prototype.statSync=function statSync(p2,isLstat){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.statSync(p2,isLstat)};LockedFS.prototype.open=function open(p2,flag,mode,cb){var this$1=this;this._mu.lock(function(){this$1._fs.open(p2,flag,mode,function(err,fd){this$1._mu.unlock();cb(err,fd)})})};LockedFS.prototype.openSync=function openSync(p2,flag,mode){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.openSync(p2,flag,mode)};LockedFS.prototype.unlink=function unlink(p2,cb){var this$1=this;this._mu.lock(function(){this$1._fs.unlink(p2,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.unlinkSync=function unlinkSync(p2){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.unlinkSync(p2)};LockedFS.prototype.rmdir=function rmdir(p2,cb){var this$1=this;this._mu.lock(function(){this$1._fs.rmdir(p2,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.rmdirSync=function rmdirSync(p2){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.rmdirSync(p2)};LockedFS.prototype.mkdir=function mkdir(p2,mode,cb){var this$1=this;this._mu.lock(function(){this$1._fs.mkdir(p2,mode,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.mkdirSync=function mkdirSync(p2,mode){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.mkdirSync(p2,mode)};LockedFS.prototype.readdir=function readdir(p2,cb){var this$1=this;this._mu.lock(function(){this$1._fs.readdir(p2,function(err,files){this$1._mu.unlock();cb(err,files)})})};LockedFS.prototype.readdirSync=function readdirSync(p2){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.readdirSync(p2)};LockedFS.prototype.exists=function exists2(p2,cb){var this$1=this;this._mu.lock(function(){this$1._fs.exists(p2,function(exists3){this$1._mu.unlock();cb(exists3)})})};LockedFS.prototype.existsSync=function existsSync(p2){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.existsSync(p2)};LockedFS.prototype.realpath=function realpath(p2,cache,cb){var this$1=this;this._mu.lock(function(){this$1._fs.realpath(p2,cache,function(err,resolvedPath){this$1._mu.unlock();cb(err,resolvedPath)})})};LockedFS.prototype.realpathSync=function realpathSync(p2,cache){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.realpathSync(p2,cache)};LockedFS.prototype.truncate=function truncate(p2,len,cb){var this$1=this;this._mu.lock(function(){this$1._fs.truncate(p2,len,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.truncateSync=function truncateSync(p2,len){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.truncateSync(p2,len)};LockedFS.prototype.readFile=function readFile2(fname,encoding,flag,cb){var this$1=this;this._mu.lock(function(){this$1._fs.readFile(fname,encoding,flag,function(err,data){this$1._mu.unlock();cb(err,data)})})};LockedFS.prototype.readFileSync=function readFileSync(fname,encoding,flag){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.readFileSync(fname,encoding,flag)};LockedFS.prototype.writeFile=function writeFile2(fname,data,encoding,flag,mode,cb){var this$1=this;this._mu.lock(function(){this$1._fs.writeFile(fname,data,encoding,flag,mode,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.writeFileSync=function writeFileSync(fname,data,encoding,flag,mode){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.writeFileSync(fname,data,encoding,flag,mode)};LockedFS.prototype.appendFile=function appendFile3(fname,data,encoding,flag,mode,cb){var this$1=this;this._mu.lock(function(){this$1._fs.appendFile(fname,data,encoding,flag,mode,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.appendFileSync=function appendFileSync(fname,data,encoding,flag,mode){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.appendFileSync(fname,data,encoding,flag,mode)};LockedFS.prototype.chmod=function chmod(p2,isLchmod,mode,cb){var this$1=this;this._mu.lock(function(){this$1._fs.chmod(p2,isLchmod,mode,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.chmodSync=function chmodSync(p2,isLchmod,mode){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.chmodSync(p2,isLchmod,mode)};LockedFS.prototype.chown=function chown(p2,isLchown,uid,gid,cb){var this$1=this;this._mu.lock(function(){this$1._fs.chown(p2,isLchown,uid,gid,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.chownSync=function chownSync(p2,isLchown,uid,gid){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.chownSync(p2,isLchown,uid,gid)};LockedFS.prototype.utimes=function utimes(p2,atime,mtime,cb){var this$1=this;this._mu.lock(function(){this$1._fs.utimes(p2,atime,mtime,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.utimesSync=function utimesSync(p2,atime,mtime){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.utimesSync(p2,atime,mtime)};LockedFS.prototype.link=function link(srcpath,dstpath,cb){var this$1=this;this._mu.lock(function(){this$1._fs.link(srcpath,dstpath,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.linkSync=function linkSync(srcpath,dstpath){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.linkSync(srcpath,dstpath)};LockedFS.prototype.symlink=function symlink(srcpath,dstpath,type,cb){var this$1=this;this._mu.lock(function(){this$1._fs.symlink(srcpath,dstpath,type,function(err){this$1._mu.unlock();cb(err)})})};LockedFS.prototype.symlinkSync=function symlinkSync(srcpath,dstpath,type){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.symlinkSync(srcpath,dstpath,type)};LockedFS.prototype.readlink=function readlink(p2,cb){var this$1=this;this._mu.lock(function(){this$1._fs.readlink(p2,function(err,linkString){this$1._mu.unlock();cb(err,linkString)})})};LockedFS.prototype.readlinkSync=function readlinkSync(p2){if(this._mu.isLocked()){throw new Error("invalid sync call")}return this._fs.readlinkSync(p2)};var deletionLogPath="/.deletedFiles.log";function makeModeWritable(mode){return 146|mode}function getFlag(f){return FileFlag.getFileFlag(f)}var OverlayFile=function(PreloadFile$$1){function OverlayFile2(fs4,path$$1,flag,stats,data){PreloadFile$$1.call(this,fs4,path$$1,flag,stats,data)}if(PreloadFile$$1)OverlayFile2.__proto__=PreloadFile$$1;OverlayFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);OverlayFile2.prototype.constructor=OverlayFile2;OverlayFile2.prototype.sync=function sync(cb){var this$1=this;if(!this.isDirty()){cb(null);return}this._fs._syncAsync(this,function(err){this$1.resetDirty();cb(err)})};OverlayFile2.prototype.syncSync=function syncSync(){if(this.isDirty()){this._fs._syncSync(this);this.resetDirty()}};OverlayFile2.prototype.close=function close(cb){this.sync(cb)};OverlayFile2.prototype.closeSync=function closeSync(){this.syncSync()};return OverlayFile2}(PreloadFile);var UnlockedOverlayFS=function(BaseFileSystem$$1){function UnlockedOverlayFS2(writable,readable){BaseFileSystem$$1.call(this);this._isInitialized=false;this._initializeCallbacks=[];this._deletedFiles={};this._deleteLog="";this._deleteLogUpdatePending=false;this._deleteLogUpdateNeeded=false;this._deleteLogError=null;this._writable=writable;this._readable=readable;if(this._writable.isReadOnly()){throw new ApiError(ErrorCode.EINVAL,"Writable file system must be writable.")}}if(BaseFileSystem$$1)UnlockedOverlayFS2.__proto__=BaseFileSystem$$1;UnlockedOverlayFS2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);UnlockedOverlayFS2.prototype.constructor=UnlockedOverlayFS2;UnlockedOverlayFS2.isAvailable=function isAvailable(){return true};UnlockedOverlayFS2.prototype.getOverlayedFileSystems=function getOverlayedFileSystems(){return{readable:this._readable,writable:this._writable}};UnlockedOverlayFS2.prototype._syncAsync=function _syncAsync(file,cb){var this$1=this;this.createParentDirectoriesAsync(file.getPath(),function(err){if(err){return cb(err)}this$1._writable.writeFile(file.getPath(),file.getBuffer(),null,getFlag("w"),file.getStats().mode,cb)})};UnlockedOverlayFS2.prototype._syncSync=function _syncSync(file){this.createParentDirectories(file.getPath());this._writable.writeFileSync(file.getPath(),file.getBuffer(),null,getFlag("w"),file.getStats().mode)};UnlockedOverlayFS2.prototype.getName=function getName(){return OverlayFS.Name};UnlockedOverlayFS2.prototype.initialize=function initialize3(cb){var this$1=this;var callbackArray=this._initializeCallbacks;var end=function(e){this$1._isInitialized=!e;this$1._initializeCallbacks=[];callbackArray.forEach(function(cb2){return cb2(e)})};if(this._isInitialized){return cb()}callbackArray.push(cb);if(callbackArray.length!==1){return}this._writable.readFile(deletionLogPath,"utf8",getFlag("r"),function(err,data){if(err){if(err.errno!==ErrorCode.ENOENT){return end(err)}}else{this$1._deleteLog=data}this$1._reparseDeletionLog();end()})};UnlockedOverlayFS2.prototype.isReadOnly=function isReadOnly(){return false};UnlockedOverlayFS2.prototype.supportsSynch=function supportsSynch(){return this._readable.supportsSynch()&&this._writable.supportsSynch()};UnlockedOverlayFS2.prototype.supportsLinks=function supportsLinks(){return false};UnlockedOverlayFS2.prototype.supportsProps=function supportsProps(){return this._readable.supportsProps()&&this._writable.supportsProps()};UnlockedOverlayFS2.prototype.getDeletionLog=function getDeletionLog(){return this._deleteLog};UnlockedOverlayFS2.prototype.restoreDeletionLog=function restoreDeletionLog(log){this._deleteLog=log;this._reparseDeletionLog();this.updateLog("")};UnlockedOverlayFS2.prototype.rename=function rename(oldPath,newPath,cb){var this$1=this;if(!this.checkInitAsync(cb)||this.checkPathAsync(oldPath,cb)||this.checkPathAsync(newPath,cb)){return}if(oldPath===deletionLogPath||newPath===deletionLogPath){return cb(ApiError.EPERM("Cannot rename deletion log."))}if(oldPath===newPath){return cb()}this.stat(oldPath,false,function(oldErr,oldStats){if(oldErr){return cb(oldErr)}return this$1.stat(newPath,false,function(newErr,newStats){var self2=this$1;function copyDirContents(files){var file=files.shift();if(!file){return cb()}var oldFile=path.resolve(oldPath,file);var newFile=path.resolve(newPath,file);self2.rename(oldFile,newFile,function(err){if(err){return cb(err)}copyDirContents(files)})}var mode=511;if(oldStats.isDirectory()){if(newErr){if(newErr.errno!==ErrorCode.ENOENT){return cb(newErr)}return this$1._writable.exists(oldPath,function(exists2){if(exists2){return this$1._writable.rename(oldPath,newPath,cb)}this$1._writable.mkdir(newPath,mode,function(mkdirErr){if(mkdirErr){return cb(mkdirErr)}this$1._readable.readdir(oldPath,function(err,files){if(err){return cb()}copyDirContents(files)})})})}mode=newStats.mode;if(!newStats.isDirectory()){return cb(ApiError.ENOTDIR(newPath))}this$1.readdir(newPath,function(readdirErr,files){if(files&&files.length){return cb(ApiError.ENOTEMPTY(newPath))}this$1._readable.readdir(oldPath,function(err,files2){if(err){return cb()}copyDirContents(files2)})})}if(newStats&&newStats.isDirectory()){return cb(ApiError.EISDIR(newPath))}this$1.readFile(oldPath,null,getFlag("r"),function(err,data){if(err){return cb(err)}return this$1.writeFile(newPath,data,null,getFlag("w"),oldStats.mode,function(err2){if(err2){return cb(err2)}return this$1.unlink(oldPath,cb)})})})})};UnlockedOverlayFS2.prototype.renameSync=function renameSync(oldPath,newPath){var this$1=this;this.checkInitialized();this.checkPath(oldPath);this.checkPath(newPath);if(oldPath===deletionLogPath||newPath===deletionLogPath){throw ApiError.EPERM("Cannot rename deletion log.")}var oldStats=this.statSync(oldPath,false);if(oldStats.isDirectory()){if(oldPath===newPath){return}var mode=511;if(this.existsSync(newPath)){var stats=this.statSync(newPath,false);mode=stats.mode;if(stats.isDirectory()){if(this.readdirSync(newPath).length>0){throw ApiError.ENOTEMPTY(newPath)}}else{throw ApiError.ENOTDIR(newPath)}}if(this._writable.existsSync(oldPath)){this._writable.renameSync(oldPath,newPath)}else if(!this._writable.existsSync(newPath)){this._writable.mkdirSync(newPath,mode)}if(this._readable.existsSync(oldPath)){this._readable.readdirSync(oldPath).forEach(function(name2){this$1.renameSync(path.resolve(oldPath,name2),path.resolve(newPath,name2))})}}else{if(this.existsSync(newPath)&&this.statSync(newPath,false).isDirectory()){throw ApiError.EISDIR(newPath)}this.writeFileSync(newPath,this.readFileSync(oldPath,null,getFlag("r")),null,getFlag("w"),oldStats.mode)}if(oldPath!==newPath&&this.existsSync(oldPath)){this.unlinkSync(oldPath)}};UnlockedOverlayFS2.prototype.stat=function stat(p2,isLstat,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this._writable.stat(p2,isLstat,function(err,stat2){if(err&&err.errno===ErrorCode.ENOENT){if(this$1._deletedFiles[p2]){cb(ApiError.ENOENT(p2))}this$1._readable.stat(p2,isLstat,function(err2,stat3){if(stat3){stat3=stat3.clone();stat3.mode=makeModeWritable(stat3.mode)}cb(err2,stat3)})}else{cb(err,stat2)}})};UnlockedOverlayFS2.prototype.statSync=function statSync(p2,isLstat){this.checkInitialized();try{return this._writable.statSync(p2,isLstat)}catch(e){if(this._deletedFiles[p2]){throw ApiError.ENOENT(p2)}var oldStat=this._readable.statSync(p2,isLstat).clone();oldStat.mode=makeModeWritable(oldStat.mode);return oldStat}};UnlockedOverlayFS2.prototype.open=function open(p2,flag,mode,cb){var this$1=this;if(!this.checkInitAsync(cb)||this.checkPathAsync(p2,cb)){return}this.stat(p2,false,function(err,stats){if(stats){switch(flag.pathExistsAction()){case ActionType.TRUNCATE_FILE:return this$1.createParentDirectoriesAsync(p2,function(err2){if(err2){return cb(err2)}this$1._writable.open(p2,flag,mode,cb)});case ActionType.NOP:return this$1._writable.exists(p2,function(exists2){if(exists2){this$1._writable.open(p2,flag,mode,cb)}else{stats=stats.clone();stats.mode=mode;this$1._readable.readFile(p2,null,getFlag("r"),function(readFileErr,data){if(readFileErr){return cb(readFileErr)}if(stats.size===-1){stats.size=data.length}var f=new OverlayFile(this$1,p2,flag,stats,data);cb(null,f)})}});default:return cb(ApiError.EEXIST(p2))}}else{switch(flag.pathNotExistsAction()){case ActionType.CREATE_FILE:return this$1.createParentDirectoriesAsync(p2,function(err2){if(err2){return cb(err2)}return this$1._writable.open(p2,flag,mode,cb)});default:return cb(ApiError.ENOENT(p2))}}})};UnlockedOverlayFS2.prototype.openSync=function openSync(p2,flag,mode){this.checkInitialized();this.checkPath(p2);if(p2===deletionLogPath){throw ApiError.EPERM("Cannot open deletion log.")}if(this.existsSync(p2)){switch(flag.pathExistsAction()){case ActionType.TRUNCATE_FILE:this.createParentDirectories(p2);return this._writable.openSync(p2,flag,mode);case ActionType.NOP:if(this._writable.existsSync(p2)){return this._writable.openSync(p2,flag,mode)}else{var buf=this._readable.readFileSync(p2,null,getFlag("r"));var stats=this._readable.statSync(p2,false).clone();stats.mode=mode;return new OverlayFile(this,p2,flag,stats,buf)}default:throw ApiError.EEXIST(p2)}}else{switch(flag.pathNotExistsAction()){case ActionType.CREATE_FILE:this.createParentDirectories(p2);return this._writable.openSync(p2,flag,mode);default:throw ApiError.ENOENT(p2)}}};UnlockedOverlayFS2.prototype.unlink=function unlink(p2,cb){var this$1=this;if(!this.checkInitAsync(cb)||this.checkPathAsync(p2,cb)){return}this.exists(p2,function(exists2){if(!exists2){return cb(ApiError.ENOENT(p2))}this$1._writable.exists(p2,function(writableExists){if(writableExists){return this$1._writable.unlink(p2,function(err){if(err){return cb(err)}this$1.exists(p2,function(readableExists){if(readableExists){this$1.deletePath(p2)}cb(null)})})}else{this$1.deletePath(p2);cb(null)}})})};UnlockedOverlayFS2.prototype.unlinkSync=function unlinkSync(p2){this.checkInitialized();this.checkPath(p2);if(this.existsSync(p2)){if(this._writable.existsSync(p2)){this._writable.unlinkSync(p2)}if(this.existsSync(p2)){this.deletePath(p2)}}else{throw ApiError.ENOENT(p2)}};UnlockedOverlayFS2.prototype.rmdir=function rmdir(p2,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}var rmdirLower=function(){this$1.readdir(p2,function(err,files){if(err){return cb(err)}if(files.length){return cb(ApiError.ENOTEMPTY(p2))}this$1.deletePath(p2);cb(null)})};this.exists(p2,function(exists2){if(!exists2){return cb(ApiError.ENOENT(p2))}this$1._writable.exists(p2,function(writableExists){if(writableExists){this$1._writable.rmdir(p2,function(err){if(err){return cb(err)}this$1._readable.exists(p2,function(readableExists){if(readableExists){rmdirLower()}else{cb()}})})}else{rmdirLower()}})})};UnlockedOverlayFS2.prototype.rmdirSync=function rmdirSync(p2){this.checkInitialized();if(this.existsSync(p2)){if(this._writable.existsSync(p2)){this._writable.rmdirSync(p2)}if(this.existsSync(p2)){if(this.readdirSync(p2).length>0){throw ApiError.ENOTEMPTY(p2)}else{this.deletePath(p2)}}}else{throw ApiError.ENOENT(p2)}};UnlockedOverlayFS2.prototype.mkdir=function mkdir(p2,mode,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this.exists(p2,function(exists2){if(exists2){return cb(ApiError.EEXIST(p2))}this$1.createParentDirectoriesAsync(p2,function(err){if(err){return cb(err)}this$1._writable.mkdir(p2,mode,cb)})})};UnlockedOverlayFS2.prototype.mkdirSync=function mkdirSync(p2,mode){this.checkInitialized();if(this.existsSync(p2)){throw ApiError.EEXIST(p2)}else{this.createParentDirectories(p2);this._writable.mkdirSync(p2,mode)}};UnlockedOverlayFS2.prototype.readdir=function readdir(p2,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this.stat(p2,false,function(err,dirStats){if(err){return cb(err)}if(!dirStats.isDirectory()){return cb(ApiError.ENOTDIR(p2))}this$1._writable.readdir(p2,function(err2,wFiles){if(err2&&err2.code!=="ENOENT"){return cb(err2)}else if(err2||!wFiles){wFiles=[]}this$1._readable.readdir(p2,function(err3,rFiles){if(err3||!rFiles){rFiles=[]}var seenMap={};var filtered=wFiles.concat(rFiles.filter(function(fPath){return!this$1._deletedFiles[p2+"/"+fPath]})).filter(function(fPath){var result=!seenMap[fPath];seenMap[fPath]=true;return result});cb(null,filtered)})})})};UnlockedOverlayFS2.prototype.readdirSync=function readdirSync(p2){var this$1=this;this.checkInitialized();var dirStats=this.statSync(p2,false);if(!dirStats.isDirectory()){throw ApiError.ENOTDIR(p2)}var contents=[];try{contents=contents.concat(this._writable.readdirSync(p2))}catch(e){}try{contents=contents.concat(this._readable.readdirSync(p2).filter(function(fPath){return!this$1._deletedFiles[p2+"/"+fPath]}))}catch(e){}var seenMap={};return contents.filter(function(fileP){var result=!seenMap[fileP];seenMap[fileP]=true;return result})};UnlockedOverlayFS2.prototype.exists=function exists2(p2,cb){var this$1=this;this.checkInitialized();this._writable.exists(p2,function(existsWritable){if(existsWritable){return cb(true)}this$1._readable.exists(p2,function(existsReadable){cb(existsReadable&&this$1._deletedFiles[p2]!==true)})})};UnlockedOverlayFS2.prototype.existsSync=function existsSync(p2){this.checkInitialized();return this._writable.existsSync(p2)||this._readable.existsSync(p2)&&this._deletedFiles[p2]!==true};UnlockedOverlayFS2.prototype.chmod=function chmod(p2,isLchmod,mode,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this.operateOnWritableAsync(p2,function(err){if(err){return cb(err)}else{this$1._writable.chmod(p2,isLchmod,mode,cb)}})};UnlockedOverlayFS2.prototype.chmodSync=function chmodSync(p2,isLchmod,mode){var this$1=this;this.checkInitialized();this.operateOnWritable(p2,function(){this$1._writable.chmodSync(p2,isLchmod,mode)})};UnlockedOverlayFS2.prototype.chown=function chown(p2,isLchmod,uid,gid,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this.operateOnWritableAsync(p2,function(err){if(err){return cb(err)}else{this$1._writable.chown(p2,isLchmod,uid,gid,cb)}})};UnlockedOverlayFS2.prototype.chownSync=function chownSync(p2,isLchown,uid,gid){var this$1=this;this.checkInitialized();this.operateOnWritable(p2,function(){this$1._writable.chownSync(p2,isLchown,uid,gid)})};UnlockedOverlayFS2.prototype.utimes=function utimes(p2,atime,mtime,cb){var this$1=this;if(!this.checkInitAsync(cb)){return}this.operateOnWritableAsync(p2,function(err){if(err){return cb(err)}else{this$1._writable.utimes(p2,atime,mtime,cb)}})};UnlockedOverlayFS2.prototype.utimesSync=function utimesSync(p2,atime,mtime){var this$1=this;this.checkInitialized();this.operateOnWritable(p2,function(){this$1._writable.utimesSync(p2,atime,mtime)})};UnlockedOverlayFS2.prototype.deletePath=function deletePath(p2){this._deletedFiles[p2]=true;this.updateLog("d"+p2+"\\n")};UnlockedOverlayFS2.prototype.updateLog=function updateLog(addition){var this$1=this;this._deleteLog+=addition;if(this._deleteLogUpdatePending){this._deleteLogUpdateNeeded=true}else{this._deleteLogUpdatePending=true;this._writable.writeFile(deletionLogPath,this._deleteLog,"utf8",FileFlag.getFileFlag("w"),420,function(e){this$1._deleteLogUpdatePending=false;if(e){this$1._deleteLogError=e}else if(this$1._deleteLogUpdateNeeded){this$1._deleteLogUpdateNeeded=false;this$1.updateLog("")}})}};UnlockedOverlayFS2.prototype._reparseDeletionLog=function _reparseDeletionLog(){var this$1=this;this._deletedFiles={};this._deleteLog.split("\\n").forEach(function(path$$1){this$1._deletedFiles[path$$1.slice(1)]=path$$1.slice(0,1)==="d"})};UnlockedOverlayFS2.prototype.checkInitialized=function checkInitialized(){if(!this._isInitialized){throw new ApiError(ErrorCode.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.")}else if(this._deleteLogError!==null){var e=this._deleteLogError;this._deleteLogError=null;throw e}};UnlockedOverlayFS2.prototype.checkInitAsync=function checkInitAsync(cb){if(!this._isInitialized){cb(new ApiError(ErrorCode.EPERM,"OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));return false}else if(this._deleteLogError!==null){var e=this._deleteLogError;this._deleteLogError=null;cb(e);return false}return true};UnlockedOverlayFS2.prototype.checkPath=function checkPath(p2){if(p2===deletionLogPath){throw ApiError.EPERM(p2)}};UnlockedOverlayFS2.prototype.checkPathAsync=function checkPathAsync(p2,cb){if(p2===deletionLogPath){cb(ApiError.EPERM(p2));return true}return false};UnlockedOverlayFS2.prototype.createParentDirectoriesAsync=function createParentDirectoriesAsync(p2,cb){var parent=path.dirname(p2);var toCreate=[];var self2=this;this._writable.stat(parent,false,statDone);function statDone(err,stat){if(err){toCreate.push(parent);parent=path.dirname(parent);self2._writable.stat(parent,false,statDone)}else{createParents()}}function createParents(){if(!toCreate.length){return cb()}var dir2=toCreate.pop();self2._readable.stat(dir2,false,function(err,stats){if(!stats){return cb()}self2._writable.mkdir(dir2,stats.mode,function(err2){if(err2){return cb(err2)}createParents()})})}};UnlockedOverlayFS2.prototype.createParentDirectories=function createParentDirectories(p2){var this$1=this;var parent=path.dirname(p2),toCreate=[];while(!this._writable.existsSync(parent)){toCreate.push(parent);parent=path.dirname(parent)}toCreate=toCreate.reverse();toCreate.forEach(function(p22){this$1._writable.mkdirSync(p22,this$1.statSync(p22,false).mode)})};UnlockedOverlayFS2.prototype.operateOnWritable=function operateOnWritable(p2,f){if(this.existsSync(p2)){if(!this._writable.existsSync(p2)){this.copyToWritable(p2)}f()}else{throw ApiError.ENOENT(p2)}};UnlockedOverlayFS2.prototype.operateOnWritableAsync=function operateOnWritableAsync(p2,cb){var this$1=this;this.exists(p2,function(exists2){if(!exists2){return cb(ApiError.ENOENT(p2))}this$1._writable.exists(p2,function(existsWritable){if(existsWritable){cb()}else{return this$1.copyToWritableAsync(p2,cb)}})})};UnlockedOverlayFS2.prototype.copyToWritable=function copyToWritable(p2){var pStats=this.statSync(p2,false);if(pStats.isDirectory()){this._writable.mkdirSync(p2,pStats.mode)}else{this.writeFileSync(p2,this._readable.readFileSync(p2,null,getFlag("r")),null,getFlag("w"),this.statSync(p2,false).mode)}};UnlockedOverlayFS2.prototype.copyToWritableAsync=function copyToWritableAsync(p2,cb){var this$1=this;this.stat(p2,false,function(err,pStats){if(err){return cb(err)}if(pStats.isDirectory()){return this$1._writable.mkdir(p2,pStats.mode,cb)}this$1._readable.readFile(p2,null,getFlag("r"),function(err2,data){if(err2){return cb(err2)}this$1.writeFile(p2,data,null,getFlag("w"),pStats.mode,cb)})})};return UnlockedOverlayFS2}(BaseFileSystem);var OverlayFS=function(LockedFS$$1){function OverlayFS2(writable,readable,deprecateMsg){if(deprecateMsg===void 0)deprecateMsg=true;LockedFS$$1.call(this,new UnlockedOverlayFS(writable,readable));deprecationMessage(deprecateMsg,OverlayFS2.Name,{readable:"readable file system",writable:"writable file system"})}if(LockedFS$$1)OverlayFS2.__proto__=LockedFS$$1;OverlayFS2.prototype=Object.create(LockedFS$$1&&LockedFS$$1.prototype);OverlayFS2.prototype.constructor=OverlayFS2;OverlayFS2.Create=function Create(opts,cb){try{var fs4=new OverlayFS2(opts.writable,opts.readable,false);fs4.initialize(function(e){cb(e,fs4)},false)}catch(e){cb(e)}};OverlayFS2.isAvailable=function isAvailable(){return UnlockedOverlayFS.isAvailable()};OverlayFS2.prototype.initialize=function initialize3(cb,deprecateMsg){if(deprecateMsg===void 0)deprecateMsg=true;if(deprecateMsg){console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use \'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)\' to create and initialize OverlayFS instances.")}LockedFS$$1.prototype.initialize.call(this,cb)};OverlayFS2.prototype.getOverlayedFileSystems=function getOverlayedFileSystems(){return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems()};OverlayFS2.prototype.unwrap=function unwrap(){return LockedFS$$1.prototype.getFSUnlocked.call(this)};return OverlayFS2}(LockedFS);OverlayFS.Name="OverlayFS";OverlayFS.Options={writable:{type:"object",description:"The file system to write modified files to."},readable:{type:"object",description:"The file system that initially populates this file system."}};var SpecialArgType;(function(SpecialArgType2){SpecialArgType2[SpecialArgType2["CB"]=0]="CB";SpecialArgType2[SpecialArgType2["FD"]=1]="FD";SpecialArgType2[SpecialArgType2["API_ERROR"]=2]="API_ERROR";SpecialArgType2[SpecialArgType2["STATS"]=3]="STATS";SpecialArgType2[SpecialArgType2["PROBE"]=4]="PROBE";SpecialArgType2[SpecialArgType2["FILEFLAG"]=5]="FILEFLAG";SpecialArgType2[SpecialArgType2["BUFFER"]=6]="BUFFER";SpecialArgType2[SpecialArgType2["ERROR"]=7]="ERROR"})(SpecialArgType||(SpecialArgType={}));var CallbackArgumentConverter=function CallbackArgumentConverter2(){this._callbacks={};this._nextId=0};CallbackArgumentConverter.prototype.toRemoteArg=function toRemoteArg(cb){var id=this._nextId++;this._callbacks[id]=cb;return{type:SpecialArgType.CB,id}};CallbackArgumentConverter.prototype.toLocalArg=function toLocalArg(id){var cb=this._callbacks[id];delete this._callbacks[id];return cb};var FileDescriptorArgumentConverter=function FileDescriptorArgumentConverter2(){this._fileDescriptors={};this._nextId=0};FileDescriptorArgumentConverter.prototype.toRemoteArg=function toRemoteArg(fd,p2,flag,cb){var id=this._nextId++;var data;var stat;this._fileDescriptors[id]=fd;fd.stat(function(err,stats){if(err){cb(err)}else{stat=bufferToTransferrableObject(stats.toBuffer());if(flag.isReadable()){fd.read(Buffer2.alloc(stats.size),0,stats.size,0,function(err2,bytesRead,buff){if(err2){cb(err2)}else{data=bufferToTransferrableObject(buff);cb(null,{type:SpecialArgType.FD,id,data,stat,path:p2,flag:flag.getFlagString()})}})}else{cb(null,{type:SpecialArgType.FD,id,data:new ArrayBuffer(0),stat,path:p2,flag:flag.getFlagString()})}}})};FileDescriptorArgumentConverter.prototype.applyFdAPIRequest=function applyFdAPIRequest(request,cb){var this$1=this;var fdArg=request.args[0];this._applyFdChanges(fdArg,function(err,fd){if(err){cb(err)}else{fd[request.method](function(e){if(request.method==="close"){delete this$1._fileDescriptors[fdArg.id]}cb(e)})}})};FileDescriptorArgumentConverter.prototype._applyFdChanges=function _applyFdChanges(remoteFd,cb){var fd=this._fileDescriptors[remoteFd.id],data=transferrableObjectToBuffer(remoteFd.data),remoteStats=Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat));var flag=FileFlag.getFileFlag(remoteFd.flag);if(flag.isWriteable()){fd.write(data,0,data.length,flag.isAppendable()?fd.getPos():0,function(e){function applyStatChanges(){fd.stat(function(e2,stats){if(e2){cb(e2)}else{if(stats.mode!==remoteStats.mode){fd.chmod(remoteStats.mode,function(e3){cb(e3,fd)})}else{cb(e2,fd)}}})}if(e){cb(e)}else{if(!flag.isAppendable()){fd.truncate(data.length,function(){applyStatChanges()})}else{applyStatChanges()}}})}else{cb(null,fd)}};function apiErrorLocal2Remote(e){return{type:SpecialArgType.API_ERROR,errorData:bufferToTransferrableObject(e.writeToBuffer())}}function apiErrorRemote2Local(e){return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData))}function errorLocal2Remote(e){return{type:SpecialArgType.ERROR,name:e.name,message:e.message,stack:e.stack}}function errorRemote2Local(e){var cnstr=global$1[e.name];if(typeof cnstr!=="function"){cnstr=Error}var err=new cnstr(e.message);err.stack=e.stack;return err}function statsLocal2Remote(stats){return{type:SpecialArgType.STATS,statsData:bufferToTransferrableObject(stats.toBuffer())}}function statsRemote2Local(stats){return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData))}function fileFlagLocal2Remote(flag){return{type:SpecialArgType.FILEFLAG,flagStr:flag.getFlagString()}}function fileFlagRemote2Local(remoteFlag){return FileFlag.getFileFlag(remoteFlag.flagStr)}function bufferToTransferrableObject(buff){return buffer2ArrayBuffer(buff)}function transferrableObjectToBuffer(buff){return arrayBuffer2Buffer(buff)}function bufferLocal2Remote(buff){return{type:SpecialArgType.BUFFER,data:bufferToTransferrableObject(buff)}}function bufferRemote2Local(buffArg){return transferrableObjectToBuffer(buffArg.data)}function isAPIRequest(data){return data&&typeof data==="object"&&data.hasOwnProperty("browserfsMessage")&&data["browserfsMessage"]}function isAPIResponse(data){return data&&typeof data==="object"&&data.hasOwnProperty("browserfsMessage")&&data["browserfsMessage"]}var WorkerFile=function(PreloadFile$$1){function WorkerFile2(_fs,_path,_flag,_stat,remoteFdId,contents){PreloadFile$$1.call(this,_fs,_path,_flag,_stat,contents);this._remoteFdId=remoteFdId}if(PreloadFile$$1)WorkerFile2.__proto__=PreloadFile$$1;WorkerFile2.prototype=Object.create(PreloadFile$$1&&PreloadFile$$1.prototype);WorkerFile2.prototype.constructor=WorkerFile2;WorkerFile2.prototype.getRemoteFdId=function getRemoteFdId(){return this._remoteFdId};WorkerFile2.prototype.toRemoteArg=function toRemoteArg(){return{type:SpecialArgType.FD,id:this._remoteFdId,data:bufferToTransferrableObject(this.getBuffer()),stat:bufferToTransferrableObject(this.getStats().toBuffer()),path:this.getPath(),flag:this.getFlag().getFlagString()}};WorkerFile2.prototype.sync=function sync(cb){this._syncClose("sync",cb)};WorkerFile2.prototype.close=function close(cb){this._syncClose("close",cb)};WorkerFile2.prototype._syncClose=function _syncClose(type,cb){var this$1=this;if(this.isDirty()){this._fs.syncClose(type,this,function(e){if(!e){this$1.resetDirty()}cb(e)})}else{cb()}};return WorkerFile2}(PreloadFile);var WorkerFS=function(BaseFileSystem$$1){function WorkerFS2(worker,deprecateMsg){var this$1=this;if(deprecateMsg===void 0)deprecateMsg=true;BaseFileSystem$$1.call(this);this._callbackConverter=new CallbackArgumentConverter;this._isInitialized=false;this._isReadOnly=false;this._supportLinks=false;this._supportProps=false;this._worker=worker;deprecationMessage(deprecateMsg,WorkerFS2.Name,{worker:"Web Worker instance"});this._worker.addEventListener("message",function(e){var resp=e.data;if(isAPIResponse(resp)){var i22;var args=resp.args;var fixedArgs=new Array(args.length);for(i22=0;i22<fixedArgs.length;i22++){fixedArgs[i22]=this$1._argRemote2Local(args[i22])}this$1._callbackConverter.toLocalArg(resp.cbId).apply(null,fixedArgs)}})}if(BaseFileSystem$$1)WorkerFS2.__proto__=BaseFileSystem$$1;WorkerFS2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);WorkerFS2.prototype.constructor=WorkerFS2;WorkerFS2.Create=function Create(opts,cb){var fs4=new WorkerFS2(opts.worker,false);fs4.initialize(function(){cb(null,fs4)})};WorkerFS2.isAvailable=function isAvailable(){return typeof importScripts!=="undefined"||typeof Worker!=="undefined"};WorkerFS2.attachRemoteListener=function attachRemoteListener(worker){var fdConverter=new FileDescriptorArgumentConverter;function argLocal2Remote(arg,requestArgs,cb){switch(typeof arg){case"object":if(arg instanceof Stats){cb(null,statsLocal2Remote(arg))}else if(arg instanceof ApiError){cb(null,apiErrorLocal2Remote(arg))}else if(arg instanceof BaseFile){cb(null,fdConverter.toRemoteArg(arg,requestArgs[0],requestArgs[1],cb))}else if(arg instanceof FileFlag){cb(null,fileFlagLocal2Remote(arg))}else if(arg instanceof Buffer2){cb(null,bufferLocal2Remote(arg))}else if(arg instanceof Error){cb(null,errorLocal2Remote(arg))}else{cb(null,arg)}break;default:cb(null,arg);break}}function argRemote2Local(arg,fixedRequestArgs){if(!arg){return arg}switch(typeof arg){case"object":if(typeof arg["type"]==="number"){var specialArg=arg;switch(specialArg.type){case SpecialArgType.CB:var cbId=arg.id;return function(){var arguments$1=arguments;var i22;var fixedArgs=new Array(arguments.length);var message,countdown=arguments.length;function abortAndSendError(err){if(countdown>0){countdown=-1;message={browserfsMessage:true,cbId,args:[apiErrorLocal2Remote(err)]};worker.postMessage(message)}}for(i22=0;i22<arguments.length;i22++){(function(i32,arg2){argLocal2Remote(arg2,fixedRequestArgs,function(err,fixedArg){fixedArgs[i32]=fixedArg;if(err){abortAndSendError(err)}else if(--countdown===0){message={browserfsMessage:true,cbId,args:fixedArgs};worker.postMessage(message)}})})(i22,arguments$1[i22])}if(arguments.length===0){message={browserfsMessage:true,cbId,args:fixedArgs};worker.postMessage(message)}};case SpecialArgType.API_ERROR:return apiErrorRemote2Local(specialArg);case SpecialArgType.STATS:return statsRemote2Local(specialArg);case SpecialArgType.FILEFLAG:return fileFlagRemote2Local(specialArg);case SpecialArgType.BUFFER:return bufferRemote2Local(specialArg);case SpecialArgType.ERROR:return errorRemote2Local(specialArg);default:return arg}}else{return arg}default:return arg}}worker.addEventListener("message",function(e){var request=e.data;if(isAPIRequest(request)){var args=request.args,fixedArgs=new Array(args.length);switch(request.method){case"close":case"sync":(function(){var remoteCb=args[1];fdConverter.applyFdAPIRequest(request,function(err){var response={browserfsMessage:true,cbId:remoteCb.id,args:err?[apiErrorLocal2Remote(err)]:[]};worker.postMessage(response)})})();break;case"probe":(function(){var rootFs=_fsMock.getRootFS(),remoteCb=args[1],probeResponse={type:SpecialArgType.PROBE,isReadOnly:rootFs.isReadOnly(),supportsLinks:rootFs.supportsLinks(),supportsProps:rootFs.supportsProps()},response={browserfsMessage:true,cbId:remoteCb.id,args:[probeResponse]};worker.postMessage(response)})();break;default:for(var i22=0;i22<args.length;i22++){fixedArgs[i22]=argRemote2Local(args[i22],fixedArgs)}var rootFS=_fsMock.getRootFS();rootFS[request.method].apply(rootFS,fixedArgs);break}}})};WorkerFS2.prototype.getName=function getName(){return WorkerFS2.Name};WorkerFS2.prototype.initialize=function initialize3(cb){var this$1=this;if(!this._isInitialized){var message={browserfsMessage:true,method:"probe",args:[this._argLocal2Remote(emptyBuffer()),this._callbackConverter.toRemoteArg(function(probeResponse){this$1._isInitialized=true;this$1._isReadOnly=probeResponse.isReadOnly;this$1._supportLinks=probeResponse.supportsLinks;this$1._supportProps=probeResponse.supportsProps;cb()})]};this._worker.postMessage(message)}else{cb()}};WorkerFS2.prototype.isReadOnly=function isReadOnly(){return this._isReadOnly};WorkerFS2.prototype.supportsSynch=function supportsSynch(){return false};WorkerFS2.prototype.supportsLinks=function supportsLinks(){return this._supportLinks};WorkerFS2.prototype.supportsProps=function supportsProps(){return this._supportProps};WorkerFS2.prototype.rename=function rename(oldPath,newPath,cb){this._rpc("rename",arguments)};WorkerFS2.prototype.stat=function stat(p2,isLstat,cb){this._rpc("stat",arguments)};WorkerFS2.prototype.open=function open(p2,flag,mode,cb){this._rpc("open",arguments)};WorkerFS2.prototype.unlink=function unlink(p2,cb){this._rpc("unlink",arguments)};WorkerFS2.prototype.rmdir=function rmdir(p2,cb){this._rpc("rmdir",arguments)};WorkerFS2.prototype.mkdir=function mkdir(p2,mode,cb){this._rpc("mkdir",arguments)};WorkerFS2.prototype.readdir=function readdir(p2,cb){this._rpc("readdir",arguments)};WorkerFS2.prototype.exists=function exists2(p2,cb){this._rpc("exists",arguments)};WorkerFS2.prototype.realpath=function realpath(p2,cache,cb){this._rpc("realpath",arguments)};WorkerFS2.prototype.truncate=function truncate(p2,len,cb){this._rpc("truncate",arguments)};WorkerFS2.prototype.readFile=function readFile2(fname,encoding,flag,cb){this._rpc("readFile",arguments)};WorkerFS2.prototype.writeFile=function writeFile2(fname,data,encoding,flag,mode,cb){this._rpc("writeFile",arguments)};WorkerFS2.prototype.appendFile=function appendFile3(fname,data,encoding,flag,mode,cb){this._rpc("appendFile",arguments)};WorkerFS2.prototype.chmod=function chmod(p2,isLchmod,mode,cb){this._rpc("chmod",arguments)};WorkerFS2.prototype.chown=function chown(p2,isLchown,uid,gid,cb){this._rpc("chown",arguments)};WorkerFS2.prototype.utimes=function utimes(p2,atime,mtime,cb){this._rpc("utimes",arguments)};WorkerFS2.prototype.link=function link(srcpath,dstpath,cb){this._rpc("link",arguments)};WorkerFS2.prototype.symlink=function symlink(srcpath,dstpath,type,cb){this._rpc("symlink",arguments)};WorkerFS2.prototype.readlink=function readlink(p2,cb){this._rpc("readlink",arguments)};WorkerFS2.prototype.syncClose=function syncClose(method,fd,cb){this._worker.postMessage({browserfsMessage:true,method,args:[fd.toRemoteArg(),this._callbackConverter.toRemoteArg(cb)]})};WorkerFS2.prototype._argRemote2Local=function _argRemote2Local(arg){if(!arg){return arg}switch(typeof arg){case"object":if(typeof arg["type"]==="number"){var specialArg=arg;switch(specialArg.type){case SpecialArgType.API_ERROR:return apiErrorRemote2Local(specialArg);case SpecialArgType.FD:var fdArg=specialArg;return new WorkerFile(this,fdArg.path,FileFlag.getFileFlag(fdArg.flag),Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)),fdArg.id,transferrableObjectToBuffer(fdArg.data));case SpecialArgType.STATS:return statsRemote2Local(specialArg);case SpecialArgType.FILEFLAG:return fileFlagRemote2Local(specialArg);case SpecialArgType.BUFFER:return bufferRemote2Local(specialArg);case SpecialArgType.ERROR:return errorRemote2Local(specialArg);default:return arg}}else{return arg}default:return arg}};WorkerFS2.prototype._rpc=function _rpc(methodName,args){var this$1=this;var fixedArgs=new Array(args.length);for(var i22=0;i22<args.length;i22++){fixedArgs[i22]=this$1._argLocal2Remote(args[i22])}var message={browserfsMessage:true,method:methodName,args:fixedArgs};this._worker.postMessage(message)};WorkerFS2.prototype._argLocal2Remote=function _argLocal2Remote(arg){if(!arg){return arg}switch(typeof arg){case"object":if(arg instanceof Stats){return statsLocal2Remote(arg)}else if(arg instanceof ApiError){return apiErrorLocal2Remote(arg)}else if(arg instanceof WorkerFile){return arg.toRemoteArg()}else if(arg instanceof FileFlag){return fileFlagLocal2Remote(arg)}else if(arg instanceof Buffer2){return bufferLocal2Remote(arg)}else if(arg instanceof Error){return errorLocal2Remote(arg)}else{return"Unknown argument"}case"function":return this._callbackConverter.toRemoteArg(arg);default:return arg}};return WorkerFS2}(BaseFileSystem);WorkerFS.Name="WorkerFS";WorkerFS.Options={worker:{type:"object",description:"The target worker that you want to connect to, or the current worker if in a worker context.",validator:function(v2,cb){if(v2["postMessage"]){cb()}else{cb(new ApiError(ErrorCode.EINVAL,"option must be a Web Worker instance."))}}}};function asyncDownloadFileModern(p2,type,cb){var req=new XMLHttpRequest;req.open("GET",p2,true);var jsonSupported=true;switch(type){case"buffer":req.responseType="arraybuffer";break;case"json":try{req.responseType="json";jsonSupported=req.responseType==="json"}catch(e){jsonSupported=false}break;default:return cb(new ApiError(ErrorCode.EINVAL,"Invalid download type: "+type))}req.onreadystatechange=function(e){if(req.readyState===4){if(req.status===200){switch(type){case"buffer":return cb(null,req.response?Buffer2.from(req.response):emptyBuffer());case"json":if(jsonSupported){return cb(null,req.response)}else{return cb(null,JSON.parse(req.responseText))}}}else{return cb(new ApiError(req.status,"XHR error."))}}};req.send()}function syncDownloadFileModern(p2,type){var req=new XMLHttpRequest;req.open("GET",p2,false);var data=null;var err=null;req.overrideMimeType("text/plain; charset=x-user-defined");req.onreadystatechange=function(e){if(req.readyState===4){if(req.status===200){switch(type){case"buffer":var text=req.responseText;data=Buffer2.alloc(text.length);for(var i22=0;i22<text.length;i22++){data[i22]=text.charCodeAt(i22)}return;case"json":data=JSON.parse(req.responseText);return}}else{err=new ApiError(req.status,"XHR error.");return}}};req.send();if(err){throw err}return data}function syncDownloadFileIE10(p2,type){var req=new XMLHttpRequest;req.open("GET",p2,false);switch(type){case"buffer":req.responseType="arraybuffer";break;case"json":break;default:throw new ApiError(ErrorCode.EINVAL,"Invalid download type: "+type)}var data;var err;req.onreadystatechange=function(e){if(req.readyState===4){if(req.status===200){switch(type){case"buffer":data=Buffer2.from(req.response);break;case"json":data=JSON.parse(req.response);break}}else{err=new ApiError(req.status,"XHR error.")}}};req.send();if(err){throw err}return data}function getFileSize2(async,p2,cb){var req=new XMLHttpRequest;req.open("HEAD",p2,async);req.onreadystatechange=function(e){if(req.readyState===4){if(req.status===200){try{return cb(null,parseInt(req.getResponseHeader("Content-Length")||"-1",10))}catch(e2){return cb(new ApiError(ErrorCode.EIO,"XHR HEAD error: Could not read content-length."))}}else{return cb(new ApiError(req.status,"XHR HEAD error."))}}};req.send()}var asyncDownloadFile=asyncDownloadFileModern;var syncDownloadFile=isIE&&typeof Blob!=="undefined"?syncDownloadFileIE10:syncDownloadFileModern;function getFileSizeSync(p2){var rv=-1;getFileSize2(false,p2,function(err,size){if(err){throw err}rv=size});return rv}function getFileSizeAsync(p2,cb){getFileSize2(true,p2,cb)}var FileIndex=function FileIndex2(){this._index={};this.addPath("/",new DirInode)};FileIndex.fromListing=function fromListing(listing){var idx=new FileIndex;var rootInode=new DirInode;idx._index["/"]=rootInode;var queue=[["",listing,rootInode]];while(queue.length>0){var inode=void 0;var next=queue.pop();var pwd=next[0];var tree=next[1];var parent=next[2];for(var node in tree){if(tree.hasOwnProperty(node)){var children=tree[node];var name2=pwd+"/"+node;if(children){idx._index[name2]=inode=new DirInode;queue.push([name2,children,inode])}else{inode=new FileInode(new Stats(FileType.FILE,-1,365))}if(parent){parent._ls[node]=inode}}}}return idx};FileIndex.prototype.fileIterator=function fileIterator(cb){var this$1=this;for(var path$$1 in this$1._index){if(this$1._index.hasOwnProperty(path$$1)){var dir2=this$1._index[path$$1];var files=dir2.getListing();for(var i22=0,list2=files;i22<list2.length;i22+=1){var file=list2[i22];var item=dir2.getItem(file);if(isFileInode(item)){cb(item.getData())}}}}};FileIndex.prototype.addPath=function addPath(path$$1,inode){if(!inode){throw new Error("Inode must be specified")}if(path$$1[0]!=="/"){throw new Error("Path must be absolute, got: "+path$$1)}if(this._index.hasOwnProperty(path$$1)){return this._index[path$$1]===inode}var splitPath=this._split_path(path$$1);var dirpath=splitPath[0];var itemname=splitPath[1];var parent=this._index[dirpath];if(parent===void 0&&path$$1!=="/"){parent=new DirInode;if(!this.addPath(dirpath,parent)){return false}}if(path$$1!=="/"){if(!parent.addItem(itemname,inode)){return false}}if(isDirInode(inode)){this._index[path$$1]=inode}return true};FileIndex.prototype.addPathFast=function addPathFast(path$$1,inode){var itemNameMark=path$$1.lastIndexOf("/");var parentPath=itemNameMark===0?"/":path$$1.substring(0,itemNameMark);var itemName=path$$1.substring(itemNameMark+1);var parent=this._index[parentPath];if(parent===void 0){parent=new DirInode;this.addPathFast(parentPath,parent)}if(!parent.addItem(itemName,inode)){return false}if(inode.isDir()){this._index[path$$1]=inode}return true};FileIndex.prototype.removePath=function removePath(path$$1){var this$1=this;var splitPath=this._split_path(path$$1);var dirpath=splitPath[0];var itemname=splitPath[1];var parent=this._index[dirpath];if(parent===void 0){return null}var inode=parent.remItem(itemname);if(inode===null){return null}if(isDirInode(inode)){var children=inode.getListing();for(var i22=0,list2=children;i22<list2.length;i22+=1){var child=list2[i22];this$1.removePath(path$$1+"/"+child)}if(path$$1!=="/"){delete this._index[path$$1]}}return inode};FileIndex.prototype.ls=function ls(path$$1){var item=this._index[path$$1];if(item===void 0){return null}return item.getListing()};FileIndex.prototype.getInode=function getInode(path$$1){var splitPath=this._split_path(path$$1);var dirpath=splitPath[0];var itemname=splitPath[1];var parent=this._index[dirpath];if(parent===void 0){return null}if(dirpath===path$$1){return parent}return parent.getItem(itemname)};FileIndex.prototype._split_path=function _split_path(p2){var dirpath=path.dirname(p2);var itemname=p2.substr(dirpath.length+(dirpath==="/"?0:1));return[dirpath,itemname]};var FileInode=function FileInode2(data){this.data=data};FileInode.prototype.isFile=function isFile(){return true};FileInode.prototype.isDir=function isDir(){return false};FileInode.prototype.getData=function getData(){return this.data};FileInode.prototype.setData=function setData(data){this.data=data};var DirInode=function DirInode2(data){if(data===void 0)data=null;this.data=data;this._ls={}};DirInode.prototype.isFile=function isFile(){return false};DirInode.prototype.isDir=function isDir(){return true};DirInode.prototype.getData=function getData(){return this.data};DirInode.prototype.getStats=function getStats(){return new Stats(FileType.DIRECTORY,4096,365)};DirInode.prototype.getListing=function getListing(){return Object.keys(this._ls)};DirInode.prototype.getItem=function getItem(p2){var item=this._ls[p2];return item?item:null};DirInode.prototype.addItem=function addItem(p2,inode){if(p2 in this._ls){return false}this._ls[p2]=inode;return true};DirInode.prototype.remItem=function remItem(p2){var item=this._ls[p2];if(item===void 0){return null}delete this._ls[p2];return item};function isFileInode(inode){return!!inode&&inode.isFile()}function isDirInode(inode){return!!inode&&inode.isDir()}function tryToString(buff,encoding,cb){try{cb(null,buff.toString(encoding))}catch(e){cb(e)}}var XmlHttpRequest=function(BaseFileSystem$$1){function XmlHttpRequest2(listingUrlOrObj,prefixUrl,deprecateMsg){if(prefixUrl===void 0)prefixUrl="";if(deprecateMsg===void 0)deprecateMsg=true;BaseFileSystem$$1.call(this);if(!listingUrlOrObj){listingUrlOrObj="index.json"}if(prefixUrl.length>0&&prefixUrl.charAt(prefixUrl.length-1)!=="/"){prefixUrl=prefixUrl+"/"}this.prefixUrl=prefixUrl;var listing=null;if(typeof listingUrlOrObj==="string"){listing=this._requestFileSync(listingUrlOrObj,"json");if(!listing){throw new Error("Unable to find listing at URL: ${listingUrlOrObj}")}}else{listing=listingUrlOrObj}deprecationMessage(deprecateMsg,XmlHttpRequest2.Name,{index:typeof listingUrlOrObj==="string"?listingUrlOrObj:"file index as an object",baseUrl:prefixUrl});this._index=FileIndex.fromListing(listing)}if(BaseFileSystem$$1)XmlHttpRequest2.__proto__=BaseFileSystem$$1;XmlHttpRequest2.prototype=Object.create(BaseFileSystem$$1&&BaseFileSystem$$1.prototype);XmlHttpRequest2.prototype.constructor=XmlHttpRequest2;XmlHttpRequest2.Create=function Create(opts,cb){if(opts.index===void 0){opts.index="index.json"}if(typeof opts.index==="string"){XmlHttpRequest2.FromURL(opts.index,cb,opts.baseUrl,false)}else{cb(null,new XmlHttpRequest2(opts.index,opts.baseUrl,false))}};XmlHttpRequest2.isAvailable=function isAvailable(){return typeof XMLHttpRequest!=="undefined"&&XMLHttpRequest!==null};XmlHttpRequest2.FromURL=function FromURL(url2,cb,baseUrl,deprecateMsg){if(baseUrl===void 0)baseUrl=url2.slice(0,url2.lastIndexOf("/")+1);if(deprecateMsg===void 0)deprecateMsg=true;if(deprecateMsg){console.warn(`[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use \'XmlHttpRequest.Create({ index: "`+url2+\'", baseUrl: "\'+baseUrl+`" }, cb)\' instead.`)}asyncDownloadFile(url2,"json",function(e,data){if(e){cb(e)}else{cb(null,new XmlHttpRequest2(data,baseUrl,false))}})};XmlHttpRequest2.prototype.empty=function empty(){this._index.fileIterator(function(file){file.fileData=null})};XmlHttpRequest2.prototype.getName=function getName(){return XmlHttpRequest2.Name};XmlHttpRequest2.prototype.diskSpace=function diskSpace(path$$1,cb){cb(0,0)};XmlHttpRequest2.prototype.isReadOnly=function isReadOnly(){return true};XmlHttpRequest2.prototype.supportsLinks=function supportsLinks(){return false};XmlHttpRequest2.prototype.supportsProps=function supportsProps(){return false};XmlHttpRequest2.prototype.supportsSynch=function supportsSynch(){return true};XmlHttpRequest2.prototype.preloadFile=function preloadFile(path$$1,buffer$$1){var inode=this._index.getInode(path$$1);if(isFileInode(inode)){if(inode===null){throw ApiError.ENOENT(path$$1)}var stats=inode.getData();stats.size=buffer$$1.length;stats.fileData=buffer$$1}else{throw ApiError.EISDIR(path$$1)}};XmlHttpRequest2.prototype.stat=function stat(path$$1,isLstat,cb){var inode=this._index.getInode(path$$1);if(inode===null){return cb(ApiError.ENOENT(path$$1))}var stats;if(isFileInode(inode)){stats=inode.getData();if(stats.size<0){this._requestFileSizeAsync(path$$1,function(e,size){if(e){return cb(e)}stats.size=size;cb(null,stats.clone())})}else{cb(null,stats.clone())}}else if(isDirInode(inode)){stats=inode.getStats();cb(null,stats)}else{cb(ApiError.FileError(ErrorCode.EINVAL,path$$1))}};XmlHttpRequest2.prototype.statSync=function statSync(path$$1,isLstat){var inode=this._index.getInode(path$$1);if(inode===null){throw ApiError.ENOENT(path$$1)}var stats;if(isFileInode(inode)){stats=inode.getData();if(stats.size<0){stats.size=this._requestFileSizeSync(path$$1)}}else if(isDirInode(inode)){stats=inode.getStats()}else{throw ApiError.FileError(ErrorCode.EINVAL,path$$1)}return stats};XmlHttpRequest2.prototype.open=function open(path$$1,flags,mode,cb){if(flags.isWriteable()){return cb(new ApiError(ErrorCode.EPERM,path$$1))}var self2=this;var inode=this._index.getInode(path$$1);if(inode===null){return cb(ApiError.ENOENT(path$$1))}if(isFileInode(inode)){var stats=inode.getData();switch(flags.pathExistsAction()){case ActionType.THROW_EXCEPTION:case ActionType.TRUNCATE_FILE:return cb(ApiError.EEXIST(path$$1));case ActionType.NOP:if(stats.fileData){return cb(null,new NoSyncFile(self2,path$$1,flags,stats.clone(),stats.fileData))}this._requestFileAsync(path$$1,"buffer",function(err,buffer$$1){if(err){return cb(err)}stats.size=buffer$$1.length;stats.fileData=buffer$$1;return cb(null,new NoSyncFile(self2,path$$1,flags,stats.clone(),buffer$$1))});break;default:return cb(new ApiError(ErrorCode.EINVAL,"Invalid FileMode object."))}}else{return cb(ApiError.EISDIR(path$$1))}};XmlHttpRequest2.prototype.openSync=function openSync(path$$1,flags,mode){if(flags.isWriteable()){throw new ApiError(ErrorCode.EPERM,path$$1)}var inode=this._index.getInode(path$$1);if(inode===null){throw ApiError.ENOENT(path$$1)}if(isFileInode(inode)){var stats=inode.getData();switch(flags.pathExistsAction()){case ActionType.THROW_EXCEPTION:case ActionType.TRUNCATE_FILE:throw ApiError.EEXIST(path$$1);case ActionType.NOP:if(stats.fileData){return new NoSyncFile(this,path$$1,flags,stats.clone(),stats.fileData)}var buffer$$1=this._requestFileSync(path$$1,"buffer");stats.size=buffer$$1.length;stats.fileData=buffer$$1;return new NoSyncFile(this,path$$1,flags,stats.clone(),buffer$$1);default:throw new ApiError(ErrorCode.EINVAL,"Invalid FileMode object.")}}else{throw ApiError.EISDIR(path$$1)}};XmlHttpRequest2.prototype.readdir=function readdir(path$$1,cb){try{cb(null,this.readdirSync(path$$1))}catch(e){cb(e)}};XmlHttpRequest2.prototype.readdirSync=function readdirSync(path$$1){var inode=this._index.getInode(path$$1);if(inode===null){throw ApiError.ENOENT(path$$1)}else if(isDirInode(inode)){return inode.getListing()}else{throw ApiError.ENOTDIR(path$$1)}};XmlHttpRequest2.prototype.readFile=function readFile2(fname,encoding,flag,cb){var oldCb=cb;this.open(fname,flag,420,function(err,fd){if(err){return cb(err)}cb=function(err2,arg){fd.close(function(err22){if(!err2){err2=err22}return oldCb(err2,arg)})};var fdCast=fd;var fdBuff=fdCast.getBuffer();if(encoding===null){cb(err,copyingSlice(fdBuff))}else{tryToString(fdBuff,encoding,cb)}})};XmlHttpRequest2.prototype.readFileSync=function readFileSync(fname,encoding,flag){var fd=this.openSync(fname,flag,420);try{var fdCast=fd;var fdBuff=fdCast.getBuffer();if(encoding===null){return copyingSlice(fdBuff)}return fdBuff.toString(encoding)}finally{fd.closeSync()}};XmlHttpRequest2.prototype.getXhrPath=function getXhrPath(filePath){if(filePath.charAt(0)==="/"){filePath=filePath.slice(1)}return this.prefixUrl+filePath};XmlHttpRequest2.prototype._requestFileAsync=function _requestFileAsync(p2,type,cb){asyncDownloadFile(this.getXhrPath(p2),type,cb)};XmlHttpRequest2.prototype._requestFileSync=function _requestFileSync(p2,type){return syncDownloadFile(this.getXhrPath(p2),type)};XmlHttpRequest2.prototype._requestFileSizeAsync=function _requestFileSizeAsync(path$$1,cb){getFileSizeAsync(this.getXhrPath(path$$1),cb)};XmlHttpRequest2.prototype._requestFileSizeSync=function _requestFileSizeSync(path$$1){return getFileSizeSync(this.getXhrPath(path$$1))};return XmlHttpRequest2}(BaseFileSystem);XmlHttpRequest.Name="XmlHttpRequest";XmlHttpRequest.Options={index:{type:["string","object"],optional:true,description:"URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."},baseUrl:{type:"string",optional:true,description:"Used as the URL prefix for fetched files. Default: Fetch files relative to the index."}};var ExtendedASCII=function ExtendedASCII2(){};ExtendedASCII.str2byte=function str2byte(str4,buf){var length=str4.length>buf.length?buf.length:str4.length;for(var i22=0;i22<length;i22++){var charCode=str4.charCodeAt(i22);if(charCode>127){var charIdx=ExtendedASCII.extendedChars.indexOf(str4.charAt(i22));if(charIdx>-1){charCode=charIdx+128}}buf[charCode]=i22}return length};ExtendedASCII.byte2str=function byte2str(buff){var chars=new Array(buff.length);for(var i22=0;i22<buff.length;i22++){var charCode=buff[i22];if(charCode>127){chars[i22]=ExtendedASCII.extendedChars[charCode-128]}else{chars[i22]=String.fromCharCode(charCode)}}return chars.join("")};ExtendedASCII.byteLength=function byteLength(str4){return str4.length};ExtendedASCII.extendedChars=["\\xC7","\\xFC","\\xE9","\\xE2","\\xE4","\\xE0","\\xE5","\\xE7","\\xEA","\\xEB","\\xE8","\\xEF","\\xEE","\\xEC","\\xC4","\\xC5","\\xC9","\\xE6","\\xC6","\\xF4","\\xF6","\\xF2","\\xFB","\\xF9","\\xFF","\\xD6","\\xDC","\\xF8","\\xA3","\\xD8","\\xD7","\\u0192","\\xE1","\\xED","\\xF3","\\xFA","\\xF1","\\xD1","\\xAA","\\xBA","\\xBF","\\xAE","\\xAC","\\xBD","\\xBC","\\xA1","\\xAB","\\xBB","_","_","_","\\xA6","\\xA6","\\xC1","\\xC2","\\xC0","\\xA9","\\xA6","\\xA6","+","+","\\xA2","\\xA5","+","+","-","-","+","-","+","\\xE3","\\xC3","+","+","-","-","\\xA6","-","+","\\xA4","\\xF0","\\xD0","\\xCA","\\xCB","\\xC8","i","\\xCD","\\xCE","\\xCF","+","+","_","_","\\xA6","\\xCC","_","\\xD3","\\xDF","\\xD4","\\xD2","\\xF5","\\xD5","\\xB5","\\xFE","\\xDE","\\xDA","\\xDB","\\xD9","\\xFD","\\xDD","\\xAF","\\xB4","\\xAD","\\xB1","_","\\xBE","\\xB6","\\xA7","\\xF7","\\xB8","\\xB0","\\xA8","\\xB7","\\xB9","\\xB3","\\xB2","_"," "];var inflateRaw=__webpack_require__(31).inflateRaw;var decompressionMethods={};var ExternalFileAttributeType;(function(ExternalFileAttributeType2){ExternalFileAttributeType2[ExternalFileAttributeType2["MSDOS"]=0]="MSDOS";ExternalFileAttributeType2[ExternalFileAttributeType2["AMIGA"]=1]="AMIGA";ExternalFileAttributeType2[ExternalFileAttributeType2["OPENVMS"]=2]="OPENVMS";ExternalFileAttributeType2[ExternalFileAttributeType2["UNIX"]=3]="UNIX";ExternalFileAttributeType2[ExternalFileAttributeType2["VM_CMS"]=4]="VM_CMS";ExternalFileAttributeType2[ExternalFileAttributeType2["ATARI_ST"]=5]="ATARI_ST";ExternalFileAttributeType2[ExternalFileAttributeType2["OS2_HPFS"]=6]="OS2_HPFS";ExternalFileAttributeType2[ExternalFileAttributeType2["MAC"]=7]="MAC";ExternalFileAttributeType2[ExternalFileAttributeType2["Z_SYSTEM"]=8]="Z_SYSTEM";ExternalFileAttributeType2[ExternalFileAttributeType2["CP_M"]=9]="CP_M";ExternalFileAttributeType2[ExternalFileAttributeType2["NTFS"]=10]="NTFS";ExternalFileAttributeType2[ExternalFileAttributeType2["MVS"]=11]="MVS";ExternalFileAttributeType2[ExternalFileAttributeType2["VSE"]=12]="VSE";ExternalFileAttributeType2[ExternalFileAttributeType2["ACORN_RISC"]=13]="ACORN_RISC";ExternalFileAttributeType2[ExternalFileAttributeType2["VFAT"]=14]="VFAT";ExternalFileAttributeType2[ExternalFileAttributeType2["ALT_MVS"]=15]="ALT_MVS";ExternalFileAttributeType2[ExternalFileAttributeType2["BEOS"]=16]="BEOS";ExternalFileAttributeType2[ExternalFileAttributeType2["TANDEM"]=17]="TANDEM";ExternalFileAttributeType2[ExternalFileAttributeType2["OS_400"]=18]="OS_400";ExternalFileAttributeType2[ExternalFileAttributeType2["OSX"]=19]="OSX"})(ExternalFileAttributeType||(ExternalFileAttributeType={}));var CompressionMethod;(function(CompressionMethod2){CompressionMethod2[CompressionMethod2["STORED"]=0]="STORED";CompressionMethod2[CompressionMethod2["SHRUNK"]=1]="SHRUNK";CompressionMethod2[CompressionMethod2["REDUCED_1"]=2]="REDUCED_1";CompressionMethod2[CompressionMethod2["REDUCED_2"]=3]="REDUCED_2";CompressionMethod2[CompressionMethod2["REDUCED_3"]=4]="REDUCED_3";CompressionMethod2[CompressionMethod2["REDUCED_4"]=5]="REDUCED_4";CompressionMethod2[CompressionMethod2["IMPLODE"]=6]="IMPLODE";CompressionMethod2[CompressionMethod2["DEFLATE"]=8]="DEFLATE";CompressionMethod2[CompressionMethod2["DEFLATE64"]=9]="DEFLATE64";CompressionMethod2[CompressionMethod2["TERSE_OLD"]=10]="TERSE_OLD";CompressionMethod2[CompressionMethod2["BZIP2"]=12]="BZIP2";CompressionMethod2[CompressionMethod2["LZMA"]=14]="LZMA";CompressionMethod2[CompressionMethod2["TERSE_NEW"]=18]="TERSE_NEW";CompressionMethod2[CompressionMethod2["LZ77"]=19]="LZ77";CompressionMethod2[CompressionMethod2["WAVPACK"]=97]="WAVPACK";CompressionMethod2[CompressionMethod2["PPMD"]=98]="PPMD"})(CompressionMethod||(CompressionMethod={}));function msdos2date(time,date){var day=date&31;var month=(date>>5&15)-1;var year=(date>>9)+1980;var second=time&31;var minute=time>>5&63;var hour=time>>11;return new Date(year,month,day,hour,minute,second)}function safeToString(buff,useUTF8,start,length){if(length===0){return""}else if(useUTF8){return buff.toString("utf8",start,start+length)}else{return ExtendedASCII.byte2str(buff.slice(start,start+length))}}var FileHeader=function FileHeader2(data){this.data=data;if(data.readUInt32LE(0)!==67324752){throw new ApiError(ErrorCode.EINVAL,"Invalid Zip file: Local file header has invalid signature: "+this.data.readUInt32LE(0))}};FileHeader.prototype.versionNeeded=function versionNeeded(){return this.data.readUInt16LE(4)};FileHeader.prototype.flags=function flags(){return this.data.readUInt16LE(6)};FileHeader.prototype.compressionMethod=function compressionMethod(){return this.data.readUInt16LE(8)};FileHeader.prototype.lastModFileTime=function lastModFileTime(){return msdos2date(this.data.readUInt16LE(10),this.data.readUInt16LE(12))};FileHeader.prototype.rawLastModFileTime=function rawLastModFileTime(){return this.data.readUInt32LE(10)};FileHeader.prototype.crc32=function crc32(){return this.data.readUInt32LE(14)};FileHeader.prototype.fileNameLength=function fileNameLength(){return this.data.readUInt16LE(26)};FileHeader.prototype.extraFieldLength=function extraFieldLength(){return this.data.readUInt16LE(28)};FileHeader.prototype.fileName=function fileName(){return safeToString(this.data,this.useUTF8(),30,this.fileNameLength())};FileHeader.prototype.extraField=function extraField(){var start=30+this.fileNameLength();return this.data.slice(start,start+this.extraFieldLength())};FileHeader.prototype.totalSize=function totalSize(){return 30+this.fileNameLength()+this.extraFieldLength()};FileHeader.prototype.useUTF8=function useUTF8(){return(this.flags()&2048)===2048};var FileData=function FileData2(header,record,data){this.header=header;this.record=record;this.data=data};FileData.prototype.decompress=function decompress(){var compressionMethod=this.header.compressionMethod();var fcn=decompressionMethods[compressionMethod];if(fcn){return fcn(this.data,this.record.compressedSize(),this.record.uncompressedSize(),this.record.flag())}else{var name2=CompressionMethod[compressionMethod];if(!name2){name2="Unknown: "+compressionMethod}throw new ApiError(ErrorCode.EINVAL,"Invalid compression method on file \'"+this.header.fileName()+"\': "+name2)}};FileData.prototype.getHeader=function getHeader(){return this.header};FileData.prototype.getRecord=function getRecord(){return this.record};FileData.prototype.getRawData=function getRawData(){return this.data};var DataDescriptor=function DataDescriptor2(data){this.data=data};DataDescriptor.prototype.crc32=function crc32(){return this.data.readUInt32LE(0)};DataDescriptor.prototype.compressedSize=function compressedSize(){return this.data.readUInt32LE(4)};DataDescriptor.prototype.uncompressedSize=function uncompressedSize(){return this.data.readUInt32LE(8)};var ArchiveExtraDataRecord=function ArchiveExtraDataRecord2(data){this.data=data;if(this.data.readUInt32LE(0)!==134630224){throw new ApiError(ErrorCode.EINVAL,"Invalid archive extra data record signature: "+this.data.readUInt32LE(0))}};ArchiveExtraDataRecord.prototype.length=function length(){return this.data.readUInt32LE(4)};ArchiveExtraDataRecord.prototype.extraFieldData=function extraFieldData(){return this.data.slice(8,8+this.length())};var DigitalSignature=function DigitalSignature2(data){this.data=data;if(this.data.readUInt32LE(0)!==84233040){throw new ApiError(ErrorCode.EINVAL,"Invalid digital signature signature: "+this.data.readUInt32LE(0))}};DigitalSignature.prototype.size=function size(){return this.data.readUInt16LE(4)};DigitalSignature.prototype.signatureData=function signatureData(){return this.data.slice(6,6+this.size())};var CentralDirectory=function CentralDirectory2(zipData,data){this.zipData=zipData;this.data=data;if(this.data.readUInt32LE(0)!==33639248){throw new ApiError(ErrorCode.EINVAL,"Invalid Zip file: Central directory record has invalid signature: "+this.data.readUInt32LE(0))}this._filename=this.produceFilename()};CentralDirectory.prototype.versionMadeBy=function versionMadeBy(){return this.data.readUInt16LE(4)};CentralDirectory.prototype.versionNeeded=function versionNeeded(){return this.data.readUInt16LE(6)};CentralDirectory.prototype.flag=function flag(){return this.data.readUInt16LE(8)};CentralDirectory.prototype.compressionMethod=function compressionMethod(){return this.data.readUInt16LE(10)};CentralDirectory.prototype.lastModFileTime=function lastModFileTime(){return msdos2date(this.data.readUInt16LE(12),this.data.readUInt16LE(14))};CentralDirectory.prototype.rawLastModFileTime=function rawLastModFileTime(){return this.data.readUInt32LE(12)};CentralDirectory.prototype.crc32=function crc32(){return this.data.readUInt32LE(16)};CentralDirectory.prototype.compressedSize=function compressedSize(){return this.data.readUInt32LE(20)};CentralDirectory.prototype.uncompressedSize=function uncompressedSize(){return this.data.readUInt32LE(24)};CentralDirectory.prototype.fileNameLength=function fileNameLength(){return this.data.readUInt16LE(28)};CentralDirectory.prototype.extraFieldLength=function extraFieldLength(){return this.data.readUInt16LE(30)};CentralDirectory.prototype.fileCommentLength=function fileCommentLength(){return this.data.readUInt16LE(32)};CentralDirectory.prototype.diskNumberStart=function diskNumberStart(){return this.data.readUInt16LE(34)};CentralDirectory.prototype.internalAttributes=function internalAttributes(){return this.data.readUInt16LE(36)};CentralDirectory.prototype.externalAttributes=function externalAttributes(){return this.data.readUInt32LE(38)};CentralDirectory.prototype.headerRelativeOffset=function headerRelativeOffset(){return this.data.readUInt32LE(42)};CentralDirectory.prototype.produceFilename=function produceFilename(){var fileName=safeToString(this.data,this.useUTF8(),46,this.fileNameLength());return fileName.replace(/\\\\/g,"/")};CentralDirectory.prototype.fileName=function fileName(){return this._filename};CentralDirectory.prototype.rawFileName=function rawFileName(){return this.data.slice(46,46+this.fileNameLength())};CentralDirectory.prototype.extraField=function extraField(){var start=44+this.fileNameLength();return this.data.slice(start,start+this.extraFieldLength())};CentralDirectory.prototype.fileComment=function fileComment(){var start=46+this.fileNameLength()+this.extraFieldLength();return safeToString(this.data,this.useUTF8(),start,this.fileCommentLength())};CentralDirectory.prototype.rawFileComment=function rawFileComment(){var start=46+this.fileNameLength()+this.extraFieldLength();return this.data.slice(start,start+this.fileCommentLength())};CentralDirectory.prototype.totalSize=function totalSize(){return 46+this.fileNameLength()+this.extraFieldLength()+this.fileCommentLength()};CentralDirectory.prototype.isDirectory=function isDirectory(){var fileName=this.fileName();return(this.externalAttributes()&16?true:false)||fileName.charAt(fileName.length-1)==="/"};CentralDirectory.prototype.isFile=function isFile(){return!this.isDirectory()};CentralDirectory.prototype.useUTF8=function useUTF8(){return(this.flag()&2048)===2048};CentralDirectory.prototype.isEncrypted=function isEncrypted(){return(this.flag()&1)===1};CentralDirectory.prototype.getFileData=function getFileData(){var start=this.headerRelativeOffset();var header=new FileHeader(this.zipData.slice(start));return new FileData(header,this,this.zipData.slice(start+header.totalSize()))};CentralDirectory.prototype.getData=function getData(){return this.getFileData().decompress()};CentralDirectory.prototype.getRawData=function getRawData(){return this.getFileData().getRawData()};CentralDirectory.prototype.getStats=function getStats(){return new Stats(FileType.FILE,this.uncompressedSize(),365,new Date,this.lastModFileTime())};var EndOfCentralDirectory=function EndOfCentralDirectory2(data){this.data=data;if(this.data.readUInt32LE(0)!==101010256){throw new ApiError(ErrorCode.EINVAL,"Invalid Zip file: End of central directory record has invalid signature: "+this.data.readUInt32LE(0))}};EndOfCentralDirectory.prototype.diskNumber=function diskNumber(){return this.data.readUInt16LE(4)};EndOfCentralDirectory.prototype.cdDiskNumber=function cdDiskNumber(){return this.data.readUInt16LE(6)};EndOfCentralDirectory.prototype.cdDiskEntryCount=function cdDiskEntryCount(){return this.data.readUInt16LE(8)};EndOfCentralDirectory.prototype.cdTotalEntryCount=function cdTotalEntryCount(){return this.data.readUInt16LE(10)};EndOfCentralDirectory.prototype.cdSize=function cdSize(){return this.data.readUInt32LE(12)};EndOfCentralDirectory.prototype.cdOffset=function cdOffset(){return this.data.readUInt32LE(16)};EndOfCentralDirectory.prototype.cdZipCommentLength=function cdZipCommentLength(){return this.data.readUInt16LE(20)};EndOfCentralDirectory.prototype.cdZipComment=function cdZipComment(){return safeToString(this.data,true,22,this.cdZipCommentLength())};EndOfCentralDirectory.prototype.rawCdZipComment=function rawCdZipComment(){return this.data.slice(22,22+this.cdZipCommentLength())};var ZipTOC=function ZipTOC2(index,directoryEntries,eocd,data){this.index=index;this.directoryEntries=directoryEntries;this.eocd=eocd;this.data=data};var ZipFS=function(SynchronousFileSystem$$1){function ZipFS2(input,name2,deprecateMsg){if(name2===void 0)name2="";if(deprecateMsg===void 0)deprecateMsg=true;SynchronousFileSystem$$1.call(this);this.name=name2;this._index=new FileIndex;this._directoryEntries=[];this._eocd=null;deprecationMessage(deprecateMsg,ZipFS2.Name,{zipData:"zip data as a Buffer",name:name2});if(input instanceof ZipTOC){this._index=input.index;this._directoryEntries=input.directoryEntries;this._eocd=input.eocd;this.data=input.data}else{this.data=input;this.populateIndex()}}if(SynchronousFileSystem$$1)ZipFS2.__proto__=SynchronousFileSystem$$1;ZipFS2.prototype=Object.create(SynchronousFileSystem$$1&&SynchronousFileSystem$$1.prototype);ZipFS2.prototype.constructor=ZipFS2;ZipFS2.Create=function Create(opts,cb){try{ZipFS2.computeIndex(opts.zipData,function(zipTOC){var fs4=new ZipFS2(zipTOC,opts.name,false);cb(null,fs4)},false)}catch(e){cb(e)}};ZipFS2.isAvailable=function isAvailable(){return true};ZipFS2.RegisterDecompressionMethod=function RegisterDecompressionMethod(m,fcn){decompressionMethods[m]=fcn};ZipFS2.computeIndex=function computeIndex(data,cb,deprecateMsg){if(deprecateMsg===void 0)deprecateMsg=true;if(deprecateMsg){console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use \'ZipFS.Create({ zipData: zip file as a Buffer}, cb)\' instead.")}var index=new FileIndex;var eocd=ZipFS2.getEOCD(data);if(eocd.diskNumber()!==eocd.cdDiskNumber()){throw new ApiError(ErrorCode.EINVAL,"ZipFS does not support spanned zip files.")}var cdPtr=eocd.cdOffset();if(cdPtr===4294967295){throw new ApiError(ErrorCode.EINVAL,"ZipFS does not support Zip64.")}var cdEnd=cdPtr+eocd.cdSize();ZipFS2.computeIndexResponsive(data,index,cdPtr,cdEnd,cb,[],eocd)};ZipFS2.getEOCD=function getEOCD(data){var startOffset=22;var endOffset=Math.min(startOffset+65535,data.length-1);for(var i22=startOffset;i22<endOffset;i22++){if(data.readUInt32LE(data.length-i22)===101010256){return new EndOfCentralDirectory(data.slice(data.length-i22))}}throw new ApiError(ErrorCode.EINVAL,"Invalid ZIP file: Could not locate End of Central Directory signature.")};ZipFS2.addToIndex=function addToIndex(cd,index){var filename=cd.fileName();if(filename.charAt(0)==="/"){throw new Error("WHY IS THIS ABSOLUTE")}if(filename.charAt(filename.length-1)==="/"){filename=filename.substr(0,filename.length-1)}if(cd.isDirectory()){index.addPathFast("/"+filename,new DirInode(cd))}else{index.addPathFast("/"+filename,new FileInode(cd))}};ZipFS2.computeIndexResponsive=function computeIndexResponsive(data,index,cdPtr,cdEnd,cb,cdEntries,eocd){if(cdPtr<cdEnd){var count=0;while(count++<200&&cdPtr<cdEnd){var cd=new CentralDirectory(data,data.slice(cdPtr));ZipFS2.addToIndex(cd,index);cdPtr+=cd.totalSize();cdEntries.push(cd)}setImmediate$3(function(){ZipFS2.computeIndexResponsive(data,index,cdPtr,cdEnd,cb,cdEntries,eocd)})}else{cb(new ZipTOC(index,cdEntries,eocd,data))}};ZipFS2.prototype.getName=function getName(){return ZipFS2.Name+(this.name!==""?" "+this.name:"")};ZipFS2.prototype.getCentralDirectoryEntry=function getCentralDirectoryEntry(path$$1){var inode=this._index.getInode(path$$1);if(inode===null){throw ApiError.ENOENT(path$$1)}if(isFileInode(inode)){return inode.getData()}else if(isDirInode(inode)){return inode.getData()}else{throw ApiError.EPERM("Invalid inode: "+inode)}};ZipFS2.prototype.getCentralDirectoryEntryAt=function getCentralDirectoryEntryAt(index){var dirEntry=this._directoryEntries[index];if(!dirEntry){throw new RangeError("Invalid directory index: "+index+".")}return dirEntry};ZipFS2.prototype.getNumberOfCentralDirectoryEntries=function getNumberOfCentralDirectoryEntries(){return this._directoryEntries.length};ZipFS2.prototype.getEndOfCentralDirectory=function getEndOfCentralDirectory(){return this._eocd};ZipFS2.prototype.diskSpace=function diskSpace(path$$1,cb){cb(this.data.length,0)};ZipFS2.prototype.isReadOnly=function isReadOnly(){return true};ZipFS2.prototype.supportsLinks=function supportsLinks(){return false};ZipFS2.prototype.supportsProps=function supportsProps(){return false};ZipFS2.prototype.supportsSynch=function supportsSynch(){return true};ZipFS2.prototype.statSync=function statSync(path$$1,isLstat){var inode=this._index.getInode(path$$1);if(inode===null){throw ApiError.ENOENT(path$$1)}var stats;if(isFileInode(inode)){stats=inode.getData().getStats()}else if(isDirInode(inode)){stats=inode.getStats()}else{throw new ApiError(ErrorCode.EINVAL,"Invalid inode.")}return stats};ZipFS2.prototype.openSync=function openSync(path$$1,flags,mode){if(flags.isWriteable()){throw new ApiError(ErrorCode.EPERM,path$$1)}var inode=this._index.getInode(path$$1);if(!inode){throw ApiError.ENOENT(path$$1)}else if(isFileInode(inode)){var cdRecord=inode.getData();var stats=cdRecord.getStats();switch(flags.pathExistsAction()){case ActionType.THROW_EXCEPTION:case ActionType.TRUNCATE_FILE:throw ApiError.EEXIST(path$$1);case ActionType.NOP:return new NoSyncFile(this,path$$1,flags,stats,cdRecord.getData());default:throw new ApiError(ErrorCode.EINVAL,"Invalid FileMode object.")}}else{throw ApiError.EISDIR(path$$1)}};ZipFS2.prototype.readdirSync=function readdirSync(path$$1){var inode=this._index.getInode(path$$1);if(!inode){throw ApiError.ENOENT(path$$1)}else if(isDirInode(inode)){return inode.getListing()}else{throw ApiError.ENOTDIR(path$$1)}};ZipFS2.prototype.readFileSync=function readFileSync(fname,encoding,flag){var fd=this.openSync(fname,flag,420);try{var fdCast=fd;var fdBuff=fdCast.getBuffer();if(encoding===null){return copyingSlice(fdBuff)}return fdBuff.toString(encoding)}finally{fd.closeSync()}};ZipFS2.prototype.populateIndex=function populateIndex(){var this$1=this;var eocd=this._eocd=ZipFS2.getEOCD(this.data);if(eocd.diskNumber()!==eocd.cdDiskNumber()){throw new ApiError(ErrorCode.EINVAL,"ZipFS does not support spanned zip files.")}var cdPtr=eocd.cdOffset();if(cdPtr===4294967295){throw new ApiError(ErrorCode.EINVAL,"ZipFS does not support Zip64.")}var cdEnd=cdPtr+eocd.cdSize();while(cdPtr<cdEnd){var cd=new CentralDirectory(this$1.data,this$1.data.slice(cdPtr));cdPtr+=cd.totalSize();ZipFS2.addToIndex(cd,this$1._index);this$1._directoryEntries.push(cd)}};return ZipFS2}(SynchronousFileSystem);ZipFS.Name="ZipFS";ZipFS.Options={zipData:{type:"object",description:"The zip file as a Buffer object.",validator:bufferValidator},name:{type:"string",optional:true,description:"The name of the zip file (optional)."}};ZipFS.CompressionMethod=CompressionMethod;ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE,function(data,compressedSize,uncompressedSize){return arrayish2Buffer(inflateRaw(data.slice(0,compressedSize),{chunkSize:uncompressedSize}))});ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED,function(data,compressedSize,uncompressedSize){return copyingSlice(data,0,uncompressedSize)});var rockRidgeIdentifier="IEEE_P1282";function getASCIIString(data,startIndex,length){return data.toString("ascii",startIndex,startIndex+length).trim()}function getJolietString(data,startIndex,length){if(length===1){return String.fromCharCode(data[startIndex])}var pairs=Math.floor(length/2);var chars=new Array(pairs);for(var i22=0;i22<pairs;i22++){var pos=startIndex+(i22<<1);chars[i22]=String.fromCharCode(data[pos+1]|data[pos]<<8)}return chars.join("")}function getDate(data,startIndex){var year=parseInt(getASCIIString(data,startIndex,4),10);var mon=parseInt(getASCIIString(data,startIndex+4,2),10);var day=parseInt(getASCIIString(data,startIndex+6,2),10);var hour=parseInt(getASCIIString(data,startIndex+8,2),10);var min=parseInt(getASCIIString(data,startIndex+10,2),10);var sec=parseInt(getASCIIString(data,startIndex+12,2),10);var hundrethsSec=parseInt(getASCIIString(data,startIndex+14,2),10);return new Date(year,mon,day,hour,min,sec,hundrethsSec*100)}function getShortFormDate(data,startIndex){var yearsSince1900=data[startIndex];var month=data[startIndex+1];var day=data[startIndex+2];var hour=data[startIndex+3];var minute=data[startIndex+4];var second=data[startIndex+5];return new Date(yearsSince1900,month-1,day,hour,minute,second)}function constructSystemUseEntry(bigData,i22){var data=bigData.slice(i22);var sue=new SystemUseEntry(data);switch(sue.signatureWord()){case 17221:return new CEEntry(data);case 20548:return new PDEntry(data);case 21328:return new SPEntry(data);case 21332:return new STEntry(data);case 17746:return new EREntry(data);case 17747:return new ESEntry(data);case 20568:return new PXEntry(data);case 20558:return new PNEntry(data);case 21324:return new SLEntry(data);case 20045:return new NMEntry(data);case 17228:return new CLEntry(data);case 20556:return new PLEntry(data);case 21061:return new REEntry(data);case 21574:return new TFEntry(data);case 21318:return new SFEntry(data);case 21074:return new RREntry(data);default:return sue}}function constructSystemUseEntries(data,i22,len,isoData){len=len-4;var entries=new Array;while(i22<len){var entry=constructSystemUseEntry(data,i22);var length=entry.length();if(length===0){return entries}i22+=length;if(entry instanceof STEntry){break}if(entry instanceof CEEntry){entries=entries.concat(entry.getEntries(isoData))}else{entries.push(entry)}}return entries}var VolumeDescriptor=function VolumeDescriptor2(data){this._data=data};VolumeDescriptor.prototype.type=function type(){return this._data[0]};VolumeDescriptor.prototype.standardIdentifier=function standardIdentifier(){return getASCIIString(this._data,1,5)};VolumeDescriptor.prototype.version=function version(){return this._data[6]};VolumeDescriptor.prototype.data=function data(){return this._data.slice(7,2048)};var PrimaryOrSupplementaryVolumeDescriptor=function(VolumeDescriptor2){function PrimaryOrSupplementaryVolumeDescriptor2(data){VolumeDescriptor2.call(this,data);this._root=null}if(VolumeDescriptor2)PrimaryOrSupplementaryVolumeDescriptor2.__proto__=VolumeDescriptor2;PrimaryOrSupplementaryVolumeDescriptor2.prototype=Object.create(VolumeDescriptor2&&VolumeDescriptor2.prototype);PrimaryOrSupplementaryVolumeDescriptor2.prototype.constructor=PrimaryOrSupplementaryVolumeDescriptor2;PrimaryOrSupplementaryVolumeDescriptor2.prototype.systemIdentifier=function systemIdentifier(){return this._getString32(8)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeIdentifier=function volumeIdentifier(){return this._getString32(40)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSpaceSize=function volumeSpaceSize(){return this._data.readUInt32LE(80)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetSize=function volumeSetSize(){return this._data.readUInt16LE(120)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSequenceNumber=function volumeSequenceNumber(){return this._data.readUInt16LE(124)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.logicalBlockSize=function logicalBlockSize(){return this._data.readUInt16LE(128)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.pathTableSize=function pathTableSize(){return this._data.readUInt32LE(132)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeLPathTable=function locationOfTypeLPathTable(){return this._data.readUInt32LE(140)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeLPathTable=function locationOfOptionalTypeLPathTable(){return this._data.readUInt32LE(144)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfTypeMPathTable=function locationOfTypeMPathTable(){return this._data.readUInt32BE(148)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.locationOfOptionalTypeMPathTable=function locationOfOptionalTypeMPathTable(){return this._data.readUInt32BE(152)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.rootDirectoryEntry=function rootDirectoryEntry(isoData){if(this._root===null){this._root=this._constructRootDirectoryRecord(this._data.slice(156));this._root.rootCheckForRockRidge(isoData)}return this._root};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeSetIdentifier=function volumeSetIdentifier(){return this._getString(190,128)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.publisherIdentifier=function publisherIdentifier(){return this._getString(318,128)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.dataPreparerIdentifier=function dataPreparerIdentifier(){return this._getString(446,128)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationIdentifier=function applicationIdentifier(){return this._getString(574,128)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.copyrightFileIdentifier=function copyrightFileIdentifier(){return this._getString(702,38)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.abstractFileIdentifier=function abstractFileIdentifier(){return this._getString(740,36)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.bibliographicFileIdentifier=function bibliographicFileIdentifier(){return this._getString(776,37)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeCreationDate=function volumeCreationDate(){return getDate(this._data,813)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeModificationDate=function volumeModificationDate(){return getDate(this._data,830)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeExpirationDate=function volumeExpirationDate(){return getDate(this._data,847)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.volumeEffectiveDate=function volumeEffectiveDate(){return getDate(this._data,864)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.fileStructureVersion=function fileStructureVersion(){return this._data[881]};PrimaryOrSupplementaryVolumeDescriptor2.prototype.applicationUsed=function applicationUsed(){return this._data.slice(883,883+512)};PrimaryOrSupplementaryVolumeDescriptor2.prototype.reserved=function reserved(){return this._data.slice(1395,1395+653)};PrimaryOrSupplementaryVolumeDescriptor2.prototype._getString32=function _getString32(idx){return this._getString(idx,32)};return PrimaryOrSupplementaryVolumeDescriptor2}(VolumeDescriptor);var PrimaryVolumeDescriptor=function(PrimaryOrSupplementaryVolumeDescriptor2){function PrimaryVolumeDescriptor2(data){PrimaryOrSupplementaryVolumeDescriptor2.call(this,data);if(this.type()!==1){throw new ApiError(ErrorCode.EIO,"Invalid primary volume descriptor.")}}if(PrimaryOrSupplementaryVolumeDescriptor2)PrimaryVolumeDescriptor2.__proto__=PrimaryOrSupplementaryVolumeDescriptor2;PrimaryVolumeDescriptor2.prototype=Object.create(PrimaryOrSupplementaryVolumeDescriptor2&&PrimaryOrSupplementaryVolumeDescriptor2.prototype);PrimaryVolumeDescriptor2.prototype.constructor=PrimaryVolumeDescriptor2;PrimaryVolumeDescriptor2.prototype.name=function name2(){return"ISO9660"};PrimaryVolumeDescriptor2.prototype._constructRootDirectoryRecord=function _constructRootDirectoryRecord(data){return new ISODirectoryRecord(data,-1)};PrimaryVolumeDescriptor2.prototype._getString=function _getString(idx,len){return this._getString(idx,len)};return PrimaryVolumeDescriptor2}(PrimaryOrSupplementaryVolumeDescriptor);var SupplementaryVolumeDescriptor=function(PrimaryOrSupplementaryVolumeDescriptor2){function SupplementaryVolumeDescriptor2(data){PrimaryOrSupplementaryVolumeDescriptor2.call(this,data);if(this.type()!==2){throw new ApiError(ErrorCode.EIO,"Invalid supplementary volume descriptor.")}var escapeSequence=this.escapeSequence();var third=escapeSequence[2];if(escapeSequence[0]!==37||escapeSequence[1]!==47||third!==64&&third!==67&&third!==69){throw new ApiError(ErrorCode.EIO,"Unrecognized escape sequence for SupplementaryVolumeDescriptor: "+escapeSequence.toString())}}if(PrimaryOrSupplementaryVolumeDescriptor2)SupplementaryVolumeDescriptor2.__proto__=PrimaryOrSupplementaryVolumeDescriptor2;SupplementaryVolumeDescriptor2.prototype=Object.create(PrimaryOrSupplementaryVolumeDescriptor2&&PrimaryOrSupplementaryVolumeDescriptor2.prototype);SupplementaryVolumeDescriptor2.prototype.constructor=SupplementaryVolumeDescriptor2;SupplementaryVolumeDescriptor2.prototype.name=function name2(){return"Joliet"};SupplementaryVolumeDescriptor2.prototype.escapeSequence=function escapeSequence(){return this._data.slice(88,120)};SupplementaryVolumeDescriptor2.prototype._constructRootDirectoryRecord=function _constructRootDirectoryRecord(data){return new JolietDirectoryRecord(data,-1)};SupplementaryVolumeDescriptor2.prototype._getString=function _getString(idx,len){return getJolietString(this._data,idx,len)};return SupplementaryVolumeDescriptor2}(PrimaryOrSupplementaryVolumeDescriptor);var DirectoryRecord=function DirectoryRecord2(data,rockRidgeOffset){this._suEntries=null;this._fileOrDir=null;this._data=data;this._rockRidgeOffset=rockRidgeOffset};DirectoryRecord.prototype.hasRockRidge=function hasRockRidge(){return this._rockRidgeOffset>-1};DirectoryRecord.prototype.getRockRidgeOffset=function getRockRidgeOffset(){return this._rockRidgeOffset};DirectoryRecord.prototype.rootCheckForRockRidge=function rootCheckForRockRidge(isoData){var dir2=this.getDirectory(isoData);this._rockRidgeOffset=dir2.getDotEntry(isoData)._getRockRidgeOffset(isoData);if(this._rockRidgeOffset>-1){this._fileOrDir=null}};DirectoryRecord.prototype.length=function length(){return this._data[0]};DirectoryRecord.prototype.extendedAttributeRecordLength=function extendedAttributeRecordLength(){return this._data[1]};DirectoryRecord.prototype.lba=function lba(){return this._data.readUInt32LE(2)*2048};DirectoryRecord.prototype.dataLength=function dataLength(){return this._data.readUInt32LE(10)};DirectoryRecord.prototype.recordingDate=function recordingDate(){return getShortFormDate(this._data,18)};DirectoryRecord.prototype.fileFlags=function fileFlags(){return this._data[25]};DirectoryRecord.prototype.fileUnitSize=function fileUnitSize(){return this._data[26]};DirectoryRecord.prototype.interleaveGapSize=function interleaveGapSize(){return this._data[27]};DirectoryRecord.prototype.volumeSequenceNumber=function volumeSequenceNumber(){return this._data.readUInt16LE(28)};DirectoryRecord.prototype.identifier=function identifier(){return this._getString(33,this._data[32])};DirectoryRecord.prototype.fileName=function fileName(isoData){if(this.hasRockRidge()){var fn=this._rockRidgeFilename(isoData);if(fn!==null){return fn}}var ident=this.identifier();if(this.isDirectory(isoData)){return ident}var versionSeparator=ident.indexOf(";");if(versionSeparator===-1){return ident}else if(ident[versionSeparator-1]==="."){return ident.slice(0,versionSeparator-1)}else{return ident.slice(0,versionSeparator)}};DirectoryRecord.prototype.isDirectory=function isDirectory(isoData){var rv=!!(this.fileFlags()&2);if(!rv&&this.hasRockRidge()){rv=this.getSUEntries(isoData).filter(function(e){return e instanceof CLEntry}).length>0}return rv};DirectoryRecord.prototype.isSymlink=function isSymlink(isoData){return this.hasRockRidge()&&this.getSUEntries(isoData).filter(function(e){return e instanceof SLEntry}).length>0};DirectoryRecord.prototype.getSymlinkPath=function getSymlinkPath(isoData){var p2="";var entries=this.getSUEntries(isoData);var getStr=this._getGetString();for(var i22=0,list2=entries;i22<list2.length;i22+=1){var entry=list2[i22];if(entry instanceof SLEntry){var components=entry.componentRecords();for(var i$12=0,list$1=components;i$12<list$1.length;i$12+=1){var component=list$1[i$12];var flags=component.flags();if(flags&2){p2+="./"}else if(flags&4){p2+="../"}else if(flags&8){p2+="/"}else{p2+=component.content(getStr);if(!(flags&1)){p2+="/"}}}if(!entry.continueFlag()){break}}}if(p2.length>1&&p2[p2.length-1]==="/"){return p2.slice(0,p2.length-1)}else{return p2}};DirectoryRecord.prototype.getFile=function getFile(isoData){if(this.isDirectory(isoData)){throw new Error("Tried to get a File from a directory.")}if(this._fileOrDir===null){this._fileOrDir=isoData.slice(this.lba(),this.lba()+this.dataLength())}return this._fileOrDir};DirectoryRecord.prototype.getDirectory=function getDirectory(isoData){if(!this.isDirectory(isoData)){throw new Error("Tried to get a Directory from a file.")}if(this._fileOrDir===null){this._fileOrDir=this._constructDirectory(isoData)}return this._fileOrDir};DirectoryRecord.prototype.getSUEntries=function getSUEntries(isoData){if(!this._suEntries){this._constructSUEntries(isoData)}return this._suEntries};DirectoryRecord.prototype._rockRidgeFilename=function _rockRidgeFilename(isoData){var nmEntries=this.getSUEntries(isoData).filter(function(e2){return e2 instanceof NMEntry});if(nmEntries.length===0||nmEntries[0].flags()&(2|4)){return null}var str4="";var getString=this._getGetString();for(var i22=0,list2=nmEntries;i22<list2.length;i22+=1){var e=list2[i22];str4+=e.name(getString);if(!(e.flags()&1)){break}}return str4};DirectoryRecord.prototype._constructSUEntries=function _constructSUEntries(isoData){var i22=33+this._data[32];if(i22%2===1){i22++}i22+=this._rockRidgeOffset;this._suEntries=constructSystemUseEntries(this._data,i22,this.length(),isoData)};DirectoryRecord.prototype._getRockRidgeOffset=function _getRockRidgeOffset(isoData){this._rockRidgeOffset=0;var suEntries=this.getSUEntries(isoData);if(suEntries.length>0){var spEntry=suEntries[0];if(spEntry instanceof SPEntry&&spEntry.checkBytesPass()){for(var i22=1;i22<suEntries.length;i22++){var entry=suEntries[i22];if(entry instanceof RREntry||entry instanceof EREntry&&entry.extensionIdentifier()===rockRidgeIdentifier){return spEntry.bytesSkipped()}}}}this._rockRidgeOffset=-1;return-1};var ISODirectoryRecord=function(DirectoryRecord2){function ISODirectoryRecord2(data,rockRidgeOffset){DirectoryRecord2.call(this,data,rockRidgeOffset)}if(DirectoryRecord2)ISODirectoryRecord2.__proto__=DirectoryRecord2;ISODirectoryRecord2.prototype=Object.create(DirectoryRecord2&&DirectoryRecord2.prototype);ISODirectoryRecord2.prototype.constructor=ISODirectoryRecord2;ISODirectoryRecord2.prototype._getString=function _getString(i22,len){return getASCIIString(this._data,i22,len)};ISODirectoryRecord2.prototype._constructDirectory=function _constructDirectory(isoData){return new ISODirectory(this,isoData)};ISODirectoryRecord2.prototype._getGetString=function _getGetString(){return getASCIIString};return ISODirectoryRecord2}(DirectoryRecord);var JolietDirectoryRecord=function(DirectoryRecord2){function JolietDirectoryRecord2(data,rockRidgeOffset){DirectoryRecord2.call(this,data,rockRidgeOffset)}if(DirectoryRecord2)JolietDirectoryRecord2.__proto__=DirectoryRecord2;JolietDirectoryRecord2.prototype=Object.create(DirectoryRecord2&&DirectoryRecord2.prototype);JolietDirectoryRecord2.prototype.constructor=JolietDirectoryRecord2;JolietDirectoryRecord2.prototype._getString=function _getString(i22,len){return getJolietString(this._data,i22,len)};JolietDirectoryRecord2.prototype._constructDirectory=function _constructDirectory(isoData){return new JolietDirectory(this,isoData)};JolietDirectoryRecord2.prototype._getGetString=function _getGetString(){return getJolietString};return JolietDirectoryRecord2}(DirectoryRecord);var SystemUseEntry=function SystemUseEntry2(data){this._data=data};SystemUseEntry.prototype.signatureWord=function signatureWord(){return this._data.readUInt16BE(0)};SystemUseEntry.prototype.signatureWordString=function signatureWordString(){return getASCIIString(this._data,0,2)};SystemUseEntry.prototype.length=function length(){return this._data[2]};SystemUseEntry.prototype.suVersion=function suVersion(){return this._data[3]};var CEEntry=function(SystemUseEntry2){function CEEntry2(data){SystemUseEntry2.call(this,data);this._entries=null}if(SystemUseEntry2)CEEntry2.__proto__=SystemUseEntry2;CEEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);CEEntry2.prototype.constructor=CEEntry2;CEEntry2.prototype.continuationLba=function continuationLba(){return this._data.readUInt32LE(4)};CEEntry2.prototype.continuationLbaOffset=function continuationLbaOffset(){return this._data.readUInt32LE(12)};CEEntry2.prototype.continuationLength=function continuationLength(){return this._data.readUInt32LE(20)};CEEntry2.prototype.getEntries=function getEntries(isoData){if(!this._entries){var start=this.continuationLba()*2048+this.continuationLbaOffset();this._entries=constructSystemUseEntries(isoData,start,this.continuationLength(),isoData)}return this._entries};return CEEntry2}(SystemUseEntry);var PDEntry=function(SystemUseEntry2){function PDEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)PDEntry2.__proto__=SystemUseEntry2;PDEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);PDEntry2.prototype.constructor=PDEntry2;return PDEntry2}(SystemUseEntry);var SPEntry=function(SystemUseEntry2){function SPEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)SPEntry2.__proto__=SystemUseEntry2;SPEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);SPEntry2.prototype.constructor=SPEntry2;SPEntry2.prototype.checkBytesPass=function checkBytesPass(){return this._data[4]===190&&this._data[5]===239};SPEntry2.prototype.bytesSkipped=function bytesSkipped(){return this._data[6]};return SPEntry2}(SystemUseEntry);var STEntry=function(SystemUseEntry2){function STEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)STEntry2.__proto__=SystemUseEntry2;STEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);STEntry2.prototype.constructor=STEntry2;return STEntry2}(SystemUseEntry);var EREntry=function(SystemUseEntry2){function EREntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)EREntry2.__proto__=SystemUseEntry2;EREntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);EREntry2.prototype.constructor=EREntry2;EREntry2.prototype.identifierLength=function identifierLength(){return this._data[4]};EREntry2.prototype.descriptorLength=function descriptorLength(){return this._data[5]};EREntry2.prototype.sourceLength=function sourceLength(){return this._data[6]};EREntry2.prototype.extensionVersion=function extensionVersion(){return this._data[7]};EREntry2.prototype.extensionIdentifier=function extensionIdentifier(){return getASCIIString(this._data,8,this.identifierLength())};EREntry2.prototype.extensionDescriptor=function extensionDescriptor(){return getASCIIString(this._data,8+this.identifierLength(),this.descriptorLength())};EREntry2.prototype.extensionSource=function extensionSource(){return getASCIIString(this._data,8+this.identifierLength()+this.descriptorLength(),this.sourceLength())};return EREntry2}(SystemUseEntry);var ESEntry=function(SystemUseEntry2){function ESEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)ESEntry2.__proto__=SystemUseEntry2;ESEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);ESEntry2.prototype.constructor=ESEntry2;ESEntry2.prototype.extensionSequence=function extensionSequence(){return this._data[4]};return ESEntry2}(SystemUseEntry);var RREntry=function(SystemUseEntry2){function RREntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)RREntry2.__proto__=SystemUseEntry2;RREntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);RREntry2.prototype.constructor=RREntry2;return RREntry2}(SystemUseEntry);var PXEntry=function(SystemUseEntry2){function PXEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)PXEntry2.__proto__=SystemUseEntry2;PXEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);PXEntry2.prototype.constructor=PXEntry2;PXEntry2.prototype.mode=function mode(){return this._data.readUInt32LE(4)};PXEntry2.prototype.fileLinks=function fileLinks(){return this._data.readUInt32LE(12)};PXEntry2.prototype.uid=function uid(){return this._data.readUInt32LE(20)};PXEntry2.prototype.gid=function gid(){return this._data.readUInt32LE(28)};PXEntry2.prototype.inode=function inode(){return this._data.readUInt32LE(36)};return PXEntry2}(SystemUseEntry);var PNEntry=function(SystemUseEntry2){function PNEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)PNEntry2.__proto__=SystemUseEntry2;PNEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);PNEntry2.prototype.constructor=PNEntry2;PNEntry2.prototype.devTHigh=function devTHigh(){return this._data.readUInt32LE(4)};PNEntry2.prototype.devTLow=function devTLow(){return this._data.readUInt32LE(12)};return PNEntry2}(SystemUseEntry);var SLEntry=function(SystemUseEntry2){function SLEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)SLEntry2.__proto__=SystemUseEntry2;SLEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);SLEntry2.prototype.constructor=SLEntry2;SLEntry2.prototype.flags=function flags(){return this._data[4]};SLEntry2.prototype.continueFlag=function continueFlag(){return this.flags()&1};SLEntry2.prototype.componentRecords=function componentRecords(){var this$1=this;var records=new Array;var i22=5;while(i22<this.length()){var record=new SLComponentRecord(this$1._data.slice(i22));records.push(record);i22+=record.length()}return records};return SLEntry2}(SystemUseEntry);var SLComponentRecord=function SLComponentRecord2(data){this._data=data};SLComponentRecord.prototype.flags=function flags(){return this._data[0]};SLComponentRecord.prototype.length=function length(){return 2+this.componentLength()};SLComponentRecord.prototype.componentLength=function componentLength(){return this._data[1]};SLComponentRecord.prototype.content=function content(getString){return getString(this._data,2,this.componentLength())};var NMEntry=function(SystemUseEntry2){function NMEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)NMEntry2.__proto__=SystemUseEntry2;NMEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);NMEntry2.prototype.constructor=NMEntry2;NMEntry2.prototype.flags=function flags(){return this._data[4]};NMEntry2.prototype.name=function name2(getString){return getString(this._data,5,this.length()-5)};return NMEntry2}(SystemUseEntry);var CLEntry=function(SystemUseEntry2){function CLEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)CLEntry2.__proto__=SystemUseEntry2;CLEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);CLEntry2.prototype.constructor=CLEntry2;CLEntry2.prototype.childDirectoryLba=function childDirectoryLba(){return this._data.readUInt32LE(4)};return CLEntry2}(SystemUseEntry);var PLEntry=function(SystemUseEntry2){function PLEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)PLEntry2.__proto__=SystemUseEntry2;PLEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);PLEntry2.prototype.constructor=PLEntry2;PLEntry2.prototype.parentDirectoryLba=function parentDirectoryLba(){return this._data.readUInt32LE(4)};return PLEntry2}(SystemUseEntry);var REEntry=function(SystemUseEntry2){function REEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)REEntry2.__proto__=SystemUseEntry2;REEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);REEntry2.prototype.constructor=REEntry2;return REEntry2}(SystemUseEntry);var TFEntry=function(SystemUseEntry2){function TFEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)TFEntry2.__proto__=SystemUseEntry2;TFEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);TFEntry2.prototype.constructor=TFEntry2;TFEntry2.prototype.flags=function flags(){return this._data[4]};TFEntry2.prototype.creation=function creation(){if(this.flags()&1){if(this._longFormDates()){return getDate(this._data,5)}else{return getShortFormDate(this._data,5)}}else{return null}};TFEntry2.prototype.modify=function modify(){if(this.flags()&2){var previousDates=this.flags()&1?1:0;if(this._longFormDates){return getDate(this._data,5+previousDates*17)}else{return getShortFormDate(this._data,5+previousDates*7)}}else{return null}};TFEntry2.prototype.access=function access(){if(this.flags()&4){var previousDates=this.flags()&1?1:0;previousDates+=this.flags()&2?1:0;if(this._longFormDates){return getDate(this._data,5+previousDates*17)}else{return getShortFormDate(this._data,5+previousDates*7)}}else{return null}};TFEntry2.prototype.backup=function backup(){if(this.flags()&16){var previousDates=this.flags()&1?1:0;previousDates+=this.flags()&2?1:0;previousDates+=this.flags()&4?1:0;if(this._longFormDates){return getDate(this._data,5+previousDates*17)}else{return getShortFormDate(this._data,5+previousDates*7)}}else{return null}};TFEntry2.prototype.expiration=function expiration(){if(this.flags()&32){var previousDates=this.flags()&1?1:0;previousDates+=this.flags()&2?1:0;previousDates+=this.flags()&4?1:0;previousDates+=this.flags()&16?1:0;if(this._longFormDates){return getDate(this._data,5+previousDates*17)}else{return getShortFormDate(this._data,5+previousDates*7)}}else{return null}};TFEntry2.prototype.effective=function effective(){if(this.flags()&64){var previousDates=this.flags()&1?1:0;previousDates+=this.flags()&2?1:0;previousDates+=this.flags()&4?1:0;previousDates+=this.flags()&16?1:0;previousDates+=this.flags()&32?1:0;if(this._longFormDates){return getDate(this._data,5+previousDates*17)}else{return getShortFormDate(this._data,5+previousDates*7)}}else{return null}};TFEntry2.prototype._longFormDates=function _longFormDates(){return!!(this.flags()&&128)};return TFEntry2}(SystemUseEntry);var SFEntry=function(SystemUseEntry2){function SFEntry2(data){SystemUseEntry2.call(this,data)}if(SystemUseEntry2)SFEntry2.__proto__=SystemUseEntry2;SFEntry2.prototype=Object.create(SystemUseEntry2&&SystemUseEntry2.prototype);SFEntry2.prototype.constructor=SFEntry2;SFEntry2.prototype.virtualSizeHigh=function virtualSizeHigh(){return this._data.readUInt32LE(4)};SFEntry2.prototype.virtualSizeLow=function virtualSizeLow(){return this._data.readUInt32LE(12)};SFEntry2.prototype.tableDepth=function tableDepth(){return this._data[20]};return SFEntry2}(SystemUseEntry);var Directory=function Directory2(record,isoData){var this$1=this;this._fileList=[];this._fileMap={};this._record=record;var i22=record.lba();var iLimit=i22+record.dataLength();if(!(record.fileFlags()&2)){var cl=record.getSUEntries(isoData).filter(function(e){return e instanceof CLEntry})[0];i22=cl.childDirectoryLba()*2048;iLimit=Infinity}while(i22<iLimit){var len=isoData[i22];if(len===0){i22++;continue}var r=this$1._constructDirectoryRecord(isoData.slice(i22));var fname=r.fileName(isoData);if(fname!=="\\0"&&fname!==""){if(!r.hasRockRidge()||r.getSUEntries(isoData).filter(function(e){return e instanceof REEntry}).length===0){this$1._fileMap[fname]=r;this$1._fileList.push(fname)}}else if(iLimit===Infinity){iLimit=i22+r.dataLength()}i22+=r.length()}};Directory.prototype.getRecord=function getRecord(name2){return this._fileMap[name2]};Directory.prototype.getFileList=function getFileList(){return this._fileList};Directory.prototype.getDotEntry=function getDotEntry(isoData){return this._constructDirectoryRecord(isoData.slice(this._record.lba()))};var ISODirectory=function(Directory2){function ISODirectory2(record,isoData){Directory2.call(this,record,isoData)}if(Directory2)ISODirectory2.__proto__=Directory2;ISODirectory2.prototype=Object.create(Directory2&&Directory2.prototype);ISODirectory2.prototype.constructor=ISODirectory2;ISODirectory2.prototype._constructDirectoryRecord=function _constructDirectoryRecord(data){return new ISODirectoryRecord(data,this._record.getRockRidgeOffset())};return ISODirectory2}(Directory);var JolietDirectory=function(Directory2){function JolietDirectory2(record,isoData){Directory2.call(this,record,isoData)}if(Directory2)JolietDirectory2.__proto__=Directory2;JolietDirectory2.prototype=Object.create(Directory2&&Directory2.prototype);JolietDirectory2.prototype.constructor=JolietDirectory2;JolietDirectory2.prototype._constructDirectoryRecord=function _constructDirectoryRecord(data){return new JolietDirectoryRecord(data,this._record.getRockRidgeOffset())};return JolietDirectory2}(Directory);var IsoFS=function(SynchronousFileSystem$$1){function IsoFS2(data,name2,deprecateMsg){var this$1=this;if(name2===void 0)name2="";if(deprecateMsg===void 0)deprecateMsg=true;SynchronousFileSystem$$1.call(this);this._data=data;deprecationMessage(deprecateMsg,IsoFS2.Name,{data:"ISO data as a Buffer",name:name2});var vdTerminatorFound=false;var i22=16*2048;var candidateVDs=new Array;while(!vdTerminatorFound){var slice=data.slice(i22);var vd=new VolumeDescriptor(slice);switch(vd.type()){case 1:candidateVDs.push(new PrimaryVolumeDescriptor(slice));break;case 2:candidateVDs.push(new SupplementaryVolumeDescriptor(slice));break;case 255:vdTerminatorFound=true;break}i22+=2048}if(candidateVDs.length===0){throw new ApiError(ErrorCode.EIO,"Unable to find a suitable volume descriptor.")}candidateVDs.forEach(function(v2){if(!this$1._pvd||this$1._pvd.type()!==2){this$1._pvd=v2}});this._root=this._pvd.rootDirectoryEntry(data);this._name=name2}if(SynchronousFileSystem$$1)IsoFS2.__proto__=SynchronousFileSystem$$1;IsoFS2.prototype=Object.create(SynchronousFileSystem$$1&&SynchronousFileSystem$$1.prototype);IsoFS2.prototype.constructor=IsoFS2;IsoFS2.Create=function Create(opts,cb){var fs4;var e;try{fs4=new IsoFS2(opts.data,opts.name,false)}catch(e2){e2=e2}finally{cb(e,fs4)}};IsoFS2.isAvailable=function isAvailable(){return true};IsoFS2.prototype.getName=function getName(){var name2="IsoFS"+this._name+(this._pvd?"-"+this._pvd.name():"");if(this._root&&this._root.hasRockRidge()){name2+="-RockRidge"}return name2};IsoFS2.prototype.diskSpace=function diskSpace(path$$1,cb){cb(this._data.length,0)};IsoFS2.prototype.isReadOnly=function isReadOnly(){return true};IsoFS2.prototype.supportsLinks=function supportsLinks(){return false};IsoFS2.prototype.supportsProps=function supportsProps(){return false};IsoFS2.prototype.supportsSynch=function supportsSynch(){return true};IsoFS2.prototype.statSync=function statSync(p2,isLstat){var record=this._getDirectoryRecord(p2);if(record===null){throw ApiError.ENOENT(p2)}return this._getStats(p2,record)};IsoFS2.prototype.openSync=function openSync(p2,flags,mode){if(flags.isWriteable()){throw new ApiError(ErrorCode.EPERM,p2)}var record=this._getDirectoryRecord(p2);if(!record){throw ApiError.ENOENT(p2)}else if(record.isSymlink(this._data)){return this.openSync(path.resolve(p2,record.getSymlinkPath(this._data)),flags,mode)}else if(!record.isDirectory(this._data)){var data=record.getFile(this._data);var stats=this._getStats(p2,record);switch(flags.pathExistsAction()){case ActionType.THROW_EXCEPTION:case ActionType.TRUNCATE_FILE:throw ApiError.EEXIST(p2);case ActionType.NOP:return new NoSyncFile(this,p2,flags,stats,data);default:throw new ApiError(ErrorCode.EINVAL,"Invalid FileMode object.")}}else{throw ApiError.EISDIR(p2)}};IsoFS2.prototype.readdirSync=function readdirSync(path$$1){var record=this._getDirectoryRecord(path$$1);if(!record){throw ApiError.ENOENT(path$$1)}else if(record.isDirectory(this._data)){return record.getDirectory(this._data).getFileList().slice(0)}else{throw ApiError.ENOTDIR(path$$1)}};IsoFS2.prototype.readFileSync=function readFileSync(fname,encoding,flag){var fd=this.openSync(fname,flag,420);try{var fdCast=fd;var fdBuff=fdCast.getBuffer();if(encoding===null){return copyingSlice(fdBuff)}return fdBuff.toString(encoding)}finally{fd.closeSync()}};IsoFS2.prototype._getDirectoryRecord=function _getDirectoryRecord(path$$1){var this$1=this;if(path$$1==="/"){return this._root}var components=path$$1.split("/").slice(1);var dir2=this._root;for(var i22=0,list2=components;i22<list2.length;i22+=1){var component=list2[i22];if(dir2.isDirectory(this$1._data)){dir2=dir2.getDirectory(this$1._data).getRecord(component);if(!dir2){return null}}else{return null}}return dir2};IsoFS2.prototype._getStats=function _getStats(p2,record){if(record.isSymlink(this._data)){var newP=path.resolve(p2,record.getSymlinkPath(this._data));var dirRec=this._getDirectoryRecord(newP);if(!dirRec){return null}return this._getStats(newP,dirRec)}else{var len=record.dataLength();var mode=365;var date=record.recordingDate();var atime=date;var mtime=date;var ctime=date;if(record.hasRockRidge()){var entries=record.getSUEntries(this._data);for(var i22=0,list2=entries;i22<list2.length;i22+=1){var entry=list2[i22];if(entry instanceof PXEntry){mode=entry.mode()}else if(entry instanceof TFEntry){var flags=entry.flags();if(flags&4){atime=entry.access()}if(flags&2){mtime=entry.modify()}if(flags&1){ctime=entry.creation()}}}}mode=mode&365;return new Stats(record.isDirectory(this._data)?FileType.DIRECTORY:FileType.FILE,len,mode,atime,mtime,ctime)}};return IsoFS2}(SynchronousFileSystem);IsoFS.Name="IsoFS";IsoFS.Options={data:{type:"object",description:"The ISO file in a buffer",validator:bufferValidator}};[AsyncMirror,DropboxFileSystem,EmscriptenFileSystem,FolderAdapter,HTML5FS,InMemoryFileSystem,IndexedDBFileSystem,IsoFS,LocalStorageFileSystem,MountableFileSystem,OverlayFS,WorkerFS,XmlHttpRequest,ZipFS].forEach(function(fsType){var create=fsType.Create;fsType.Create=function(opts,cb){var oneArg=typeof opts==="function";var normalizedCb=oneArg?opts:cb;var normalizedOpts=oneArg?{}:opts;function wrappedCb(e){if(e){normalizedCb(e)}else{create.call(fsType,normalizedOpts,normalizedCb)}}checkOptions(fsType,normalizedOpts,wrappedCb)}});var Backends={AsyncMirror,Dropbox:DropboxFileSystem,Emscripten:EmscriptenFileSystem,FolderAdapter,HTML5FS,InMemory:InMemoryFileSystem,IndexedDB:IndexedDBFileSystem,IsoFS,LocalStorage:LocalStorageFileSystem,MountableFileSystem,OverlayFS,WorkerFS,XmlHttpRequest,ZipFS};if(process2["initializeTTYs"]){process2["initializeTTYs"]()}function install(obj){obj.Buffer=Buffer2;obj.process=process2;var oldRequire=obj.require?obj.require:null;obj.require=function(arg){var rv=BFSRequire2(arg);if(!rv){return oldRequire.apply(null,Array.prototype.slice.call(arguments,0))}else{return rv}}}function registerFileSystem(name2,fs4){Backends[name2]=fs4}function BFSRequire2(module4){switch(module4){case"fs":return _fsMock;case"path":return path;case"buffer":return buffer;case"process":return process2;case"bfs_utils":return BFSUtils;default:return Backends[module4]}}function initialize2(rootfs){return _fsMock.initialize(rootfs)}function configure(config,cb){getFileSystem(config,function(e,fs4){if(fs4){initialize2(fs4);cb()}else{cb(e)}})}function getFileSystem(config,cb){var fsName=config["fs"];if(!fsName){return cb(new ApiError(ErrorCode.EPERM,\'Missing "fs" property on configuration object.\'))}var options=config["options"];var waitCount=0;var called=false;function finish(){if(!called){called=true;var fsc=Backends[fsName];if(!fsc){cb(new ApiError(ErrorCode.EPERM,"File system "+fsName+" is not available in BrowserFS."))}else{fsc.Create(options,cb)}}}if(options!==null&&typeof options==="object"){var finishedIterating=false;var props=Object.keys(options).filter(function(k){return k!=="fs"});props.forEach(function(p2){var d2=options[p2];if(d2!==null&&typeof d2==="object"&&d2["fs"]){waitCount++;getFileSystem(d2,function(e,fs4){waitCount--;if(e){if(called){return}called=true;cb(e)}else{options[p2]=fs4;if(waitCount===0&&finishedIterating){finish()}}})}});finishedIterating=true}if(waitCount===0){finish()}}if("ab".substr(-1)!=="b"){String.prototype.substr=function(substr){return function(start,length){if(start<0){start=this.length+start}return substr.call(this,start,length)}}(String.prototype.substr)}if(typeof ArrayBuffer!=="undefined"&&typeof Uint8Array!=="undefined"){if(!Uint8Array.prototype["slice"]){Uint8Array.prototype.slice=function(start,end){if(start===void 0)start=0;if(end===void 0)end=this.length;var self2=this;if(start<0){start=this.length+start;if(start<0){start=0}}if(end<0){end=this.length+end;if(end<0){end=0}}if(end<start){end=start}return new Uint8Array(self2.buffer,self2.byteOffset+start,end-start)}}}exports2.install=install;exports2.registerFileSystem=registerFileSystem;exports2.BFSRequire=BFSRequire2;exports2.initialize=initialize2;exports2.configure=configure;exports2.getFileSystem=getFileSystem;exports2.EmscriptenFS=BFSEmscriptenFS;exports2.FileSystem=Backends;exports2.Errors=api_error;exports2.setImmediate=setImmediate$3}).call(exports2,__webpack_require__(1),function(){return this}(),__webpack_require__(5)(module22),__webpack_require__(6))},function(module22,exports2,__webpack_require__){module22.exports=__webpack_require__(2).Buffer},function(module22,exports2,__webpack_require__){(function(Buffer2){"use strict";var base64=__webpack_require__(3);var ieee754=__webpack_require__(4);exports2.Buffer=Buffer2;exports2.SlowBuffer=SlowBuffer;exports2.INSPECT_MAX_BYTES=50;var K_MAX_LENGTH=2147483647;exports2.kMaxLength=K_MAX_LENGTH;Buffer2.TYPED_ARRAY_SUPPORT=typedArraySupport();if(!Buffer2.TYPED_ARRAY_SUPPORT&&typeof console!=="undefined"&&typeof console.error==="function"){console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.")}function typedArraySupport(){try{var arr=new Uint8Array(1);arr.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}};return arr.foo()===42}catch(e){return false}}function createBuffer(length){if(length>K_MAX_LENGTH){throw new RangeError("Invalid typed array length")}var buf=new Uint8Array(length);buf.__proto__=Buffer2.prototype;return buf}function Buffer2(arg,encodingOrOffset,length){if(typeof arg==="number"){if(typeof encodingOrOffset==="string"){throw new Error("If encoding is specified then the first argument must be a string")}return allocUnsafe(arg)}return from(arg,encodingOrOffset,length)}if(typeof Symbol!=="undefined"&&Symbol.species&&Buffer2[Symbol.species]===Buffer2){Object.defineProperty(Buffer2,Symbol.species,{value:null,configurable:true,enumerable:false,writable:false})}Buffer2.poolSize=8192;function from(value,encodingOrOffset,length){if(typeof value==="number"){throw new TypeError(\'"value" argument must not be a number\')}if(isArrayBuffer(value)){return fromArrayBuffer(value,encodingOrOffset,length)}if(typeof value==="string"){return fromString(value,encodingOrOffset)}return fromObject(value)}Buffer2.from=function(value,encodingOrOffset,length){return from(value,encodingOrOffset,length)};Buffer2.prototype.__proto__=Uint8Array.prototype;Buffer2.__proto__=Uint8Array;function assertSize(size){if(typeof size!=="number"){throw new TypeError(\'"size" argument must be a number\')}else if(size<0){throw new RangeError(\'"size" argument must not be negative\')}}function alloc(size,fill,encoding){assertSize(size);if(size<=0){return createBuffer(size)}if(fill!==void 0){return typeof encoding==="string"?createBuffer(size).fill(fill,encoding):createBuffer(size).fill(fill)}return createBuffer(size)}Buffer2.alloc=function(size,fill,encoding){return alloc(size,fill,encoding)};function allocUnsafe(size){assertSize(size);return createBuffer(size<0?0:checked(size)|0)}Buffer2.allocUnsafe=function(size){return allocUnsafe(size)};Buffer2.allocUnsafeSlow=function(size){return allocUnsafe(size)};function fromString(string,encoding){if(typeof encoding!=="string"||encoding===""){encoding="utf8"}if(!Buffer2.isEncoding(encoding)){throw new TypeError(\'"encoding" must be a valid string encoding\')}var length=byteLength(string,encoding)|0;var buf=createBuffer(length);var actual=buf.write(string,encoding);if(actual!==length){buf=buf.slice(0,actual)}return buf}function fromArrayLike(array){var length=array.length<0?0:checked(array.length)|0;var buf=createBuffer(length);for(var i3=0;i3<length;i3+=1){buf[i3]=array[i3]&255}return buf}function fromArrayBuffer(array,byteOffset,length){if(byteOffset<0||array.byteLength<byteOffset){throw new RangeError("\'offset\' is out of bounds")}if(array.byteLength<byteOffset+(length||0)){throw new RangeError("\'length\' is out of bounds")}var buf;if(byteOffset===void 0&&length===void 0){buf=new Uint8Array(array)}else if(length===void 0){buf=new Uint8Array(array,byteOffset)}else{buf=new Uint8Array(array,byteOffset,length)}buf.__proto__=Buffer2.prototype;return buf}function fromObject(obj){if(Buffer2.isBuffer(obj)){var len=checked(obj.length)|0;var buf=createBuffer(len);if(buf.length===0){return buf}obj.copy(buf,0,0,len);return buf}if(obj){if(isArrayBufferView(obj)||"length"in obj){if(typeof obj.length!=="number"||numberIsNaN(obj.length)){return createBuffer(0)}return fromArrayLike(obj)}if(obj.type==="Buffer"&&Array.isArray(obj.data)){return fromArrayLike(obj.data)}}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(length){if(length>=K_MAX_LENGTH){throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+K_MAX_LENGTH.toString(16)+" bytes")}return length|0}function SlowBuffer(length){if(+length!=length){length=0}return Buffer2.alloc(+length)}Buffer2.isBuffer=function isBuffer(b){return b!=null&&b._isBuffer===true};Buffer2.compare=function compare(a,b){if(!Buffer2.isBuffer(a)||!Buffer2.isBuffer(b)){throw new TypeError("Arguments must be Buffers")}if(a===b)return 0;var x3=a.length;var y4=b.length;for(var i3=0,len=Math.min(x3,y4);i3<len;++i3){if(a[i3]!==b[i3]){x3=a[i3];y4=b[i3];break}}if(x3<y4)return-1;if(y4<x3)return 1;return 0};Buffer2.isEncoding=function isEncoding(encoding){switch(String(encoding).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return true;default:return false}};Buffer2.concat=function concat(list,length){if(!Array.isArray(list)){throw new TypeError(\'"list" argument must be an Array of Buffers\')}if(list.length===0){return Buffer2.alloc(0)}var i3;if(length===void 0){length=0;for(i3=0;i3<list.length;++i3){length+=list[i3].length}}var buffer=Buffer2.allocUnsafe(length);var pos=0;for(i3=0;i3<list.length;++i3){var buf=list[i3];if(!Buffer2.isBuffer(buf)){throw new TypeError(\'"list" argument must be an Array of Buffers\')}buf.copy(buffer,pos);pos+=buf.length}return buffer};function byteLength(string,encoding){if(Buffer2.isBuffer(string)){return string.length}if(isArrayBufferView(string)||isArrayBuffer(string)){return string.byteLength}if(typeof string!=="string"){string=""+string}var len=string.length;if(len===0)return 0;var loweredCase=false;for(;;){switch(encoding){case"ascii":case"latin1":case"binary":return len;case"utf8":case"utf-8":case void 0:return utf8ToBytes(string).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return len*2;case"hex":return len>>>1;case"base64":return base64ToBytes(string).length;default:if(loweredCase)return utf8ToBytes(string).length;encoding=(""+encoding).toLowerCase();loweredCase=true}}}Buffer2.byteLength=byteLength;function slowToString(encoding,start,end){var loweredCase=false;if(start===void 0||start<0){start=0}if(start>this.length){return""}if(end===void 0||end>this.length){end=this.length}if(end<=0){return""}end>>>=0;start>>>=0;if(end<=start){return""}if(!encoding)encoding="utf8";while(true){switch(encoding){case"hex":return hexSlice(this,start,end);case"utf8":case"utf-8":return utf8Slice(this,start,end);case"ascii":return asciiSlice(this,start,end);case"latin1":case"binary":return latin1Slice(this,start,end);case"base64":return base64Slice(this,start,end);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,start,end);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(encoding+"").toLowerCase();loweredCase=true}}}Buffer2.prototype._isBuffer=true;function swap(b,n,m){var i3=b[n];b[n]=b[m];b[m]=i3}Buffer2.prototype.swap16=function swap16(){var len=this.length;if(len%2!==0){throw new RangeError("Buffer size must be a multiple of 16-bits")}for(var i3=0;i3<len;i3+=2){swap(this,i3,i3+1)}return this};Buffer2.prototype.swap32=function swap32(){var len=this.length;if(len%4!==0){throw new RangeError("Buffer size must be a multiple of 32-bits")}for(var i3=0;i3<len;i3+=4){swap(this,i3,i3+3);swap(this,i3+1,i3+2)}return this};Buffer2.prototype.swap64=function swap64(){var len=this.length;if(len%8!==0){throw new RangeError("Buffer size must be a multiple of 64-bits")}for(var i3=0;i3<len;i3+=8){swap(this,i3,i3+7);swap(this,i3+1,i3+6);swap(this,i3+2,i3+5);swap(this,i3+3,i3+4)}return this};Buffer2.prototype.toString=function toString(){var length=this.length;if(length===0)return"";if(arguments.length===0)return utf8Slice(this,0,length);return slowToString.apply(this,arguments)};Buffer2.prototype.equals=function equals(b){if(!Buffer2.isBuffer(b))throw new TypeError("Argument must be a Buffer");if(this===b)return true;return Buffer2.compare(this,b)===0};Buffer2.prototype.inspect=function inspect(){var str4="";var max=exports2.INSPECT_MAX_BYTES;if(this.length>0){str4=this.toString("hex",0,max).match(/.{2}/g).join(" ");if(this.length>max)str4+=" ... "}return"<Buffer "+str4+">"};Buffer2.prototype.compare=function compare(target,start,end,thisStart,thisEnd){if(!Buffer2.isBuffer(target)){throw new TypeError("Argument must be a Buffer")}if(start===void 0){start=0}if(end===void 0){end=target?target.length:0}if(thisStart===void 0){thisStart=0}if(thisEnd===void 0){thisEnd=this.length}if(start<0||end>target.length||thisStart<0||thisEnd>this.length){throw new RangeError("out of range index")}if(thisStart>=thisEnd&&start>=end){return 0}if(thisStart>=thisEnd){return-1}if(start>=end){return 1}start>>>=0;end>>>=0;thisStart>>>=0;thisEnd>>>=0;if(this===target)return 0;var x3=thisEnd-thisStart;var y4=end-start;var len=Math.min(x3,y4);var thisCopy=this.slice(thisStart,thisEnd);var targetCopy=target.slice(start,end);for(var i3=0;i3<len;++i3){if(thisCopy[i3]!==targetCopy[i3]){x3=thisCopy[i3];y4=targetCopy[i3];break}}if(x3<y4)return-1;if(y4<x3)return 1;return 0};function bidirectionalIndexOf(buffer,val,byteOffset,encoding,dir2){if(buffer.length===0)return-1;if(typeof byteOffset==="string"){encoding=byteOffset;byteOffset=0}else if(byteOffset>2147483647){byteOffset=2147483647}else if(byteOffset<-2147483648){byteOffset=-2147483648}byteOffset=+byteOffset;if(numberIsNaN(byteOffset)){byteOffset=dir2?0:buffer.length-1}if(byteOffset<0)byteOffset=buffer.length+byteOffset;if(byteOffset>=buffer.length){if(dir2)return-1;else byteOffset=buffer.length-1}else if(byteOffset<0){if(dir2)byteOffset=0;else return-1}if(typeof val==="string"){val=Buffer2.from(val,encoding)}if(Buffer2.isBuffer(val)){if(val.length===0){return-1}return arrayIndexOf(buffer,val,byteOffset,encoding,dir2)}else if(typeof val==="number"){val=val&255;if(typeof Uint8Array.prototype.indexOf==="function"){if(dir2){return Uint8Array.prototype.indexOf.call(buffer,val,byteOffset)}else{return Uint8Array.prototype.lastIndexOf.call(buffer,val,byteOffset)}}return arrayIndexOf(buffer,[val],byteOffset,encoding,dir2)}throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(arr,val,byteOffset,encoding,dir2){var indexSize=1;var arrLength=arr.length;var valLength=val.length;if(encoding!==void 0){encoding=String(encoding).toLowerCase();if(encoding==="ucs2"||encoding==="ucs-2"||encoding==="utf16le"||encoding==="utf-16le"){if(arr.length<2||val.length<2){return-1}indexSize=2;arrLength/=2;valLength/=2;byteOffset/=2}}function read(buf,i22){if(indexSize===1){return buf[i22]}else{return buf.readUInt16BE(i22*indexSize)}}var i3;if(dir2){var foundIndex=-1;for(i3=byteOffset;i3<arrLength;i3++){if(read(arr,i3)===read(val,foundIndex===-1?0:i3-foundIndex)){if(foundIndex===-1)foundIndex=i3;if(i3-foundIndex+1===valLength)return foundIndex*indexSize}else{if(foundIndex!==-1)i3-=i3-foundIndex;foundIndex=-1}}}else{if(byteOffset+valLength>arrLength)byteOffset=arrLength-valLength;for(i3=byteOffset;i3>=0;i3--){var found=true;for(var j=0;j<valLength;j++){if(read(arr,i3+j)!==read(val,j)){found=false;break}}if(found)return i3}}return-1}Buffer2.prototype.includes=function includes(val,byteOffset,encoding){return this.indexOf(val,byteOffset,encoding)!==-1};Buffer2.prototype.indexOf=function indexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,true)};Buffer2.prototype.lastIndexOf=function lastIndexOf(val,byteOffset,encoding){return bidirectionalIndexOf(this,val,byteOffset,encoding,false)};function hexWrite(buf,string,offset,length){offset=Number(offset)||0;var remaining=buf.length-offset;if(!length){length=remaining}else{length=Number(length);if(length>remaining){length=remaining}}var strLen=string.length;if(strLen%2!==0)throw new TypeError("Invalid hex string");if(length>strLen/2){length=strLen/2}for(var i3=0;i3<length;++i3){var parsed=parseInt(string.substr(i3*2,2),16);if(numberIsNaN(parsed))return i3;buf[offset+i3]=parsed}return i3}function utf8Write(buf,string,offset,length){return blitBuffer(utf8ToBytes(string,buf.length-offset),buf,offset,length)}function asciiWrite(buf,string,offset,length){return blitBuffer(asciiToBytes(string),buf,offset,length)}function latin1Write(buf,string,offset,length){return asciiWrite(buf,string,offset,length)}function base64Write(buf,string,offset,length){return blitBuffer(base64ToBytes(string),buf,offset,length)}function ucs2Write(buf,string,offset,length){return blitBuffer(utf16leToBytes(string,buf.length-offset),buf,offset,length)}Buffer2.prototype.write=function write(string,offset,length,encoding){if(offset===void 0){encoding="utf8";length=this.length;offset=0}else if(length===void 0&&typeof offset==="string"){encoding=offset;length=this.length;offset=0}else if(isFinite(offset)){offset=offset>>>0;if(isFinite(length)){length=length>>>0;if(encoding===void 0)encoding="utf8"}else{encoding=length;length=void 0}}else{throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported")}var remaining=this.length-offset;if(length===void 0||length>remaining)length=remaining;if(string.length>0&&(length<0||offset<0)||offset>this.length){throw new RangeError("Attempt to write outside buffer bounds")}if(!encoding)encoding="utf8";var loweredCase=false;for(;;){switch(encoding){case"hex":return hexWrite(this,string,offset,length);case"utf8":case"utf-8":return utf8Write(this,string,offset,length);case"ascii":return asciiWrite(this,string,offset,length);case"latin1":case"binary":return latin1Write(this,string,offset,length);case"base64":return base64Write(this,string,offset,length);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,string,offset,length);default:if(loweredCase)throw new TypeError("Unknown encoding: "+encoding);encoding=(""+encoding).toLowerCase();loweredCase=true}}};Buffer2.prototype.toJSON=function toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function base64Slice(buf,start,end){if(start===0&&end===buf.length){return base64.fromByteArray(buf)}else{return base64.fromByteArray(buf.slice(start,end))}}function utf8Slice(buf,start,end){end=Math.min(buf.length,end);var res=[];var i3=start;while(i3<end){var firstByte=buf[i3];var codePoint=null;var bytesPerSequence=firstByte>239?4:firstByte>223?3:firstByte>191?2:1;if(i3+bytesPerSequence<=end){var secondByte,thirdByte,fourthByte,tempCodePoint;switch(bytesPerSequence){case 1:if(firstByte<128){codePoint=firstByte}break;case 2:secondByte=buf[i3+1];if((secondByte&192)===128){tempCodePoint=(firstByte&31)<<6|secondByte&63;if(tempCodePoint>127){codePoint=tempCodePoint}}break;case 3:secondByte=buf[i3+1];thirdByte=buf[i3+2];if((secondByte&192)===128&&(thirdByte&192)===128){tempCodePoint=(firstByte&15)<<12|(secondByte&63)<<6|thirdByte&63;if(tempCodePoint>2047&&(tempCodePoint<55296||tempCodePoint>57343)){codePoint=tempCodePoint}}break;case 4:secondByte=buf[i3+1];thirdByte=buf[i3+2];fourthByte=buf[i3+3];if((secondByte&192)===128&&(thirdByte&192)===128&&(fourthByte&192)===128){tempCodePoint=(firstByte&15)<<18|(secondByte&63)<<12|(thirdByte&63)<<6|fourthByte&63;if(tempCodePoint>65535&&tempCodePoint<1114112){codePoint=tempCodePoint}}}}if(codePoint===null){codePoint=65533;bytesPerSequence=1}else if(codePoint>65535){codePoint-=65536;res.push(codePoint>>>10&1023|55296);codePoint=56320|codePoint&1023}res.push(codePoint);i3+=bytesPerSequence}return decodeCodePointsArray(res)}var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(codePoints){var len=codePoints.length;if(len<=MAX_ARGUMENTS_LENGTH){return String.fromCharCode.apply(String,codePoints)}var res="";var i3=0;while(i3<len){res+=String.fromCharCode.apply(String,codePoints.slice(i3,i3+=MAX_ARGUMENTS_LENGTH))}return res}function asciiSlice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i3=start;i3<end;++i3){ret+=String.fromCharCode(buf[i3]&127)}return ret}function latin1Slice(buf,start,end){var ret="";end=Math.min(buf.length,end);for(var i3=start;i3<end;++i3){ret+=String.fromCharCode(buf[i3])}return ret}function hexSlice(buf,start,end){var len=buf.length;if(!start||start<0)start=0;if(!end||end<0||end>len)end=len;var out="";for(var i3=start;i3<end;++i3){out+=toHex(buf[i3])}return out}function utf16leSlice(buf,start,end){var bytes=buf.slice(start,end);var res="";for(var i3=0;i3<bytes.length;i3+=2){res+=String.fromCharCode(bytes[i3]+bytes[i3+1]*256)}return res}Buffer2.prototype.slice=function slice(start,end){var len=this.length;start=~~start;end=end===void 0?len:~~end;if(start<0){start+=len;if(start<0)start=0}else if(start>len){start=len}if(end<0){end+=len;if(end<0)end=0}else if(end>len){end=len}if(end<start)end=start;var newBuf=this.subarray(start,end);newBuf.__proto__=Buffer2.prototype;return newBuf};function checkOffset(offset,ext,length){if(offset%1!==0||offset<0)throw new RangeError("offset is not uint");if(offset+ext>length)throw new RangeError("Trying to access beyond buffer length")}Buffer2.prototype.readUIntLE=function readUIntLE(offset,byteLength2,noAssert){offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert)checkOffset(offset,byteLength2,this.length);var val=this[offset];var mul=1;var i3=0;while(++i3<byteLength2&&(mul*=256)){val+=this[offset+i3]*mul}return val};Buffer2.prototype.readUIntBE=function readUIntBE(offset,byteLength2,noAssert){offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert){checkOffset(offset,byteLength2,this.length)}var val=this[offset+--byteLength2];var mul=1;while(byteLength2>0&&(mul*=256)){val+=this[offset+--byteLength2]*mul}return val};Buffer2.prototype.readUInt8=function readUInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);return this[offset]};Buffer2.prototype.readUInt16LE=function readUInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]|this[offset+1]<<8};Buffer2.prototype.readUInt16BE=function readUInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);return this[offset]<<8|this[offset+1]};Buffer2.prototype.readUInt32LE=function readUInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return(this[offset]|this[offset+1]<<8|this[offset+2]<<16)+this[offset+3]*16777216};Buffer2.prototype.readUInt32BE=function readUInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]*16777216+(this[offset+1]<<16|this[offset+2]<<8|this[offset+3])};Buffer2.prototype.readIntLE=function readIntLE(offset,byteLength2,noAssert){offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert)checkOffset(offset,byteLength2,this.length);var val=this[offset];var mul=1;var i3=0;while(++i3<byteLength2&&(mul*=256)){val+=this[offset+i3]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength2);return val};Buffer2.prototype.readIntBE=function readIntBE(offset,byteLength2,noAssert){offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert)checkOffset(offset,byteLength2,this.length);var i3=byteLength2;var mul=1;var val=this[offset+--i3];while(i3>0&&(mul*=256)){val+=this[offset+--i3]*mul}mul*=128;if(val>=mul)val-=Math.pow(2,8*byteLength2);return val};Buffer2.prototype.readInt8=function readInt8(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,1,this.length);if(!(this[offset]&128))return this[offset];return(255-this[offset]+1)*-1};Buffer2.prototype.readInt16LE=function readInt16LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset]|this[offset+1]<<8;return val&32768?val|4294901760:val};Buffer2.prototype.readInt16BE=function readInt16BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,2,this.length);var val=this[offset+1]|this[offset]<<8;return val&32768?val|4294901760:val};Buffer2.prototype.readInt32LE=function readInt32LE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]|this[offset+1]<<8|this[offset+2]<<16|this[offset+3]<<24};Buffer2.prototype.readInt32BE=function readInt32BE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return this[offset]<<24|this[offset+1]<<16|this[offset+2]<<8|this[offset+3]};Buffer2.prototype.readFloatLE=function readFloatLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,true,23,4)};Buffer2.prototype.readFloatBE=function readFloatBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,4,this.length);return ieee754.read(this,offset,false,23,4)};Buffer2.prototype.readDoubleLE=function readDoubleLE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,true,52,8)};Buffer2.prototype.readDoubleBE=function readDoubleBE(offset,noAssert){offset=offset>>>0;if(!noAssert)checkOffset(offset,8,this.length);return ieee754.read(this,offset,false,52,8)};function checkInt(buf,value,offset,ext,max,min){if(!Buffer2.isBuffer(buf))throw new TypeError(\'"buffer" argument must be a Buffer instance\');if(value>max||value<min)throw new RangeError(\'"value" argument is out of bounds\');if(offset+ext>buf.length)throw new RangeError("Index out of range")}Buffer2.prototype.writeUIntLE=function writeUIntLE(value,offset,byteLength2,noAssert){value=+value;offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength2)-1;checkInt(this,value,offset,byteLength2,maxBytes,0)}var mul=1;var i3=0;this[offset]=value&255;while(++i3<byteLength2&&(mul*=256)){this[offset+i3]=value/mul&255}return offset+byteLength2};Buffer2.prototype.writeUIntBE=function writeUIntBE(value,offset,byteLength2,noAssert){value=+value;offset=offset>>>0;byteLength2=byteLength2>>>0;if(!noAssert){var maxBytes=Math.pow(2,8*byteLength2)-1;checkInt(this,value,offset,byteLength2,maxBytes,0)}var i3=byteLength2-1;var mul=1;this[offset+i3]=value&255;while(--i3>=0&&(mul*=256)){this[offset+i3]=value/mul&255}return offset+byteLength2};Buffer2.prototype.writeUInt8=function writeUInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,255,0);this[offset]=value&255;return offset+1};Buffer2.prototype.writeUInt16LE=function writeUInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer2.prototype.writeUInt16BE=function writeUInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,65535,0);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer2.prototype.writeUInt32LE=function writeUInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset+3]=value>>>24;this[offset+2]=value>>>16;this[offset+1]=value>>>8;this[offset]=value&255;return offset+4};Buffer2.prototype.writeUInt32BE=function writeUInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,4294967295,0);this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};Buffer2.prototype.writeIntLE=function writeIntLE(value,offset,byteLength2,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength2-1);checkInt(this,value,offset,byteLength2,limit-1,-limit)}var i3=0;var mul=1;var sub=0;this[offset]=value&255;while(++i3<byteLength2&&(mul*=256)){if(value<0&&sub===0&&this[offset+i3-1]!==0){sub=1}this[offset+i3]=(value/mul>>0)-sub&255}return offset+byteLength2};Buffer2.prototype.writeIntBE=function writeIntBE(value,offset,byteLength2,noAssert){value=+value;offset=offset>>>0;if(!noAssert){var limit=Math.pow(2,8*byteLength2-1);checkInt(this,value,offset,byteLength2,limit-1,-limit)}var i3=byteLength2-1;var mul=1;var sub=0;this[offset+i3]=value&255;while(--i3>=0&&(mul*=256)){if(value<0&&sub===0&&this[offset+i3+1]!==0){sub=1}this[offset+i3]=(value/mul>>0)-sub&255}return offset+byteLength2};Buffer2.prototype.writeInt8=function writeInt8(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,1,127,-128);if(value<0)value=255+value+1;this[offset]=value&255;return offset+1};Buffer2.prototype.writeInt16LE=function writeInt16LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value&255;this[offset+1]=value>>>8;return offset+2};Buffer2.prototype.writeInt16BE=function writeInt16BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,2,32767,-32768);this[offset]=value>>>8;this[offset+1]=value&255;return offset+2};Buffer2.prototype.writeInt32LE=function writeInt32LE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);this[offset]=value&255;this[offset+1]=value>>>8;this[offset+2]=value>>>16;this[offset+3]=value>>>24;return offset+4};Buffer2.prototype.writeInt32BE=function writeInt32BE(value,offset,noAssert){value=+value;offset=offset>>>0;if(!noAssert)checkInt(this,value,offset,4,2147483647,-2147483648);if(value<0)value=4294967295+value+1;this[offset]=value>>>24;this[offset+1]=value>>>16;this[offset+2]=value>>>8;this[offset+3]=value&255;return offset+4};function checkIEEE754(buf,value,offset,ext,max,min){if(offset+ext>buf.length)throw new RangeError("Index out of range");if(offset<0)throw new RangeError("Index out of range")}function writeFloat(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,4,34028234663852886e22,-34028234663852886e22)}ieee754.write(buf,value,offset,littleEndian,23,4);return offset+4}Buffer2.prototype.writeFloatLE=function writeFloatLE(value,offset,noAssert){return writeFloat(this,value,offset,true,noAssert)};Buffer2.prototype.writeFloatBE=function writeFloatBE(value,offset,noAssert){return writeFloat(this,value,offset,false,noAssert)};function writeDouble(buf,value,offset,littleEndian,noAssert){value=+value;offset=offset>>>0;if(!noAssert){checkIEEE754(buf,value,offset,8,17976931348623157e292,-17976931348623157e292)}ieee754.write(buf,value,offset,littleEndian,52,8);return offset+8}Buffer2.prototype.writeDoubleLE=function writeDoubleLE(value,offset,noAssert){return writeDouble(this,value,offset,true,noAssert)};Buffer2.prototype.writeDoubleBE=function writeDoubleBE(value,offset,noAssert){return writeDouble(this,value,offset,false,noAssert)};Buffer2.prototype.copy=function copy(target,targetStart,start,end){if(!start)start=0;if(!end&&end!==0)end=this.length;if(targetStart>=target.length)targetStart=target.length;if(!targetStart)targetStart=0;if(end>0&&end<start)end=start;if(end===start)return 0;if(target.length===0||this.length===0)return 0;if(targetStart<0){throw new RangeError("targetStart out of bounds")}if(start<0||start>=this.length)throw new RangeError("sourceStart out of bounds");if(end<0)throw new RangeError("sourceEnd out of bounds");if(end>this.length)end=this.length;if(target.length-targetStart<end-start){end=target.length-targetStart+start}var len=end-start;var i3;if(this===target&&start<targetStart&&targetStart<end){for(i3=len-1;i3>=0;--i3){target[i3+targetStart]=this[i3+start]}}else if(len<1e3){for(i3=0;i3<len;++i3){target[i3+targetStart]=this[i3+start]}}else{Uint8Array.prototype.set.call(target,this.subarray(start,start+len),targetStart)}return len};Buffer2.prototype.fill=function fill(val,start,end,encoding){if(typeof val==="string"){if(typeof start==="string"){encoding=start;start=0;end=this.length}else if(typeof end==="string"){encoding=end;end=this.length}if(val.length===1){var code=val.charCodeAt(0);if(code<256){val=code}}if(encoding!==void 0&&typeof encoding!=="string"){throw new TypeError("encoding must be a string")}if(typeof encoding==="string"&&!Buffer2.isEncoding(encoding)){throw new TypeError("Unknown encoding: "+encoding)}}else if(typeof val==="number"){val=val&255}if(start<0||this.length<start||this.length<end){throw new RangeError("Out of range index")}if(end<=start){return this}start=start>>>0;end=end===void 0?this.length:end>>>0;if(!val)val=0;var i3;if(typeof val==="number"){for(i3=start;i3<end;++i3){this[i3]=val}}else{var bytes=Buffer2.isBuffer(val)?val:new Buffer2(val,encoding);var len=bytes.length;for(i3=0;i3<end-start;++i3){this[i3+start]=bytes[i3%len]}}return this};var INVALID_BASE64_RE=/[^+/0-9A-Za-z-_]/g;function base64clean(str4){str4=str4.trim().replace(INVALID_BASE64_RE,"");if(str4.length<2)return"";while(str4.length%4!==0){str4=str4+"="}return str4}function toHex(n){if(n<16)return"0"+n.toString(16);return n.toString(16)}function utf8ToBytes(string,units){units=units||Infinity;var codePoint;var length=string.length;var leadSurrogate=null;var bytes=[];for(var i3=0;i3<length;++i3){codePoint=string.charCodeAt(i3);if(codePoint>55295&&codePoint<57344){if(!leadSurrogate){if(codePoint>56319){if((units-=3)>-1)bytes.push(239,191,189);continue}else if(i3+1===length){if((units-=3)>-1)bytes.push(239,191,189);continue}leadSurrogate=codePoint;continue}if(codePoint<56320){if((units-=3)>-1)bytes.push(239,191,189);leadSurrogate=codePoint;continue}codePoint=(leadSurrogate-55296<<10|codePoint-56320)+65536}else if(leadSurrogate){if((units-=3)>-1)bytes.push(239,191,189)}leadSurrogate=null;if(codePoint<128){if((units-=1)<0)break;bytes.push(codePoint)}else if(codePoint<2048){if((units-=2)<0)break;bytes.push(codePoint>>6|192,codePoint&63|128)}else if(codePoint<65536){if((units-=3)<0)break;bytes.push(codePoint>>12|224,codePoint>>6&63|128,codePoint&63|128)}else if(codePoint<1114112){if((units-=4)<0)break;bytes.push(codePoint>>18|240,codePoint>>12&63|128,codePoint>>6&63|128,codePoint&63|128)}else{throw new Error("Invalid code point")}}return bytes}function asciiToBytes(str4){var byteArray=[];for(var i3=0;i3<str4.length;++i3){byteArray.push(str4.charCodeAt(i3)&255)}return byteArray}function utf16leToBytes(str4,units){var c,hi,lo;var byteArray=[];for(var i3=0;i3<str4.length;++i3){if((units-=2)<0)break;c=str4.charCodeAt(i3);hi=c>>8;lo=c%256;byteArray.push(lo);byteArray.push(hi)}return byteArray}function base64ToBytes(str4){return base64.toByteArray(base64clean(str4))}function blitBuffer(src,dst,offset,length){for(var i3=0;i3<length;++i3){if(i3+offset>=dst.length||i3>=src.length)break;dst[i3+offset]=src[i3]}return i3}function isArrayBuffer(obj){return obj instanceof ArrayBuffer||obj!=null&&obj.constructor!=null&&obj.constructor.name==="ArrayBuffer"&&typeof obj.byteLength==="number"}function isArrayBufferView(obj){return typeof ArrayBuffer.isView==="function"&&ArrayBuffer.isView(obj)}function numberIsNaN(obj){return obj!==obj}}).call(exports2,__webpack_require__(1))},function(module22,exports2){"use strict";exports2.byteLength=byteLength;exports2.toByteArray=toByteArray;exports2.fromByteArray=fromByteArray;var lookup=[];var revLookup=[];var Arr=typeof Uint8Array!=="undefined"?Uint8Array:Array;var code="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(var i3=0,len=code.length;i3<len;++i3){lookup[i3]=code[i3];revLookup[code.charCodeAt(i3)]=i3}revLookup["-".charCodeAt(0)]=62;revLookup["_".charCodeAt(0)]=63;function placeHoldersCount(b64){var len2=b64.length;if(len2%4>0){throw new Error("Invalid string. Length must be a multiple of 4")}return b64[len2-2]==="="?2:b64[len2-1]==="="?1:0}function byteLength(b64){return b64.length*3/4-placeHoldersCount(b64)}function toByteArray(b64){var i22,j,l,tmp,placeHolders,arr;var len2=b64.length;placeHolders=placeHoldersCount(b64);arr=new Arr(len2*3/4-placeHolders);l=placeHolders>0?len2-4:len2;var L2=0;for(i22=0,j=0;i22<l;i22+=4,j+=3){tmp=revLookup[b64.charCodeAt(i22)]<<18|revLookup[b64.charCodeAt(i22+1)]<<12|revLookup[b64.charCodeAt(i22+2)]<<6|revLookup[b64.charCodeAt(i22+3)];arr[L2++]=tmp>>16&255;arr[L2++]=tmp>>8&255;arr[L2++]=tmp&255}if(placeHolders===2){tmp=revLookup[b64.charCodeAt(i22)]<<2|revLookup[b64.charCodeAt(i22+1)]>>4;arr[L2++]=tmp&255}else if(placeHolders===1){tmp=revLookup[b64.charCodeAt(i22)]<<10|revLookup[b64.charCodeAt(i22+1)]<<4|revLookup[b64.charCodeAt(i22+2)]>>2;arr[L2++]=tmp>>8&255;arr[L2++]=tmp&255}return arr}function tripletToBase64(num){return lookup[num>>18&63]+lookup[num>>12&63]+lookup[num>>6&63]+lookup[num&63]}function encodeChunk(uint8,start,end){var tmp;var output=[];for(var i22=start;i22<end;i22+=3){tmp=(uint8[i22]<<16)+(uint8[i22+1]<<8)+uint8[i22+2];output.push(tripletToBase64(tmp))}return output.join("")}function fromByteArray(uint8){var tmp;var len2=uint8.length;var extraBytes=len2%3;var output="";var parts=[];var maxChunkLength=16383;for(var i22=0,len22=len2-extraBytes;i22<len22;i22+=maxChunkLength){parts.push(encodeChunk(uint8,i22,i22+maxChunkLength>len22?len22:i22+maxChunkLength))}if(extraBytes===1){tmp=uint8[len2-1];output+=lookup[tmp>>2];output+=lookup[tmp<<4&63];output+="=="}else if(extraBytes===2){tmp=(uint8[len2-2]<<8)+uint8[len2-1];output+=lookup[tmp>>10];output+=lookup[tmp>>4&63];output+=lookup[tmp<<2&63];output+="="}parts.push(output);return parts.join("")}},function(module22,exports2){exports2.read=function(buffer,offset,isLE,mLen,nBytes){var e,m;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var nBits=-7;var i3=isLE?nBytes-1:0;var d2=isLE?-1:1;var s=buffer[offset+i3];i3+=d2;e=s&(1<<-nBits)-1;s>>=-nBits;nBits+=eLen;for(;nBits>0;e=e*256+buffer[offset+i3],i3+=d2,nBits-=8){}m=e&(1<<-nBits)-1;e>>=-nBits;nBits+=mLen;for(;nBits>0;m=m*256+buffer[offset+i3],i3+=d2,nBits-=8){}if(e===0){e=1-eBias}else if(e===eMax){return m?NaN:(s?-1:1)*Infinity}else{m=m+Math.pow(2,mLen);e=e-eBias}return(s?-1:1)*m*Math.pow(2,e-mLen)};exports2.write=function(buffer,value,offset,isLE,mLen,nBytes){var e,m,c;var eLen=nBytes*8-mLen-1;var eMax=(1<<eLen)-1;var eBias=eMax>>1;var rt=mLen===23?Math.pow(2,-24)-Math.pow(2,-77):0;var i3=isLE?0:nBytes-1;var d2=isLE?1:-1;var s=value<0||value===0&&1/value<0?1:0;value=Math.abs(value);if(isNaN(value)||value===Infinity){m=isNaN(value)?1:0;e=eMax}else{e=Math.floor(Math.log(value)/Math.LN2);if(value*(c=Math.pow(2,-e))<1){e--;c*=2}if(e+eBias>=1){value+=rt/c}else{value+=rt*Math.pow(2,1-eBias)}if(value*c>=2){e++;c/=2}if(e+eBias>=eMax){m=0;e=eMax}else if(e+eBias>=1){m=(value*c-1)*Math.pow(2,mLen);e=e+eBias}else{m=value*Math.pow(2,eBias-1)*Math.pow(2,mLen);e=0}}for(;mLen>=8;buffer[offset+i3]=m&255,i3+=d2,m/=256,mLen-=8){}e=e<<mLen|m;eLen+=mLen;for(;eLen>0;buffer[offset+i3]=e&255,i3+=d2,e/=256,eLen-=8){}buffer[offset+i3-d2]|=s*128}},function(module22,exports2){module22.exports=function(module3){if(!module3.webpackPolyfill){module3.deprecate=function(){};module3.paths=[];module3.children=[];module3.webpackPolyfill=1}return module3}},function(module22,exports2,__webpack_require__){"use strict";var Process=__webpack_require__(7);var process2=new Process,processProxy={};function defineKey(key2){if(processProxy[key2]){return}if(typeof process2[key2]==="function"){processProxy[key2]=function(){return process2[key2].apply(process2,arguments)}}else{processProxy[key2]=process2[key2]}}for(var key in process2){defineKey(key)}processProxy.initializeTTYs=function(){if(process2.stdin===null){process2.initializeTTYs();processProxy.stdin=process2.stdin;processProxy.stdout=process2.stdout;processProxy.stderr=process2.stderr}};process2.nextTick(function(){processProxy.initializeTTYs()});module22.exports=processProxy},function(module22,exports2,__webpack_require__){(function(__dirname){"use strict";var __extends=this&&this.__extends||function(d2,b){for(var p2 in b)if(b.hasOwnProperty(p2))d2[p2]=b[p2];function __(){this.constructor=d2}d2.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)};var events=__webpack_require__(8);var path=null;var Item=function(){function Item2(fun,array){this.fun=fun;this.array=array}Item2.prototype.run=function(){this.fun.apply(null,this.array)};return Item2}();var NextTickQueue=function(){function NextTickQueue2(){this._queue=[];this._draining=false;this._currentQueue=null;this._queueIndex=-1}NextTickQueue2.prototype.push=function(item){var _this=this;if(this._queue.push(item)===1&&!this._draining){setTimeout(function(){return _this._drainQueue()},0)}};NextTickQueue2.prototype._cleanUpNextTick=function(){this._draining=false;if(this._currentQueue&&this._currentQueue.length){this._queue=this._currentQueue.concat(this._queue)}else{this._queueIndex=-1}if(this._queue.length){this._drainQueue()}};NextTickQueue2.prototype._drainQueue=function(){var _this=this;if(this._draining){return}var timeout=setTimeout(function(){return _this._cleanUpNextTick()});this._draining=true;var len=this._queue.length;while(len){this._currentQueue=this._queue;this._queue=[];while(++this._queueIndex<len){if(this._currentQueue){this._currentQueue[this._queueIndex].run()}}this._queueIndex=-1;len=this._queue.length}this._currentQueue=null;this._draining=false;clearTimeout(timeout)};return NextTickQueue2}();var Process=function(_super){__extends(Process2,_super);function Process2(){_super.apply(this,arguments);this.startTime=Date.now();this._cwd="/";this.platform="browser";this.argv=[];this.execArgv=[];this.stdout=null;this.stderr=null;this.stdin=null;this.domain=null;this._queue=new NextTickQueue;this.execPath=__dirname;this.env={};this.exitCode=0;this._gid=1;this._uid=1;this.version="v5.0";this.versions={http_parser:"0.0",node:"5.0",v8:"0.0",uv:"0.0",zlib:"0.0",ares:"0.0",icu:"0.0",modules:"0",openssl:"0.0"};this.config={target_defaults:{cflags:[],default_configuration:"Release",defines:[],include_dirs:[],libraries:[]},variables:{clang:0,host_arch:"x32",node_install_npm:false,node_install_waf:false,node_prefix:"",node_shared_cares:false,node_shared_http_parser:false,node_shared_libuv:false,node_shared_zlib:false,node_shared_v8:false,node_use_dtrace:false,node_use_etw:false,node_use_openssl:false,node_shared_openssl:false,strict_aliasing:false,target_arch:"x32",v8_use_snapshot:false,v8_no_strict_aliasing:0,visibility:""}};this.pid=Math.random()*1e3|0;this.title="node";this.arch="x32";this._mask=18;this.connected=void 0}Process2.prototype.chdir=function(dir2){if(path===null){path=__webpack_require__(9)}this._cwd=path.resolve(dir2)};Process2.prototype.cwd=function(){return this._cwd};Process2.prototype.uptime=function(){return(Date.now()-this.startTime)/1e3|0};Process2.prototype.nextTick=function(fun){var args=[];for(var _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}this._queue.push(new Item(fun,args))};Process2.prototype.abort=function(){this.emit("abort")};Process2.prototype.exit=function(code){this.exitCode=code;this.emit("exit",[code])};Process2.prototype.getgid=function(){return this._gid};Process2.prototype.setgid=function(gid){if(typeof gid==="number"){this._gid=gid}else{this._gid=1}};Process2.prototype.getuid=function(){return this._uid};Process2.prototype.setuid=function(uid){if(typeof uid==="number"){this._uid=uid}else{this._uid=1}};Process2.prototype.kill=function(pid,signal){this.emit("kill",[pid,signal])};Process2.prototype.memoryUsage=function(){return{rss:0,heapTotal:0,heapUsed:0}};Process2.prototype.umask=function(mask){if(mask===void 0){mask=this._mask}var oldMask=this._mask;this._mask=mask;this.emit("umask",[mask]);return oldMask};Process2.prototype.hrtime=function(){var timeinfo;if(typeof performance!=="undefined"){timeinfo=performance.now()}else if(Date["now"]){timeinfo=Date.now()}else{timeinfo=new Date().getTime()}var secs=timeinfo/1e3|0;timeinfo-=secs*1e3;timeinfo=timeinfo*1e6|0;return[secs,timeinfo]};Process2.prototype.initializeTTYs=function(){if(this.stdout===null){var TTY=__webpack_require__(10);this.stdout=new TTY;this.stderr=new TTY;this.stdin=new TTY}};Process2.prototype.disconnect=function(){};return Process2}(events.EventEmitter);module22.exports=Process}).call(exports2,"/")},function(module22,exports2){function EventEmitter(){this._events=this._events||{};this._maxListeners=this._maxListeners||void 0}module22.exports=EventEmitter;EventEmitter.EventEmitter=EventEmitter;EventEmitter.prototype._events=void 0;EventEmitter.prototype._maxListeners=void 0;EventEmitter.defaultMaxListeners=10;EventEmitter.prototype.setMaxListeners=function(n){if(!isNumber(n)||n<0||isNaN(n))throw TypeError("n must be a positive number");this._maxListeners=n;return this};EventEmitter.prototype.emit=function(type){var er,handler,len,args,i3,listeners;if(!this._events)this._events={};if(type==="error"){if(!this._events.error||isObject(this._events.error)&&!this._events.error.length){er=arguments[1];if(er instanceof Error){throw er}else{var err=new Error(\'Uncaught, unspecified "error" event. (\'+er+")");err.context=er;throw err}}}handler=this._events[type];if(isUndefined(handler))return false;if(isFunction3(handler)){switch(arguments.length){case 1:handler.call(this);break;case 2:handler.call(this,arguments[1]);break;case 3:handler.call(this,arguments[1],arguments[2]);break;default:args=Array.prototype.slice.call(arguments,1);handler.apply(this,args)}}else if(isObject(handler)){args=Array.prototype.slice.call(arguments,1);listeners=handler.slice();len=listeners.length;for(i3=0;i3<len;i3++)listeners[i3].apply(this,args)}return true};EventEmitter.prototype.addListener=function(type,listener){var m;if(!isFunction3(listener))throw TypeError("listener must be a function");if(!this._events)this._events={};if(this._events.newListener)this.emit("newListener",type,isFunction3(listener.listener)?listener.listener:listener);if(!this._events[type])this._events[type]=listener;else if(isObject(this._events[type]))this._events[type].push(listener);else this._events[type]=[this._events[type],listener];if(isObject(this._events[type])&&!this._events[type].warned){if(!isUndefined(this._maxListeners)){m=this._maxListeners}else{m=EventEmitter.defaultMaxListeners}if(m&&m>0&&this._events[type].length>m){this._events[type].warned=true;console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[type].length);if(typeof console.trace==="function"){console.trace()}}}return this};EventEmitter.prototype.on=EventEmitter.prototype.addListener;EventEmitter.prototype.once=function(type,listener){if(!isFunction3(listener))throw TypeError("listener must be a function");var fired=false;function g(){this.removeListener(type,g);if(!fired){fired=true;listener.apply(this,arguments)}}g.listener=listener;this.on(type,g);return this};EventEmitter.prototype.removeListener=function(type,listener){var list,position,length,i3;if(!isFunction3(listener))throw TypeError("listener must be a function");if(!this._events||!this._events[type])return this;list=this._events[type];length=list.length;position=-1;if(list===listener||isFunction3(list.listener)&&list.listener===listener){delete this._events[type];if(this._events.removeListener)this.emit("removeListener",type,listener)}else if(isObject(list)){for(i3=length;i3-- >0;){if(list[i3]===listener||list[i3].listener&&list[i3].listener===listener){position=i3;break}}if(position<0)return this;if(list.length===1){list.length=0;delete this._events[type]}else{list.splice(position,1)}if(this._events.removeListener)this.emit("removeListener",type,listener)}return this};EventEmitter.prototype.removeAllListeners=function(type){var key,listeners;if(!this._events)return this;if(!this._events.removeListener){if(arguments.length===0)this._events={};else if(this._events[type])delete this._events[type];return this}if(arguments.length===0){for(key in this._events){if(key==="removeListener")continue;this.removeAllListeners(key)}this.removeAllListeners("removeListener");this._events={};return this}listeners=this._events[type];if(isFunction3(listeners)){this.removeListener(type,listeners)}else if(listeners){while(listeners.length)this.removeListener(type,listeners[listeners.length-1])}delete this._events[type];return this};EventEmitter.prototype.listeners=function(type){var ret;if(!this._events||!this._events[type])ret=[];else if(isFunction3(this._events[type]))ret=[this._events[type]];else ret=this._events[type].slice();return ret};EventEmitter.prototype.listenerCount=function(type){if(this._events){var evlistener=this._events[type];if(isFunction3(evlistener))return 1;else if(evlistener)return evlistener.length}return 0};EventEmitter.listenerCount=function(emitter,type){return emitter.listenerCount(type)};function isFunction3(arg){return typeof arg==="function"}function isNumber(arg){return typeof arg==="number"}function isObject(arg){return typeof arg==="object"&&arg!==null}function isUndefined(arg){return arg===void 0}},function(module22,exports2,__webpack_require__){(function(process2){"use strict";var splitPathRe=/^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;function posixSplitPath(filename){var out=splitPathRe.exec(filename);out.shift();return out}var path=function(){function path2(){}path2.normalize=function(p2){if(p2===""){p2="."}var absolute=p2.charAt(0)===path2.sep;p2=path2._removeDuplicateSeps(p2);var components=p2.split(path2.sep);var goodComponents=[];for(var idx=0;idx<components.length;idx++){var c=components[idx];if(c==="."){continue}else if(c===".."&&(absolute||!absolute&&goodComponents.length>0&&goodComponents[0]!=="..")){goodComponents.pop()}else{goodComponents.push(c)}}if(!absolute&&goodComponents.length<2){switch(goodComponents.length){case 1:if(goodComponents[0]===""){goodComponents.unshift(".")}break;default:goodComponents.push(".")}}p2=goodComponents.join(path2.sep);if(absolute&&p2.charAt(0)!==path2.sep){p2=path2.sep+p2}return p2};path2.join=function(){var paths=[];for(var _i=0;_i<arguments.length;_i++){paths[_i-0]=arguments[_i]}var processed=[];for(var i3=0;i3<paths.length;i3++){var segment=paths[i3];if(typeof segment!=="string"){throw new TypeError("Invalid argument type to path.join: "+typeof segment)}else if(segment!==""){processed.push(segment)}}return path2.normalize(processed.join(path2.sep))};path2.resolve=function(){var paths=[];for(var _i=0;_i<arguments.length;_i++){paths[_i-0]=arguments[_i]}var processed=[];for(var i3=0;i3<paths.length;i3++){var p2=paths[i3];if(typeof p2!=="string"){throw new TypeError("Invalid argument type to path.join: "+typeof p2)}else if(p2!==""){if(p2.charAt(0)===path2.sep){processed=[]}processed.push(p2)}}var resolved=path2.normalize(processed.join(path2.sep));if(resolved.length>1&&resolved.charAt(resolved.length-1)===path2.sep){return resolved.substr(0,resolved.length-1)}if(resolved.charAt(0)!==path2.sep){if(resolved.charAt(0)==="."&&(resolved.length===1||resolved.charAt(1)===path2.sep)){resolved=resolved.length===1?"":resolved.substr(2)}var cwd=process2.cwd();if(resolved!==""){resolved=this.normalize(cwd+(cwd!=="/"?path2.sep:"")+resolved)}else{resolved=cwd}}return resolved};path2.relative=function(from,to){var i3;from=path2.resolve(from);to=path2.resolve(to);var fromSegs=from.split(path2.sep);var toSegs=to.split(path2.sep);toSegs.shift();fromSegs.shift();var upCount=0;var downSegs=[];for(i3=0;i3<fromSegs.length;i3++){var seg=fromSegs[i3];if(seg===toSegs[i3]){continue}upCount=fromSegs.length-i3;break}downSegs=toSegs.slice(i3);if(fromSegs.length===1&&fromSegs[0]===""){upCount=0}if(upCount>fromSegs.length){upCount=fromSegs.length}var rv="";for(i3=0;i3<upCount;i3++){rv+="../"}rv+=downSegs.join(path2.sep);if(rv.length>1&&rv.charAt(rv.length-1)===path2.sep){rv=rv.substr(0,rv.length-1)}return rv};path2.dirname=function(p2){p2=path2._removeDuplicateSeps(p2);var absolute=p2.charAt(0)===path2.sep;var sections=p2.split(path2.sep);if(sections.pop()===""&&sections.length>0){sections.pop()}if(sections.length>1||sections.length===1&&!absolute){return sections.join(path2.sep)}else if(absolute){return path2.sep}else{return"."}};path2.basename=function(p2,ext){if(ext===void 0){ext=""}if(p2===""){return p2}p2=path2.normalize(p2);var sections=p2.split(path2.sep);var lastPart=sections[sections.length-1];if(lastPart===""&&sections.length>1){return sections[sections.length-2]}if(ext.length>0){var lastPartExt=lastPart.substr(lastPart.length-ext.length);if(lastPartExt===ext){return lastPart.substr(0,lastPart.length-ext.length)}}return lastPart};path2.extname=function(p2){p2=path2.normalize(p2);var sections=p2.split(path2.sep);p2=sections.pop();if(p2===""&&sections.length>0){p2=sections.pop()}if(p2===".."){return""}var i3=p2.lastIndexOf(".");if(i3===-1||i3===0){return""}return p2.substr(i3)};path2.isAbsolute=function(p2){return p2.length>0&&p2.charAt(0)===path2.sep};path2._makeLong=function(p2){return p2};path2.parse=function(p2){var allParts=posixSplitPath(p2);return{root:allParts[0],dir:allParts[0]+allParts[1].slice(0,-1),base:allParts[2],ext:allParts[3],name:allParts[2].slice(0,allParts[2].length-allParts[3].length)}};path2.format=function(pathObject){if(pathObject===null||typeof pathObject!=="object"){throw new TypeError("Parameter \'pathObject\' must be an object, not "+typeof pathObject)}var root=pathObject.root||"";if(typeof root!=="string"){throw new TypeError("\'pathObject.root\' must be a string or undefined, not "+typeof pathObject.root)}var dir2=pathObject.dir?pathObject.dir+path2.sep:"";var base=pathObject.base||"";return dir2+base};path2._removeDuplicateSeps=function(p2){p2=p2.replace(this._replaceRegex,this.sep);return p2};path2.sep="/";path2._replaceRegex=new RegExp("//+","g");path2.delimiter=":";path2.posix=path2;path2.win32=path2;return path2}();var _=path;module22.exports=path}).call(exports2,__webpack_require__(6))},function(module22,exports2,__webpack_require__){(function(Buffer2){"use strict";var __extends=this&&this.__extends||function(d2,b){for(var p2 in b)if(b.hasOwnProperty(p2))d2[p2]=b[p2];function __(){this.constructor=d2}d2.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new __)};var stream=__webpack_require__(11);var TTY=function(_super){__extends(TTY2,_super);function TTY2(){_super.call(this);this.isRaw=false;this.columns=80;this.rows=120;this.isTTY=true;this._bufferedWrites=[];this._waitingForWrites=false}TTY2.prototype.setRawMode=function(mode){if(this.isRaw!==mode){this.isRaw=mode;this.emit("modeChange")}};TTY2.prototype.changeColumns=function(columns){if(columns!==this.columns){this.columns=columns;this.emit("resize")}};TTY2.prototype.changeRows=function(rows){if(rows!==this.rows){this.rows=rows;this.emit("resize")}};TTY2.isatty=function(fd){return fd&&fd instanceof TTY2};TTY2.prototype._write=function(chunk,encoding,cb){var error;try{var data;if(typeof chunk==="string"){data=new Buffer2(chunk,encoding)}else{data=chunk}this._bufferedWrites.push(data);if(this._waitingForWrites){this._read(1024)}}catch(e){error=e}finally{cb(error)}};TTY2.prototype._read=function(size){if(this._bufferedWrites.length===0){this._waitingForWrites=true}else{while(this._bufferedWrites.length>0){this._waitingForWrites=this.push(this._bufferedWrites.shift());if(!this._waitingForWrites){break}}}};return TTY2}(stream.Duplex);module22.exports=TTY}).call(exports2,__webpack_require__(1))},function(module22,exports2,__webpack_require__){module22.exports=Stream;var EE=__webpack_require__(8).EventEmitter;var inherits=__webpack_require__(12);inherits(Stream,EE);Stream.Readable=__webpack_require__(13);Stream.Writable=__webpack_require__(27);Stream.Duplex=__webpack_require__(28);Stream.Transform=__webpack_require__(29);Stream.PassThrough=__webpack_require__(30);Stream.Stream=Stream;function Stream(){EE.call(this)}Stream.prototype.pipe=function(dest,options){var source=this;function ondata(chunk){if(dest.writable){if(false===dest.write(chunk)&&source.pause){source.pause()}}}source.on("data",ondata);function ondrain(){if(source.readable&&source.resume){source.resume()}}dest.on("drain",ondrain);if(!dest._isStdio&&(!options||options.end!==false)){source.on("end",onend);source.on("close",onclose)}var didOnEnd=false;function onend(){if(didOnEnd)return;didOnEnd=true;dest.end()}function onclose(){if(didOnEnd)return;didOnEnd=true;if(typeof dest.destroy==="function")dest.destroy()}function onerror(er){cleanup();if(EE.listenerCount(this,"error")===0){throw er}}source.on("error",onerror);dest.on("error",onerror);function cleanup(){source.removeListener("data",ondata);dest.removeListener("drain",ondrain);source.removeListener("end",onend);source.removeListener("close",onclose);source.removeListener("error",onerror);dest.removeListener("error",onerror);source.removeListener("end",cleanup);source.removeListener("close",cleanup);dest.removeListener("close",cleanup)}source.on("end",cleanup);source.on("close",cleanup);dest.on("close",cleanup);dest.emit("pipe",source);return dest}},function(module22,exports2){if(typeof Object.create==="function"){module22.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}})}}else{module22.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor;ctor.prototype.constructor=ctor}}},function(module22,exports2,__webpack_require__){(function(process2){var Stream=function(){try{return __webpack_require__(11)}catch(_){}}();exports2=module22.exports=__webpack_require__(14);exports2.Stream=Stream||exports2;exports2.Readable=exports2;exports2.Writable=__webpack_require__(22);exports2.Duplex=__webpack_require__(21);exports2.Transform=__webpack_require__(25);exports2.PassThrough=__webpack_require__(26);if(!process2.browser&&process2.env.READABLE_STREAM==="disable"&&Stream){module22.exports=Stream}}).call(exports2,__webpack_require__(6))},function(module22,exports2,__webpack_require__){(function(process2){"use strict";module22.exports=Readable;var processNextTick=__webpack_require__(15);var isArray=__webpack_require__(16);var Duplex;Readable.ReadableState=ReadableState;var EE=__webpack_require__(8).EventEmitter;var EElistenerCount=function(emitter,type){return emitter.listeners(type).length};var Stream;(function(){try{Stream=__webpack_require__(11)}catch(_){}finally{if(!Stream)Stream=__webpack_require__(8).EventEmitter}})();var Buffer2=__webpack_require__(2).Buffer;var bufferShim=__webpack_require__(17);var util=__webpack_require__(18);util.inherits=__webpack_require__(12);var debugUtil=__webpack_require__(19);var debug=void 0;if(debugUtil&&debugUtil.debuglog){debug=debugUtil.debuglog("stream")}else{debug=function(){}}var BufferList=__webpack_require__(20);var StringDecoder;util.inherits(Readable,Stream);function prependListener(emitter,event,fn){if(typeof emitter.prependListener==="function"){return emitter.prependListener(event,fn)}else{if(!emitter._events||!emitter._events[event])emitter.on(event,fn);else if(isArray(emitter._events[event]))emitter._events[event].unshift(fn);else emitter._events[event]=[fn,emitter._events[event]]}}function ReadableState(options,stream){Duplex=Duplex||__webpack_require__(21);options=options||{};this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.readableObjectMode;var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;this.highWaterMark=~~this.highWaterMark;this.buffer=new BufferList;this.length=0;this.pipes=null;this.pipesCount=0;this.flowing=null;this.ended=false;this.endEmitted=false;this.reading=false;this.sync=true;this.needReadable=false;this.emittedReadable=false;this.readableListening=false;this.resumeScheduled=false;this.defaultEncoding=options.defaultEncoding||"utf8";this.ranOut=false;this.awaitDrain=0;this.readingMore=false;this.decoder=null;this.encoding=null;if(options.encoding){if(!StringDecoder)StringDecoder=__webpack_require__(24).StringDecoder;this.decoder=new StringDecoder(options.encoding);this.encoding=options.encoding}}function Readable(options){Duplex=Duplex||__webpack_require__(21);if(!(this instanceof Readable))return new Readable(options);this._readableState=new ReadableState(options,this);this.readable=true;if(options&&typeof options.read==="function")this._read=options.read;Stream.call(this)}Readable.prototype.push=function(chunk,encoding){var state4=this._readableState;if(!state4.objectMode&&typeof chunk==="string"){encoding=encoding||state4.defaultEncoding;if(encoding!==state4.encoding){chunk=bufferShim.from(chunk,encoding);encoding=""}}return readableAddChunk(this,state4,chunk,encoding,false)};Readable.prototype.unshift=function(chunk){var state4=this._readableState;return readableAddChunk(this,state4,chunk,"",true)};Readable.prototype.isPaused=function(){return this._readableState.flowing===false};function readableAddChunk(stream,state4,chunk,encoding,addToFront){var er=chunkInvalid(state4,chunk);if(er){stream.emit("error",er)}else if(chunk===null){state4.reading=false;onEofChunk(stream,state4)}else if(state4.objectMode||chunk&&chunk.length>0){if(state4.ended&&!addToFront){var e=new Error("stream.push() after EOF");stream.emit("error",e)}else if(state4.endEmitted&&addToFront){var _e=new Error("stream.unshift() after end event");stream.emit("error",_e)}else{var skipAdd;if(state4.decoder&&!addToFront&&!encoding){chunk=state4.decoder.write(chunk);skipAdd=!state4.objectMode&&chunk.length===0}if(!addToFront)state4.reading=false;if(!skipAdd){if(state4.flowing&&state4.length===0&&!state4.sync){stream.emit("data",chunk);stream.read(0)}else{state4.length+=state4.objectMode?1:chunk.length;if(addToFront)state4.buffer.unshift(chunk);else state4.buffer.push(chunk);if(state4.needReadable)emitReadable(stream)}}maybeReadMore(stream,state4)}}else if(!addToFront){state4.reading=false}return needMoreData(state4)}function needMoreData(state4){return!state4.ended&&(state4.needReadable||state4.length<state4.highWaterMark||state4.length===0)}Readable.prototype.setEncoding=function(enc){if(!StringDecoder)StringDecoder=__webpack_require__(24).StringDecoder;this._readableState.decoder=new StringDecoder(enc);this._readableState.encoding=enc;return this};var MAX_HWM=8388608;function computeNewHighWaterMark(n){if(n>=MAX_HWM){n=MAX_HWM}else{n--;n|=n>>>1;n|=n>>>2;n|=n>>>4;n|=n>>>8;n|=n>>>16;n++}return n}function howMuchToRead(n,state4){if(n<=0||state4.length===0&&state4.ended)return 0;if(state4.objectMode)return 1;if(n!==n){if(state4.flowing&&state4.length)return state4.buffer.head.data.length;else return state4.length}if(n>state4.highWaterMark)state4.highWaterMark=computeNewHighWaterMark(n);if(n<=state4.length)return n;if(!state4.ended){state4.needReadable=true;return 0}return state4.length}Readable.prototype.read=function(n){debug("read",n);n=parseInt(n,10);var state4=this._readableState;var nOrig=n;if(n!==0)state4.emittedReadable=false;if(n===0&&state4.needReadable&&(state4.length>=state4.highWaterMark||state4.ended)){debug("read: emitReadable",state4.length,state4.ended);if(state4.length===0&&state4.ended)endReadable(this);else emitReadable(this);return null}n=howMuchToRead(n,state4);if(n===0&&state4.ended){if(state4.length===0)endReadable(this);return null}var doRead=state4.needReadable;debug("need readable",doRead);if(state4.length===0||state4.length-n<state4.highWaterMark){doRead=true;debug("length less than watermark",doRead)}if(state4.ended||state4.reading){doRead=false;debug("reading or ended",doRead)}else if(doRead){debug("do read");state4.reading=true;state4.sync=true;if(state4.length===0)state4.needReadable=true;this._read(state4.highWaterMark);state4.sync=false;if(!state4.reading)n=howMuchToRead(nOrig,state4)}var ret;if(n>0)ret=fromList(n,state4);else ret=null;if(ret===null){state4.needReadable=true;n=0}else{state4.length-=n}if(state4.length===0){if(!state4.ended)state4.needReadable=true;if(nOrig!==n&&state4.ended)endReadable(this)}if(ret!==null)this.emit("data",ret);return ret};function chunkInvalid(state4,chunk){var er=null;if(!Buffer2.isBuffer(chunk)&&typeof chunk!=="string"&&chunk!==null&&chunk!==void 0&&!state4.objectMode){er=new TypeError("Invalid non-string/buffer chunk")}return er}function onEofChunk(stream,state4){if(state4.ended)return;if(state4.decoder){var chunk=state4.decoder.end();if(chunk&&chunk.length){state4.buffer.push(chunk);state4.length+=state4.objectMode?1:chunk.length}}state4.ended=true;emitReadable(stream)}function emitReadable(stream){var state4=stream._readableState;state4.needReadable=false;if(!state4.emittedReadable){debug("emitReadable",state4.flowing);state4.emittedReadable=true;if(state4.sync)processNextTick(emitReadable_,stream);else emitReadable_(stream)}}function emitReadable_(stream){debug("emit readable");stream.emit("readable");flow(stream)}function maybeReadMore(stream,state4){if(!state4.readingMore){state4.readingMore=true;processNextTick(maybeReadMore_,stream,state4)}}function maybeReadMore_(stream,state4){var len=state4.length;while(!state4.reading&&!state4.flowing&&!state4.ended&&state4.length<state4.highWaterMark){debug("maybeReadMore read 0");stream.read(0);if(len===state4.length)break;else len=state4.length}state4.readingMore=false}Readable.prototype._read=function(n){this.emit("error",new Error("_read() is not implemented"))};Readable.prototype.pipe=function(dest,pipeOpts){var src=this;var state4=this._readableState;switch(state4.pipesCount){case 0:state4.pipes=dest;break;case 1:state4.pipes=[state4.pipes,dest];break;default:state4.pipes.push(dest);break}state4.pipesCount+=1;debug("pipe count=%d opts=%j",state4.pipesCount,pipeOpts);var doEnd=(!pipeOpts||pipeOpts.end!==false)&&dest!==process2.stdout&&dest!==process2.stderr;var endFn=doEnd?onend:cleanup;if(state4.endEmitted)processNextTick(endFn);else src.once("end",endFn);dest.on("unpipe",onunpipe);function onunpipe(readable){debug("onunpipe");if(readable===src){cleanup()}}function onend(){debug("onend");dest.end()}var ondrain=pipeOnDrain(src);dest.on("drain",ondrain);var cleanedUp=false;function cleanup(){debug("cleanup");dest.removeListener("close",onclose);dest.removeListener("finish",onfinish);dest.removeListener("drain",ondrain);dest.removeListener("error",onerror);dest.removeListener("unpipe",onunpipe);src.removeListener("end",onend);src.removeListener("end",cleanup);src.removeListener("data",ondata);cleanedUp=true;if(state4.awaitDrain&&(!dest._writableState||dest._writableState.needDrain))ondrain()}var increasedAwaitDrain=false;src.on("data",ondata);function ondata(chunk){debug("ondata");increasedAwaitDrain=false;var ret=dest.write(chunk);if(false===ret&&!increasedAwaitDrain){if((state4.pipesCount===1&&state4.pipes===dest||state4.pipesCount>1&&indexOf(state4.pipes,dest)!==-1)&&!cleanedUp){debug("false write response, pause",src._readableState.awaitDrain);src._readableState.awaitDrain++;increasedAwaitDrain=true}src.pause()}}function onerror(er){debug("onerror",er);unpipe();dest.removeListener("error",onerror);if(EElistenerCount(dest,"error")===0)dest.emit("error",er)}prependListener(dest,"error",onerror);function onclose(){dest.removeListener("finish",onfinish);unpipe()}dest.once("close",onclose);function onfinish(){debug("onfinish");dest.removeListener("close",onclose);unpipe()}dest.once("finish",onfinish);function unpipe(){debug("unpipe");src.unpipe(dest)}dest.emit("pipe",src);if(!state4.flowing){debug("pipe resume");src.resume()}return dest};function pipeOnDrain(src){return function(){var state4=src._readableState;debug("pipeOnDrain",state4.awaitDrain);if(state4.awaitDrain)state4.awaitDrain--;if(state4.awaitDrain===0&&EElistenerCount(src,"data")){state4.flowing=true;flow(src)}}}Readable.prototype.unpipe=function(dest){var state4=this._readableState;if(state4.pipesCount===0)return this;if(state4.pipesCount===1){if(dest&&dest!==state4.pipes)return this;if(!dest)dest=state4.pipes;state4.pipes=null;state4.pipesCount=0;state4.flowing=false;if(dest)dest.emit("unpipe",this);return this}if(!dest){var dests=state4.pipes;var len=state4.pipesCount;state4.pipes=null;state4.pipesCount=0;state4.flowing=false;for(var i3=0;i3<len;i3++){dests[i3].emit("unpipe",this)}return this}var index=indexOf(state4.pipes,dest);if(index===-1)return this;state4.pipes.splice(index,1);state4.pipesCount-=1;if(state4.pipesCount===1)state4.pipes=state4.pipes[0];dest.emit("unpipe",this);return this};Readable.prototype.on=function(ev2,fn){var res=Stream.prototype.on.call(this,ev2,fn);if(ev2==="data"){if(this._readableState.flowing!==false)this.resume()}else if(ev2==="readable"){var state4=this._readableState;if(!state4.endEmitted&&!state4.readableListening){state4.readableListening=state4.needReadable=true;state4.emittedReadable=false;if(!state4.reading){processNextTick(nReadingNextTick,this)}else if(state4.length){emitReadable(this,state4)}}}return res};Readable.prototype.addListener=Readable.prototype.on;function nReadingNextTick(self2){debug("readable nexttick read 0");self2.read(0)}Readable.prototype.resume=function(){var state4=this._readableState;if(!state4.flowing){debug("resume");state4.flowing=true;resume(this,state4)}return this};function resume(stream,state4){if(!state4.resumeScheduled){state4.resumeScheduled=true;processNextTick(resume_,stream,state4)}}function resume_(stream,state4){if(!state4.reading){debug("resume read 0");stream.read(0)}state4.resumeScheduled=false;state4.awaitDrain=0;stream.emit("resume");flow(stream);if(state4.flowing&&!state4.reading)stream.read(0)}Readable.prototype.pause=function(){debug("call pause flowing=%j",this._readableState.flowing);if(false!==this._readableState.flowing){debug("pause");this._readableState.flowing=false;this.emit("pause")}return this};function flow(stream){var state4=stream._readableState;debug("flow",state4.flowing);while(state4.flowing&&stream.read()!==null){}}Readable.prototype.wrap=function(stream){var state4=this._readableState;var paused=false;var self2=this;stream.on("end",function(){debug("wrapped end");if(state4.decoder&&!state4.ended){var chunk=state4.decoder.end();if(chunk&&chunk.length)self2.push(chunk)}self2.push(null)});stream.on("data",function(chunk){debug("wrapped data");if(state4.decoder)chunk=state4.decoder.write(chunk);if(state4.objectMode&&(chunk===null||chunk===void 0))return;else if(!state4.objectMode&&(!chunk||!chunk.length))return;var ret=self2.push(chunk);if(!ret){paused=true;stream.pause()}});for(var i3 in stream){if(this[i3]===void 0&&typeof stream[i3]==="function"){this[i3]=function(method){return function(){return stream[method].apply(stream,arguments)}}(i3)}}var events=["error","close","destroy","pause","resume"];forEach(events,function(ev2){stream.on(ev2,self2.emit.bind(self2,ev2))});self2._read=function(n){debug("wrapped _read",n);if(paused){paused=false;stream.resume()}};return self2};Readable._fromList=fromList;function fromList(n,state4){if(state4.length===0)return null;var ret;if(state4.objectMode)ret=state4.buffer.shift();else if(!n||n>=state4.length){if(state4.decoder)ret=state4.buffer.join("");else if(state4.buffer.length===1)ret=state4.buffer.head.data;else ret=state4.buffer.concat(state4.length);state4.buffer.clear()}else{ret=fromListPartial(n,state4.buffer,state4.decoder)}return ret}function fromListPartial(n,list,hasStrings){var ret;if(n<list.head.data.length){ret=list.head.data.slice(0,n);list.head.data=list.head.data.slice(n)}else if(n===list.head.data.length){ret=list.shift()}else{ret=hasStrings?copyFromBufferString(n,list):copyFromBuffer(n,list)}return ret}function copyFromBufferString(n,list){var p2=list.head;var c=1;var ret=p2.data;n-=ret.length;while(p2=p2.next){var str4=p2.data;var nb=n>str4.length?str4.length:n;if(nb===str4.length)ret+=str4;else ret+=str4.slice(0,n);n-=nb;if(n===0){if(nb===str4.length){++c;if(p2.next)list.head=p2.next;else list.head=list.tail=null}else{list.head=p2;p2.data=str4.slice(nb)}break}++c}list.length-=c;return ret}function copyFromBuffer(n,list){var ret=bufferShim.allocUnsafe(n);var p2=list.head;var c=1;p2.data.copy(ret);n-=p2.data.length;while(p2=p2.next){var buf=p2.data;var nb=n>buf.length?buf.length:n;buf.copy(ret,ret.length-n,0,nb);n-=nb;if(n===0){if(nb===buf.length){++c;if(p2.next)list.head=p2.next;else list.head=list.tail=null}else{list.head=p2;p2.data=buf.slice(nb)}break}++c}list.length-=c;return ret}function endReadable(stream){var state4=stream._readableState;if(state4.length>0)throw new Error(\'"endReadable()" called on non-empty stream\');if(!state4.endEmitted){state4.ended=true;processNextTick(endReadableNT,state4,stream)}}function endReadableNT(state4,stream){if(!state4.endEmitted&&state4.length===0){state4.endEmitted=true;stream.readable=false;stream.emit("end")}}function forEach(xs,f){for(var i3=0,l=xs.length;i3<l;i3++){f(xs[i3],i3)}}function indexOf(xs,x3){for(var i3=0,l=xs.length;i3<l;i3++){if(xs[i3]===x3)return i3}return-1}}).call(exports2,__webpack_require__(6))},function(module22,exports2,__webpack_require__){(function(process2){"use strict";if(!process2.version||process2.version.indexOf("v0.")===0||process2.version.indexOf("v1.")===0&&process2.version.indexOf("v1.8.")!==0){module22.exports=nextTick}else{module22.exports=process2.nextTick}function nextTick(fn,arg1,arg2,arg3){if(typeof fn!=="function"){throw new TypeError(\'"callback" argument must be a function\')}var len=arguments.length;var args,i3;switch(len){case 0:case 1:return process2.nextTick(fn);case 2:return process2.nextTick(function afterTickOne(){fn.call(null,arg1)});case 3:return process2.nextTick(function afterTickTwo(){fn.call(null,arg1,arg2)});case 4:return process2.nextTick(function afterTickThree(){fn.call(null,arg1,arg2,arg3)});default:args=new Array(len-1);i3=0;while(i3<args.length){args[i3++]=arguments[i3]}return process2.nextTick(function afterTick(){fn.apply(null,args)})}}}).call(exports2,__webpack_require__(6))},function(module22,exports2){var toString={}.toString;module22.exports=Array.isArray||function(arr){return toString.call(arr)=="[object Array]"}},function(module22,exports2,__webpack_require__){(function(global2){"use strict";var buffer=__webpack_require__(2);var Buffer2=buffer.Buffer;var SlowBuffer=buffer.SlowBuffer;var MAX_LEN=buffer.kMaxLength||2147483647;exports2.alloc=function alloc(size,fill,encoding){if(typeof Buffer2.alloc==="function"){return Buffer2.alloc(size,fill,encoding)}if(typeof encoding==="number"){throw new TypeError("encoding must not be number")}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>MAX_LEN){throw new RangeError("size is too large")}var enc=encoding;var _fill=fill;if(_fill===void 0){enc=void 0;_fill=0}var buf=new Buffer2(size);if(typeof _fill==="string"){var fillBuf=new Buffer2(_fill,enc);var flen=fillBuf.length;var i3=-1;while(++i3<size){buf[i3]=fillBuf[i3%flen]}}else{buf.fill(_fill)}return buf};exports2.allocUnsafe=function allocUnsafe(size){if(typeof Buffer2.allocUnsafe==="function"){return Buffer2.allocUnsafe(size)}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>MAX_LEN){throw new RangeError("size is too large")}return new Buffer2(size)};exports2.from=function from(value,encodingOrOffset,length){if(typeof Buffer2.from==="function"&&(!global2.Uint8Array||Uint8Array.from!==Buffer2.from)){return Buffer2.from(value,encodingOrOffset,length)}if(typeof value==="number"){throw new TypeError(\'"value" argument must not be a number\')}if(typeof value==="string"){return new Buffer2(value,encodingOrOffset)}if(typeof ArrayBuffer!=="undefined"&&value instanceof ArrayBuffer){var offset=encodingOrOffset;if(arguments.length===1){return new Buffer2(value)}if(typeof offset==="undefined"){offset=0}var len=length;if(typeof len==="undefined"){len=value.byteLength-offset}if(offset>=value.byteLength){throw new RangeError("\'offset\' is out of bounds")}if(len>value.byteLength-offset){throw new RangeError("\'length\' is out of bounds")}return new Buffer2(value.slice(offset,offset+len))}if(Buffer2.isBuffer(value)){var out=new Buffer2(value.length);value.copy(out,0,0,value.length);return out}if(value){if(Array.isArray(value)||typeof ArrayBuffer!=="undefined"&&value.buffer instanceof ArrayBuffer||"length"in value){return new Buffer2(value)}if(value.type==="Buffer"&&Array.isArray(value.data)){return new Buffer2(value.data)}}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")};exports2.allocUnsafeSlow=function allocUnsafeSlow(size){if(typeof Buffer2.allocUnsafeSlow==="function"){return Buffer2.allocUnsafeSlow(size)}if(typeof size!=="number"){throw new TypeError("size must be a number")}if(size>=MAX_LEN){throw new RangeError("size is too large")}return new SlowBuffer(size)}}).call(exports2,function(){return this}())},function(module22,exports2,__webpack_require__){(function(Buffer2){function isArray(arg){if(Array.isArray){return Array.isArray(arg)}return objectToString(arg)==="[object Array]"}exports2.isArray=isArray;function isBoolean(arg){return typeof arg==="boolean"}exports2.isBoolean=isBoolean;function isNull(arg){return arg===null}exports2.isNull=isNull;function isNullOrUndefined(arg){return arg==null}exports2.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==="number"}exports2.isNumber=isNumber;function isString(arg){return typeof arg==="string"}exports2.isString=isString;function isSymbol(arg){return typeof arg==="symbol"}exports2.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0}exports2.isUndefined=isUndefined;function isRegExp(re){return objectToString(re)==="[object RegExp]"}exports2.isRegExp=isRegExp;function isObject(arg){return typeof arg==="object"&&arg!==null}exports2.isObject=isObject;function isDate(d2){return objectToString(d2)==="[object Date]"}exports2.isDate=isDate;function isError(e){return objectToString(e)==="[object Error]"||e instanceof Error}exports2.isError=isError;function isFunction3(arg){return typeof arg==="function"}exports2.isFunction=isFunction3;function isPrimitive(arg){return arg===null||typeof arg==="boolean"||typeof arg==="number"||typeof arg==="string"||typeof arg==="symbol"||typeof arg==="undefined"}exports2.isPrimitive=isPrimitive;exports2.isBuffer=Buffer2.isBuffer;function objectToString(o){return Object.prototype.toString.call(o)}}).call(exports2,__webpack_require__(1))},function(module22,exports2){},function(module22,exports2,__webpack_require__){"use strict";var Buffer2=__webpack_require__(2).Buffer;var bufferShim=__webpack_require__(17);module22.exports=BufferList;function BufferList(){this.head=null;this.tail=null;this.length=0}BufferList.prototype.push=function(v2){var entry={data:v2,next:null};if(this.length>0)this.tail.next=entry;else this.head=entry;this.tail=entry;++this.length};BufferList.prototype.unshift=function(v2){var entry={data:v2,next:this.head};if(this.length===0)this.tail=entry;this.head=entry;++this.length};BufferList.prototype.shift=function(){if(this.length===0)return;var ret=this.head.data;if(this.length===1)this.head=this.tail=null;else this.head=this.head.next;--this.length;return ret};BufferList.prototype.clear=function(){this.head=this.tail=null;this.length=0};BufferList.prototype.join=function(s){if(this.length===0)return"";var p2=this.head;var ret=""+p2.data;while(p2=p2.next){ret+=s+p2.data}return ret};BufferList.prototype.concat=function(n){if(this.length===0)return bufferShim.alloc(0);if(this.length===1)return this.head.data;var ret=bufferShim.allocUnsafe(n>>>0);var p2=this.head;var i3=0;while(p2){p2.data.copy(ret,i3);i3+=p2.data.length;p2=p2.next}return ret}},function(module22,exports2,__webpack_require__){"use strict";var objectKeys=Object.keys||function(obj){var keys22=[];for(var key in obj){keys22.push(key)}return keys22};module22.exports=Duplex;var processNextTick=__webpack_require__(15);var util=__webpack_require__(18);util.inherits=__webpack_require__(12);var Readable=__webpack_require__(14);var Writable=__webpack_require__(22);util.inherits(Duplex,Readable);var keys3=objectKeys(Writable.prototype);for(var v2=0;v2<keys3.length;v2++){var method=keys3[v2];if(!Duplex.prototype[method])Duplex.prototype[method]=Writable.prototype[method]}function Duplex(options){if(!(this instanceof Duplex))return new Duplex(options);Readable.call(this,options);Writable.call(this,options);if(options&&options.readable===false)this.readable=false;if(options&&options.writable===false)this.writable=false;this.allowHalfOpen=true;if(options&&options.allowHalfOpen===false)this.allowHalfOpen=false;this.once("end",onend)}function onend(){if(this.allowHalfOpen||this._writableState.ended)return;processNextTick(onEndNT,this)}function onEndNT(self2){self2.end()}function forEach(xs,f){for(var i3=0,l=xs.length;i3<l;i3++){f(xs[i3],i3)}}},function(module22,exports2,__webpack_require__){(function(process2){"use strict";module22.exports=Writable;var processNextTick=__webpack_require__(15);var asyncWrite=!process2.browser&&["v0.10","v0.9."].indexOf(process2.version.slice(0,5))>-1?setImmediate:processNextTick;var Duplex;Writable.WritableState=WritableState;var util=__webpack_require__(18);util.inherits=__webpack_require__(12);var internalUtil={deprecate:__webpack_require__(23)};var Stream;(function(){try{Stream=__webpack_require__(11)}catch(_){}finally{if(!Stream)Stream=__webpack_require__(8).EventEmitter}})();var Buffer2=__webpack_require__(2).Buffer;var bufferShim=__webpack_require__(17);util.inherits(Writable,Stream);function nop(){}function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null}function WritableState(options,stream){Duplex=Duplex||__webpack_require__(21);options=options||{};this.objectMode=!!options.objectMode;if(stream instanceof Duplex)this.objectMode=this.objectMode||!!options.writableObjectMode;var hwm=options.highWaterMark;var defaultHwm=this.objectMode?16:16*1024;this.highWaterMark=hwm||hwm===0?hwm:defaultHwm;this.highWaterMark=~~this.highWaterMark;this.needDrain=false;this.ending=false;this.ended=false;this.finished=false;var noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;this.defaultEncoding=options.defaultEncoding||"utf8";this.length=0;this.writing=false;this.corked=0;this.sync=true;this.bufferProcessing=false;this.onwrite=function(er){onwrite(stream,er)};this.writecb=null;this.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;this.pendingcb=0;this.prefinished=false;this.errorEmitted=false;this.bufferedRequestCount=0;this.corkedRequestsFree=new CorkedRequest(this)}WritableState.prototype.getBuffer=function getBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next}return out};(function(){try{Object.defineProperty(WritableState.prototype,"buffer",{get:internalUtil.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")})}catch(_){}})();var realHasInstance;if(typeof Symbol==="function"&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]==="function"){realHasInstance=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function(object){if(realHasInstance.call(this,object))return true;return object&&object._writableState instanceof WritableState}})}else{realHasInstance=function(object){return object instanceof this}}function Writable(options){Duplex=Duplex||__webpack_require__(21);if(!realHasInstance.call(Writable,this)&&!(this instanceof Duplex)){return new Writable(options)}this._writableState=new WritableState(options,this);this.writable=true;if(options){if(typeof options.write==="function")this._write=options.write;if(typeof options.writev==="function")this._writev=options.writev}Stream.call(this)}Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))};function writeAfterEnd(stream,cb){var er=new Error("write after end");stream.emit("error",er);processNextTick(cb,er)}function validChunk(stream,state4,chunk,cb){var valid=true;var er=false;if(chunk===null){er=new TypeError("May not write null values to stream")}else if(typeof chunk!=="string"&&chunk!==void 0&&!state4.objectMode){er=new TypeError("Invalid non-string/buffer chunk")}if(er){stream.emit("error",er);processNextTick(cb,er);valid=false}return valid}Writable.prototype.write=function(chunk,encoding,cb){var state4=this._writableState;var ret=false;var isBuf=Buffer2.isBuffer(chunk);if(typeof encoding==="function"){cb=encoding;encoding=null}if(isBuf)encoding="buffer";else if(!encoding)encoding=state4.defaultEncoding;if(typeof cb!=="function")cb=nop;if(state4.ended)writeAfterEnd(this,cb);else if(isBuf||validChunk(this,state4,chunk,cb)){state4.pendingcb++;ret=writeOrBuffer(this,state4,isBuf,chunk,encoding,cb)}return ret};Writable.prototype.cork=function(){var state4=this._writableState;state4.corked++};Writable.prototype.uncork=function(){var state4=this._writableState;if(state4.corked){state4.corked--;if(!state4.writing&&!state4.corked&&!state4.finished&&!state4.bufferProcessing&&state4.bufferedRequest)clearBuffer(this,state4)}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){if(typeof encoding==="string")encoding=encoding.toLowerCase();if(!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((encoding+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+encoding);this._writableState.defaultEncoding=encoding;return this};function decodeChunk(state4,chunk,encoding){if(!state4.objectMode&&state4.decodeStrings!==false&&typeof chunk==="string"){chunk=bufferShim.from(chunk,encoding)}return chunk}function writeOrBuffer(stream,state4,isBuf,chunk,encoding,cb){if(!isBuf){chunk=decodeChunk(state4,chunk,encoding);if(Buffer2.isBuffer(chunk))encoding="buffer"}var len=state4.objectMode?1:chunk.length;state4.length+=len;var ret=state4.length<state4.highWaterMark;if(!ret)state4.needDrain=true;if(state4.writing||state4.corked){var last=state4.lastBufferedRequest;state4.lastBufferedRequest=new WriteReq(chunk,encoding,cb);if(last){last.next=state4.lastBufferedRequest}else{state4.bufferedRequest=state4.lastBufferedRequest}state4.bufferedRequestCount+=1}else{doWrite(stream,state4,false,len,chunk,encoding,cb)}return ret}function doWrite(stream,state4,writev,len,chunk,encoding,cb){state4.writelen=len;state4.writecb=cb;state4.writing=true;state4.sync=true;if(writev)stream._writev(chunk,state4.onwrite);else stream._write(chunk,encoding,state4.onwrite);state4.sync=false}function onwriteError(stream,state4,sync,er,cb){--state4.pendingcb;if(sync)processNextTick(cb,er);else cb(er);stream._writableState.errorEmitted=true;stream.emit("error",er)}function onwriteStateUpdate(state4){state4.writing=false;state4.writecb=null;state4.length-=state4.writelen;state4.writelen=0}function onwrite(stream,er){var state4=stream._writableState;var sync=state4.sync;var cb=state4.writecb;onwriteStateUpdate(state4);if(er)onwriteError(stream,state4,sync,er,cb);else{var finished=needFinish(state4);if(!finished&&!state4.corked&&!state4.bufferProcessing&&state4.bufferedRequest){clearBuffer(stream,state4)}if(sync){asyncWrite(afterWrite,stream,state4,finished,cb)}else{afterWrite(stream,state4,finished,cb)}}}function afterWrite(stream,state4,finished,cb){if(!finished)onwriteDrain(stream,state4);state4.pendingcb--;cb();finishMaybe(stream,state4)}function onwriteDrain(stream,state4){if(state4.length===0&&state4.needDrain){state4.needDrain=false;stream.emit("drain")}}function clearBuffer(stream,state4){state4.bufferProcessing=true;var entry=state4.bufferedRequest;if(stream._writev&&entry&&entry.next){var l=state4.bufferedRequestCount;var buffer=new Array(l);var holder=state4.corkedRequestsFree;holder.entry=entry;var count=0;while(entry){buffer[count]=entry;entry=entry.next;count+=1}doWrite(stream,state4,true,state4.length,buffer,"",holder.finish);state4.pendingcb++;state4.lastBufferedRequest=null;if(holder.next){state4.corkedRequestsFree=holder.next;holder.next=null}else{state4.corkedRequestsFree=new CorkedRequest(state4)}}else{while(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state4.objectMode?1:chunk.length;doWrite(stream,state4,false,len,chunk,encoding,cb);entry=entry.next;if(state4.writing){break}}if(entry===null)state4.lastBufferedRequest=null}state4.bufferedRequestCount=0;state4.bufferedRequest=entry;state4.bufferProcessing=false}Writable.prototype._write=function(chunk,encoding,cb){cb(new Error("_write() is not implemented"))};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state4=this._writableState;if(typeof chunk==="function"){cb=chunk;chunk=null;encoding=null}else if(typeof encoding==="function"){cb=encoding;encoding=null}if(chunk!==null&&chunk!==void 0)this.write(chunk,encoding);if(state4.corked){state4.corked=1;this.uncork()}if(!state4.ending&&!state4.finished)endWritable(this,state4,cb)};function needFinish(state4){return state4.ending&&state4.length===0&&state4.bufferedRequest===null&&!state4.finished&&!state4.writing}function prefinish(stream,state4){if(!state4.prefinished){state4.prefinished=true;stream.emit("prefinish")}}function finishMaybe(stream,state4){var need=needFinish(state4);if(need){if(state4.pendingcb===0){prefinish(stream,state4);state4.finished=true;stream.emit("finish")}else{prefinish(stream,state4)}}return need}function endWritable(stream,state4,cb){state4.ending=true;finishMaybe(stream,state4);if(cb){if(state4.finished)processNextTick(cb);else stream.once("finish",cb)}state4.ended=true;stream.writable=false}function CorkedRequest(state4){var _this=this;this.next=null;this.entry=null;this.finish=function(err){var entry=_this.entry;_this.entry=null;while(entry){var cb=entry.callback;state4.pendingcb--;cb(err);entry=entry.next}if(state4.corkedRequestsFree){state4.corkedRequestsFree.next=_this}else{state4.corkedRequestsFree=_this}}}}).call(exports2,__webpack_require__(6))},function(module22,exports2){(function(global2){module22.exports=deprecate;function deprecate(fn,msg){if(config("noDeprecation")){return fn}var warned=false;function deprecated(){if(!warned){if(config("throwDeprecation")){throw new Error(msg)}else if(config("traceDeprecation")){console.trace(msg)}else{console.warn(msg)}warned=true}return fn.apply(this,arguments)}return deprecated}function config(name2){try{if(!global2.localStorage)return false}catch(_){return false}var val=global2.localStorage[name2];if(null==val)return false;return String(val).toLowerCase()==="true"}}).call(exports2,function(){return this}())},function(module22,exports2,__webpack_require__){var Buffer2=__webpack_require__(2).Buffer;var isBufferEncoding=Buffer2.isEncoding||function(encoding){switch(encoding&&encoding.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return true;default:return false}};function assertEncoding(encoding){if(encoding&&!isBufferEncoding(encoding)){throw new Error("Unknown encoding: "+encoding)}}var StringDecoder=exports2.StringDecoder=function(encoding){this.encoding=(encoding||"utf8").toLowerCase().replace(/[-_]/,"");assertEncoding(encoding);switch(this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2;this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3;this.detectIncompleteChar=base64DetectIncompleteChar;break;default:this.write=passThroughWrite;return}this.charBuffer=new Buffer2(6);this.charReceived=0;this.charLength=0};StringDecoder.prototype.write=function(buffer){var charStr="";while(this.charLength){var available=buffer.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:buffer.length;buffer.copy(this.charBuffer,this.charReceived,0,available);this.charReceived+=available;if(this.charReceived<this.charLength){return""}buffer=buffer.slice(available,buffer.length);charStr=this.charBuffer.slice(0,this.charLength).toString(this.encoding);var charCode=charStr.charCodeAt(charStr.length-1);if(charCode>=55296&&charCode<=56319){this.charLength+=this.surrogateSize;charStr="";continue}this.charReceived=this.charLength=0;if(buffer.length===0){return charStr}break}this.detectIncompleteChar(buffer);var end=buffer.length;if(this.charLength){buffer.copy(this.charBuffer,0,buffer.length-this.charReceived,end);end-=this.charReceived}charStr+=buffer.toString(this.encoding,0,end);var end=charStr.length-1;var charCode=charStr.charCodeAt(end);if(charCode>=55296&&charCode<=56319){var size=this.surrogateSize;this.charLength+=size;this.charReceived+=size;this.charBuffer.copy(this.charBuffer,size,0,size);buffer.copy(this.charBuffer,0,0,size);return charStr.substring(0,end)}return charStr};StringDecoder.prototype.detectIncompleteChar=function(buffer){var i3=buffer.length>=3?3:buffer.length;for(;i3>0;i3--){var c=buffer[buffer.length-i3];if(i3==1&&c>>5==6){this.charLength=2;break}if(i3<=2&&c>>4==14){this.charLength=3;break}if(i3<=3&&c>>3==30){this.charLength=4;break}}this.charReceived=i3};StringDecoder.prototype.end=function(buffer){var res="";if(buffer&&buffer.length)res=this.write(buffer);if(this.charReceived){var cr=this.charReceived;var buf=this.charBuffer;var enc=this.encoding;res+=buf.slice(0,cr).toString(enc)}return res};function passThroughWrite(buffer){return buffer.toString(this.encoding)}function utf16DetectIncompleteChar(buffer){this.charReceived=buffer.length%2;this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(buffer){this.charReceived=buffer.length%3;this.charLength=this.charReceived?3:0}},function(module22,exports2,__webpack_require__){"use strict";module22.exports=Transform;var Duplex=__webpack_require__(21);var util=__webpack_require__(18);util.inherits=__webpack_require__(12);util.inherits(Transform,Duplex);function TransformState(stream){this.afterTransform=function(er,data){return afterTransform(stream,er,data)};this.needTransform=false;this.transforming=false;this.writecb=null;this.writechunk=null;this.writeencoding=null}function afterTransform(stream,er,data){var ts=stream._transformState;ts.transforming=false;var cb=ts.writecb;if(!cb)return stream.emit("error",new Error("no writecb in Transform class"));ts.writechunk=null;ts.writecb=null;if(data!==null&&data!==void 0)stream.push(data);cb(er);var rs=stream._readableState;rs.reading=false;if(rs.needReadable||rs.length<rs.highWaterMark){stream._read(rs.highWaterMark)}}function Transform(options){if(!(this instanceof Transform))return new Transform(options);Duplex.call(this,options);this._transformState=new TransformState(this);var stream=this;this._readableState.needReadable=true;this._readableState.sync=false;if(options){if(typeof options.transform==="function")this._transform=options.transform;if(typeof options.flush==="function")this._flush=options.flush}this.once("prefinish",function(){if(typeof this._flush==="function")this._flush(function(er,data){done(stream,er,data)});else done(stream)})}Transform.prototype.push=function(chunk,encoding){this._transformState.needTransform=false;return Duplex.prototype.push.call(this,chunk,encoding)};Transform.prototype._transform=function(chunk,encoding,cb){throw new Error("_transform() is not implemented")};Transform.prototype._write=function(chunk,encoding,cb){var ts=this._transformState;ts.writecb=cb;ts.writechunk=chunk;ts.writeencoding=encoding;if(!ts.transforming){var rs=this._readableState;if(ts.needTransform||rs.needReadable||rs.length<rs.highWaterMark)this._read(rs.highWaterMark)}};Transform.prototype._read=function(n){var ts=this._transformState;if(ts.writechunk!==null&&ts.writecb&&!ts.transforming){ts.transforming=true;this._transform(ts.writechunk,ts.writeencoding,ts.afterTransform)}else{ts.needTransform=true}};function done(stream,er,data){if(er)return stream.emit("error",er);if(data!==null&&data!==void 0)stream.push(data);var ws=stream._writableState;var ts=stream._transformState;if(ws.length)throw new Error("Calling transform done when ws.length != 0");if(ts.transforming)throw new Error("Calling transform done when still transforming");return stream.push(null)}},function(module22,exports2,__webpack_require__){"use strict";module22.exports=PassThrough;var Transform=__webpack_require__(25);var util=__webpack_require__(18);util.inherits=__webpack_require__(12);util.inherits(PassThrough,Transform);function PassThrough(options){if(!(this instanceof PassThrough))return new PassThrough(options);Transform.call(this,options)}PassThrough.prototype._transform=function(chunk,encoding,cb){cb(null,chunk)}},function(module22,exports2,__webpack_require__){module22.exports=__webpack_require__(22)},function(module22,exports2,__webpack_require__){module22.exports=__webpack_require__(21)},function(module22,exports2,__webpack_require__){module22.exports=__webpack_require__(25)},function(module22,exports2,__webpack_require__){module22.exports=__webpack_require__(26)},function(module22,exports2,__webpack_require__){"use strict";var zlib_inflate=__webpack_require__(32);var utils=__webpack_require__(33);var strings=__webpack_require__(38);var c=__webpack_require__(39);var msg=__webpack_require__(40);var ZStream=__webpack_require__(41);var GZheader=__webpack_require__(42);var toString=Object.prototype.toString;function Inflate(options){if(!(this instanceof Inflate))return new Inflate(options);this.options=utils.assign({chunkSize:16384,windowBits:0,to:""},options||{});var opt=this.options;if(opt.raw&&opt.windowBits>=0&&opt.windowBits<16){opt.windowBits=-opt.windowBits;if(opt.windowBits===0){opt.windowBits=-15}}if(opt.windowBits>=0&&opt.windowBits<16&&!(options&&options.windowBits)){opt.windowBits+=32}if(opt.windowBits>15&&opt.windowBits<48){if((opt.windowBits&15)===0){opt.windowBits|=15}}this.err=0;this.msg="";this.ended=false;this.chunks=[];this.strm=new ZStream;this.strm.avail_out=0;var status=zlib_inflate.inflateInit2(this.strm,opt.windowBits);if(status!==c.Z_OK){throw new Error(msg[status])}this.header=new GZheader;zlib_inflate.inflateGetHeader(this.strm,this.header)}Inflate.prototype.push=function(data,mode){var strm=this.strm;var chunkSize=this.options.chunkSize;var dictionary=this.options.dictionary;var status,_mode;var next_out_utf8,tail,utf8str;var dict;var allowBufError=false;if(this.ended){return false}_mode=mode===~~mode?mode:mode===true?c.Z_FINISH:c.Z_NO_FLUSH;if(typeof data==="string"){strm.input=strings.binstring2buf(data)}else if(toString.call(data)==="[object ArrayBuffer]"){strm.input=new Uint8Array(data)}else{strm.input=data}strm.next_in=0;strm.avail_in=strm.input.length;do{if(strm.avail_out===0){strm.output=new utils.Buf8(chunkSize);strm.next_out=0;strm.avail_out=chunkSize}status=zlib_inflate.inflate(strm,c.Z_NO_FLUSH);if(status===c.Z_NEED_DICT&&dictionary){if(typeof dictionary==="string"){dict=strings.string2buf(dictionary)}else if(toString.call(dictionary)==="[object ArrayBuffer]"){dict=new Uint8Array(dictionary)}else{dict=dictionary}status=zlib_inflate.inflateSetDictionary(this.strm,dict)}if(status===c.Z_BUF_ERROR&&allowBufError===true){status=c.Z_OK;allowBufError=false}if(status!==c.Z_STREAM_END&&status!==c.Z_OK){this.onEnd(status);this.ended=true;return false}if(strm.next_out){if(strm.avail_out===0||status===c.Z_STREAM_END||strm.avail_in===0&&(_mode===c.Z_FINISH||_mode===c.Z_SYNC_FLUSH)){if(this.options.to==="string"){next_out_utf8=strings.utf8border(strm.output,strm.next_out);tail=strm.next_out-next_out_utf8;utf8str=strings.buf2string(strm.output,next_out_utf8);strm.next_out=tail;strm.avail_out=chunkSize-tail;if(tail){utils.arraySet(strm.output,strm.output,next_out_utf8,tail,0)}this.onData(utf8str)}else{this.onData(utils.shrinkBuf(strm.output,strm.next_out))}}}if(strm.avail_in===0&&strm.avail_out===0){allowBufError=true}}while((strm.avail_in>0||strm.avail_out===0)&&status!==c.Z_STREAM_END);if(status===c.Z_STREAM_END){_mode=c.Z_FINISH}if(_mode===c.Z_FINISH){status=zlib_inflate.inflateEnd(this.strm);this.onEnd(status);this.ended=true;return status===c.Z_OK}if(_mode===c.Z_SYNC_FLUSH){this.onEnd(c.Z_OK);strm.avail_out=0;return true}return true};Inflate.prototype.onData=function(chunk){this.chunks.push(chunk)};Inflate.prototype.onEnd=function(status){if(status===c.Z_OK){if(this.options.to==="string"){this.result=this.chunks.join("")}else{this.result=utils.flattenChunks(this.chunks)}}this.chunks=[];this.err=status;this.msg=this.strm.msg};function inflate(input,options){var inflator=new Inflate(options);inflator.push(input,true);if(inflator.err){throw inflator.msg||msg[inflator.err]}return inflator.result}function inflateRaw(input,options){options=options||{};options.raw=true;return inflate(input,options)}exports2.Inflate=Inflate;exports2.inflate=inflate;exports2.inflateRaw=inflateRaw;exports2.ungzip=inflate},function(module22,exports2,__webpack_require__){"use strict";var utils=__webpack_require__(33);var adler32=__webpack_require__(34);var crc32=__webpack_require__(35);var inflate_fast=__webpack_require__(36);var inflate_table=__webpack_require__(37);var CODES=0;var LENS=1;var DISTS=2;var Z_FINISH=4;var Z_BLOCK=5;var Z_TREES=6;var Z_OK=0;var Z_STREAM_END=1;var Z_NEED_DICT=2;var Z_STREAM_ERROR=-2;var Z_DATA_ERROR=-3;var Z_MEM_ERROR=-4;var Z_BUF_ERROR=-5;var Z_DEFLATED=8;var HEAD=1;var FLAGS=2;var TIME=3;var OS=4;var EXLEN=5;var EXTRA=6;var NAME=7;var COMMENT=8;var HCRC=9;var DICTID=10;var DICT=11;var TYPE=12;var TYPEDO=13;var STORED=14;var COPY_=15;var COPY=16;var TABLE=17;var LENLENS=18;var CODELENS=19;var LEN_=20;var LEN=21;var LENEXT=22;var DIST=23;var DISTEXT=24;var MATCH=25;var LIT=26;var CHECK=27;var LENGTH=28;var DONE=29;var BAD=30;var MEM=31;var SYNC=32;var ENOUGH_LENS=852;var ENOUGH_DISTS=592;var MAX_WBITS=15;var DEF_WBITS=MAX_WBITS;function zswap32(q){return(q>>>24&255)+(q>>>8&65280)+((q&65280)<<8)+((q&255)<<24)}function InflateState(){this.mode=0;this.last=false;this.wrap=0;this.havedict=false;this.flags=0;this.dmax=0;this.check=0;this.total=0;this.head=null;this.wbits=0;this.wsize=0;this.whave=0;this.wnext=0;this.window=null;this.hold=0;this.bits=0;this.length=0;this.offset=0;this.extra=0;this.lencode=null;this.distcode=null;this.lenbits=0;this.distbits=0;this.ncode=0;this.nlen=0;this.ndist=0;this.have=0;this.next=null;this.lens=new utils.Buf16(320);this.work=new utils.Buf16(288);this.lendyn=null;this.distdyn=null;this.sane=0;this.back=0;this.was=0}function inflateResetKeep(strm){var state4;if(!strm||!strm.state){return Z_STREAM_ERROR}state4=strm.state;strm.total_in=strm.total_out=state4.total=0;strm.msg="";if(state4.wrap){strm.adler=state4.wrap&1}state4.mode=HEAD;state4.last=0;state4.havedict=0;state4.dmax=32768;state4.head=null;state4.hold=0;state4.bits=0;state4.lencode=state4.lendyn=new utils.Buf32(ENOUGH_LENS);state4.distcode=state4.distdyn=new utils.Buf32(ENOUGH_DISTS);state4.sane=1;state4.back=-1;return Z_OK}function inflateReset(strm){var state4;if(!strm||!strm.state){return Z_STREAM_ERROR}state4=strm.state;state4.wsize=0;state4.whave=0;state4.wnext=0;return inflateResetKeep(strm)}function inflateReset2(strm,windowBits){var wrap;var state4;if(!strm||!strm.state){return Z_STREAM_ERROR}state4=strm.state;if(windowBits<0){wrap=0;windowBits=-windowBits}else{wrap=(windowBits>>4)+1;if(windowBits<48){windowBits&=15}}if(windowBits&&(windowBits<8||windowBits>15)){return Z_STREAM_ERROR}if(state4.window!==null&&state4.wbits!==windowBits){state4.window=null}state4.wrap=wrap;state4.wbits=windowBits;return inflateReset(strm)}function inflateInit2(strm,windowBits){var ret;var state4;if(!strm){return Z_STREAM_ERROR}state4=new InflateState;strm.state=state4;state4.window=null;ret=inflateReset2(strm,windowBits);if(ret!==Z_OK){strm.state=null}return ret}function inflateInit(strm){return inflateInit2(strm,DEF_WBITS)}var virgin=true;var lenfix,distfix;function fixedtables(state4){if(virgin){var sym;lenfix=new utils.Buf32(512);distfix=new utils.Buf32(32);sym=0;while(sym<144){state4.lens[sym++]=8}while(sym<256){state4.lens[sym++]=9}while(sym<280){state4.lens[sym++]=7}while(sym<288){state4.lens[sym++]=8}inflate_table(LENS,state4.lens,0,288,lenfix,0,state4.work,{bits:9});sym=0;while(sym<32){state4.lens[sym++]=5}inflate_table(DISTS,state4.lens,0,32,distfix,0,state4.work,{bits:5});virgin=false}state4.lencode=lenfix;state4.lenbits=9;state4.distcode=distfix;state4.distbits=5}function updatewindow(strm,src,end,copy){var dist;var state4=strm.state;if(state4.window===null){state4.wsize=1<<state4.wbits;state4.wnext=0;state4.whave=0;state4.window=new utils.Buf8(state4.wsize)}if(copy>=state4.wsize){utils.arraySet(state4.window,src,end-state4.wsize,state4.wsize,0);state4.wnext=0;state4.whave=state4.wsize}else{dist=state4.wsize-state4.wnext;if(dist>copy){dist=copy}utils.arraySet(state4.window,src,end-copy,dist,state4.wnext);copy-=dist;if(copy){utils.arraySet(state4.window,src,end-copy,copy,0);state4.wnext=copy;state4.whave=state4.wsize}else{state4.wnext+=dist;if(state4.wnext===state4.wsize){state4.wnext=0}if(state4.whave<state4.wsize){state4.whave+=dist}}}return 0}function inflate(strm,flush){var state4;var input,output;var next;var put;var have,left;var hold;var bits;var _in,_out;var copy;var from;var from_source;var here=0;var here_bits,here_op,here_val;var last_bits,last_op,last_val;var len;var ret;var hbuf=new utils.Buf8(4);var opts;var n;var order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!strm||!strm.state||!strm.output||!strm.input&&strm.avail_in!==0){return Z_STREAM_ERROR}state4=strm.state;if(state4.mode===TYPE){state4.mode=TYPEDO}put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state4.hold;bits=state4.bits;_in=have;_out=left;ret=Z_OK;inf_leave:for(;;){switch(state4.mode){case HEAD:if(state4.wrap===0){state4.mode=TYPEDO;break}while(bits<16){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(state4.wrap&2&&hold===35615){state4.check=0;hbuf[0]=hold&255;hbuf[1]=hold>>>8&255;state4.check=crc32(state4.check,hbuf,2,0);hold=0;bits=0;state4.mode=FLAGS;break}state4.flags=0;if(state4.head){state4.head.done=false}if(!(state4.wrap&1)||(((hold&255)<<8)+(hold>>8))%31){strm.msg="incorrect header check";state4.mode=BAD;break}if((hold&15)!==Z_DEFLATED){strm.msg="unknown compression method";state4.mode=BAD;break}hold>>>=4;bits-=4;len=(hold&15)+8;if(state4.wbits===0){state4.wbits=len}else if(len>state4.wbits){strm.msg="invalid window size";state4.mode=BAD;break}state4.dmax=1<<len;strm.adler=state4.check=1;state4.mode=hold&512?DICTID:TYPE;hold=0;bits=0;break;case FLAGS:while(bits<16){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.flags=hold;if((state4.flags&255)!==Z_DEFLATED){strm.msg="unknown compression method";state4.mode=BAD;break}if(state4.flags&57344){strm.msg="unknown header flags set";state4.mode=BAD;break}if(state4.head){state4.head.text=hold>>8&1}if(state4.flags&512){hbuf[0]=hold&255;hbuf[1]=hold>>>8&255;state4.check=crc32(state4.check,hbuf,2,0)}hold=0;bits=0;state4.mode=TIME;case TIME:while(bits<32){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(state4.head){state4.head.time=hold}if(state4.flags&512){hbuf[0]=hold&255;hbuf[1]=hold>>>8&255;hbuf[2]=hold>>>16&255;hbuf[3]=hold>>>24&255;state4.check=crc32(state4.check,hbuf,4,0)}hold=0;bits=0;state4.mode=OS;case OS:while(bits<16){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(state4.head){state4.head.xflags=hold&255;state4.head.os=hold>>8}if(state4.flags&512){hbuf[0]=hold&255;hbuf[1]=hold>>>8&255;state4.check=crc32(state4.check,hbuf,2,0)}hold=0;bits=0;state4.mode=EXLEN;case EXLEN:if(state4.flags&1024){while(bits<16){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.length=hold;if(state4.head){state4.head.extra_len=hold}if(state4.flags&512){hbuf[0]=hold&255;hbuf[1]=hold>>>8&255;state4.check=crc32(state4.check,hbuf,2,0)}hold=0;bits=0}else if(state4.head){state4.head.extra=null}state4.mode=EXTRA;case EXTRA:if(state4.flags&1024){copy=state4.length;if(copy>have){copy=have}if(copy){if(state4.head){len=state4.head.extra_len-state4.length;if(!state4.head.extra){state4.head.extra=new Array(state4.head.extra_len)}utils.arraySet(state4.head.extra,input,next,copy,len)}if(state4.flags&512){state4.check=crc32(state4.check,input,copy,next)}have-=copy;next+=copy;state4.length-=copy}if(state4.length){break inf_leave}}state4.length=0;state4.mode=NAME;case NAME:if(state4.flags&2048){if(have===0){break inf_leave}copy=0;do{len=input[next+copy++];if(state4.head&&len&&state4.length<65536){state4.head.name+=String.fromCharCode(len)}}while(len&&copy<have);if(state4.flags&512){state4.check=crc32(state4.check,input,copy,next)}have-=copy;next+=copy;if(len){break inf_leave}}else if(state4.head){state4.head.name=null}state4.length=0;state4.mode=COMMENT;case COMMENT:if(state4.flags&4096){if(have===0){break inf_leave}copy=0;do{len=input[next+copy++];if(state4.head&&len&&state4.length<65536){state4.head.comment+=String.fromCharCode(len)}}while(len&&copy<have);if(state4.flags&512){state4.check=crc32(state4.check,input,copy,next)}have-=copy;next+=copy;if(len){break inf_leave}}else if(state4.head){state4.head.comment=null}state4.mode=HCRC;case HCRC:if(state4.flags&512){while(bits<16){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(hold!==(state4.check&65535)){strm.msg="header crc mismatch";state4.mode=BAD;break}hold=0;bits=0}if(state4.head){state4.head.hcrc=state4.flags>>9&1;state4.head.done=true}strm.adler=state4.check=0;state4.mode=TYPE;break;case DICTID:while(bits<32){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}strm.adler=state4.check=zswap32(hold);hold=0;bits=0;state4.mode=DICT;case DICT:if(state4.havedict===0){strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state4.hold=hold;state4.bits=bits;return Z_NEED_DICT}strm.adler=state4.check=1;state4.mode=TYPE;case TYPE:if(flush===Z_BLOCK||flush===Z_TREES){break inf_leave}case TYPEDO:if(state4.last){hold>>>=bits&7;bits-=bits&7;state4.mode=CHECK;break}while(bits<3){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.last=hold&1;hold>>>=1;bits-=1;switch(hold&3){case 0:state4.mode=STORED;break;case 1:fixedtables(state4);state4.mode=LEN_;if(flush===Z_TREES){hold>>>=2;bits-=2;break inf_leave}break;case 2:state4.mode=TABLE;break;case 3:strm.msg="invalid block type";state4.mode=BAD}hold>>>=2;bits-=2;break;case STORED:hold>>>=bits&7;bits-=bits&7;while(bits<32){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if((hold&65535)!==(hold>>>16^65535)){strm.msg="invalid stored block lengths";state4.mode=BAD;break}state4.length=hold&65535;hold=0;bits=0;state4.mode=COPY_;if(flush===Z_TREES){break inf_leave}case COPY_:state4.mode=COPY;case COPY:copy=state4.length;if(copy){if(copy>have){copy=have}if(copy>left){copy=left}if(copy===0){break inf_leave}utils.arraySet(output,input,next,copy,put);have-=copy;next+=copy;left-=copy;put+=copy;state4.length-=copy;break}state4.mode=TYPE;break;case TABLE:while(bits<14){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.nlen=(hold&31)+257;hold>>>=5;bits-=5;state4.ndist=(hold&31)+1;hold>>>=5;bits-=5;state4.ncode=(hold&15)+4;hold>>>=4;bits-=4;if(state4.nlen>286||state4.ndist>30){strm.msg="too many length or distance symbols";state4.mode=BAD;break}state4.have=0;state4.mode=LENLENS;case LENLENS:while(state4.have<state4.ncode){while(bits<3){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.lens[order[state4.have++]]=hold&7;hold>>>=3;bits-=3}while(state4.have<19){state4.lens[order[state4.have++]]=0}state4.lencode=state4.lendyn;state4.lenbits=7;opts={bits:state4.lenbits};ret=inflate_table(CODES,state4.lens,0,19,state4.lencode,0,state4.work,opts);state4.lenbits=opts.bits;if(ret){strm.msg="invalid code lengths set";state4.mode=BAD;break}state4.have=0;state4.mode=CODELENS;case CODELENS:while(state4.have<state4.nlen+state4.ndist){for(;;){here=state4.lencode[hold&(1<<state4.lenbits)-1];here_bits=here>>>24;here_op=here>>>16&255;here_val=here&65535;if(here_bits<=bits){break}if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(here_val<16){hold>>>=here_bits;bits-=here_bits;state4.lens[state4.have++]=here_val}else{if(here_val===16){n=here_bits+2;while(bits<n){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}hold>>>=here_bits;bits-=here_bits;if(state4.have===0){strm.msg="invalid bit length repeat";state4.mode=BAD;break}len=state4.lens[state4.have-1];copy=3+(hold&3);hold>>>=2;bits-=2}else if(here_val===17){n=here_bits+3;while(bits<n){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}hold>>>=here_bits;bits-=here_bits;len=0;copy=3+(hold&7);hold>>>=3;bits-=3}else{n=here_bits+7;while(bits<n){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}hold>>>=here_bits;bits-=here_bits;len=0;copy=11+(hold&127);hold>>>=7;bits-=7}if(state4.have+copy>state4.nlen+state4.ndist){strm.msg="invalid bit length repeat";state4.mode=BAD;break}while(copy--){state4.lens[state4.have++]=len}}}if(state4.mode===BAD){break}if(state4.lens[256]===0){strm.msg="invalid code -- missing end-of-block";state4.mode=BAD;break}state4.lenbits=9;opts={bits:state4.lenbits};ret=inflate_table(LENS,state4.lens,0,state4.nlen,state4.lencode,0,state4.work,opts);state4.lenbits=opts.bits;if(ret){strm.msg="invalid literal/lengths set";state4.mode=BAD;break}state4.distbits=6;state4.distcode=state4.distdyn;opts={bits:state4.distbits};ret=inflate_table(DISTS,state4.lens,state4.nlen,state4.ndist,state4.distcode,0,state4.work,opts);state4.distbits=opts.bits;if(ret){strm.msg="invalid distances set";state4.mode=BAD;break}state4.mode=LEN_;if(flush===Z_TREES){break inf_leave}case LEN_:state4.mode=LEN;case LEN:if(have>=6&&left>=258){strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state4.hold=hold;state4.bits=bits;inflate_fast(strm,_out);put=strm.next_out;output=strm.output;left=strm.avail_out;next=strm.next_in;input=strm.input;have=strm.avail_in;hold=state4.hold;bits=state4.bits;if(state4.mode===TYPE){state4.back=-1}break}state4.back=0;for(;;){here=state4.lencode[hold&(1<<state4.lenbits)-1];here_bits=here>>>24;here_op=here>>>16&255;here_val=here&65535;if(here_bits<=bits){break}if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(here_op&&(here_op&240)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state4.lencode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)];here_bits=here>>>24;here_op=here>>>16&255;here_val=here&65535;if(last_bits+here_bits<=bits){break}if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}hold>>>=last_bits;bits-=last_bits;state4.back+=last_bits}hold>>>=here_bits;bits-=here_bits;state4.back+=here_bits;state4.length=here_val;if(here_op===0){state4.mode=LIT;break}if(here_op&32){state4.back=-1;state4.mode=TYPE;break}if(here_op&64){strm.msg="invalid literal/length code";state4.mode=BAD;break}state4.extra=here_op&15;state4.mode=LENEXT;case LENEXT:if(state4.extra){n=state4.extra;while(bits<n){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.length+=hold&(1<<state4.extra)-1;hold>>>=state4.extra;bits-=state4.extra;state4.back+=state4.extra}state4.was=state4.length;state4.mode=DIST;case DIST:for(;;){here=state4.distcode[hold&(1<<state4.distbits)-1];here_bits=here>>>24;here_op=here>>>16&255;here_val=here&65535;if(here_bits<=bits){break}if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if((here_op&240)===0){last_bits=here_bits;last_op=here_op;last_val=here_val;for(;;){here=state4.distcode[last_val+((hold&(1<<last_bits+last_op)-1)>>last_bits)];here_bits=here>>>24;here_op=here>>>16&255;here_val=here&65535;if(last_bits+here_bits<=bits){break}if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}hold>>>=last_bits;bits-=last_bits;state4.back+=last_bits}hold>>>=here_bits;bits-=here_bits;state4.back+=here_bits;if(here_op&64){strm.msg="invalid distance code";state4.mode=BAD;break}state4.offset=here_val;state4.extra=here_op&15;state4.mode=DISTEXT;case DISTEXT:if(state4.extra){n=state4.extra;while(bits<n){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}state4.offset+=hold&(1<<state4.extra)-1;hold>>>=state4.extra;bits-=state4.extra;state4.back+=state4.extra}if(state4.offset>state4.dmax){strm.msg="invalid distance too far back";state4.mode=BAD;break}state4.mode=MATCH;case MATCH:if(left===0){break inf_leave}copy=_out-left;if(state4.offset>copy){copy=state4.offset-copy;if(copy>state4.whave){if(state4.sane){strm.msg="invalid distance too far back";state4.mode=BAD;break}}if(copy>state4.wnext){copy-=state4.wnext;from=state4.wsize-copy}else{from=state4.wnext-copy}if(copy>state4.length){copy=state4.length}from_source=state4.window}else{from_source=output;from=put-state4.offset;copy=state4.length}if(copy>left){copy=left}left-=copy;state4.length-=copy;do{output[put++]=from_source[from++]}while(--copy);if(state4.length===0){state4.mode=LEN}break;case LIT:if(left===0){break inf_leave}output[put++]=state4.length;left--;state4.mode=LEN;break;case CHECK:if(state4.wrap){while(bits<32){if(have===0){break inf_leave}have--;hold|=input[next++]<<bits;bits+=8}_out-=left;strm.total_out+=_out;state4.total+=_out;if(_out){strm.adler=state4.check=state4.flags?crc32(state4.check,output,_out,put-_out):adler32(state4.check,output,_out,put-_out)}_out=left;if((state4.flags?hold:zswap32(hold))!==state4.check){strm.msg="incorrect data check";state4.mode=BAD;break}hold=0;bits=0}state4.mode=LENGTH;case LENGTH:if(state4.wrap&&state4.flags){while(bits<32){if(have===0){break inf_leave}have--;hold+=input[next++]<<bits;bits+=8}if(hold!==(state4.total&4294967295)){strm.msg="incorrect length check";state4.mode=BAD;break}hold=0;bits=0}state4.mode=DONE;case DONE:ret=Z_STREAM_END;break inf_leave;case BAD:ret=Z_DATA_ERROR;break inf_leave;case MEM:return Z_MEM_ERROR;case SYNC:default:return Z_STREAM_ERROR}}strm.next_out=put;strm.avail_out=left;strm.next_in=next;strm.avail_in=have;state4.hold=hold;state4.bits=bits;if(state4.wsize||_out!==strm.avail_out&&state4.mode<BAD&&(state4.mode<CHECK||flush!==Z_FINISH)){if(updatewindow(strm,strm.output,strm.next_out,_out-strm.avail_out)){state4.mode=MEM;return Z_MEM_ERROR}}_in-=strm.avail_in;_out-=strm.avail_out;strm.total_in+=_in;strm.total_out+=_out;state4.total+=_out;if(state4.wrap&&_out){strm.adler=state4.check=state4.flags?crc32(state4.check,output,_out,strm.next_out-_out):adler32(state4.check,output,_out,strm.next_out-_out)}strm.data_type=state4.bits+(state4.last?64:0)+(state4.mode===TYPE?128:0)+(state4.mode===LEN_||state4.mode===COPY_?256:0);if((_in===0&&_out===0||flush===Z_FINISH)&&ret===Z_OK){ret=Z_BUF_ERROR}return ret}function inflateEnd(strm){if(!strm||!strm.state){return Z_STREAM_ERROR}var state4=strm.state;if(state4.window){state4.window=null}strm.state=null;return Z_OK}function inflateGetHeader(strm,head){var state4;if(!strm||!strm.state){return Z_STREAM_ERROR}state4=strm.state;if((state4.wrap&2)===0){return Z_STREAM_ERROR}state4.head=head;head.done=false;return Z_OK}function inflateSetDictionary(strm,dictionary){var dictLength=dictionary.length;var state4;var dictid;var ret;if(!strm||!strm.state){return Z_STREAM_ERROR}state4=strm.state;if(state4.wrap!==0&&state4.mode!==DICT){return Z_STREAM_ERROR}if(state4.mode===DICT){dictid=1;dictid=adler32(dictid,dictionary,dictLength,0);if(dictid!==state4.check){return Z_DATA_ERROR}}ret=updatewindow(strm,dictionary,dictLength,dictLength);if(ret){state4.mode=MEM;return Z_MEM_ERROR}state4.havedict=1;return Z_OK}exports2.inflateReset=inflateReset;exports2.inflateReset2=inflateReset2;exports2.inflateResetKeep=inflateResetKeep;exports2.inflateInit=inflateInit;exports2.inflateInit2=inflateInit2;exports2.inflate=inflate;exports2.inflateEnd=inflateEnd;exports2.inflateGetHeader=inflateGetHeader;exports2.inflateSetDictionary=inflateSetDictionary;exports2.inflateInfo="pako inflate (from Nodeca project)"},function(module22,exports2){"use strict";var TYPED_OK=typeof Uint8Array!=="undefined"&&typeof Uint16Array!=="undefined"&&typeof Int32Array!=="undefined";exports2.assign=function(obj){var sources=Array.prototype.slice.call(arguments,1);while(sources.length){var source=sources.shift();if(!source){continue}if(typeof source!=="object"){throw new TypeError(source+"must be non-object")}for(var p2 in source){if(source.hasOwnProperty(p2)){obj[p2]=source[p2]}}}return obj};exports2.shrinkBuf=function(buf,size){if(buf.length===size){return buf}if(buf.subarray){return buf.subarray(0,size)}buf.length=size;return buf};var fnTyped={arraySet:function(dest,src,src_offs,len,dest_offs){if(src.subarray&&dest.subarray){dest.set(src.subarray(src_offs,src_offs+len),dest_offs);return}for(var i3=0;i3<len;i3++){dest[dest_offs+i3]=src[src_offs+i3]}},flattenChunks:function(chunks){var i3,l,len,pos,chunk,result;len=0;for(i3=0,l=chunks.length;i3<l;i3++){len+=chunks[i3].length}result=new Uint8Array(len);pos=0;for(i3=0,l=chunks.length;i3<l;i3++){chunk=chunks[i3];result.set(chunk,pos);pos+=chunk.length}return result}};var fnUntyped={arraySet:function(dest,src,src_offs,len,dest_offs){for(var i3=0;i3<len;i3++){dest[dest_offs+i3]=src[src_offs+i3]}},flattenChunks:function(chunks){return[].concat.apply([],chunks)}};exports2.setTyped=function(on){if(on){exports2.Buf8=Uint8Array;exports2.Buf16=Uint16Array;exports2.Buf32=Int32Array;exports2.assign(exports2,fnTyped)}else{exports2.Buf8=Array;exports2.Buf16=Array;exports2.Buf32=Array;exports2.assign(exports2,fnUntyped)}};exports2.setTyped(TYPED_OK)},function(module22,exports2){"use strict";function adler32(adler,buf,len,pos){var s1=adler&65535|0,s2=adler>>>16&65535|0,n=0;while(len!==0){n=len>2e3?2e3:len;len-=n;do{s1=s1+buf[pos++]|0;s2=s2+s1|0}while(--n);s1%=65521;s2%=65521}return s1|s2<<16|0}module22.exports=adler32},function(module22,exports2){"use strict";function makeTable(){var c,table=[];for(var n=0;n<256;n++){c=n;for(var k=0;k<8;k++){c=c&1?3988292384^c>>>1:c>>>1}table[n]=c}return table}var crcTable=makeTable();function crc32(crc,buf,len,pos){var t3=crcTable,end=pos+len;crc^=-1;for(var i3=pos;i3<end;i3++){crc=crc>>>8^t3[(crc^buf[i3])&255]}return crc^-1}module22.exports=crc32},function(module22,exports2){"use strict";var BAD=30;var TYPE=12;module22.exports=function inflate_fast(strm,start){var state4;var _in;var last;var _out;var beg;var end;var dmax;var wsize;var whave;var wnext;var s_window;var hold;var bits;var lcode;var dcode;var lmask;var dmask;var here;var op;var len;var dist;var from;var from_source;var input,output;state4=strm.state;_in=strm.next_in;input=strm.input;last=_in+(strm.avail_in-5);_out=strm.next_out;output=strm.output;beg=_out-(start-strm.avail_out);end=_out+(strm.avail_out-257);dmax=state4.dmax;wsize=state4.wsize;whave=state4.whave;wnext=state4.wnext;s_window=state4.window;hold=state4.hold;bits=state4.bits;lcode=state4.lencode;dcode=state4.distcode;lmask=(1<<state4.lenbits)-1;dmask=(1<<state4.distbits)-1;top:do{if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8}here=lcode[hold&lmask];dolen:for(;;){op=here>>>24;hold>>>=op;bits-=op;op=here>>>16&255;if(op===0){output[_out++]=here&65535}else if(op&16){len=here&65535;op&=15;if(op){if(bits<op){hold+=input[_in++]<<bits;bits+=8}len+=hold&(1<<op)-1;hold>>>=op;bits-=op}if(bits<15){hold+=input[_in++]<<bits;bits+=8;hold+=input[_in++]<<bits;bits+=8}here=dcode[hold&dmask];dodist:for(;;){op=here>>>24;hold>>>=op;bits-=op;op=here>>>16&255;if(op&16){dist=here&65535;op&=15;if(bits<op){hold+=input[_in++]<<bits;bits+=8;if(bits<op){hold+=input[_in++]<<bits;bits+=8}}dist+=hold&(1<<op)-1;if(dist>dmax){strm.msg="invalid distance too far back";state4.mode=BAD;break top}hold>>>=op;bits-=op;op=_out-beg;if(dist>op){op=dist-op;if(op>whave){if(state4.sane){strm.msg="invalid distance too far back";state4.mode=BAD;break top}}from=0;from_source=s_window;if(wnext===0){from+=wsize-op;if(op<len){len-=op;do{output[_out++]=s_window[from++]}while(--op);from=_out-dist;from_source=output}}else if(wnext<op){from+=wsize+wnext-op;op-=wnext;if(op<len){len-=op;do{output[_out++]=s_window[from++]}while(--op);from=0;if(wnext<len){op=wnext;len-=op;do{output[_out++]=s_window[from++]}while(--op);from=_out-dist;from_source=output}}}else{from+=wnext-op;if(op<len){len-=op;do{output[_out++]=s_window[from++]}while(--op);from=_out-dist;from_source=output}}while(len>2){output[_out++]=from_source[from++];output[_out++]=from_source[from++];output[_out++]=from_source[from++];len-=3}if(len){output[_out++]=from_source[from++];if(len>1){output[_out++]=from_source[from++]}}}else{from=_out-dist;do{output[_out++]=output[from++];output[_out++]=output[from++];output[_out++]=output[from++];len-=3}while(len>2);if(len){output[_out++]=output[from++];if(len>1){output[_out++]=output[from++]}}}}else if((op&64)===0){here=dcode[(here&65535)+(hold&(1<<op)-1)];continue dodist}else{strm.msg="invalid distance code";state4.mode=BAD;break top}break}}else if((op&64)===0){here=lcode[(here&65535)+(hold&(1<<op)-1)];continue dolen}else if(op&32){state4.mode=TYPE;break top}else{strm.msg="invalid literal/length code";state4.mode=BAD;break top}break}}while(_in<last&&_out<end);len=bits>>3;_in-=len;bits-=len<<3;hold&=(1<<bits)-1;strm.next_in=_in;strm.next_out=_out;strm.avail_in=_in<last?5+(last-_in):5-(_in-last);strm.avail_out=_out<end?257+(end-_out):257-(_out-end);state4.hold=hold;state4.bits=bits;return}},function(module22,exports2,__webpack_require__){"use strict";var utils=__webpack_require__(33);var MAXBITS=15;var ENOUGH_LENS=852;var ENOUGH_DISTS=592;var CODES=0;var LENS=1;var DISTS=2;var lbase=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0];var lext=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78];var dbase=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0];var dext=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];module22.exports=function inflate_table(type,lens,lens_index,codes,table,table_index,work,opts){var bits=opts.bits;var len=0;var sym=0;var min=0,max=0;var root=0;var curr=0;var drop=0;var left=0;var used=0;var huff=0;var incr;var fill;var low;var mask;var next;var base=null;var base_index=0;var end;var count=new utils.Buf16(MAXBITS+1);var offs=new utils.Buf16(MAXBITS+1);var extra=null;var extra_index=0;var here_bits,here_op,here_val;for(len=0;len<=MAXBITS;len++){count[len]=0}for(sym=0;sym<codes;sym++){count[lens[lens_index+sym]]++}root=bits;for(max=MAXBITS;max>=1;max--){if(count[max]!==0){break}}if(root>max){root=max}if(max===0){table[table_index++]=1<<24|64<<16|0;table[table_index++]=1<<24|64<<16|0;opts.bits=1;return 0}for(min=1;min<max;min++){if(count[min]!==0){break}}if(root<min){root=min}left=1;for(len=1;len<=MAXBITS;len++){left<<=1;left-=count[len];if(left<0){return-1}}if(left>0&&(type===CODES||max!==1)){return-1}offs[1]=0;for(len=1;len<MAXBITS;len++){offs[len+1]=offs[len]+count[len]}for(sym=0;sym<codes;sym++){if(lens[lens_index+sym]!==0){work[offs[lens[lens_index+sym]]++]=sym}}if(type===CODES){base=extra=work;end=19}else if(type===LENS){base=lbase;base_index-=257;extra=lext;extra_index-=257;end=256}else{base=dbase;extra=dext;end=-1}huff=0;sym=0;len=min;next=table_index;curr=root;drop=0;low=-1;used=1<<root;mask=used-1;if(type===LENS&&used>ENOUGH_LENS||type===DISTS&&used>ENOUGH_DISTS){return 1}for(;;){here_bits=len-drop;if(work[sym]<end){here_op=0;here_val=work[sym]}else if(work[sym]>end){here_op=extra[extra_index+work[sym]];here_val=base[base_index+work[sym]]}else{here_op=32+64;here_val=0}incr=1<<len-drop;fill=1<<curr;min=fill;do{fill-=incr;table[next+(huff>>drop)+fill]=here_bits<<24|here_op<<16|here_val|0}while(fill!==0);incr=1<<len-1;while(huff&incr){incr>>=1}if(incr!==0){huff&=incr-1;huff+=incr}else{huff=0}sym++;if(--count[len]===0){if(len===max){break}len=lens[lens_index+work[sym]]}if(len>root&&(huff&mask)!==low){if(drop===0){drop=root}next+=min;curr=len-drop;left=1<<curr;while(curr+drop<max){left-=count[curr+drop];if(left<=0){break}curr++;left<<=1}used+=1<<curr;if(type===LENS&&used>ENOUGH_LENS||type===DISTS&&used>ENOUGH_DISTS){return 1}low=huff&mask;table[low]=root<<24|curr<<16|next-table_index|0}}if(huff!==0){table[next+huff]=len-drop<<24|64<<16|0}opts.bits=root;return 0}},function(module22,exports2,__webpack_require__){"use strict";var utils=__webpack_require__(33);var STR_APPLY_OK=true;var STR_APPLY_UIA_OK=true;try{String.fromCharCode.apply(null,[0])}catch(__){STR_APPLY_OK=false}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(__){STR_APPLY_UIA_OK=false}var _utf8len=new utils.Buf8(256);for(var q=0;q<256;q++){_utf8len[q]=q>=252?6:q>=248?5:q>=240?4:q>=224?3:q>=192?2:1}_utf8len[254]=_utf8len[254]=1;exports2.string2buf=function(str4){var buf,c,c2,m_pos,i3,str_len=str4.length,buf_len=0;for(m_pos=0;m_pos<str_len;m_pos++){c=str4.charCodeAt(m_pos);if((c&64512)===55296&&m_pos+1<str_len){c2=str4.charCodeAt(m_pos+1);if((c2&64512)===56320){c=65536+(c-55296<<10)+(c2-56320);m_pos++}}buf_len+=c<128?1:c<2048?2:c<65536?3:4}buf=new utils.Buf8(buf_len);for(i3=0,m_pos=0;i3<buf_len;m_pos++){c=str4.charCodeAt(m_pos);if((c&64512)===55296&&m_pos+1<str_len){c2=str4.charCodeAt(m_pos+1);if((c2&64512)===56320){c=65536+(c-55296<<10)+(c2-56320);m_pos++}}if(c<128){buf[i3++]=c}else if(c<2048){buf[i3++]=192|c>>>6;buf[i3++]=128|c&63}else if(c<65536){buf[i3++]=224|c>>>12;buf[i3++]=128|c>>>6&63;buf[i3++]=128|c&63}else{buf[i3++]=240|c>>>18;buf[i3++]=128|c>>>12&63;buf[i3++]=128|c>>>6&63;buf[i3++]=128|c&63}}return buf};function buf2binstring(buf,len){if(len<65537){if(buf.subarray&&STR_APPLY_UIA_OK||!buf.subarray&&STR_APPLY_OK){return String.fromCharCode.apply(null,utils.shrinkBuf(buf,len))}}var result="";for(var i3=0;i3<len;i3++){result+=String.fromCharCode(buf[i3])}return result}exports2.buf2binstring=function(buf){return buf2binstring(buf,buf.length)};exports2.binstring2buf=function(str4){var buf=new utils.Buf8(str4.length);for(var i3=0,len=buf.length;i3<len;i3++){buf[i3]=str4.charCodeAt(i3)}return buf};exports2.buf2string=function(buf,max){var i3,out,c,c_len;var len=max||buf.length;var utf16buf=new Array(len*2);for(out=0,i3=0;i3<len;){c=buf[i3++];if(c<128){utf16buf[out++]=c;continue}c_len=_utf8len[c];if(c_len>4){utf16buf[out++]=65533;i3+=c_len-1;continue}c&=c_len===2?31:c_len===3?15:7;while(c_len>1&&i3<len){c=c<<6|buf[i3++]&63;c_len--}if(c_len>1){utf16buf[out++]=65533;continue}if(c<65536){utf16buf[out++]=c}else{c-=65536;utf16buf[out++]=55296|c>>10&1023;utf16buf[out++]=56320|c&1023}}return buf2binstring(utf16buf,out)};exports2.utf8border=function(buf,max){var pos;max=max||buf.length;if(max>buf.length){max=buf.length}pos=max-1;while(pos>=0&&(buf[pos]&192)===128){pos--}if(pos<0){return max}if(pos===0){return max}return pos+_utf8len[buf[pos]]>max?pos:max}},function(module22,exports2){"use strict";module22.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(module22,exports2){"use strict";module22.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(module22,exports2){"use strict";function ZStream(){this.input=null;this.next_in=0;this.avail_in=0;this.total_in=0;this.output=null;this.next_out=0;this.avail_out=0;this.total_out=0;this.msg="";this.state=null;this.data_type=2;this.adler=0}module22.exports=ZStream},function(module22,exports2){"use strict";function GZheader(){this.text=0;this.time=0;this.xflags=0;this.os=0;this.extra=null;this.extra_len=0;this.name="";this.comment="";this.hcrc=0;this.done=false}module22.exports=GZheader}])})}});var CSV=class{constructor(onOpen=this.onOpen,saveButtonId=null,openButtonId=null){this.onOpen=onOpen;this.notes=[{idx:0,text:"comment"}];if(saveButtonId!==null){document.getElementById(saveButtonId).addEventListener("click",this.saveCSV)}if(openButtonId!==null){document.getElementById(openButtonId).addEventListener("click",this.openCSV)}}processArraysForCSV(data=["1|2|3","3|2|1"],delimiter="|",header="a,b,c",saveNotes=false){let csvDat=header+"\\n";let noteIdx=0;data.forEach((line,i3)=>{if(data[i3]==="string"&&delimiter!==","){csvDat+=line.split(delimiter).join(",")}else{csvData+=line.join(",")}if(saveNotes===true){if(this.notes[noteIdx].idx===i3){line+=this.notes[noteIdx].text;noteIdx++}}if(line.indexOf("\\n")<0){csvDat+="\\n"}});return csvDat}static saveCSV(csvDat="a,b,c\\n1,2,3\\n3,2,1\\n",name2=new Date().toISOString()){var hiddenElement=document.createElement("a");hiddenElement.href="data:text/csv;charset=utf-8,"+encodeURI(csvDat);hiddenElement.target="_blank";if(name2!==""){hiddenElement.download=name2}else{hiddenElement.download=Date().toISOString()}hiddenElement.click()}static openCSV(delimiter=",",onOpen=(csvDat,header,path)=>{return csvDat,header,path}){var input=document.createElement("input");input.accept=".csv";input.type="file";input.onchange=e=>{var file=e.target.files[0];var reader=new FileReader;reader.onload=event=>{var tempcsvData=event.target.result;var tempcsvArr=tempcsvData.split("\\n");let header=[];var csvDat=[];tempcsvArr.pop();tempcsvArr.forEach((row,i3)=>{if(i3==0){header=row.split(delimiter)}else{var temp=row.split(delimiter);csvDat.push(temp)}});onOpen(csvDat,header,input.value);input.value=""};reader.readAsText(file)};input.click()}static openCSVRaw(onOpen=(csvDat,path)=>{return csvDat,path}){var input=document.createElement("input");input.accept=".csv";input.type="file";input.onchange=e=>{var file=e.target.files[0];var reader=new FileReader;reader.onload=event=>{var tempcsvData=event.target.result;onOpen(tempcsvData,input.value);input.value=""};reader.readAsText(file)};input.click()}onOpen(csvDat=[],header=[]){console.log("CSV Opened!",header,csvDat)}};var parseCSVData=(data,filename,head,hasend=true,parser=(lines,filename2,head2)=>{let result={filename:filename2};let header=head2;if(typeof head2==="string")header=head2.split(",");result.header=header;for(let i3=0;i3<lines.length;i3++){let line=lines[i3].split(",");for(let j=0;j<line.length;j++){if(!result[header[j]])result[header[j]];result[header[j]]=line[j]}}return result})=>{let lines=data.split("\\n");if(!head)head=lines[0];lines.shift();if(hasend===false)lines.pop();let result=parser(lines,filename,head);return result};function toISOLocal(d2){d2=new Date(d2);var z3=n=>("0"+n).slice(-2);var zz=n=>("00"+n).slice(-3);var off=d2.getTimezoneOffset();var sign=off<0?"+":"-";off=Math.abs(off);return d2.getFullYear()+"-"+z3(d2.getMonth()+1)+"-"+z3(d2.getDate())+"T"+z3(d2.getHours())+":"+z3(d2.getMinutes())+":"+z3(d2.getSeconds())+"."+zz(d2.getMilliseconds())+"(UTC"+sign+z3(off/60|0)+":00)"}var BrowserFS=__toESM4(require_browserfs());var fsInited=false;var fs2=BrowserFS.BFSRequire("fs");var BFSBuffer=BrowserFS.BFSRequire("buffer").Buffer;var initFS=async(dirs=["data"],oninit=(exists2=[])=>{},onerror=e=>{},filesystem="IndexedDB")=>{if(fsInited)return true;else{fsInited=true;return new Promise((resolve,reject)=>{let oldmfs=fs2.getRootFS();BrowserFS.FileSystem[filesystem].Create({},(e,mountableFileSystem)=>{if(e){reject(e);return}if(!mountableFileSystem){onerror(e);reject(new Error(`Error creating BrowserFS`));return}BrowserFS.initialize(mountableFileSystem);let promises=[];dirs.forEach(async dir2=>{promises.push(dirExists(fs2,dir2))});Promise.all(promises).then(values=>{oninit(values);fsInited=true;resolve(true)})})})}};var exists=async(path="")=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise(resolve=>{fs2.exists("/"+path,function(exists2){resolve(exists2)})})};var readFile=async(path="data")=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise(resolve=>{fs2.readFile("/"+path,function(e,output){resolve(output)})})};async function readFileChunk(path="data",begin=0,end=5120,onread=data=>{}){if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);if(path!=""){return new Promise(async(resolve,reject)=>{fs2.open("/"+path,"r",(e,fd)=>{if(e){reject(e);return}fs2.read(fd,end,begin,"utf-8",(er,output,bytesRead)=>{if(er){reject(er);return}if(bytesRead!==0){let data=output.toString();fs2.close(fd,()=>{onread(data,path);resolve(data)})}else resolve(void 0)})})})}else{console.error("Path name is not defined");return void 0}}var getFilenames=async(directory="data",onload=directory2=>{})=>{if(!fsInited)await initFS([directory]);else await dirExists(fs2,directory);return new Promise((resolve,reject)=>{fs2.readdir("/"+directory,(e,dir2)=>{if(e){reject(e);return}if(dir2){onload(dir2);resolve(dir2)}else resolve(void 0)})})};var writeFile=async(path,data,onwrite=data2=>{})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise((resolve,reject)=>{fs2.writeFile("/"+path,data,err=>{if(err){reject(err);return}onwrite(data);resolve(true)})})};var appendFile2=async(path,data,onwrite=data2=>{})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise((resolve,reject)=>{fs2.appendFile("/"+path,data,err=>{if(err){reject(err);return}onwrite(data);resolve(true)})})};var deleteFile=async(path="data",ondelete=()=>{})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise(resolve=>{if(path!=""){fs2.unlink("/"+path,e=>{if(e)console.error(e);ondelete();resolve(true)})}else{console.error("Path name is not defined");resolve(false)}})};var readFileAsText=async(path="data",end="end",begin=0,onread=(data,filename)=>{})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise(async(resolve,reject)=>{let size=await getFileSize(path,dir);if(end==="end"){end=size}else if(typeof end==="number"){if(end>size)end=size}fs2.open("/"+path,"r",(e,fd)=>{if(e){reject(e);return}fs2.read(fd,end,begin,"utf-8",(er,output,bytesRead)=>{if(er){reject(er);return}if(bytesRead!==0){let data=output.toString();fs2.close(fd,()=>{onread(data,path);resolve(data)})}else resolve(void 0)})})})};var listFiles=async(dir2="data",onload=directory=>{})=>{if(!fsInited)await initFS([dir2]);else await dirExists(fs2,dir2);return new Promise((resolve,reject)=>{fs2.readdir("/"+dir2,(e,directory)=>{if(e){reject(e);return}if(directory){onload(directory)}resolve(directory)})})};var getFileSize=async(path="data",onread=size=>{console.log(size)})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise((resolve,reject)=>{fs2.stat("/"+path,(e,stats)=>{if(e){reject(e);return}let filesize=stats.size;onread(filesize);resolve(filesize)})})};var getCSVHeader=async(path="data",onopen=(header,filename)=>{console.log(header,filename)})=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise((resolve,reject)=>{fs2.open("/"+path,"r",(e,fd)=>{if(e){reject(e);return}fs2.read(fd,65535,0,"utf-8",(er,output,bytesRead)=>{if(er){reject(er);return}if(bytesRead!==0){let data=output.toString();let lines=data.split("\\n");let header=lines[0];fs2.close(fd,()=>{onopen(header,path);resolve(header)})}else resolve(void 0)})})})};var writeToCSVFromDB=async(path="data",fileSizeLimitMb=10)=>{if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);return new Promise((resolve,reject)=>{if(path!=""){fs2.stat("/"+path,(e,stats)=>{if(e){reject(e);return}let filesize=stats.size;console.log(filesize);fs2.open(path,"r",(e2,fd)=>{if(e2){reject(e2);return}let i3=0;let maxFileSize=fileSizeLimitMb*1024*1024;let end=maxFileSize;if(filesize<maxFileSize){end=filesize;fs2.read(fd,end,0,"utf-8",(e3,output,bytesRead)=>{if(e3){reject(e3);return}if(bytesRead!==0)CSV.saveCSV(output.toString(),path);fs2.close(fd);resolve(true)})}else{const writeChunkToFile=async()=>{if(i3<filesize){if(i3+end>filesize){end=filesize-i3}let chunk=0;fs2.read(fd,end,i3,"utf-8",(e3,output,bytesRead)=>{if(e3){reject(e3);return}if(bytesRead!==0){CSV.saveCSV(output.toString(),path+"_"+chunk);i3+=maxFileSize;chunk++;writeChunkToFile();fs2.close(fd);resolve(true)}})}}}})})}else{console.error("File name is not defined.");resolve(false)}})};async function readCSVChunkFromDB(path="data",start=0,end="end",options={}){if(!fsInited)await initFS([path.split("/")[0]]);else await dirExists(fs2,path.split("/")[0]);const transpose=options.transpose||false;let head=await getCSVHeader(path);if(head)head=head.split(",");else return void 0;let resultLengths=[];let resultNames=[];let results=transpose?[]:{};head.forEach(v2=>{if(v2){resultNames.push(v2);resultLengths.push(1)}else resultLengths[resultLengths.length-1]++});let size=await getFileSize(path);if(end==="end")end=size;else if(end>size){start=size-(end-start);end=size}let data=(await readFileChunk(path,start,end)).split("\\n").slice(1,-1);let preprocess=value=>{if(options.json){try{value=JSON.parse(value)}catch{}}return value};data.forEach((r,i3)=>{let row=r.split(",");if(transpose){const entry={};row.forEach((v2,idx)=>entry[resultNames[idx]]=preprocess(v2));results.push(entry)}else{row.forEach((v2,i22)=>{const header=resultNames[i22];if(!results[header])results[header]=[];results[header].push(preprocess(v2))})}});return results}var directories={};var dirExists=async(fs3,directory)=>{return new Promise((resolve,reject)=>{if(directories[directory]==="exists"||directories[directory]==="created"){resolve()}else{fs3.exists(`/${directory}`,exists2=>{if(exists2){directories[directory]="exists";console.log(`/${directory} exists!`);resolve()}else if(directories[directory]==="creating"){console.log(directory+" is still being created.");resolve()}else{console.log(`creating /${directory}`,fs3);directories[directory]="creating";fs3.mkdir(`/${directory}`,1,err=>{if(err){reject(err);return}directories[directory]="created";setTimeout(resolve,500)})}})}})};var BFSRoutes={initFS,dirExists,exists,readFile,readFileChunk,getFilenames,writeFile,appendFile:appendFile2,deleteFile,readFileAsText,getFileSize,getCSVHeader,listFiles};var CSV_REFERENCE={};function lerp(v0,v1,t3){return(1-t3)*v0+t3*v1}function interpolerp(v0,v1,fit,floor=true){if(fit<=2)return[v0,v1];let a=1/fit;let result=new Array(fit);result[0]=v0;for(let i3=1;i3<=fit;i3++){result[i3]=lerp(v0,v1,a*i3);if(floor)result[i3]=Math.floor(result[i3])}return result}var appendCSV=async(newData,filename,header,options)=>{if(!filename){let keys3=Object.keys(CSV_REFERENCE);if(keys3.length>0)filename=keys3[keys3.length-1];else filename=`csv${new Date().toISOString()}`}let csv=CSV_REFERENCE[filename];if(!csv){let keys3=Array.from(Object.keys(newData));if(keys3.indexOf("timestamp")>-1)keys3.splice(keys3.indexOf("timestamp"),1);CSV_REFERENCE[filename]={header:header?header:["timestamp","localized",...keys3],lastX:void 0,buffer:"",buffered:0,bufferSize:0,toFixed:0,xIncrement:void 0};csv=CSV_REFERENCE[filename];const existingHeader=await getCSVHeader(filename).catch(()=>null);const isDifferent=!existingHeader||existingHeader!==csv.header.join(",");if(isDifferent)header=csv.header}if(!csv.header||csv.header?.length===0){let keys3=Array.from(Object.keys(newData));if(keys3.indexOf("timestamp")>-1)keys3.splice(keys3.indexOf("timestamp"),1);csv.header=header?header:["timestamp","localized",...keys3]}else if(header)csv.header=header;let maxLen=1;for(const key in newData){const value=newData[key];if(csv.header.indexOf(key)>-1&&value&&Array.isArray(value)&&value?.length>maxLen)maxLen=value?.length}let x3;if(csv.xIncrement){if(!csv.lastX){if(typeof newData[csv.header[0]]!=="undefined"){x3=newData[csv.header[0]]}else if(csv.header[0].toLowerCase().includes("time")||csv.header[0].toLowerCase().includes("unix"))x3=Date.now()}else{if(newData[csv.header[2]]){if(Array.isArray(newData[csv.header[2]]))x3=csv.lastX+csv.xIncrement*newData[csv.header[2]].length;else x3=csv.lastX+csv.xIncrement}else if(newData[csv.header[0]]){if(Array.isArray(newData[csv.header[0]]))x3=csv.lastX+csv.xIncrement*newData[csv.header[0]].length;else x3=csv.lastX+csv.xIncrement}else x3=csv.lastX+csv.xIncrement}}else if(newData[csv.header[0]])x3=newData[csv.header[0]];else x3=Date.now();if(typeof csv.lastX==="undefined")csv.lastX=Array.isArray(x3)?x3[0]:x3;if(typeof x3==="undefined"){if(csv.header[0].includes("time")){let now=Date.now();if(maxLen===1)x3=Date.now();else{x3=interpolerp(csv.lastX,now,maxLen);x3.shift()}}else{let newX=csv.lastX+1;if(maxLen>1){x3=new Array(maxLen).fill("");x3[maxLen-1]=newX}else x3=newX}}else if(maxLen>1&&x3?.length!==maxLen){if(!Array.isArray(x3)||x3.length===1){x3=interpolerp(csv.lastX,x3,maxLen);x3.shift()}else{x3=interpolerp(x3[0],x3[x3.length-1],maxLen);x3.shift()}}let toAppend=[];if(Array.isArray(x3)){let curIdcs={};for(let i3=0;i3<x3.length;i3++){toAppend.push([]);for(let j=0;j<csv.header.length;j++){let d2=newData[csv.header[j]];if(j===0){toAppend[i3][0]=x3[i3];if(csv.header[j+1]==="localized"){j++;toAppend[i3][j]=toISOLocal(x3[i3])}continue}if(d2===void 0){toAppend[i3][j]=""}else if(Array.isArray(d2)){if(d2.length===x3.length)toAppend[i3][j]=d2[i3];else{if(!(csv.header[j]in curIdcs)){curIdcs[csv.header[j]]=i3;if(d2.length!==1)toAppend[i3][j]=d2[i3]}else{if(d2.length===1&&i3===x3.length-1){toAppend[i3][j]=d2[curIdcs[csv.header[j]]]}else if(Math.floor(d2.length*i3/x3.length)>curIdcs[csv.header[j]]){curIdcs[csv.header[j]]++;toAppend[i3][j]=d2[curIdcs[csv.header[j]]]}else{toAppend[i3][j]=""}}}}else{if(i3===x3.length-1){toAppend[i3][j]=d2}else{toAppend[i3][j]=""}}if(typeof toAppend[i3][j]==="number"&&Math.floor(toAppend[i3][j])!==toAppend[i3][j])toAppend[i3][j]=toAppend[i3][j].toFixed(CSV_REFERENCE[filename].toFixed)}}}else{toAppend.push([]);for(let j=0;j<csv.header.length;j++){if(j===0){toAppend[0][0]=x3;if(csv.header[j+1]==="localized"){j++;toAppend[0][j]=toISOLocal(x3)}continue}if(csv.header[j]in newData)toAppend[0][j]=newData[csv.header[j]];else toAppend[0][j]="";if(typeof toAppend[0][j]==="number"&&Math.floor(toAppend[0][j])!==toAppend[0][j])toAppend[0][j]=toAppend[0][j].toFixed(CSV_REFERENCE[filename].toFixed)}}let csvProcessed="";if(header)csvProcessed+=header.join(",")+"\\n";toAppend.forEach(arr=>{csvProcessed+=(options?.json?arr.map(v2=>JSON.stringify(v2)):arr).join(",")+"\\n";if(csv.bufferSize)csv.buffered++});csv.lastX=toAppend[toAppend.length-1][0];if(csv.bufferSize){csv.buffer+=csvProcessed;if(csv.buffered>csv.bufferSize){let r=new Promise((res,rej)=>{exists(filename).then(fileExists=>{if(!fileExists){writeFile(filename,csv.buffer,written=>{res(written)})}else{appendFile2(filename,csv.buffer,written=>{res(written)})}})});await r;csv.buffer="";csv.buffered=0;return r}else return Promise.resolve(true)}else{return new Promise((res,rej)=>{exists(filename).then(fileExists=>{if(!fileExists){writeFile(filename,csvProcessed,written=>{res(written)})}else{appendFile2(filename,csvProcessed,written=>{res(written)})}})})}};var updateCSVHeader=(header,filename)=>{if(CSV_REFERENCE[filename]){CSV_REFERENCE[filename].header=header}};var createCSV=(filename,header,toFixed=5,bufferSize=0,xIncrement)=>{if(header?.indexOf("timestamp")>1){header.splice(header.indexOf("timestamp"),1);header.unshift("timestamp")}if((header?.[0].toLowerCase().includes("time")||header?.[0].toLowerCase().includes("unix"))&&header[1]!=="localized"){header.splice(1,0,"localized")}CSV_REFERENCE[filename]={header,lastX:header[1]==="localized"?Date.now():0,bufferSize,buffer:"",buffered:0,toFixed,xIncrement};return new Promise((res,rej)=>{writeFile(filename,CSV_REFERENCE[filename].header?CSV_REFERENCE[filename].header.join(",")+"\\n":"",written=>{res(written)}).catch(rej)})};var visualizeDirectory=(dir2,parentNode=document.body)=>{return new Promise(async(res,rej)=>{if(parentNode.querySelector("#bfs"+dir2))parentNode.querySelector("#bfs"+dir2)?.remove();parentNode.insertAdjacentHTML("beforeend",`<div id=\'bfs${dir2}\' class=\'bfs${dir2}\'></div>`);let div=parentNode.querySelector("#bfs"+dir2);await listFiles(dir2).then(directory=>{if(directory.length===0)div.innerHTML="No Files!";else directory.forEach(listing=>{div?.insertAdjacentHTML("beforeend",`<div id=\'${listing}\' class=\'bfsfilediv\'>\n                        <span class=\'bfsfiletitle\'>Data: </span>\n                        <span>${listing}</span>\n                        <button class=\'bfsdownloadbtn\' id=\'download${listing}\'>Download CSV</button>\n                        ${listing.indexOf(".")>-1?`<button class=\'bfsdeletebtn\' id=\'delete${listing}\'>Delete</button>`:""}\n                    </div>`);if(document.getElementById(`delete${listing}`)){document.getElementById(`delete${listing}`).onclick=()=>{deleteFile(dir2+"/"+listing,()=>{visualizeDirectory(dir2,parentNode)})}}if(document.getElementById(`download${listing}`)){document.getElementById(`download${listing}`).onclick=()=>{writeToCSVFromDB(dir2+"/"+listing,10)}}});res(directory)}).catch(rej)})};var csvRoutes={appendCSV,updateCSVHeader,createCSV,visualizeDirectory,openCSV:CSV.openCSV,saveCSV:CSV.saveCSV,openCSVRaw:CSV.openCSVRaw,parseCSVData,getCSVHeader,writeToCSVFromDB,readCSVChunkFromDB,toISOLocal};Object.assign(nodeTemplates,algorithms);if(typeof WorkerGlobalScope!=="undefined"&&self instanceof WorkerGlobalScope){globalThis.Devices=Devices2;const worker=new WorkerService({roots:{...workerCanvasRoutes,...remoteGraphRoutes,...BFSRoutes,...csvRoutes,...streamWorkerRoutes,...webglPlotRoutes}});console.log("worker",worker)}var device_worker_default=self;})();\n/*! Bundled license information:\n\ndevice-decoder/dist/device.frontend.esm.js:\n  (*! Capacitor: https://capacitorjs.com/ - MIT License *)\n\ngraphscript-services.storage/dist/index.storage.services.esm.js:\n  (*! Bundled license information:\n  \n  browserfs/dist/browserfs.js:\n    (*!\n    * The buffer module from node.js, for the browser.\n    *\n    * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n    * @license  MIT\n    *)\n  *)\n*/\n');
  var url3 = URL.createObjectURL(new globalThis.Blob([str5], { type: "text/javascript" }));
  var device_worker_default = url3;

  // src/scripts/device.ts
  var device;
  function disconnectDevice() {
    device?.disconnect();
    state.setState({ device: void 0 });
  }
  function genTimestamps(ct, sps6, from) {
    let now = from ? from : Date.now();
    let toInterp = [now - ct * 1e3 / sps6, now];
    return ByteParser2.upsample(toInterp, ct);
  }
  async function connectDevice() {
    const hrworker = workers.addWorker({ url: device_worker_default });
    const brworker = workers.addWorker({ url: device_worker_default });
    hrworker.post("loadFromTemplate", ["beat_detect", "hr", {
      sps: 100
    }]);
    brworker.post("loadFromTemplate", ["beat_detect", "breath", {
      sps: 100
    }]);
    hrworker.subscribe("hr", (data) => {
      const hr = {
        hr: data.bpm,
        hrv: data.change,
        timestamp: data.timestamp
      };
      state.setValue("hr", hr);
    });
    brworker.subscribe("breath", (data) => {
      const breath = {
        breath: data.bpm,
        brv: data.change,
        timestamp: data.timestamp
      };
      state.setValue("breath", breath);
    });
    device = await initDevice(
      Devices["BLE"]["nrf5x"],
      {
        ondecoded: {
          //after data comes back from codec
          "0002cafe-b0ba-8bad-f00d-deadbeef0000": (data) => {
            state.setValue("emg", data);
          },
          //ads131m08 (main)
          "0003cafe-b0ba-8bad-f00d-deadbeef0000": (data) => {
            state.setValue("ppg", data);
            let d2 = Object.assign({}, data);
            d2.timestamp = genTimestamps(32, 100, data.timestamp);
            hrworker.post("hr", d2);
            brworker.post("breath", d2);
          },
          //max30102
          "0004cafe-b0ba-8bad-f00d-deadbeef0000": (data) => {
            state.setValue("imu", data);
          },
          //mpu6050
          "0005cafe-b0ba-8bad-f00d-deadbeef0000": (data) => {
            state.setValue("emg2", data);
          },
          //extra ads131 (if plugged in)
          "0006cafe-b0ba-8bad-f00d-deadbeef0000": (data) => {
            state.setValue("env", data);
          }
          //bme280
        },
        onconnect: () => {
          this.setState({ deviceConnected: true });
        },
        ondisconnect: () => {
          this.setState({ deviceConnected: false });
        }
      }
    );
    const sps6 = 250;
    const gain3 = 32;
    const nbits3 = 24;
    const vref3 = 1.2;
    let defaultsetting5 = {
      sps: sps6,
      useDCBlock: false,
      useBandpass: false,
      useLowpass: true,
      lowpassHz: 30,
      // bandpassLower:3, 
      // bandpassUpper:45, 
      useScaling: true,
      scalar: 0.96 * 1e3 * vref3 / (gain3 * (Math.pow(2, nbits3) - 1))
      //adjust to millivolts
      //trimOutliers:true,
      //outlierTolerance:0.3
    };
    const ads131m08FilterSettings3 = {
      "0": JSON.parse(JSON.stringify(defaultsetting5)),
      "1": JSON.parse(JSON.stringify(defaultsetting5)),
      "2": JSON.parse(JSON.stringify(defaultsetting5)),
      "3": JSON.parse(JSON.stringify(defaultsetting5)),
      "4": JSON.parse(JSON.stringify(defaultsetting5)),
      "5": JSON.parse(JSON.stringify(defaultsetting5)),
      "6": JSON.parse(JSON.stringify(defaultsetting5)),
      "7": JSON.parse(JSON.stringify(defaultsetting5))
    };
    device.workers.streamworker.run("setFilters", ads131m08FilterSettings3);
    state.setState({ device });
  }

  // src/components/DeviceConnect.tsx
  var DeviceConnect = class extends sComponent {
    constructor() {
      super(...arguments);
      this.state = {
        //synced with global state
        deviceConnected: false
      };
    }
    render() {
      return /* @__PURE__ */ import_react2.default.createElement("div", null, !this.state.deviceConnected ? /* @__PURE__ */ import_react2.default.createElement("button", { onClick: connectDevice }, "Connect") : /* @__PURE__ */ import_react2.default.createElement("button", { onClick: disconnectDevice }, "Disconnect"));
    }
  };

  // src/components/Device.tsx
  var Device = class extends sComponent {
    constructor(props) {
      super(props);
      this.state = {
        //synced with global state
        deviceConnected: false,
        device: void 0,
        remote: false
      };
      this.canvas = document.createElement("canvas");
      this.overlay = document.createElement("canvas");
      this.subscriptions = {};
      if (props.remote)
        this.state.remote = props.remote;
      this.canvas.style.width = "100%";
      this.canvas.style.height = "100%";
      this.canvas.width = 800;
      this.canvas.height = 600;
      this.canvas.style.zIndex = "1";
      this.overlay.style.transform = "translateY(-100%)";
      this.overlay.width = 800;
      this.overlay.height = 600;
      this.overlay.style.width = "100%";
      this.overlay.style.height = "100%";
      const defaultSettings = {
        hr: { sps: 1, nSec: 100, units: "bpm" },
        hrv: { sps: 1, nSec: 100, units: "bpm" },
        breath: { sps: 1, nSec: 100, units: "bpm" },
        brv: { sps: 1, nSec: 100, units: "bpm" },
        ...max3010xChartSettings.lines,
        ...mpu6050ChartSettings.lines,
        ...bme280ChartSettings.lines,
        //just showing the first 2 EMG/ECG channels for now...
        0: ads131m08ChartSettings.lines?.["0"],
        1: ads131m08ChartSettings.lines?.["1"]
      };
      this.plotter = new WGLPlotter({
        canvas: this.canvas,
        overlay: this.overlay,
        lines: props.lines ? props.lines : defaultSettings,
        //will render all lines unless specified
        generateNewLines: true,
        cleanGeneration: false,
        worker: canvas_worker_default
      });
      Object.assign(this.subscriptions, {
        emg: state.subscribeEvent(props.deviceId ? props.deviceId + "emg" : "emg", (data) => {
          this.plotter.__operator({ 0: data[0], 1: data[1] });
        }),
        ppg: state.subscribeEvent(props.deviceId ? props.deviceId + "ppg" : "ppg", (ppg) => {
          this.plotter.__operator(ppg);
        }),
        hr: state.subscribeEvent(props.deviceId ? props.deviceId + "hr" : "hr", (hr) => {
          this.plotter.__operator({
            hr: hr.bpm,
            hrv: hr.change
          });
        }),
        breath: state.subscribeEvent(props.deviceId ? props.deviceId + "breath" : "breath", (breath) => {
          this.plotter.__operator({
            breath: breath.bpm,
            brv: breath.change
          });
        }),
        imu: state.subscribeEvent(props.deviceId ? props.deviceId + "imu" : "imu", (imu) => {
          this.plotter.__operator(imu);
        }),
        env: state.subscribeEvent(props.deviceId ? props.deviceId + "env" : "env", (env) => {
          this.plotter.__operator(env);
        })
      });
    }
    componentWillUnmount() {
      for (const key in this.subscriptions) {
        state.unsubscribeEvent(key, this.subscriptions[key]);
      }
    }
    render() {
      return /* @__PURE__ */ import_react3.default.createElement("div", null, /* @__PURE__ */ import_react3.default.createElement("div", null, "Device Connect"), !this.state.remote && /* @__PURE__ */ import_react3.default.createElement(DeviceConnect, null), /* @__PURE__ */ import_react3.default.createElement("div", { className: "chartContainer", ref: (ref) => {
        ref?.appendChild(this.canvas);
        ref?.appendChild(this.overlay);
      } }));
    }
  };

  // src/scripts/webrtc.ts
  var webrtcData = {
    webrtcStream: void 0,
    //current active stream
    availableStreams: {},
    //list of accepted calls
    unansweredCalls: {}
  };
  state.setState(webrtcData);
  var answerCall = async (call) => {
    let rtc = await webrtc.answerCall(call);
    usersocket.run(
      "runConnection",
      //run this function on the backend router
      [
        call.caller,
        //run this connection 
        "run",
        //use this function (e.g. run, post, subscribe, etc. see User type)
        "answerPeer",
        //run this function on the user's end
        [
          //and pass these arguments
          {
            _id: rtc._id,
            peerdescription: rtc.peerdescription,
            //the host needs this
            caller: client.currentUser._id,
            firstName: client.currentUser.firstName,
            lastName: client.currentUser.lastName
          }
        ]
      ]
    );
    state.setState({
      availableStreams: Object.assign(
        state.data.availableStreams,
        {
          [rtc._id]: rtc
        }
      )
    });
  };
  webrtc.subscribe("receiveCallInformation", (id) => {
    let callinfo = webrtc.unanswered[id];
    console.log("received call information:", id);
    state.setState({ unansweredCalls: webrtc.unanswered });
  });

  // src/components/WebRTC.tsx
  var WebRTCComponent = class extends sComponent {
    constructor(props) {
      super(props);
      this.state = {
        loggedInId: void 0,
        availableUsers: void 0,
        webrtcStream: void 0,
        availableStreams: {},
        //we can handle multiple connections too
        unansweredCalls: {},
        //webrtc.unanswered reference
        unansweredCallDivs: void 0,
        chartDataDiv: void 0,
        videoTrackDiv: void 0
      };
      this.subscriptions = {};
      if (props.deviceId)
        this.deviceId = props.deviceId;
    }
    componentDidMount() {
      this.getUsers();
      this.getUnanweredCallInfo();
    }
    async getUsers() {
      let userIds = await usersocket.run("getAllOnlineUsers");
      let userInfo = await client.getUsers(userIds);
      if (userInfo) {
        let divs = [];
        userInfo.forEach((user) => {
          let voicecall = async () => {
            if (this.state.availableStreams[user._id]) {
            } else {
            }
          };
          let videocall = async () => {
            if (this.state.availableStreams[user._id]) {
            } else {
            }
          };
          let view = async () => {
            if (this.state.availableStreams[user._id]) {
            } else {
            }
          };
          divs.push(
            //turn into a dropdown or something
            /* @__PURE__ */ import_react4.default.createElement("div", null, /* @__PURE__ */ import_react4.default.createElement("div", null, "User: ", user.firstName, " ", user.lastName), /* @__PURE__ */ import_react4.default.createElement("button", { id: `voicecall${user._id}`, onClick: voicecall }, "\u{1F4DE}"), /* @__PURE__ */ import_react4.default.createElement("button", { id: `videocall${user._id}`, onClick: videocall }, "\u{1F4FD}\uFE0F"), /* @__PURE__ */ import_react4.default.createElement("button", { id: `view${user._id}`, onClick: view }, "\u{1F493}"))
          );
        });
        this.setState({
          availableUsers: divs
        });
      }
    }
    async getUnanweredCallInfo() {
      let divs = Object.keys(this.state.unansweredCalls).map(async (key) => {
        let call = this.state.unansweredCalls[key];
        let caller = (await client.getUsers([call.caller]))[0];
        call.onicecandidate = (ev2) => {
          if (ev2.candidate) {
            let cid = `peercandidate${Math.floor(Math.random() * 1e15)}`;
            usersocket.run(
              "runConnection",
              //run this function on the backend router
              [
                call.caller,
                //run this connection 
                "run",
                //use this function (e.g. run, post, subscribe, etc. see User type)
                "receiveCallInformation",
                //run this function on the user's end
                [
                  //and pass these arguments
                  {
                    _id: call._id,
                    peercandidates: { [cid]: ev2.candidate }
                  }
                ]
              ]
            ).then((id) => {
              console.log("call information echoed from peer:", id);
            });
          }
        };
        call.ondatachannel = (ev2) => {
          ev2.channel.onmessage = (ev3) => {
            if (ev3.data.emg) {
              state.setValue(this.deviceId ? this.deviceId + "emg" : "emg", ev3.data.emg);
            }
            if (ev3.data.ppg) {
              state.setValue(this.deviceId ? this.deviceId + "ppg" : "ppg", ev3.data.ppg);
            }
            if (ev3.data.hr) {
              state.setValue(this.deviceId ? this.deviceId + "hr" : "hr", ev3.data.hr);
            }
            if (ev3.data.hrv) {
              state.setValue(this.deviceId ? this.deviceId + "hrv" : "hrv", ev3.data.hrv);
            }
            if (ev3.data.breath) {
              state.setValue(this.deviceId ? this.deviceId + "breath" : "breath", ev3.data.breath);
            }
            if (ev3.data.brv) {
              state.setValue(this.deviceId ? this.deviceId + "brv" : "brv", ev3.data.brv);
            }
            if (ev3.data.imu) {
              state.setValue(this.deviceId ? this.deviceId + "imu" : "imu", ev3.data.imu);
            }
            if (ev3.data.env) {
              state.setValue(this.deviceId ? this.deviceId + "env" : "env", ev3.data.env);
            }
          };
          this.setState({
            chartDataDiv: /* @__PURE__ */ import_react4.default.createElement("div", null, /* @__PURE__ */ import_react4.default.createElement(
              Device,
              {
                remote: false,
                deviceId: call._id
              }
            ))
          });
        };
        call.ontrack = (ev2) => {
          this.setState({
            videoTrackDiv: /* @__PURE__ */ import_react4.default.createElement("div", null)
          });
        };
        let divId = `call${call._id}`;
        return /* @__PURE__ */ import_react4.default.createElement("div", { id: divId }, /* @__PURE__ */ import_react4.default.createElement("div", null, "User: ", caller.firstName, " ", caller.lastName), /* @__PURE__ */ import_react4.default.createElement("button", { onClick: () => {
          answerCall(call);
        } }, "Join Call"));
      });
      this.setState({ unansweredCallDivs: divs });
    }
    enableVideo(audio) {
    }
    enableDeviceStream(streamId) {
      if (state.data.device) {
        let stream = this.state.availableStreams[streamId];
        this.subscriptions[streamId] = {
          emg: state.subscribeEvent("emg", (data) => {
            stream.send({ [streamId + "emg"]: data });
          }),
          ppg: state.subscribeEvent("ppg", (ppg) => {
            stream.send({ [streamId + "ppg"]: ppg });
          }),
          hr: state.subscribeEvent("hr", (hr) => {
            stream.send({
              [streamId + "hr"]: hr.bpm,
              [streamId + "hrv"]: hr.change
            });
          }),
          breath: state.subscribeEvent("breath", (breath) => {
            stream.send({
              [streamId + "breath"]: breath.bpm,
              [streamId + "brv"]: breath.change
            });
          }),
          imu: state.subscribeEvent("imu", (imu) => {
            stream.send({ [streamId + "imu"]: imu });
          }),
          env: state.subscribeEvent("env", (env) => {
            stream.send({ [streamId + "env"]: env });
          })
        };
        stream.onclose = () => {
          for (const key in this.subscriptions[streamId]) {
            state.unsubscribeEvent(key, this.subscriptions[streamId][key]);
          }
        };
      }
    }
    render() {
      return /* @__PURE__ */ import_react4.default.createElement("div", null, /* @__PURE__ */ import_react4.default.createElement("div", { id: "receivedCalls" }, "Received Calls", this.state.unansweredCallDivs && this.state.unansweredCallDivs.map((div) => div)), /* @__PURE__ */ import_react4.default.createElement("hr", null), /* @__PURE__ */ import_react4.default.createElement("div", { id: "availableUsers" }, "Available Users", this.state.availableUsers && this.state.availableUsers.map((div) => div)), /* @__PURE__ */ import_react4.default.createElement("hr", null), "Stream:", /* @__PURE__ */ import_react4.default.createElement("div", { id: "webrtcstream" }, this.state.videoTrackDiv, this.state.chartDataDiv));
    }
  };

  // src/components/Dashboard.tsx
  var import_react6 = __toESM(require_react(), 1);

  // src/components/StreamSelect.tsx
  var import_react5 = __toESM(require_react(), 1);
  var StreamSelect = class extends sComponent {
    constructor() {
      super(...arguments);
      this.state = {
        //synced with global state
        availableStreams: {},
        streamSelected: void 0
      };
    }
    render() {
      let onchange = (ev2) => {
        let value = ev2.target.value;
        this.setState({ streamId: value });
      };
      return /* @__PURE__ */ import_react5.default.createElement("div", null, "Select Stream:", /* @__PURE__ */ import_react5.default.createElement("select", { onChange: onchange }, /* @__PURE__ */ import_react5.default.createElement("option", { value: void 0 }, "My Device"), Object.keys(this.state.availableStreams).length > 0 && Object.keys(this.state.availableStreams).map((key) => {
        return /* @__PURE__ */ import_react5.default.createElement("option", { value: key }, this.state.availableStreams[key].firstName, " ", this.state.availableStreams[key].lastName ? this.state.availableStreams[key].lastName : "");
      })));
    }
  };

  // src/components/Dashboard.tsx
  var Dashboard = class extends sComponent {
    constructor() {
      super(...arguments);
      this.state = {
        //synced with global state
        streamSelected: void 0,
        //stream selected?
        availableStreams: {}
        //we can handle multiple connections too
      };
    }
    render() {
      return /* @__PURE__ */ import_react6.default.createElement("div", null, "Dashboard:", /* @__PURE__ */ import_react6.default.createElement("hr", null), /* @__PURE__ */ import_react6.default.createElement("div", null, /* @__PURE__ */ import_react6.default.createElement(StreamSelect, null)), /* @__PURE__ */ import_react6.default.createElement("div", null, /* @__PURE__ */ import_react6.default.createElement(
        Device,
        {
          remote: !!this.state.streamSelected,
          deviceId: this.state.streamSelected
        }
      )));
    }
  };

  // src/components/Recordings.tsx
  var import_react7 = __toESM(require_react(), 1);
  var Recordings = class extends sComponent {
    //list from db
    listRecordings() {
      let recordings = [];
      let filelist = [];
      filelist.forEach((file) => {
        let download = () => {
        };
        let deleteFile = () => {
        };
        let backup = () => {
        };
        recordings.push(
          /* @__PURE__ */ import_react7.default.createElement("div", null, /* @__PURE__ */ import_react7.default.createElement("span", null, file), /* @__PURE__ */ import_react7.default.createElement("button", { onClick: download }, "Download"), /* @__PURE__ */ import_react7.default.createElement("button", { onClick: deleteFile }, "Delete"), /* @__PURE__ */ import_react7.default.createElement("button", { onClick: backup }, "Backup"))
        );
      });
      return recordings;
    }
    render() {
      return /* @__PURE__ */ import_react7.default.createElement("div", null, /* @__PURE__ */ import_react7.default.createElement("button", null, "Record"), "Recordings:", /* @__PURE__ */ import_react7.default.createElement("div", null, this.listRecordings().map((d2) => d2)));
    }
  };

  // src/app.tsx
  state.subscribeEvent("route", (route) => {
    window.history.pushState(void 0, route, location.origin + route);
  });
  var TESTVIEWS = true;
  var App2 = class extends sComponent {
    constructor() {
      super(...arguments);
      this.state = {
        isLoggedIn: false,
        navOpen: false,
        route: "/"
      };
    }
    onLoginClick(c) {
      login(c.email, c.password).then(async (result) => {
        let u3 = await onLogin(result);
      });
    }
    onGoogleLoginClick() {
      login("google").then(async (result) => {
        let u3 = await onLogin(result);
      });
    }
    logout() {
      logout().then((res2) => {
        onLogout(res2);
      });
    }
    setNavOpen(b) {
      this.setState({ navOpen: b });
    }
    render() {
      return /* @__PURE__ */ import_react8.default.createElement("div", null, !this.state.isLoggedIn && !TESTVIEWS && /* @__PURE__ */ import_react8.default.createElement(
        import_my_alyce_component_lib.Login,
        {
          useRegularLogin: true,
          onLoginClick: this.onLoginClick,
          thirdPartyLogins: [
            {
              name: "google",
              logo: /* @__PURE__ */ import_react8.default.createElement("img", { src: "dist/assets/google.png", width: "50px" }),
              onClick: this.onGoogleLoginClick
            }
          ]
        }
      ), (this.state.isLoggedIn || TESTVIEWS) && /* @__PURE__ */ import_react8.default.createElement("div", null, /* @__PURE__ */ import_react8.default.createElement(import_react_burger_menu.slide, null, /* @__PURE__ */ import_react8.default.createElement("button", { onClick: () => {
        this.setState({ "route": "/dashboard", navOpen: false });
      }, id: "home", className: "menu-item" }, "Dash"), /* @__PURE__ */ import_react8.default.createElement("button", { onClick: () => this.setState({ "route": "/peers", navOpen: false }), className: "menu-item" }, "Peers"), /* @__PURE__ */ import_react8.default.createElement("button", { onClick: () => this.setState({ "route": "/history", navOpen: false }), className: "menu-item" }, "History"), /* @__PURE__ */ import_react8.default.createElement("button", { onClick: () => this.setState({ "route": "/device", navOpen: false }), className: "menu-item--small" }, "Device")), /* @__PURE__ */ import_react8.default.createElement("div", { id: "view" }, /* @__PURE__ */ import_react8.default.createElement(
        import_my_alyce_component_lib.TopBar,
        {
          zIndex: 0,
          onMenuExpand: () => {
            let open = !this.state.navOpen;
            this.setState({ "navOpen": open });
          },
          rightNavItems: [
            {
              children: /* @__PURE__ */ import_react8.default.createElement(
                import_my_alyce_component_lib.Avatar,
                {
                  dataState: "done",
                  imgSrc: "src/assets/person.png",
                  size: "xs",
                  status: "online",
                  name: {
                    first: client.currentUser?.firstName,
                    last: client.currentUser?.lastName
                  },
                  backgroundColor: "lightblue"
                }
              ),
              onClick: () => {
              }
            },
            {
              children: /* @__PURE__ */ import_react8.default.createElement("p", { style: { fontSize: "16px" } }, "logout"),
              onClick: () => {
                this.logout();
              }
            }
          ]
        }
      ), /* @__PURE__ */ import_react8.default.createElement("div", { id: "viewcontent" }, /* @__PURE__ */ import_react8.default.createElement("div", { id: "route" }, (this.state.route.includes("dashboard") || this.state.route === "/" || this.state.route === "") && /* @__PURE__ */ import_react8.default.createElement(Dashboard, null), this.state.route.includes("peers") && /* @__PURE__ */ import_react8.default.createElement(WebRTCComponent, null), this.state.route.includes("settings") && /* @__PURE__ */ import_react8.default.createElement(Recordings, null), this.state.route.includes("device") && /* @__PURE__ */ import_react8.default.createElement(Device, null))))));
    }
  };

  // src/scripts/fitbit.ts
  var import_fitbit_api = __toESM(require_dist5(), 1);
  function setupFitbitApi(accesstoken, fitbitId, syncRate = 5 * 60 * 1e3, parentUser) {
    let api2 = new import_fitbit_api.FitbitApi(
      accesstoken,
      fitbitId
    );
    return api2;
  }
  async function authorizeCode(userId, fitbitCode) {
    if (!userId || !fitbitCode)
      return void 0;
    let res2 = await usersocket.run("authorizeFitbit", [userId, fitbitCode]);
    console.log(res2);
    if (res2 && !res2.errors && !res2.html)
      client.baseServerCallback(res2);
    return res2;
  }
  async function refreshToken(userId) {
    if (!userId)
      return void 0;
    let res2 = await usersocket.run("refreshFitbit", userId);
    if (res2 && !res2.errors && !res2.html)
      client.baseServerCallback(res2);
    return res2;
  }

  // src/scripts/gapi.js
  (function initGapiAuth() {
    if (location.hostname === "localhost" && location.port !== "4000")
      return;
    function onGapiLoad() {
      gapi.load("auth2", () => {
        const GoogleAuth = gapi.auth2.init({
          // for more config options:
          // https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig
          client_id: settings.googleclientid,
          scope: `https://www.googleapis.com/auth/drive`
        });
        GoogleAuth.then((gAuth) => {
          gapiResolve(() => gAuth);
        }, (err) => {
          console.log("UNHANDLED");
          console.error(err);
        });
      });
    }
    const script = document.createElement("script");
    script.type = "text/javascript";
    script.src = "https://apis.google.com/js/platform.js";
    script.onload = onGapiLoad;
    document.head.appendChild(script);
    let gapiResolve;
    const addGlobals = {
      log: console.log,
      // resolved only after it's initialized:
      gAuth: new Promise((res2) => gapiResolve = res2)
    };
    Object.keys(addGlobals).forEach((key) => {
      window[key] = addGlobals[key];
    });
  })();

  // src/init.ts
  function getDictFromUrlParams(url4 = window.location) {
    const paramDict = {};
    const searchParams = new URLSearchParams(url4.search);
    searchParams.forEach((val, key) => paramDict[key] = val);
    return paramDict;
  }
  var params = getDictFromUrlParams();
  async function initThirdPartyAPIs(u3) {
    if (params.code && params.state && params.state?.search("is_fitbit=true") > -1) {
      let res2 = await authorizeCode(u3?._id, params.code);
      if (res2.errors || res2.html)
        alert("Fitbit failed to authorize");
      else
        alert("Fitbit authorized!");
    }
    if (u3?.data?.fitbit?.access_token) {
      if (u3.data.fitbit.expires_on < Date.now()) {
        u3 = await refreshToken(u3._id);
      }
      let api2 = setupFitbitApi(u3.data.fitbit.access_token, u3.data.fitbit.user_id);
      console.log("fitbit api:", api2);
    }
  }
  var TESTUSER = true;
  var init = async () => {
    await connectionHasId(usersocket);
    let promise;
    if (TESTUSER) {
      promise = setupTestUser().then(async (u3) => {
        console.log("test user:", u3);
        return { data: u3 };
      });
    } else {
      promise = login();
    }
    if (promise)
      promise.then(
        async (result) => {
          let u3 = await onLogin(result);
          if (u3) {
            graph.setState({ viewingId: u3?._id });
            initThirdPartyAPIs(u3);
          }
        }
      );
  };
  init();

  // index.tsx
  var useStyles = true;
  if (useStyles) {
    document.head.insertAdjacentHTML(
      "beforeend",
      `<link rel="stylesheet" href="dist/index.css" type="text/css" />`
    );
  }
  var container = document.createElement("div");
  document.body.appendChild(container);
  var root = (0, import_client6.createRoot)(container);
  root.render(
    /* @__PURE__ */ import_react9.default.createElement(App2, null)
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

bson/dist/bson.browser.esm.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

device-decoder/dist/device.frontend.esm.js:
  (*! Capacitor: https://capacitorjs.com/ - MIT License *)
*/
